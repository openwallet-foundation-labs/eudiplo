var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessCertificateResponse.html",[0,1.487,1,3.735]],["body/interfaces/AccessCertificateResponse.html",[0,2.086,1,6.377,2,3.228,3,0.098,4,0.098,5,0.087,6,5.715,7,4.46,8,5.715,9,0.786,10,6.438,11,4.518,12,1.491,13,0.268,14,1.088,15,6.281,16,1.922,17,0.854,18,8.135,19,0.696,20,0.336,21,0.008,22,3.098,23,1.681,24,4.849,25,3.251,26,3.251,27,2.649,28,3.784,29,6.957,30,0.098,31,0.006,32,0.006]],["title/classes/AllowListPolicy.html",[33,0.176,34,2.728]],["body/classes/AllowListPolicy.html",[3,0.056,4,0.056,5,0.05,9,0.449,12,0.852,13,0.153,14,0.747,16,1.391,17,0.693,19,0.626,20,0.214,21,0.008,23,1.502,25,1.527,26,1.527,27,1.244,28,2.41,30,0.125,31,0.004,32,0.004,33,0.316,34,3.198,35,0.836,36,2.187,37,4.112,38,2.476,39,5.325,40,5.557,41,2.674,42,3.977,43,4.995,44,3.394,45,3.478,46,2.629,47,0.351,48,3.68,49,0.703,50,3.68,51,2.009,52,3.68,53,0.232,54,3.33,55,1.903,56,2.698,57,4.112,58,3.738,59,1.903,60,2.874,61,3.039,62,3.109,63,2.448,64,2.619,65,0.975,66,1.605,67,1.825,68,3.33,69,3.33,70,1.328,71,3.097,72,2.378,73,3.738,74,1.673,75,2.106,76,1.903,77,2.972,78,2.106,79,1.565,80,3.29,81,2.277,82,2.222,83,2.106,84,2.619,85,1.965,86,3.33,87,2.639,88,2.277,89,2.277,90,2.277,91,2.277,92,2.277,93,2.277,94,3.478,95,2.378,96,4.524,97,1.693,98,1.965,99,3.33,100,2.187,101,2.378,102,2.187,103,2.378,104,3.198,105,2.378,106,1.965,107,1.903,108,1.965,109,2.187,110,2.378,111,2.106,112,1.791,113,1.791,114,2.033,115,2.476,116,2.476,117,1.192,118,1.014,119,1.244,120,2.277,121,1.789,122,1.903,123,1.49,124,1.357,125,1.605,126,2.277,127,4.029,128,3.097,129,1.299,130,1.978,131,2.277,132,1.845,133,2.277,134,2.187,135,2.972,136,1.845,137,4.029,138,2.476,139,2.378,140,1.693,141,1.49,142,1.965,143,2.277,144,2.378,145,1.099,146,2.277,147,3.478,148,1.899,149,2.277,150,1.938,151,2.378,152,1.527,153,1.605,154,1.985,155,2.619,156,2.378,157,2.378,158,2.378,159,2.378,160,1.965,161,2.033,162,1.903,163,1.328,164,1.49,165,2.698,166,1.791,167,2.033,168,2.277,169,1.648,170,1.903,171,2.378,172,3.198,173,2.033,174,2.187,175,2.187]],["title/classes/ApiKeyConfig.html",[33,0.176,176,3.279]],["body/classes/ApiKeyConfig.html",[3,0.08,4,0.08,5,0.072,9,0.644,13,0.22,14,0.96,17,0.575,19,0.645,20,0.365,21,0.008,23,1.904,30,0.124,31,0.005,32,0.005,33,0.326,35,1.2,47,0.451,49,1.322,53,0.2,61,2.844,62,2.609,63,2.654,65,1.4,84,2.57,112,1.941,121,1.485,150,2.492,176,5.844,177,3.773,178,6.732,179,3.928,180,5.543,181,6.274,182,2.64,183,5.281,184,1.296,185,4.23,186,4.518,187,4.101,188,5.281,189,2.57,190,3.139,191,2.304,192,3.413,193,4.297,194,4.278,195,5.508,196,3.233,197,5.508,198,4.297,199,3.579,200,4.297,201,1.993,202,4.006,203,3.773,204,2.138,205,2.799,206,2.731,207,3.773,208,2.731,209,2.365]],["title/controllers/AppController.html",[210,1.427,211,3.481]],["body/controllers/AppController.html",[3,0.105,4,0.105,5,0.093,13,0.286,19,0.619,21,0.007,30,0.105,31,0.006,32,0.006,33,0.264,47,0.448,49,1.313,53,0.235,210,2.533,211,6.18,212,2.478,213,6.097,214,1.816,215,8.983,216,6.868,217,1.502,218,1.123,219,5.041,220,2.424,221,1.288,222,6.097,223,4.439,224,6.868,225,6.097,226,4.439,227,6.097,228,5.589,229,6.097]],["title/modules/AppModule.html",[230,1.316,231,3.481]],["body/modules/AppModule.html",[3,0.098,4,0.058,5,0.074,20,0.218,21,0.008,22,2.169,30,0.058,31,0.004,32,0.004,33,0.145,51,1.468,53,0.269,118,1.042,119,1.277,130,1.706,148,1.936,164,1.53,205,1.53,211,4.9,212,1.98,218,0.618,221,1.029,230,1.853,231,7.198,232,1.568,233,1.788,234,1.895,235,1.895,236,1.739,237,3.056,238,1.788,239,3.355,240,3.355,241,3.355,242,5.61,243,4.194,244,6.045,245,5.61,246,5.322,247,5.379,248,5.61,249,4.859,250,4.859,251,5.102,252,5.61,253,5.322,254,2.751,255,1.895,256,1.895,257,3.779,258,4.9,259,3.015,260,4.378,261,2.681,262,1.199,263,3.779,264,3.075,265,3.779,266,3.355,267,2.561,268,3.031,269,3.075,270,2.339,271,3.546,272,3.779,273,2.339,274,2.246,275,3.779,276,4.162,277,3.779,278,2.339,279,4.162,280,3.075,281,2.087,282,3.355,283,4.162,284,3.779,285,3.779,286,3.779,287,4.162,288,3.355,289,3.779,290,4.162,291,2.867,292,4.162,293,2.867,294,4.162,295,3.355,296,3.779,297,3.719,298,4.162,299,3.779,300,3.355,301,3.355,302,3.779,303,3.779,304,4.9,305,3.779,306,3.779,307,3.779,308,3.779,309,4.465,310,3.779,311,4.465,312,4.465,313,1.53,314,3.075,315,5.487,316,4.465,317,3.779,318,6.126,319,3.779,320,3.779,321,3.779,322,4.465,323,2.7,324,3.075,325,3.075,326,3.779,327,4.9,328,3.355,329,3.779,330,3.779,331,3.395,332,4.162,333,1.308,334,4.465,335,2.867,336,1.568,337,3.395,338,2.163,339,3.779,340,3.779,341,3.779,342,3.779,343,3.779,344,2.867,345,3.779,346,3.779,347,3.779,348,3.779,349,2.7,350,3.779,351,3.779,352,3.779,353,3.779,354,3.355,355,3.779,356,3.779,357,3.779,358,3.779,359,3.779,360,3.84,361,3.395,362,5.487,363,3.779,364,1.649,365,2.867,366,3.779,367,2.087,368,1.693,369,4.871,370,3.779,371,2.561,372,3.779,373,3.779,374,2.837,375,3.355,376,3.779,377,3.779,378,3.779,379,3.779,380,3.355,381,5.487,382,3.779,383,3.779,384,3.779,385,3.779]],["title/classes/AttestationBasedPolicy.html",[33,0.176,109,2.728]],["body/classes/AttestationBasedPolicy.html",[3,0.056,4,0.056,5,0.05,9,0.449,12,0.853,13,0.153,14,0.748,16,1.392,17,0.693,19,0.611,20,0.214,21,0.008,23,1.502,25,1.528,26,1.528,27,1.245,28,2.412,30,0.125,31,0.004,32,0.004,33,0.316,34,2.189,35,0.837,36,2.189,37,3.481,38,1.695,39,5.326,40,5.558,41,2.674,42,3.979,43,4.996,44,3.396,45,2.381,46,2.632,47,0.352,49,0.704,51,1.99,53,0.232,54,3.333,55,1.905,56,3.192,57,4.114,58,3.74,59,1.905,60,2.876,61,3.04,62,3.11,63,2.449,64,2.621,65,0.977,66,1.607,67,1.826,68,3.333,69,3.333,70,1.329,71,3.099,72,2.381,73,3.74,74,1.675,75,2.108,76,1.905,77,2.975,78,2.108,79,1.567,80,3.292,81,2.279,82,2.223,83,2.108,84,2.621,85,1.967,86,3.333,87,2.641,88,2.279,89,2.279,90,2.279,91,2.279,92,2.279,93,2.279,94,3.481,95,2.381,96,4.526,97,1.695,98,1.967,99,3.333,100,2.189,101,2.381,102,2.189,103,2.381,104,3.784,105,2.381,106,1.967,107,2.785,108,2.876,109,3.201,110,3.481,111,2.108,112,1.792,113,1.793,114,2.035,115,2.478,116,2.478,117,1.194,118,1.016,119,1.245,120,2.279,121,1.79,122,1.905,123,1.491,124,1.359,125,1.607,126,2.279,127,4.031,128,3.099,129,1.3,130,1.979,131,2.279,132,1.847,133,2.279,134,2.189,135,2.975,136,1.847,137,4.031,138,2.478,139,2.381,140,1.695,141,1.491,142,1.967,143,2.279,144,2.381,145,1.1,146,2.279,147,3.481,148,1.901,149,2.279,150,1.939,151,2.381,152,1.528,153,1.607,154,1.987,155,2.621,156,2.381,157,2.381,158,2.381,159,2.381,160,1.967,161,2.035,162,1.905,163,1.329,164,1.491,165,2.7,166,1.793,167,2.035,168,2.279,169,1.65,170,1.905,171,2.381,172,3.201,173,2.035,174,2.189,175,2.189,386,3.684,387,3.684]],["title/classes/AuthConfigValidator.html",[33,0.176,388,3.111]],["body/classes/AuthConfigValidator.html",[3,0.056,4,0.056,5,0.05,9,0.775,12,0.85,13,0.153,17,0.692,19,0.565,20,0.357,21,0.008,28,1.643,30,0.113,31,0.004,32,0.004,33,0.308,35,0.833,41,1.571,47,0.351,53,0.184,61,1.981,62,2.638,63,1.935,64,2.613,65,1.684,82,1.704,87,3.484,97,1.688,112,1.732,121,2.618,123,3.012,148,1.895,150,1.935,167,2.026,179,3.888,184,1.191,186,2.026,189,1.786,190,2.18,196,2.122,201,1.384,204,2.571,205,2.83,209,3.875,214,1.197,217,1.174,221,1.543,333,1.087,338,2.099,364,4.05,368,2.844,388,4.304,389,4.104,390,2.371,391,4.073,392,3.47,393,4.073,394,2.405,395,4.817,396,5.369,397,3.091,398,4.073,399,6.09,400,3.668,401,1.243,402,5.302,403,3.332,404,5.023,405,5.023,406,5.591,407,3.836,408,3.836,409,3.639,410,3.668,411,4.073,412,4.073,413,1.688,414,1.073,415,3.836,416,4.073,417,3.774,418,5.895,419,4.073,420,3.47,421,4.994,422,2.776,423,2.782,424,2.973,425,2.782,426,4.892,427,4.128,428,3.888,429,3.836,430,2.782,431,2.371,432,3.614,433,2.621,434,3.322,435,2.782,436,2.47,437,2.621,438,3.47,439,2.227,440,3.508,441,2.782,442,2.782,443,2.966,444,2.782,445,2.371,446,2.782,447,2.486,448,2.621,449,2.026]],["title/controllers/AuthController.html",[210,1.427,450,3.481]],["body/controllers/AuthController.html",[3,0.046,4,0.046,5,0.041,9,1.024,11,1.512,12,1.468,13,0.126,16,1.235,17,0.329,19,0.352,20,0.272,21,0.008,22,1.192,23,1.708,25,1.251,30,0.046,31,0.004,32,0.004,33,0.116,47,0.369,49,1.079,51,0.685,53,0.235,74,2.774,79,1.972,98,2.476,106,1.611,112,1.73,117,0.977,119,1.567,122,1.56,124,1.113,128,1.468,129,2.809,132,2.831,145,1.384,152,1.251,154,2.338,160,1.611,164,3.142,169,2.529,179,2.023,182,0.938,184,0.565,185,3.537,187,2.324,191,3.281,192,2.996,199,2.044,201,1.138,208,1.56,209,2.838,210,1.441,212,1.088,214,1.033,217,1.697,218,0.493,219,1.866,220,1.064,221,1.188,222,4.115,227,2.677,228,2.454,229,2.677,261,1.868,262,0.957,333,1.612,336,1.251,338,1.726,367,3.988,401,0.699,414,1.652,428,3.386,439,1.251,443,1.666,450,3.516,451,2.677,452,6.337,453,5.646,454,6.337,455,4.635,456,3.016,457,4.613,458,3.074,459,3.016,460,7.22,461,3.016,462,4.283,463,2.653,464,3.991,465,4.195,466,5.157,467,4.635,468,3.772,469,2.92,470,4.283,471,3.016,472,3.016,473,4.283,474,3.312,475,4.635,476,4.232,477,1.441,478,4.283,479,4.115,480,4.283,481,3.016,482,4.635,483,4.635,484,6.337,485,3.074,486,1.471,487,4.635,488,3.016,489,5.26,490,7.761,491,4.635,492,6.337,493,3.016,494,3.016,495,4.635,496,4.595,497,4.115,498,3.827,499,4.595,500,5.012,501,1.666,502,6.071,503,3.516,504,4.595,505,5.565,506,1.866,507,3.016,508,3.494,509,2.454,510,3.016,511,3.016,512,3.016,513,3.016,514,2.454,515,3.649,516,2.677,517,2.324,518,2.288,519,1.949,520,3.016,521,0.832,522,1.72,523,1.412,524,3.016,525,6.071,526,4.034,527,2.677,528,4.034,529,3.016,530,3.516,531,3.142,532,4.635,533,3.016,534,2.641,535,2.083,536,2.044,537,3.772,538,3.516,539,2.288,540,3.016,541,2.044,542,4.232,543,4.886,544,3.142,545,2.454,546,4.635,547,3.016,548,3.016,549,4.635,550,3.016,551,3.016,552,2.454,553,3.016,554,2.868,555,3.016,556,1.666,557,3.016,558,3.016,559,3.016,560,3.016,561,3.016,562,2.677,563,4.115,564,0.998,565,2.288,566,3.016,567,3.016,568,1.388,569,2.996,570,3.016,571,3.016,572,4.283,573,3.016,574,1.471,575,4.635,576,3.016,577,3.142,578,3.772,579,3.016,580,2.454,581,2.454,582,4.635,583,4.635,584,1.866,585,2.155,586,3.016,587,2.155,588,3.016,589,3.516,590,2.677,591,3.016,592,2.288,593,3.016,594,3.016,595,3.016,596,3.016,597,1.666,598,3.016,599,3.016,600,2.454,601,2.155,602,2.044,603,3.016,604,2.044,605,2.677,606,3.016,607,2.831,608,3.016,609,2.288]],["title/modules/AuthModule.html",[230,1.316,242,3.279]],["body/modules/AuthModule.html",[3,0.07,4,0.07,5,0.062,21,0.008,30,0.123,31,0.005,32,0.005,33,0.176,53,0.27,98,3.354,117,1.483,145,1.366,163,1.651,184,0.858,212,2.266,218,0.748,230,2.057,232,1.898,233,2.164,234,2.294,235,2.294,236,2.105,237,3.392,238,3.392,242,6.801,243,4.463,246,5.664,249,5.171,251,3.101,254,3.149,255,2.294,256,2.294,259,2.671,260,4.257,262,1.452,268,3.469,276,3.471,278,2.831,288,4.062,291,3.471,295,4.062,333,1.563,450,5.44,489,3.101,508,5.171,509,3.724,515,5.887,516,4.062,610,4.062,611,4.062,612,4.062,613,4.062,614,5.401,615,5.032,616,6.508,617,3.724,618,7.171,619,3.471,620,2.72,621,1.946,622,5.575,623,2.957,624,3.101,625,3.269,626,2.527,627,3.724,628,4.576,629,4.576,630,3.101,631,3.724,632,4.576,633,3.269,634,4.062,635,3.724,636,3.724,637,7.093,638,3.724,639,7.598,640,4.062,641,6.115,642,4.062,643,4.062,644,4.062,645,4.062,646,3.724,647,4.062,648,4.062,649,4.062,650,3.471,651,4.062,652,4.062,653,4.062,654,4.576,655,4.576,656,4.062,657,3.724,658,3.269]],["title/interfaces/AuthResponse.html",[0,1.487,659,3.279]],["body/interfaces/AuthResponse.html",[0,2.09,2,3.234,3,0.098,4,0.098,5,0.087,9,0.787,12,1.817,13,0.268,14,1.089,19,0.685,20,0.35,21,0.008,23,1.683,30,0.098,31,0.006,32,0.006,182,2.006,424,3.337,458,3.265,659,6.041,660,5.726,661,3.563,662,3.445,663,6.347,664,7.159,665,7.845,666,7.845,667,6.384,668,6.384,669,5.605,670,5.025,671,4.334,672,4.67,673,6.45,674,4.372]],["title/classes/AuthenticationConfigDto.html",[33,0.176,417,2.728]],["body/classes/AuthenticationConfigDto.html",[3,0.054,4,0.054,5,0.048,9,0.935,12,0.816,13,0.147,14,0.724,17,0.797,19,0.582,20,0.345,21,0.008,30,0.111,31,0.004,32,0.004,33,0.312,35,0.801,41,1.815,47,0.405,49,1.186,53,0.179,61,1.923,62,2.587,63,1.89,64,2.537,65,1.382,82,1.969,87,3.558,97,1.621,112,1.814,121,2.578,123,3.209,148,1.84,150,1.89,167,1.946,179,3.982,184,0.661,186,1.946,189,1.715,190,2.094,196,2.061,201,1.967,204,2.512,205,2.776,209,3.963,221,1.526,333,1.056,338,2.984,364,4.016,368,3.277,388,3.533,389,4.431,390,2.277,391,2.673,392,2.277,393,2.673,394,1.578,395,3.954,397,1.715,398,2.673,399,4.706,402,2.673,403,3.277,404,5.123,405,5.123,406,5.718,407,2.518,408,2.518,409,2.388,411,3.954,412,3.954,413,1.621,414,1.031,415,3.724,416,3.954,417,4.075,418,5.811,419,3.954,420,3.369,421,4.898,422,2.696,423,2.673,424,3.112,425,2.673,426,5.159,427,4.352,428,4.016,429,3.724,430,2.673,431,2.277,432,3.961,433,2.518,434,3.839,435,3.954,436,2.854,437,3.724,438,4.01,439,2.844,440,4.042,441,3.954,442,2.673,443,3.427,444,3.954,445,3.369,446,2.673,447,2.388,448,2.518,449,1.946,675,3.524,676,3.524,677,3.128,678,3.524,679,3.524,680,3.524]],["title/classes/AuthenticationConfigHelper.html",[33,0.176,681,3.111]],["body/classes/AuthenticationConfigHelper.html",[3,0.074,4,0.074,5,0.066,9,0.593,13,0.202,17,0.862,20,0.368,21,0.008,30,0.074,31,0.005,32,0.005,33,0.187,35,1.105,47,0.517,53,0.141,76,2.514,87,2.715,112,1.459,121,2.666,123,2.65,179,3.228,184,1.484,209,2.932,214,1.459,217,1.731,221,1.549,267,6.235,336,3.53,364,3.604,389,5.339,401,1.833,404,4.23,405,5.116,406,5.116,424,2.784,426,4.704,427,3.969,428,3.713,432,3.385,436,3.011,438,4.23,440,3.615,445,5.499,449,5.113,669,5.286,681,4.436,682,4.316,683,5.81,684,5.326,685,6.545,686,6.568,687,7.399,688,7.399,689,7.399,690,4.862,691,4.862,692,5.015,693,4.862,694,4.862,695,6.079,696,4.862,697,4.862,698,4.862,699,4.862,700,7.399,701,4.862,702,4.862]],["title/classes/AuthenticationUrlConfig.html",[33,0.176,404,2.966]],["body/classes/AuthenticationUrlConfig.html",[3,0.057,4,0.057,5,0.051,9,0.782,12,0.864,13,0.155,14,0.755,17,0.768,19,0.594,20,0.345,21,0.008,30,0.114,31,0.004,32,0.004,33,0.31,35,0.848,41,1.591,47,0.355,49,1.039,53,0.185,61,2.005,62,2.659,63,1.954,64,2.646,65,1.441,82,1.725,87,3.431,97,1.716,112,1.843,121,2.561,123,3.267,148,1.918,150,2.282,167,2.061,179,3.974,184,0.699,186,2.061,189,1.816,190,2.217,196,2.961,201,1.408,204,2.853,205,3.348,209,3.889,221,1.551,333,1.101,338,2.135,364,3.994,368,3.156,388,3.684,389,4.144,390,2.411,391,2.83,392,2.411,393,2.83,394,1.671,395,4.123,397,1.816,398,2.83,399,4.864,402,2.83,403,3.156,404,5.053,405,4.84,406,5.538,407,2.665,408,2.665,409,2.528,411,4.864,412,4.123,413,1.716,414,1.092,415,3.884,416,4.123,417,3.811,418,5.93,419,4.123,420,3.513,421,5.034,422,2.811,423,2.83,424,2.997,425,2.83,426,5.093,427,4.296,428,3.952,429,5.034,430,4.123,431,3.513,432,3.644,433,2.665,434,3.364,435,2.83,436,2.501,437,2.665,438,3.513,439,2.255,440,3.542,441,2.83,442,2.83,443,3.003,444,2.83,445,2.411,446,2.83,447,2.528,448,2.665,449,2.061,703,3.731,704,3.312,705,3.731]],["title/classes/AuthorizationResponse.html",[33,0.176,706,3.279]],["body/classes/AuthorizationResponse.html",[3,0.102,4,0.102,5,0.091,9,0.814,13,0.278,14,1.112,19,0.676,20,0.265,21,0.007,30,0.102,31,0.006,32,0.006,33,0.307,35,1.516,47,0.436,49,1.275,53,0.193,63,2.614,65,1.769,191,3.882,458,3.092,477,2.905,661,3.685,662,4.276,670,4.759,671,4.915,706,5.721,707,7.108,708,5.429,709,5.175]],["title/controllers/AuthorizeController.html",[210,1.427,710,3.481]],["body/controllers/AuthorizeController.html",[3,0.062,4,0.062,5,0.055,9,0.703,11,2.89,12,2.065,13,0.168,17,0.797,20,0.329,21,0.008,30,0.062,31,0.004,32,0.004,33,0.155,47,0.478,49,1.398,51,0.919,53,0.255,79,1.721,119,1.368,150,1.756,184,1.372,191,3.952,210,2.404,212,1.46,214,1.284,217,1.808,218,0.661,219,2.504,220,1.428,221,1.372,333,0.819,360,4.915,374,4.61,397,2.805,401,1.694,414,1.964,427,2.89,458,3.322,464,4.375,477,2.571,485,3.54,486,2.322,501,2.235,503,4.371,519,2.615,521,1.115,522,1.756,523,2.519,531,2.742,564,3.033,574,1.284,710,4.371,711,3.592,712,2.029,713,4.046,714,5.116,715,4.371,716,5.763,717,4.728,718,5.092,719,6.712,720,7.315,721,3.592,722,5.463,723,4.046,724,4.046,725,4.117,726,4.046,727,4.046,728,5.226,729,4.796,730,4.046,731,4.046,732,5.953,733,4.046,734,4.046,735,4.046,736,4.046,737,4.046,738,5.116,739,2.615,740,2.742,741,3.069,742,2.316,743,2.316,744,2.092,745,4.549,746,3.069,747,2.615,748,3.069,749,3.366,750,2.615,751,3.989,752,4.046,753,3.069,754,1.914,755,3.069,756,4.046,757,5.092,758,4.046,759,1.679,760,4.046,761,4.046,762,4.046,763,4.046,764,4.526,765,4.046,766,3.592,767,3.293,768,3.293,769,2.891,770,3.592,771,4.046,772,3.592,773,4.046,774,3.592,775,2.891,776,4.046,777,4.046,778,4.046]],["title/classes/AuthorizeQueries.html",[33,0.176,722,2.84]],["body/classes/AuthorizeQueries.html",[3,0.08,4,0.08,5,0.071,13,0.217,14,0.953,17,1.047,19,0.73,20,0.367,21,0.008,30,0.08,31,0.005,32,0.005,33,0.264,35,1.187,47,0.603,49,1.767,53,0.151,62,3.51,63,2.834,65,1.385,498,5.198,677,8.204,722,4.249,764,4.746,779,8.257,780,3.106,781,5.48,782,7.67,783,7.67,784,7.67,785,5.48,786,7.67,787,7.67,788,4.957,789,5.818,790,4.639,791,4.252,792,5.225,793,5.225,794,5.225,795,4.639,796,5.225,797,4.252,798,5.225,799,4.639,800,5.225]],["title/injectables/AuthorizeService.html",[751,2.728,801,0.966]],["body/injectables/AuthorizeService.html",[0,1.295,3,0.038,4,0.038,5,0.034,12,1.782,13,0.104,17,0.817,19,0.64,20,0.323,21,0.008,22,0.987,30,0.061,31,0.003,32,0.003,33,0.096,41,1.169,44,1.744,47,0.49,51,1.135,53,0.238,74,0.776,82,1.586,87,1.036,107,1.291,112,0.891,118,2.122,119,1.689,121,0.702,122,1.291,123,1.011,124,1.844,136,1.252,141,1.618,169,1.118,179,2.181,182,0.776,184,1.407,191,1.744,194,3.535,196,2.636,201,2.156,204,2.313,205,2.313,206,1.291,208,2.584,209,2.238,214,0.891,217,1.591,218,0.408,221,1.25,261,2.206,262,0.792,313,2.023,333,1.793,336,1.036,360,2.97,364,2.909,365,3.791,367,2.76,374,3.762,401,1.737,413,1.149,414,2.51,424,2.658,426,2.376,427,3.858,428,2.181,431,2.583,432,1.291,439,1.036,440,1.379,464,1.252,465,1.181,469,1.291,477,2.528,485,2.897,486,1.269,521,1.102,522,2.216,534,2.809,535,2.344,541,2.709,542,1.545,556,1.379,564,3.011,574,2.646,577,1.692,584,1.545,585,1.784,587,1.784,589,1.894,592,1.894,597,2.208,663,2.709,681,1.692,718,3.791,721,2.217,722,4.762,725,1.784,728,2.856,729,3.571,739,3.23,740,1.692,743,1.429,744,1.291,749,3.51,750,1.614,751,2.376,753,1.894,754,1.181,764,3.092,781,4.082,785,4.082,801,0.841,802,0.964,803,1.894,804,3.548,805,3.997,806,4.067,807,3.997,808,4.067,809,3.997,810,4.067,811,1.379,812,3.055,813,4.007,814,4.161,815,2.497,816,2.497,817,3.032,818,2.497,819,5.425,820,3.253,821,2.497,822,5.086,823,2.497,824,2.497,825,1.333,826,2.208,827,3.253,828,2.497,829,2.497,830,2.497,831,3.253,832,2.497,833,2.497,834,2.497,835,3.714,836,4.649,837,4.649,838,2.628,839,2.032,840,4.649,841,1.784,842,1.291,843,2.032,844,2.032,845,2.032,846,1.894,847,1.784,848,2.032,849,2.856,850,3.253,851,2.856,852,2.032,853,2.032,854,3.253,855,2.032,856,3.253,857,2.473,858,4.649,859,3.535,860,2.032,861,2.032,862,1.894,863,2.032,864,2.032,865,1.894,866,1.614,867,1.894,868,1.894,869,2.032,870,1.894,871,2.032,872,1.894,873,2.032,874,2.032,875,3.253,876,2.032,877,1.894,878,2.032,879,2.032,880,4.007,881,2.032,882,2.032,883,2.032,884,2.032,885,2.032,886,4.067,887,3.791,888,2.032,889,4.333,890,2.032,891,2.032,892,2.032,893,2.032,894,2.032,895,4.649,896,3.253,897,5.311,898,2.032,899,3.253,900,3.253,901,3.253,902,3.253,903,3.253,904,2.032,905,2.032,906,2.032,907,2.032,908,2.032,909,2.032,910,2.032,911,3.253,912,2.032,913,2.032,914,1.484,915,1.215,916,2.032,917,1.894,918,1.614,919,2.032,920,1.692,921,2.032,922,2.032,923,1.894,924,1.545,925,3.253,926,2.032,927,4.067,928,2.032,929,2.032,930,2.032,931,2.032,932,2.032,933,1.894,934,3.253,935,2.032,936,3.253,937,2.473,938,2.032,939,4.067,940,2.032,941,2.032,942,2.032,943,2.032,944,2.032,945,2.473,946,1.894,947,1.429,948,2.032,949,1.545,950,2.032,951,2.032,952,2.032,953,2.032,954,2.032,955,2.032,956,2.032,957,1.894,958,1.784,959,1.784,960,1.784,961,2.032,962,2.032,963,2.032,964,1.894,965,2.032,966,2.032,967,2.032]],["title/entities/CertEntity.html",[67,1.316,71,2.234]],["body/entities/CertEntity.html",[3,0.076,4,0.076,5,0.068,7,3.899,9,1.047,11,3.766,12,1.855,13,0.208,14,0.927,15,5.366,16,1.825,17,0.727,19,0.676,20,0.37,21,0.008,23,1.841,24,4.131,25,2.77,26,2.77,27,2.257,30,0.102,31,0.005,32,0.005,33,0.256,47,0.572,49,1.675,51,2.022,53,0.193,58,2.675,65,1.328,66,2.185,67,2.298,70,1.807,71,3.25,111,3.821,115,3.839,116,3.949,117,2.164,118,2.071,130,2.076,137,3.348,152,3.462,607,3.348,670,4.761,968,2.438,969,4.076,970,5.927,971,4.148,972,4.854,973,4.425,974,5.09,975,5.008,976,4.761,977,3.348,978,4.959,979,5.008,980,5.008,981,5.008,982,5.008,983,5.366,984,5.008,985,5.09,986,5.008,987,4.315,988,4.315]],["title/interfaces/Client.html",[0,1.487,465,2.171]],["body/interfaces/Client.html",[0,1.819,2,1.956,3,0.059,4,0.059,5,0.053,13,0.162,14,0.779,16,1.969,19,0.666,20,0.223,21,0.008,30,0.085,31,0.004,32,0.004,33,0.15,51,0.886,53,0.256,74,1.746,112,1.251,116,1.795,129,3.009,130,1.213,145,1.676,154,2.929,179,1.702,203,2.787,217,1.228,218,0.638,221,1.534,223,5.594,261,2.177,262,1.238,313,2.913,333,1.137,336,1.619,364,1.702,374,2.018,394,1.747,397,1.899,414,2.105,428,1.702,465,4.434,476,2.414,508,2.414,521,1.076,522,2.67,523,1.711,534,2.168,535,1.711,542,3.474,543,4.011,554,4.717,574,2.747,609,4.259,621,1.659,623,2.522,624,2.644,625,2.787,626,2.155,630,2.644,631,3.175,650,2.959,658,5.14,692,5.381,801,1.182,812,2.87,842,2.018,989,3.175,990,5.839,991,4.699,992,2.233,993,3.175,994,4.569,995,2.959,996,2.815,997,2.644,998,4.07,999,3.175,1000,4.07,1001,2.787,1002,3.214,1003,2.644,1004,4.07,1005,3.175,1006,4.984,1007,3.463,1008,3.463,1009,3.463,1010,3.463,1011,3.463,1012,2.414,1013,2.959,1014,5.353,1015,3.463,1016,4.984,1017,3.463,1018,5.839,1019,3.463,1020,3.175,1021,3.463,1022,3.463,1023,3.463,1024,3.175,1025,3.463,1026,4.984,1027,4.984,1028,3.463,1029,3.463,1030,3.463,1031,3.463,1032,2.319,1033,3.463,1034,3.463,1035,3.463,1036,3.463,1037,3.463,1038,4.984,1039,4.984,1040,2.155,1041,3.463,1042,3.175,1043,3.463,1044,3.463,1045,2.644,1046,3.463,1047,3.805,1048,4.984,1049,2.787,1050,3.463,1051,3.463,1052,3.463,1053,2.959,1054,2.319,1055,3.463,1056,3.463,1057,3.463,1058,3.463,1059,3.463,1060,3.463,1061,3.463,1062,3.463,1063,3.463,1064,3.463]],["title/classes/ClientCredentialsDto.html",[33,0.176,473,3.481]],["body/classes/ClientCredentialsDto.html",[3,0.105,4,0.105,5,0.093,13,0.286,14,1.131,19,0.682,20,0.324,21,0.007,30,0.105,31,0.006,32,0.006,33,0.313,35,1.561,47,0.532,49,1.557,53,0.199,63,2.794,65,1.821,473,6.18,498,5.887,499,7.069,1065,7.711,1066,6.097,1067,6.868,1068,6.868]],["title/entities/ClientEntry.html",[67,1.316,630,3.111]],["body/entities/ClientEntry.html",[3,0.098,4,0.098,5,0.087,13,0.267,14,1.085,16,1.844,17,0.852,19,0.667,20,0.349,21,0.008,30,0.119,31,0.006,32,0.006,33,0.246,47,0.551,49,1.612,51,1.776,53,0.185,66,2.799,67,2.243,70,2.314,115,3.598,129,2.264,130,2.431,137,3.921,154,3.112,223,4.146,313,3.555,630,5.299,968,3.122,978,4.647,1069,5.22,1070,6.415,1071,6.864,1072,6.415,1073,6.864,1074,6.398,1075,6.415]],["title/injectables/ClientService.html",[508,2.84,801,0.966]],["body/injectables/ClientService.html",[0,1.587,3,0.049,4,0.049,5,0.044,13,0.135,14,0.68,16,1.905,17,0.769,19,0.677,20,0.295,21,0.008,30,0.075,31,0.004,32,0.004,33,0.124,47,0.531,51,0.737,53,0.246,74,2.045,112,1.466,116,2.254,129,3.01,130,1.523,145,1.763,154,2.74,179,2.137,182,1.008,184,1.324,203,3.5,214,1.092,217,1.777,218,0.53,221,1.446,223,5.575,261,2.458,262,1.029,313,2.663,333,0.992,336,2.032,364,2.137,374,1.677,394,1.452,397,2.385,401,1.636,414,2.423,428,2.137,465,4.445,476,3.031,508,3.031,521,1.351,522,2.716,523,1.492,534,1.892,535,1.492,542,4.071,543,4.7,554,3.031,574,2.629,609,3.716,621,1.379,623,2.096,624,2.198,625,2.317,626,1.791,630,2.198,631,2.639,650,2.46,658,5.672,692,5.613,801,1.031,802,1.252,811,1.791,812,3.365,842,1.677,989,2.639,990,5.241,991,5.306,992,1.856,993,2.639,994,5.353,995,2.46,996,3.299,997,2.198,998,4.772,999,2.639,1000,4.772,1001,2.317,1002,3.765,1003,2.198,1004,4.772,1005,2.639,1006,5.241,1007,5.241,1008,2.879,1009,5.241,1010,2.879,1011,5.241,1012,2.007,1013,2.46,1014,4.804,1015,2.879,1016,4.349,1017,5.84,1018,5.241,1019,2.879,1020,3.986,1021,5.84,1022,2.879,1023,2.879,1024,2.639,1025,4.349,1026,4.349,1027,4.349,1028,2.879,1029,4.349,1030,4.349,1031,4.349,1032,1.927,1033,2.879,1034,2.879,1035,2.879,1036,2.879,1037,2.879,1038,4.349,1039,4.349,1040,1.791,1041,2.879,1042,2.639,1043,2.879,1044,2.879,1045,2.198,1046,2.879,1047,3.32,1048,4.349,1049,2.317,1050,2.879,1051,2.879,1052,2.879,1053,3.716,1054,2.912,1055,4.349,1056,4.349,1057,4.349,1058,4.349,1059,4.349,1060,2.879,1061,2.879,1062,2.879,1063,2.879,1064,2.879,1076,4.899,1077,4.899,1078,4.899,1079,4.899,1080,4.899,1081,3.243,1082,3.243,1083,3.243,1084,3.243,1085,3.243,1086,3.243,1087,3.243]],["title/classes/CreateCredentialIssuanceBindingDto.html",[33,0.176,1088,3.279]],["body/classes/CreateCredentialIssuanceBindingDto.html",[3,0.074,4,0.074,5,0.066,9,1.104,13,0.202,14,0.906,16,2.01,19,0.693,20,0.294,21,0.008,23,1.92,26,2.009,27,1.637,30,0.112,31,0.005,32,0.005,33,0.303,35,1.1,41,2.647,47,0.482,49,1.411,53,0.189,63,2.407,65,1.284,82,2.918,112,1.894,121,1.835,150,1.475,152,3.664,153,3.599,170,4.395,187,4.61,220,1.709,439,3.063,477,1.505,535,2.249,662,4.22,971,2.674,973,2.674,976,2.878,977,2.428,1088,4.663,1089,5.994,1090,3.673,1091,5.312,1092,5.646,1093,5.646,1094,5.275,1095,6.009,1096,4.842,1097,4.842,1098,6.43,1099,6.43,1100,6.43,1101,6.43,1102,4.842,1103,4.842,1104,6.713,1105,4.842,1106,4.842,1107,5.597,1108,4.663,1109,5.312,1110,6.009,1111,5.312,1112,3.94,1113,3.282,1114,3.459,1115,3.94,1116,3.459,1117,3.94,1118,3.94]],["title/entities/CredentialConfig.html",[67,1.316,113,2.234]],["body/entities/CredentialConfig.html",[3,0.045,4,0.045,5,0.04,9,0.36,12,1.055,13,0.123,14,0.633,16,1.631,17,0.974,19,0.614,20,0.34,21,0.008,23,1.653,25,1.224,26,1.89,27,1.54,28,2.805,30,0.117,31,0.004,32,0.004,33,0.296,34,1.753,36,1.753,37,2.945,38,1.357,39,5.111,40,5.231,41,2.699,42,3.345,43,4.801,44,2.733,45,1.907,47,0.558,49,1.634,51,1.994,53,0.216,54,3.446,55,1.525,56,2.285,57,3.599,58,3.345,59,1.525,60,2.434,61,2.843,62,2.908,63,2.273,64,2.218,65,0.782,66,1.287,67,1.796,68,2.82,69,2.82,70,1.064,71,3.049,72,1.907,73,3.984,74,1.417,75,1.688,76,1.525,77,3.076,78,1.688,79,1.255,80,3.239,81,1.825,82,2.368,83,1.688,84,2.218,85,1.575,86,2.82,87,2.31,88,1.825,89,1.825,90,1.825,91,1.825,92,1.825,93,1.825,94,3.599,95,1.907,96,4.048,97,1.357,98,1.575,99,2.82,100,1.753,101,1.907,102,1.753,103,1.907,104,2.708,105,1.907,106,1.575,107,1.525,108,1.575,109,1.753,110,1.907,111,2.608,112,1.906,113,2.218,114,2.517,115,2.097,116,2.882,117,1.477,118,1.535,119,0.997,120,1.825,121,2.012,122,1.525,123,1.845,124,1.681,125,1.988,126,2.82,127,3.741,128,3.631,129,1.608,130,2.225,131,2.82,132,2.285,133,2.82,134,2.708,135,3.459,136,2.285,137,4.287,138,2.882,139,2.945,140,2.097,141,1.845,142,2.434,143,3.446,144,1.907,145,0.881,146,1.825,147,2.945,148,2.21,149,3.446,150,2.18,151,2.945,152,1.89,153,2.429,154,2.31,155,3.049,156,2.945,157,2.945,158,3.599,159,2.945,160,2.434,161,1.629,162,2.879,163,1.644,164,1.845,165,3.395,166,2.218,167,2.517,168,2.82,169,2.041,170,2.357,171,2.945,172,3.722,173,1.629,174,2.708,175,3.309,403,1.321,968,1.436,1119,4.375,1120,4.557,1121,2.95,1122,2.619,1123,2.95,1124,2.95,1125,2.95,1126,2.95,1127,2.95,1128,2.95,1129,2.95,1130,2.95,1131,2.95,1132,2.95,1133,2.95,1134,2.95,1135,2.238,1136,2.95,1137,2.619,1138,2.95,1139,2.95,1140,2.95,1141,2.95,1142,2.95,1143,2.95,1144,2.95,1145,2.95,1146,2.95]],["title/classes/CredentialConfigMapping.html",[33,0.176,1147,3.481]],["body/classes/CredentialConfigMapping.html",[3,0.08,4,0.08,5,0.071,9,0.937,13,0.218,14,0.954,16,1.782,17,0.749,19,0.619,20,0.345,21,0.008,26,3.184,27,2.594,30,0.105,31,0.006,32,0.005,33,0.313,35,1.189,41,2.477,47,0.342,49,1,51,1.189,53,0.236,56,3.447,60,3.671,61,3.007,62,3.194,63,2.579,64,4.121,65,1.387,67,1.501,74,1.627,76,2.706,82,2.852,97,2.408,112,2.026,119,1.769,128,2.547,130,1.627,132,2.624,135,2.891,163,1.888,179,3.349,182,1.627,189,2.547,196,2.717,201,1.975,204,3.427,206,2.706,336,2.171,364,2.283,401,1.212,413,2.408,417,4.562,434,4.253,436,3.531,449,2.891,477,1.627,662,4.099,709,3.382,1147,6.183,1148,4.259,1149,5.594,1150,5.233,1151,3.739,1152,3.547,1153,3.97,1154,3.97,1155,4.646,1156,3.97,1157,2.891,1158,3.382,1159,2.891,1160,3.97,1161,3.97,1162,3.97,1163,3.97,1164,2.995,1165,3.97]],["title/injectables/CredentialConfigService.html",[801,0.966,1166,2.966]],["body/injectables/CredentialConfigService.html",[3,0.047,4,0.047,5,0.103,7,1.5,9,0.843,13,0.128,16,1.994,17,0.752,19,0.676,20,0.275,21,0.008,22,2.262,23,1.011,30,0.047,31,0.004,32,0.004,33,0.22,41,2.432,47,0.495,51,1.3,53,0.256,65,0.817,67,2.242,70,1.112,74,1.466,112,1.742,113,4.238,117,2.901,118,2.325,121,2.371,129,1.088,133,2.917,145,1.709,148,1.088,153,2.057,166,2.294,182,1.466,184,1.295,189,1.5,208,1.594,214,1.051,217,1.752,218,0.504,221,1.202,259,2.005,261,2.508,262,0.978,270,1.907,271,1.992,273,1.907,274,2.802,304,2.338,333,1.747,336,1.279,397,2.294,401,1.599,409,2.089,414,1.675,420,3.046,436,2.949,480,3.576,486,2.312,521,1.767,522,1.953,523,2.381,568,2.633,574,2.034,621,1.311,759,1.279,801,0.992,802,1.19,812,3.306,842,1.594,968,2.294,992,1.764,996,3.652,1054,3.402,1166,4.142,1167,6.727,1168,5.414,1169,2.338,1170,2.294,1171,3.445,1172,4.714,1173,3.668,1174,3.083,1175,2.96,1176,4.579,1177,2.736,1178,5.723,1179,4.714,1180,3.083,1181,2.917,1182,4.473,1183,6.465,1184,3.368,1185,4.714,1186,4.714,1187,3.083,1188,3.966,1189,3.195,1190,4.714,1191,3.083,1192,3.083,1193,4.089,1194,4.714,1195,3.083,1196,3.368,1197,4.089,1198,4.168,1199,3.576,1200,2.509,1201,2.509,1202,2.509,1203,2.338,1204,2.509,1205,2.736,1206,2.509,1207,2.509,1208,3.836,1209,3.083,1210,4.657,1211,2.509,1212,2.509,1213,3.836,1214,2.509,1215,2.509,1216,2.509,1217,2.509,1218,4.657,1219,2.917,1220,2.509,1221,2.509,1222,2.089,1223,2.509,1224,6.167,1225,3.836,1226,2.509,1227,2.338,1228,2.509,1229,2.509,1230,2.509,1231,2.509,1232,3.083,1233,3.083,1234,4.657,1235,4.657,1236,2.509,1237,3.083,1238,2.509,1239,2.509,1240,2.509,1241,5.723,1242,4.341,1243,3.083,1244,3.368,1245,3.836,1246,3.368,1247,3.836,1248,3.083,1249,2.089,1250,3.046,1251,3.083,1252,2.509,1253,2.509,1254,2.509,1255,2.509,1256,2.509,1257,3.083,1258,2.202,1259,2.509,1260,3.083,1261,2.736,1262,3.083,1263,3.083,1264,3.083]],["title/entities/CredentialIssuanceBinding.html",[67,1.316,80,2.373]],["body/entities/CredentialIssuanceBinding.html",[3,0.075,4,0.075,5,0.066,9,0.597,12,1.838,13,0.204,14,0.913,19,0.603,20,0.339,21,0.008,23,1.411,30,0.075,31,0.005,32,0.005,33,0.252,41,1.924,47,0.557,49,1.63,53,0.229,58,3.965,65,1.298,66,2.136,67,2.277,68,4.595,70,1.766,80,3.401,82,2.877,112,1.769,113,4.45,114,4.385,119,1.655,150,2.003,152,2.728,153,2.869,172,4.718,174,4.718,336,2.031,496,3.984,667,5.351,670,4.718,947,5.233,968,2.383,971,4.101,972,4.799,973,4.385,974,4.457,976,4.718,977,3.297,985,4.457,987,4.25,988,4.25,1071,6.739,1092,5.305,1093,5.305,1265,7.733,1266,4.346,1267,6.576,1268,8.526,1269,7.425,1270,4.988,1271,6.576,1272,6.576,1273,3.984,1274,4.896,1275,6.576,1276,6.576,1277,4.896,1278,4.896,1279,6.576,1280,4.896,1281,4.896,1282,3.984,1283,4.896,1284,3.984,1285,3.164,1286,4.896,1287,4.346,1288,4.896]],["title/classes/CredentialIssuanceBindingResponseDto.html",[33,0.176,1116,3.279]],["body/classes/CredentialIssuanceBindingResponseDto.html",[3,0.07,4,0.07,5,0.062,9,1.093,13,0.192,14,0.876,16,2.02,19,0.693,20,0.322,21,0.008,23,1.9,26,2.617,27,2.133,30,0.11,31,0.005,32,0.005,33,0.297,35,1.046,41,2.622,47,0.529,49,1.55,53,0.182,63,2.358,65,1.221,82,2.914,112,1.866,121,1.295,150,1.922,152,3.622,153,3.538,170,4.515,187,4.631,220,1.625,439,2.617,477,1.962,535,1.922,662,4.133,971,3.975,973,3.485,976,3.75,977,3.163,1088,3.291,1089,6.352,1090,3.494,1091,3.748,1092,5.53,1093,5.53,1094,5.793,1095,5.856,1098,6.598,1099,6.598,1100,6.598,1101,6.598,1104,6.814,1107,5.544,1108,4.507,1109,5.856,1110,6.598,1111,5.856,1112,3.748,1113,3.122,1114,3.291,1115,3.748,1116,4.507,1117,5.134,1118,5.134,1289,4.606,1290,4.606,1291,4.606,1292,4.606,1293,4.606]],["title/classes/CredentialIssuerMetadataDto.html",[33,0.176,1294,3.481]],["body/classes/CredentialIssuerMetadataDto.html",[3,0.078,4,0.078,5,0.069,9,0.624,13,0.213,14,0.939,19,0.694,20,0.36,21,0.008,27,2.287,30,0.078,31,0.005,32,0.005,33,0.196,35,1.161,38,3.113,41,2.647,47,0.584,74,2.511,82,2.74,120,5.198,124,3.484,125,2.23,132,3.393,163,1.844,191,3.523,199,4.586,205,3.619,226,5.219,422,3.499,436,3.113,464,4.049,469,3.499,539,5.133,669,3.652,958,4.835,1042,5.507,1159,3.738,1162,3.877,1163,5.755,1165,3.877,1189,4.586,1222,3.464,1294,5.133,1295,5.847,1296,8.031,1297,4.159,1298,3.163,1299,7.586,1300,7.586,1301,7.586,1302,6.735,1303,7.586,1304,7.586,1305,7.586,1306,5.111,1307,6.767,1308,5.111,1309,6.767,1310,5.111,1311,5.111,1312,5.111,1313,5.111,1314,5.111,1315,5.111]],["title/controllers/CredentialsController.html",[210,1.427,1316,3.481]],["body/controllers/CredentialsController.html",[3,0.077,4,0.077,5,0.069,9,0.621,13,0.212,16,1.763,17,0.825,19,0.575,20,0.301,21,0.008,30,0.077,31,0.005,32,0.005,33,0.195,41,2.645,47,0.494,49,1.447,53,0.249,112,1.797,113,3.924,117,2.612,121,2.267,124,1.877,155,2.477,184,1.419,210,2.354,212,1.836,214,1.504,217,1.953,218,0.832,220,1.796,221,1.419,368,4,401,1.753,436,3.709,458,2.923,485,2.606,501,4.181,506,3.149,517,4.577,523,2.456,615,2.811,712,2.552,742,2.912,759,2.111,1166,4.892,1168,3.636,1170,3.284,1171,2.407,1181,4.175,1196,4.821,1204,4.141,1316,5.742,1317,4.517,1318,6.747,1319,6.16,1320,6.747,1321,7.57,1322,4.517,1323,3.636,1324,5.089,1325,5.089,1326,5.089,1327,5.089,1328,5.089,1329,3.449,1330,3.449,1331,3.449,1332,4.141,1333,4.141,1334,3.449,1335,3.449,1336,4.141,1337,3.636,1338,4.361,1339,2.279,1340,5.089,1341,5.089,1342,5.089,1343,3.636,1344,3.86,1345,5.089]],["title/controllers/CredentialsMetadataController.html",[210,1.427,1346,3.481]],["body/controllers/CredentialsMetadataController.html",[3,0.086,4,0.086,5,0.076,9,0.688,13,0.235,16,1.938,17,0.786,19,0.714,20,0.333,21,0.008,27,2.438,30,0.086,31,0.006,32,0.006,33,0.216,41,2.594,47,0.471,49,1.379,51,1.281,53,0.23,73,4.478,74,2.243,112,1.608,118,2.516,125,3.148,145,2.154,165,4.205,184,1.353,210,1.753,212,2.034,214,1.608,217,1.739,218,0.922,219,3.489,220,1.99,221,1.353,401,1.671,443,3.985,519,3.644,523,2.423,712,2.827,759,2.339,1188,5.189,1338,5.141,1339,2.525,1346,5.472,1347,6.034,1348,6.473,1349,5.006,1350,5.638,1351,5.638,1352,5.638,1353,5.638,1354,5.638,1355,5.638,1356,5.638,1357,4.464,1358,5.006,1359,5.638,1360,5.638,1361,5.638,1362,7.214,1363,5.638,1364,5.638,1365,5.638,1366,5.638]],["title/injectables/CredentialsService.html",[801,0.966,1338,2.966]],["body/injectables/CredentialsService.html",[3,0.043,4,0.043,5,0.038,9,0.341,13,0.116,16,1.655,17,0.719,19,0.649,20,0.301,21,0.008,23,0.938,30,0.043,31,0.003,32,0.003,33,0.107,38,1.287,41,2.499,47,0.457,51,0.635,53,0.251,54,1.73,55,1.446,70,1.009,73,3.527,74,1.892,75,1.601,76,1.446,77,1.545,78,1.601,79,1.189,106,1.493,108,2.335,112,1.862,113,3.214,118,2.331,121,0.786,123,1.77,128,3.561,129,0.987,130,0.87,134,1.662,138,2.8,140,2.476,141,1.77,142,1.493,143,2.705,145,1.305,152,1.814,153,1.907,154,2.699,155,1.361,162,1.446,163,1.009,165,2.699,170,3.415,182,0.87,184,1.238,185,1.446,201,2.031,208,3.147,214,0.974,217,1.74,218,0.457,221,1.141,261,2.505,262,0.888,280,2.276,281,1.545,333,1.73,401,1.529,403,2.411,414,2.411,436,2.011,439,1.814,443,3.362,486,2.222,521,1.678,522,2.012,523,2.545,534,2.55,535,2.133,544,1.895,556,2.415,563,2.483,564,2.876,574,2.47,584,2.705,601,3.845,602,3.648,621,1.189,626,1.545,744,1.446,801,0.92,802,1.08,812,3.192,825,1.493,826,1.545,835,4.161,838,3.58,841,1.998,842,1.446,859,4.332,880,3.78,914,1.662,915,1.361,947,4.781,992,1.601,996,3.052,1002,4.333,1003,1.895,1040,1.545,1170,2.128,1171,1.323,1188,3.766,1193,3.123,1199,2.121,1204,2.276,1205,2.483,1285,1.807,1302,3.881,1338,3.933,1357,2.705,1367,2.483,1368,5.382,1369,5.382,1370,5.382,1371,4.372,1372,2.483,1373,6.086,1374,4.499,1375,2.796,1376,2.796,1377,6.604,1378,2.796,1379,4.372,1380,5.887,1381,2.796,1382,2.796,1383,2.796,1384,2.796,1385,4.372,1386,2.796,1387,6.086,1388,3.881,1389,4.372,1390,2.121,1391,2.121,1392,3.881,1393,2.121,1394,3.881,1395,2.121,1396,1.998,1397,2.483,1398,2.796,1399,1.545,1400,3.881,1401,2.796,1402,2.796,1403,5.403,1404,2.796,1405,2.796,1406,2.796,1407,4.372,1408,4.372,1409,2.796,1410,2.796,1411,2.796,1412,5.382,1413,2.796,1414,2.796,1415,2.796,1416,5.382,1417,2.796,1418,2.796,1419,4.372,1420,2.963,1421,4.372,1422,2.796,1423,2.796,1424,2.796,1425,2.796,1426,2.276,1427,2.796,1428,2.796,1429,2.796,1430,2.483,1431,2.796,1432,2.483,1433,2.276,1434,2.796,1435,2.796,1436,4.372,1437,3.123,1438,2.276,1439,2.796,1440,2.796,1441,2.796,1442,2.276,1443,1.807,1444,2.483,1445,2.483,1446,4.372,1447,5.403,1448,2.796,1449,2.796,1450,2.796,1451,1.998,1452,2.121,1453,4.372,1454,2.121,1455,2.796,1456,2.796,1457,2.796,1458,4.372]],["title/modules/CryptoImplementatationModule.html",[230,1.316,1459,3.279]],["body/modules/CryptoImplementatationModule.html",[3,0.098,4,0.098,5,0.087,21,0.008,30,0.119,31,0.006,32,0.006,33,0.248,53,0.254,218,1.054,230,2.425,232,2.676,233,3.051,234,3.234,235,3.234,236,2.968,237,3.999,238,3.999,254,3.934,255,3.234,256,3.234,259,2.743,260,5.317,262,2.047,268,4.334,279,4.893,281,3.563,333,1.306,462,5.951,1249,4.372,1374,5.688,1396,4.608,1459,6.63,1460,5.726,1461,5.726,1462,5.726,1463,4.372,1464,5.249,1465,5.726,1466,5.726]],["title/interfaces/CryptoImplementation.html",[0,1.487,1467,3.111]],["body/interfaces/CryptoImplementation.html",[0,2.572,2,2.814,3,0.085,4,0.085,5,0.076,9,0.685,13,0.234,14,0.998,17,0.783,19,0.673,20,0.352,21,0.008,23,1.796,30,0.085,31,0.006,32,0.006,47,0.518,108,4.47,134,4.975,184,1.488,214,1.603,217,1.735,281,4.623,401,1.666,486,2.894,523,2.191,535,2.191,672,3.972,914,4.717,915,4.074,1463,5.673,1467,4.874,1468,4.566,1469,5.852,1470,7.192,1471,5.852,1472,5.138,1473,6.812,1474,7.192,1475,7.192,1476,5.611,1477,6.384,1478,5.379,1479,6.384,1480,9.117,1481,5.611,1482,6.349,1483,5.852,1484,6.384,1485,5.611,1486,6.02,1487,6.384,1488,3.803,1489,3.627,1490,4.566,1491,3.627]],["title/injectables/CryptoImplementationService.html",[801,0.966,1374,2.728]],["body/injectables/CryptoImplementationService.html",[3,0.085,4,0.085,5,0.076,13,0.232,17,0.779,20,0.284,21,0.008,30,0.109,31,0.006,32,0.006,33,0.214,47,0.516,53,0.25,108,3.821,130,2.225,140,2.561,150,2.18,152,2.968,182,1.731,184,1.342,214,1.595,217,1.932,218,0.91,221,1.619,261,2.762,262,1.767,281,4.61,401,1.657,521,1.535,523,1.696,534,2.15,535,1.696,597,4.61,801,1.506,802,2.15,915,4.202,1249,5.851,1339,2.493,1374,4.252,1390,4.223,1391,4.223,1463,5.656,1467,5.359,1491,5.579,1492,4.53,1493,8.345,1494,7.907,1495,5.567,1496,5.567,1497,7.155,1498,5.567,1499,5.427,1500,6.791,1501,5.567,1502,5.567,1503,6.434,1504,5.112,1505,7.907,1506,6.548,1507,5.567,1508,7.155,1509,5.567]],["title/modules/CryptoModule.html",[230,1.316,243,2.451]],["body/modules/CryptoModule.html",[3,0.094,4,0.094,5,0.084,21,0.008,30,0.094,31,0.006,32,0.006,33,0.237,53,0.266,71,3.007,212,2.756,218,1.009,230,2.379,232,2.562,233,2.922,234,3.097,235,3.097,236,2.842,237,3.924,238,3.924,243,5.034,254,3.831,255,3.097,256,3.097,259,2.627,620,3.671,621,2.627,812,4.153,998,5.89,1510,5.483,1511,5.483,1512,5.483,1513,6.177,1514,6.292,1515,5.483,1516,6.177,1517,6.177,1518,4.937,1519,5.483,1520,6.177,1521,5.483]],["title/classes/DBKeyService.html",[33,0.176,1522,3.481]],["body/classes/DBKeyService.html",[3,0.038,4,0.038,5,0.085,7,1.23,9,0.308,13,0.105,14,0.56,16,1.647,17,0.888,19,0.72,20,0.354,21,0.008,22,2.888,23,1.992,24,4.148,30,0.077,31,0.003,32,0.003,33,0.097,35,0.574,42,2.155,46,5.22,47,0.54,51,0.917,53,0.248,71,1.23,79,1.075,114,1.396,117,2.172,118,2.468,124,1.489,130,0.786,140,1.163,145,2.181,152,1.674,153,3.921,173,2.229,182,0.786,184,1.529,185,2.605,214,0.9,217,1.88,221,1.448,261,2.218,262,0.802,281,2.229,297,1.713,313,1.634,333,1.626,401,1.888,414,2.446,443,2.229,485,2.221,486,2.749,521,1.113,522,2.639,523,1.916,534,1.559,535,1.535,568,1.857,574,2.391,607,3.528,766,3.583,811,1.396,812,2.198,825,3.58,826,1.396,838,3.237,914,3.737,983,4.11,996,3.528,997,1.713,1012,2.497,1040,3.178,1074,3.062,1170,1.965,1171,1.909,1182,1.447,1198,2.31,1249,4.261,1374,3.419,1396,1.806,1399,1.396,1420,2.735,1467,3.415,1478,2.735,1482,3.062,1483,2.057,1488,4.261,1489,5.098,1503,2.057,1518,1.634,1522,3.062,1523,6.245,1524,2.244,1525,2.735,1526,5.346,1527,4.473,1528,4.036,1529,4.036,1530,6.486,1531,4.364,1532,3.583,1533,3.583,1534,4.682,1535,4.1,1536,4.036,1537,3.583,1538,4.036,1539,4.036,1540,4.682,1541,3.284,1542,2.244,1543,2.527,1544,4.036,1545,3.583,1546,4.036,1547,2.527,1548,2.735,1549,4.682,1550,4.036,1551,6.288,1552,2.527,1553,3.718,1554,5.107,1555,2.527,1556,2.527,1557,2.527,1558,3.583,1559,3.56,1560,2.527,1561,4.036,1562,2.527,1563,3.583,1564,2.527,1565,3.583,1566,4.11,1567,5.753,1568,2.527,1569,2.244,1570,1.806,1571,5.753,1572,3.583,1573,2.527,1574,4.1,1575,1.267,1576,3.284,1577,1.917,1578,1.713,1579,2.057,1580,1.917,1581,1.917,1582,2.244,1583,2.057,1584,2.527,1585,2.527,1586,2.527,1587,2.527,1588,4.473,1589,6.288,1590,2.057,1591,2.527,1592,4.036,1593,2.527,1594,2.527,1595,2.527,1596,2.527,1597,2.527,1598,2.527,1599,2.527,1600,2.527,1601,2.527,1602,2.527,1603,2.527,1604,2.527,1605,2.527,1606,5.038,1607,2.527,1608,2.527,1609,2.527,1610,2.527,1611,2.527,1612,2.244,1613,2.527,1614,2.244,1615,2.244,1616,2.244,1617,5.038,1618,4.036,1619,3.583,1620,4.036,1621,2.527,1622,2.527,1623,2.527,1624,2.527,1625,2.527,1626,2.527]],["title/modules/DatabaseModule.html",[230,1.316,244,3.279]],["body/modules/DatabaseModule.html",[3,0.087,4,0.087,5,0.077,20,0.289,21,0.008,30,0.111,31,0.006,32,0.006,33,0.219,51,1.653,53,0.251,218,0.934,221,1.364,230,2.086,232,2.37,244,5.197,259,3.094,260,4.93,261,2.788,262,1.813,268,4.018,273,4.501,274,3.395,331,3.535,332,4.333,333,1.621,335,4.333,380,5.071,620,3.395,621,2.43,641,6.217,1454,4.333,1627,4.649,1628,7.274,1629,4.649,1630,6.457,1631,5.071,1632,5.071,1633,5.071,1634,7.48,1635,7.897,1636,6.6,1637,6.217,1638,5.071,1639,5.071,1640,5.071,1641,5.071,1642,5.071,1643,5.712,1644,7.274,1645,8.003,1646,5.712,1647,5.712,1648,7.274,1649,5.712,1650,5.712,1651,5.712,1652,5.712,1653,5.712,1654,5.071,1655,5.712,1656,5.919,1657,5.712,1658,5.712]],["title/entities/DisplayEntity.html",[67,1.316,1659,3.481]],["body/entities/DisplayEntity.html",[3,0.101,4,0.101,5,0.09,13,0.275,14,1.105,19,0.7,20,0.34,21,0.008,30,0.101,31,0.006,32,0.006,33,0.254,47,0.52,49,1.522,51,1.809,53,0.191,66,2.883,67,2.284,70,2.384,115,3.041,116,3.663,118,2.356,127,3.314,182,2.657,184,1.239,205,2.676,968,3.217,978,3.928,1119,4.271,1659,6.039,1660,5.378,1661,6.609,1662,6.954,1663,6.609,1664,6.609,1665,6.609,1666,3.529]],["title/classes/EC_Public.html",[33,0.176,1553,2.966]],["body/classes/EC_Public.html",[3,0.081,4,0.081,5,0.072,9,0.648,13,0.221,14,0.964,19,0.663,20,0.338,21,0.008,22,3.636,23,2.011,25,3.208,30,0.106,31,0.005,32,0.005,33,0.315,35,1.207,47,0.535,53,0.154,129,1.875,150,2.115,164,3.13,394,3.109,439,2.88,457,4.595,463,3.041,477,1.652,597,3.834,607,4.457,661,2.935,671,2.935,708,4.324,775,4.96,838,3.914,949,4.295,1189,5.24,1295,5.498,1298,4.784,1491,4.486,1553,4.486,1575,2.664,1578,5.765,1667,7.278,1668,6.219,1669,7.11,1670,6.864,1671,5.524,1672,5.865,1673,6.453,1674,6.453,1675,5.313,1676,6.162,1677,5.649,1678,6.162,1679,5.313,1680,6.219,1681,5.313,1682,3.601]],["title/classes/EmbeddedDisclosurePolicy.html",[33,0.176,43,2.728]],["body/classes/EmbeddedDisclosurePolicy.html",[3,0.057,4,0.057,5,0.051,9,0.455,12,0.864,13,0.155,14,0.755,16,1.402,17,0.699,19,0.613,20,0.148,21,0.008,23,1.511,25,1.548,26,1.548,27,1.261,28,2.435,30,0.126,31,0.004,32,0.004,33,0.318,34,2.217,35,0.848,36,2.217,37,3.513,38,1.716,39,5.345,40,5.57,41,2.679,42,3.763,43,4.916,44,3.074,45,2.411,47,0.244,49,0.713,51,1.995,53,0.233,54,3.364,55,1.929,56,2.726,57,4.144,58,3.763,59,1.929,60,2.903,61,3.051,62,3.121,63,2.459,64,2.646,65,0.989,66,1.628,67,1.839,68,3.364,69,3.364,70,1.346,71,3.121,72,2.411,73,3.763,74,1.69,75,2.135,76,1.929,77,3.003,78,2.135,79,1.587,80,3.316,81,2.309,82,2.236,83,2.135,84,2.646,85,1.992,86,3.968,87,2.66,88,2.309,89,2.309,90,2.309,91,2.309,92,2.309,93,2.309,94,4.144,95,3.513,96,4.554,97,1.716,98,1.992,99,3.364,100,2.217,101,2.411,102,2.217,103,2.411,104,3.231,105,2.411,106,1.992,107,1.929,108,1.992,109,2.217,110,2.411,111,2.135,112,1.799,113,1.816,114,2.061,115,2.501,116,2.501,117,1.209,118,1.029,119,1.261,120,2.309,121,1.803,122,1.929,123,1.51,124,1.376,125,1.628,126,2.309,127,4.047,128,3.121,129,1.317,130,1.994,131,2.309,132,1.871,133,2.309,134,2.217,135,3.003,136,1.871,137,4.047,138,2.501,139,2.411,140,1.716,141,1.51,142,1.992,143,2.309,144,2.411,145,1.114,146,2.309,147,3.513,148,1.918,149,2.309,150,1.954,151,2.411,152,1.548,153,1.628,154,2.005,155,2.646,156,2.411,157,2.411,158,2.411,159,2.411,160,1.992,161,2.061,162,1.929,163,1.346,164,1.51,165,2.726,166,1.816,167,2.061,168,2.309,169,1.671,170,1.929,171,2.411,172,3.231,173,2.061,174,2.217,175,2.217,1683,3.731]],["title/injectables/EncryptionService.html",[801,0.966,998,2.84]],["body/injectables/EncryptionService.html",[3,0.066,4,0.066,5,0.059,9,0.92,13,0.18,16,1.844,17,0.821,19,0.695,20,0.315,21,0.008,22,3.248,23,1.809,30,0.066,31,0.005,32,0.005,33,0.166,47,0.492,51,0.984,53,0.244,117,2.868,118,2.466,145,1.805,164,2.448,169,2.708,184,1.414,214,1.348,217,1.734,218,0.708,221,1.306,261,1.433,333,1.411,374,2.24,401,1.837,414,2.404,457,3.594,477,2.752,486,2.517,521,2.079,522,1.32,523,2.416,554,2.68,574,2.211,607,3.781,621,1.842,743,2.479,768,4.921,801,1.273,802,1.673,838,3.205,992,2.479,996,3.781,997,2.936,998,4.666,1012,3.742,1171,2.049,1182,4.315,1188,3.742,1337,4.32,1420,4.098,1433,3.525,1473,3.525,1489,3.908,1499,4.587,1518,3.908,1519,3.845,1535,4.921,1572,3.845,1574,3.525,1575,2.172,1576,4.921,1577,3.286,1588,5.368,1619,3.845,1671,3.095,1684,3.845,1685,3.908,1686,8.85,1687,6.047,1688,6.047,1689,6.047,1690,4.921,1691,4.332,1692,4.332,1693,6.047,1694,4.332,1695,4.332,1696,6.047,1697,7.54,1698,6.862,1699,6.047,1700,6.047,1701,4.332,1702,4.921,1703,4.332,1704,4.332,1705,4.332,1706,4.332,1707,4.332,1708,5.368,1709,3.845,1710,3.845,1711,4.332,1712,4.332,1713,5.669,1714,6.047,1715,4.332,1716,3.845,1717,4.332,1718,4.332,1719,4.332,1720,4.332,1721,4.332]],["title/interfaces/FileStorage.html",[0,1.487,1722,2.966]],["body/interfaces/FileStorage.html",[0,1.711,2,2.648,3,0.08,4,0.08,5,0.072,13,0.22,17,0.981,19,0.729,20,0.353,21,0.008,22,2.733,23,1.953,30,0.124,31,0.005,32,0.005,47,0.554,53,0.153,125,3.017,138,3.181,163,2.951,184,1.592,205,3.121,214,1.541,217,1.856,333,1.07,401,1.966,485,2.977,486,2.916,522,1.609,552,4.297,565,5.245,825,2.82,1171,3.271,1198,3.957,1722,4.469,1723,4.006,1724,6.138,1725,5.848,1726,5.848,1727,5.245,1728,5.281,1729,5.627,1730,5.281,1731,4.688,1732,6.844,1733,5.281,1734,4.006,1735,5.281,1736,4.297,1737,5.225,1738,6.204,1739,6.274,1740,5.844,1741,5.281,1742,4.006,1743,4.278,1744,4.297,1745,4.688,1746,5.281,1747,3.579,1748,5.281,1749,5.281,1750,4.688,1751,4.006,1752,5.281,1753,5.281,1754,5.281,1755,3.773,1756,3.773,1757,4.688]],["title/injectables/FilesService.html",[801,0.966,1758,3.481]],["body/injectables/FilesService.html",[3,0.075,4,0.075,5,0.067,13,0.205,17,0.904,19,0.719,20,0.33,21,0.008,22,1.949,23,1.708,30,0.075,31,0.005,32,0.005,33,0.189,47,0.542,53,0.24,118,1.822,119,1.667,125,2.151,130,2.054,148,2.332,163,2.384,182,2.054,184,1.556,210,1.533,214,1.473,217,1.741,218,0.806,221,1.556,274,2.931,331,3.051,333,1.509,401,1.922,485,3.074,486,2.097,521,1.359,522,2.013,739,3.187,769,3.523,801,1.39,802,1.904,825,2.633,920,4.478,1171,3.125,1249,3.342,1399,2.724,1722,5.145,1725,5.012,1727,5.012,1734,5.012,1737,5.05,1738,6.038,1742,3.74,1743,4.926,1744,4.012,1745,5.865,1747,3.342,1755,3.523,1756,3.523,1758,5.012,1759,4.377,1760,6.607,1761,7.452,1762,4.931,1763,4.931,1764,6.607,1765,4.931,1766,6.607,1767,7.96,1768,4.931,1769,4.931,1770,4.931,1771,7.96,1772,6.478,1773,4.931,1774,4.931,1775,4.931,1776,4.931,1777,6.607,1778,4.931,1779,4.931,1780,4.931,1781,4.931,1782,4.931,1783,4.931,1784,4.377,1785,4.931,1786,4.931,1787,4.931,1788,4.931,1789,4.931,1790,4.931,1791,4.931,1792,4.931,1793,4.931,1794,4.931,1795,3.523,1796,4.931,1797,4.931]],["title/interfaces/GenerateTokenOptions.html",[0,1.487,1798,3.481]],["body/interfaces/GenerateTokenOptions.html",[0,1.491,2,2.306,3,0.07,4,0.07,5,0.062,13,0.191,14,0.875,17,0.912,19,0.687,20,0.286,21,0.008,28,2.06,30,0.096,31,0.005,32,0.005,33,0.177,53,0.234,124,2.653,130,1.43,141,3.132,145,1.373,166,2.239,169,3.221,218,0.752,221,1.519,261,2.38,262,1.46,313,2.911,316,3.743,333,1.793,336,1.908,338,2.633,349,3.286,403,2.06,414,1.844,439,1.908,458,3.31,469,2.379,476,2.846,486,2.001,489,5.243,515,2.973,517,4.064,518,3.489,534,2.777,535,2.55,536,3.117,537,6.295,538,5.868,544,4.272,554,4.45,556,3.482,568,3.729,572,6.147,574,2.001,577,5.243,604,4.272,633,4.503,692,4.272,801,1.327,866,2.973,915,2.239,918,5,1151,3.286,1270,3.489,1339,2.06,1472,3.286,1531,4.781,1548,3.117,1575,2.306,1798,5.455,1799,3.743,1800,4.083,1801,3.743,1802,4.083,1803,4.083,1804,4.083,1805,4.083,1806,4.083,1807,4.083,1808,5.596,1809,5.596,1810,5.596,1811,5.596,1812,4.083,1813,4.083,1814,6.384,1815,5.596,1816,4.083,1817,5.13,1818,4.083,1819,4.083,1820,4.083,1821,3.743,1822,4.083,1823,4.083,1824,4.083,1825,4.083,1826,4.083,1827,3.743,1828,4.083,1829,4.083,1830,3.489,1831,4.083,1832,4.083,1833,3.743,1834,4.083,1835,4.083,1836,4.083,1837,3.743]],["title/controllers/HealthController.html",[210,1.427,1838,3.481]],["body/controllers/HealthController.html",[3,0.095,4,0.095,5,0.085,9,0.764,13,0.261,21,0.008,30,0.095,31,0.006,32,0.006,33,0.241,47,0.409,49,1.198,53,0.223,145,2.301,210,1.948,212,2.26,214,1.718,217,1.685,218,1.024,221,1.175,336,3.864,445,4.981,464,3.864,521,1.727,522,2.348,712,3.141,715,5.846,1525,5.223,1656,6.272,1838,6.606,1839,5.562,1840,9.104,1841,7.707,1842,8.709,1843,7.707,1844,6.842,1845,7.707,1846,6.265,1847,6.265,1848,7.707,1849,7.707,1850,5.099,1851,6.265,1852,6.265,1853,6.265,1854,6.265]],["title/modules/HealthModule.html",[230,1.316,245,3.279]],["body/modules/HealthModule.html",[3,0.108,4,0.108,5,0.096,21,0.007,30,0.108,31,0.006,32,0.006,33,0.272,53,0.254,212,2.995,218,1.159,230,2.381,232,2.942,245,5.931,259,3.016,1838,6.677,1850,5.771,1855,7.091,1856,8.302,1857,7.091]],["title/entities/IssuanceConfig.html",[67,1.316,947,2.627]],["body/entities/IssuanceConfig.html",[3,0.058,4,0.058,5,0.052,9,0.963,12,1.828,13,0.16,14,0.77,16,1.655,17,0.908,19,0.599,20,0.347,21,0.008,26,2.3,27,1.874,30,0.058,31,0.004,32,0.004,33,0.213,41,2.215,47,0.563,49,1.648,51,1.793,53,0.228,58,3.478,61,2.045,65,1.016,66,1.672,67,2.047,69,3.43,70,1.383,74,1.724,76,1.982,80,3.69,82,2.869,83,2.194,87,2.3,111,3.173,112,1.857,115,2.551,117,1.796,118,1.795,121,2.006,123,2.244,127,3.265,128,2.698,130,2.219,132,2.78,137,3.957,161,2.117,163,2,168,3.43,170,2.867,172,4.241,173,2.117,174,3.295,175,3.871,179,3.443,182,1.724,186,3.062,196,2.821,201,2.693,204,3.065,206,2.867,209,2.483,220,1.353,368,3.196,403,1.717,406,3.583,413,1.764,424,2.358,426,4.241,427,3.578,428,3.443,429,3.961,432,2.867,434,4.415,437,3.961,438,3.583,439,2.3,440,3.062,449,4.359,477,1.724,670,4.241,947,3.173,968,1.866,971,3.597,972,4.209,973,3.941,974,3.757,976,4.241,977,2.78,978,2.278,985,3.757,987,3.583,988,3.583,1119,3.583,1157,3.062,1158,4.209,1159,3.062,1160,4.94,1161,4.205,1162,4.205,1163,4.205,1164,4.084,1165,4.94,1184,3.961,1193,3.961,1273,3.119,1282,3.119,1858,7.751,1859,2.908,1860,3.833,1861,3.403,1862,3.403,1863,3.833,1864,3.833,1865,3.833,1866,3.833,1867,5.543,1868,3.833,1869,5.543,1870,5.543,1871,3.833,1872,3.833,1873,3.833,1874,3.833,1875,3.403,1876,3.833,1877,3.833,1878,4.511,1879,3.833,1880,3.403,1881,3.833]],["title/controllers/IssuanceController.html",[210,1.427,1882,3.481]],["body/controllers/IssuanceController.html",[3,0.08,4,0.08,5,0.071,13,0.218,16,1.784,17,0.837,19,0.584,20,0.306,21,0.008,30,0.08,31,0.005,32,0.005,33,0.202,47,0.502,49,1.469,53,0.251,82,2.76,112,1.819,117,2.644,121,2.295,124,1.936,155,2.555,184,1.441,210,1.632,212,1.894,214,1.535,217,1.966,218,0.858,220,1.852,221,1.441,368,4.027,401,1.78,436,3.169,458,2.968,485,2.659,501,4.246,506,3.248,517,4.602,523,2.342,615,2.899,712,2.632,742,3.004,759,2.178,814,4.568,1152,5.531,1171,2.483,1181,4.262,1196,4.92,1319,6.255,1322,4.66,1323,3.75,1329,3.558,1330,3.558,1331,3.558,1333,4.272,1334,3.558,1335,3.558,1336,4.272,1339,2.351,1343,3.75,1344,3.982,1882,5.224,1883,4.66,1884,6.887,1885,6.887,1886,6.824,1887,5.249,1888,5.249,1889,5.249,1890,5.249,1891,5.249,1892,4.66,1893,5.249,1894,5.249,1895,5.249,1896,5.249,1897,3.982,1898,5.249]],["title/classes/IssuanceDto.html",[33,0.176,1152,3.111]],["body/classes/IssuanceDto.html",[3,0.068,4,0.068,5,0.061,9,1.014,13,0.187,14,0.862,16,1.676,17,0.989,19,0.611,20,0.361,21,0.008,26,2.949,27,2.403,30,0.094,31,0.006,32,0.005,33,0.294,35,1.022,41,2.242,47,0.556,49,1.629,51,1.022,53,0.222,56,3.113,60,3.315,61,2.827,62,3.034,63,2.45,64,3.914,65,1.193,67,1.29,74,1.93,76,2.327,82,2.904,97,2.07,112,2.063,119,1.521,128,3.022,130,1.93,132,3.113,135,3.429,163,2.24,179,3.508,182,1.93,189,2.19,196,3.03,201,2.343,204,3.449,206,3.21,336,1.866,364,2.709,401,1.438,413,2.07,417,4.555,434,4.742,436,3.27,449,3.926,477,1.93,662,3.796,704,5.511,709,4.012,1135,3.413,1147,5.813,1148,3.661,1149,3.661,1151,3.214,1152,4.208,1153,4.709,1154,4.709,1155,6.31,1156,4.709,1157,3.429,1158,4.594,1159,3.429,1160,5.392,1161,4.709,1162,4.709,1163,4.709,1164,3.553,1165,5.392,1899,4.499,1900,4.499,1901,4.499,1902,4.499,1903,4.499,1904,4.499,1905,4.499,1906,4.499,1907,4.499,1908,4.499,1909,4.499]],["title/injectables/IssuanceService.html",[801,0.966,814,2.728]],["body/injectables/IssuanceService.html",[3,0.04,4,0.04,5,0.087,9,0.324,13,0.111,16,1.626,17,0.702,19,0.672,20,0.272,21,0.008,22,2.058,30,0.04,31,0.003,32,0.003,33,0.2,41,2.176,47,0.468,51,1.183,53,0.261,65,0.704,70,0.958,74,1.305,76,1.374,80,1.374,82,2.682,83,1.52,87,1.742,112,1.319,113,2.88,117,2.325,118,2.33,121,2.205,129,0.937,138,1.222,145,1.253,148,0.937,153,1.832,166,1.293,170,1.374,175,1.579,179,1.159,182,2.13,184,1.208,189,1.293,201,1.584,209,2.332,214,1.319,217,1.828,218,0.434,221,1.284,261,2.374,262,0.843,270,1.644,271,1.717,273,2.598,274,2.495,304,4.887,313,2.395,331,1.644,333,1.801,336,1.102,344,2.015,349,1.898,364,2.989,394,1.19,397,2.534,401,1.492,406,3.365,414,2.24,417,1.579,420,1.717,436,3.742,447,1.8,449,4.331,466,3.417,480,3.185,486,1.333,521,1.631,522,2.332,523,2.332,534,2.01,535,1.586,556,1.467,568,2.395,574,2.43,621,1.13,667,2.162,801,0.884,802,1.026,812,3.13,814,3.516,826,1.467,842,1.374,947,3.386,964,2.015,992,1.52,996,3.597,1054,2.495,1092,1.898,1093,4.227,1152,4.862,1166,3.823,1168,1.898,1170,2.044,1171,1.986,1173,3.688,1175,2.692,1176,4.227,1181,2.598,1182,2.403,1193,3,1197,3.719,1198,2.98,1200,2.162,1201,2.162,1202,2.162,1203,2.015,1206,2.162,1207,2.162,1208,3.417,1210,4.237,1211,2.162,1212,2.162,1213,3.417,1214,2.162,1215,2.162,1216,2.162,1217,2.162,1218,4.237,1219,3.661,1220,2.162,1221,2.162,1222,1.8,1223,2.162,1224,5.574,1225,3.417,1226,2.162,1227,2.015,1228,2.162,1229,2.162,1230,2.162,1231,3.417,1234,3.417,1235,3.417,1236,2.162,1238,3.417,1239,2.162,1240,2.162,1244,1.898,1245,2.162,1246,1.898,1247,4.237,1250,1.717,1252,2.162,1253,2.162,1254,4.237,1255,4.237,1256,2.162,1258,1.898,1259,2.162,1261,3.727,1284,2.162,1285,1.717,1319,3.417,1332,2.162,1399,2.319,1471,2.162,1504,4.227,1549,4.237,1615,2.358,1880,2.358,1886,3.727,1892,2.358,1910,2.358,1911,4.198,1912,5.206,1913,5.574,1914,2.656,1915,5.206,1916,5.916,1917,2.656,1918,5.206,1919,4.198,1920,2.656,1921,4.198,1922,2.656,1923,2.656,1924,2.656,1925,2.656,1926,2.656,1927,4.198,1928,2.656,1929,4.198,1930,2.358,1931,2.656,1932,2.656,1933,2.656,1934,2.656,1935,2.656,1936,2.656,1937,2.358,1938,2.656,1939,2.656,1940,2.656,1941,2.656,1942,2.656,1943,2.656,1944,5.206,1945,2.656,1946,4.198,1947,2.656,1948,2.656,1949,2.656,1950,4.198,1951,2.656,1952,2.656,1953,2.656,1954,4.198,1955,2.656,1956,2.656,1957,2.656,1958,2.656,1959,2.656,1960,2.656,1961,2.656,1962,2.656,1963,2.656,1964,2.656,1965,2.656,1966,2.656,1967,5.206,1968,5.916,1969,2.656,1970,2.656,1971,2.656,1972,2.656,1973,2.656,1974,2.656,1975,2.656]],["title/controllers/IssuerManagementController.html",[210,1.427,1976,3.481]],["body/controllers/IssuerManagementController.html",[3,0.067,4,0.067,5,0.059,9,0.535,13,0.183,17,0.478,19,0.333,20,0.348,21,0.008,25,1.82,30,0.067,31,0.005,32,0.005,33,0.168,41,1.785,44,1.914,47,0.286,49,0.838,53,0.253,87,1.82,119,1.483,122,2.268,124,1.618,128,2.135,129,1.548,136,3.059,145,1.821,154,2.25,155,3.414,164,2.839,165,3.059,182,2.357,184,0.822,187,2.199,206,2.268,209,1.964,210,1.364,212,1.582,214,1.36,217,0.959,218,0.717,220,1.548,226,2.835,333,1.235,338,2.51,368,3.568,371,4.753,374,4.12,401,1.016,414,2.052,422,2.268,427,3.517,428,1.914,439,1.82,458,2.355,474,4.358,477,2.725,485,3.332,501,2.423,503,4.627,505,4.964,506,2.714,517,3.801,523,1.858,526,5.416,564,2.019,574,1.936,609,3.327,615,2.423,712,2.199,742,2.51,743,2.51,754,2.885,759,1.82,767,3.569,788,4.899,933,3.327,945,4.691,959,3.134,1000,4.34,1001,3.134,1040,3.369,1329,2.973,1330,2.973,1331,2.973,1333,3.569,1334,2.973,1335,2.973,1336,3.569,1339,1.964,1548,2.973,1666,3.258,1737,2.973,1897,3.327,1976,4.627,1977,5.415,1978,4.964,1979,3.894,1980,6.226,1981,3.894,1982,6.014,1983,3.894,1984,5.415,1985,4.533,1986,3.894,1987,4.386,1988,4.386,1989,4.386,1990,3.569,1991,4.533,1992,2.973,1993,3.569,1994,4.386,1995,3.894,1996,3.894,1997,5.415,1998,3.327,1999,6.73,2000,3.894,2001,3.894,2002,5.707,2003,6.73,2004,5.692,2005,3.894,2006,4.386,2007,4.386,2008,4.386,2009,4.386,2010,4.386,2011,4.386,2012,4.386,2013,4.627,2014,3.569,2015,4.386,2016,4.386,2017,3.894,2018,4.386,2019,3.894,2020,4.386,2021,3.894,2022,3.894,2023,3.894,2024,3.894,2025,3.894,2026,3.894,2027,3.894]],["title/interfaces/IssuerMetadata.html",[0,1.487,2028,3.279]],["body/interfaces/IssuerMetadata.html",[0,2.716,2,3.17,3,0.096,4,0.096,5,0.086,9,0.771,13,0.263,14,1.076,19,0.637,20,0.347,21,0.008,22,3.064,23,1.662,27,2.62,30,0.096,31,0.006,32,0.006,38,2.909,53,0.183,124,3.489,125,3.381,129,2.735,164,3.138,205,3.138,457,4.606,463,5.289,607,4.381,669,5.537,671,4.281,674,5.252,838,3.566,958,5.537,1297,5.145,1575,3.17,2028,5.537,2029,5.612]],["title/modules/IssuerModule.html",[230,1.316,246,3.111]],["body/modules/IssuerModule.html",[3,0.066,4,0.066,5,0.059,21,0.008,30,0.092,31,0.005,32,0.005,33,0.166,53,0.276,55,2.235,74,1.344,80,3.122,81,2.674,82,1.371,83,2.473,113,2.938,124,1.594,154,1.594,212,2.178,218,0.706,230,1.996,232,1.793,233,2.044,234,2.167,235,2.167,236,1.988,237,3.291,238,3.291,243,4.384,246,6.5,250,5.08,254,3.027,255,2.167,256,2.167,259,2.567,261,2.302,262,1.371,268,3.334,278,2.674,287,3.278,293,3.278,333,1.223,614,5.306,620,2.568,621,1.838,626,2.387,627,3.516,710,5.277,751,5.362,811,2.387,814,4.879,846,3.278,947,3.455,1000,5.582,1166,5.306,1168,3.087,1284,3.516,1285,2.793,1316,5.277,1332,3.516,1338,5.306,1346,5.277,1348,3.516,1358,3.836,1397,3.836,1659,4.579,1882,5.277,1930,3.836,1976,5.277,1978,3.516,2030,3.836,2031,3.836,2032,3.836,2033,3.836,2034,5.306,2035,5.08,2036,4.879,2037,5.08,2038,3.516,2039,5.277,2040,4.091,2041,2.387,2042,6.036,2043,4.313,2044,3.278,2045,3.087,2046,3.516,2047,4.321,2048,4.321,2049,4.321,2050,4.321,2051,4.321,2052,4.321,2053,4.321,2054,4.321,2055,4.321,2056,4.321,2057,3.836,2058,3.836,2059,4.321,2060,6.036,2061,3.836,2062,4.321,2063,4.321]],["title/classes/JwksResponseDto.html",[33,0.176,1682,3.111]],["body/classes/JwksResponseDto.html",[3,0.087,4,0.087,5,0.078,9,0.702,13,0.239,14,1.014,19,0.61,20,0.29,21,0.008,22,3.622,23,1.965,25,3.33,30,0.111,31,0.006,32,0.006,33,0.308,35,1.306,47,0.375,53,0.166,129,2.578,150,1.752,164,3.25,394,2.575,439,2.385,457,4.771,463,4.181,477,2.271,597,3.176,607,4.638,661,3.176,671,4.035,775,4.108,838,3.886,949,3.558,1189,6.039,1295,4.721,1298,4.968,1491,3.716,1553,3.716,1575,2.883,1578,4.951,1667,6.484,1668,5.541,1669,7.07,1670,6.484,1671,4.108,1672,4.362,1673,5.541,1674,5.541,1676,5.104,1677,4.679,1678,5.104,1680,5.541,1682,4.951,2064,5.104]],["title/injectables/JwtAuthGuard.html",[615,2.535,801,0.966]],["body/injectables/JwtAuthGuard.html",[3,0.096,4,0.096,5,0.086,13,0.264,17,0.845,20,0.308,21,0.008,30,0.096,31,0.006,32,0.006,33,0.243,42,4.143,47,0.507,51,1.439,53,0.253,184,1.455,214,1.729,217,1.385,218,1.035,221,1.455,333,1.283,401,1.797,521,1.746,615,4.285,619,4.804,801,1.633,802,2.446,1339,2.837,1772,6.314,2065,5.622,2066,7.758,2067,6.887,2068,5.622,2069,8.103,2070,6.333,2071,6.887,2072,6.246,2073,6.333,2074,3.919,2075,5.154,2076,6.333,2077,6.314,2078,6.333,2079,6.333,2080,6.333,2081,5.622,2082,6.333,2083,6.333]],["title/injectables/JwtService.html",[515,2.966,801,0.966]],["body/injectables/JwtService.html",[0,1.353,3,0.064,4,0.064,5,0.057,13,0.174,17,0.808,19,0.658,20,0.295,21,0.008,28,2.64,30,0.09,31,0.005,32,0.005,33,0.16,47,0.511,53,0.226,124,2.52,130,1.833,141,3.288,145,1.76,166,2.869,169,3.323,182,1.299,184,1.391,214,1.314,217,1.622,218,0.683,221,1.467,261,2.687,262,1.326,313,2.765,316,3.399,333,1.755,336,2.445,338,3.373,349,4.88,401,1.718,403,1.871,414,2.376,439,1.733,458,3.463,469,3.048,476,3.647,486,2.355,489,5.303,515,3.809,517,4.273,518,3.168,521,1.151,534,2.638,535,2.474,536,2.831,537,6.368,538,5.936,544,3.995,554,4.227,556,3.256,568,3.736,572,4.471,574,1.871,577,2.831,604,4.629,633,4.211,692,4.629,801,1.24,802,1.613,811,2.307,866,3.809,915,2.033,918,2.699,1151,4.211,1270,4.471,1339,1.871,1472,2.984,1531,4.471,1548,3.995,1575,2.094,1798,5.628,1799,3.399,1800,3.708,1801,3.399,1802,3.708,1803,3.708,1804,3.708,1805,3.708,1806,3.708,1807,6.064,1808,5.232,1809,5.232,1810,5.232,1811,5.232,1812,3.708,1813,3.708,1814,6.064,1815,5.232,1816,3.708,1817,4.796,1818,3.708,1819,3.708,1820,3.708,1821,3.399,1822,3.708,1823,3.708,1824,3.708,1825,3.708,1826,5.232,1827,3.399,1828,3.708,1829,3.708,1830,3.168,1831,5.232,1832,5.232,1833,4.796,1834,5.232,1835,3.708,1836,6.587,1837,3.399,2084,5.894,2085,5.894,2086,4.176,2087,4.176,2088,4.176,2089,4.176,2090,4.176,2091,4.176]],["title/injectables/JwtStrategy.html",[616,3.279,801,0.966]],["body/injectables/JwtStrategy.html",[3,0.064,4,0.064,5,0.057,9,0.511,13,0.174,17,0.854,20,0.312,21,0.008,23,1.268,30,0.064,31,0.005,32,0.005,33,0.161,42,3.156,47,0.512,51,1.555,53,0.241,121,2.09,124,2.999,129,2.085,141,3.382,148,1.479,152,1.739,166,2.04,169,1.877,184,1.469,214,1.317,217,1.713,218,0.685,221,1.524,223,3.819,261,3.032,262,1.33,267,5.51,313,3.172,331,2.594,333,1.728,335,3.18,336,2.451,349,5.309,360,2.491,392,2.709,397,3.617,401,1.815,403,1.877,414,2.003,463,3.382,465,2.795,468,3.411,476,2.594,479,3.721,486,1.875,497,6.075,508,5.169,509,3.411,517,3.726,518,3.18,521,1.629,522,2.599,523,1.277,534,1.619,535,1.277,568,3.99,569,3.819,574,1.33,616,4.222,619,3.18,638,3.411,646,3.411,801,1.244,802,1.619,811,2.315,825,2.238,1045,4.638,1151,2.995,1246,2.995,1399,3.264,1472,4.89,1504,2.995,1817,3.411,1821,3.411,1833,3.411,1837,3.411,2013,3.18,2092,3.721,2093,5.909,2094,5.909,2095,6.844,2096,4.191,2097,5.909,2098,4.191,2099,5.909,2100,4.191,2101,5.909,2102,6.844,2103,4.191,2104,4.191,2105,5.909,2106,4.191,2107,5.909,2108,4.191,2109,5.909,2110,3.721,2111,4.191,2112,4.191,2113,3.721,2114,7.431,2115,4.191,2116,4.191,2117,4.191,2118,4.191,2119,4.191,2120,4.191,2121,4.191,2122,4.191,2123,5.909,2124,6.844,2125,4.191,2126,4.191,2127,3.721,2128,4.191,2129,4.191,2130,4.191,2131,4.191,2132,5.909,2133,3.721,2134,5.909,2135,3.721,2136,4.191,2137,5.909,2138,4.191,2139,4.191,2140,4.191,2141,4.191,2142,4.191,2143,4.191,2144,4.191,2145,4.191,2146,4.191,2147,4.191]],["title/classes/Key.html",[23,0.985,33,0.176]],["body/classes/Key.html",[3,0.079,4,0.079,5,0.071,7,2.536,9,0.836,13,0.217,14,0.951,15,3.722,16,1.139,17,0.568,19,0.719,20,0.364,21,0.008,23,1.982,24,3.224,25,2.843,30,0.079,31,0.005,32,0.005,33,0.312,35,1.184,47,0.578,49,1.691,53,0.221,59,2.694,61,2.528,62,2.89,63,2.873,65,1.381,150,1.587,182,1.62,184,0.977,189,2.536,394,3.069,522,2.088,607,4.08,662,2.782,838,3.744,915,3.728,1489,3.367,1491,3.367,1559,3.224,1575,2.612,1590,6.232,1668,3.952,1669,6.172,1671,5.472,1672,5.809,1673,6.172,1674,6.172,1680,5.199,2148,6.084,2149,4.24,2150,6.799,2151,5.21,2152,5.21,2153,5.21,2154,5.21,2155,5.21,2156,5.21,2157,5.21,2158,5.21,2159,4.625,2160,4.625]],["title/controllers/KeyController.html",[210,1.427,1514,3.481]],["body/controllers/KeyController.html",[3,0.066,4,0.066,5,0.059,9,0.533,13,0.182,16,1.976,17,0.824,19,0.626,20,0.301,21,0.008,22,1.727,23,1.954,30,0.066,31,0.005,32,0.005,33,0.168,47,0.494,49,1.447,53,0.253,71,2.127,117,1.972,118,1.93,145,2.46,184,1.419,210,1.359,212,1.576,214,1.356,217,1.801,218,0.714,220,1.542,221,1.312,331,2.704,333,1.533,401,1.753,414,2.411,458,3.559,485,3.517,486,2.615,501,3.866,517,4.566,521,1.205,522,1.331,523,2.667,535,1.853,574,1.931,607,3.795,615,2.414,712,2.191,742,2.501,759,1.813,812,3.054,1113,4.123,1170,2.961,1171,3.311,1323,3.122,1329,2.962,1330,2.962,1331,2.962,1334,2.962,1335,2.962,1343,3.122,1344,4.615,1399,3.36,1514,5.741,1515,3.879,1525,4.123,1526,4.744,1540,4.951,1559,4.683,1579,4.951,1580,3.315,1581,3.315,1583,3.556,1726,3.315,2161,3.879,2162,6.999,2163,6.084,2164,6.084,2165,6.999,2166,4.37,2167,4.37,2168,4.37,2169,4.37,2170,4.37,2171,4.37,2172,4.37,2173,5.741,2174,4.37,2175,4.37,2176,6.084,2177,3.556,2178,4.37,2179,4.37,2180,4.37,2181,6.999,2182,4.37,2183,4.37,2184,4.37,2185,4.37,2186,4.37,2187,4.37]],["title/entities/KeyEntity.html",[67,1.316,1518,2.966]],["body/entities/KeyEntity.html",[3,0.088,4,0.088,5,0.079,13,0.241,14,1.019,16,1.911,19,0.644,20,0.361,21,0.008,23,2.025,26,3.046,27,2.482,30,0.112,31,0.006,32,0.006,33,0.223,47,0.553,49,1.619,51,1.925,53,0.212,66,2.53,67,2.106,70,2.092,85,3.096,115,3.708,116,3.898,117,2.379,118,2.222,127,2.907,130,2.283,838,3.708,968,2.822,978,4.79,1119,3.747,1518,4.746,1575,2.907,1698,4.718,1713,7.267,2188,4.718,2189,5.797,2190,5.797,2191,7.343,2192,5.797,2193,6.558,2194,5.758,2195,5.797]],["title/classes/KeyImportDto.html",[33,0.176,1559,2.84]],["body/classes/KeyImportDto.html",[3,0.083,4,0.083,5,0.074,7,3.43,9,1.071,13,0.226,14,0.978,15,5.586,16,1.189,17,0.956,19,0.706,20,0.349,21,0.008,23,2.026,24,4.36,25,3.431,30,0.083,31,0.005,32,0.005,33,0.318,35,1.235,47,0.51,49,1.495,53,0.226,59,2.812,61,2.6,62,2.95,63,2.789,65,1.441,150,1.656,182,1.69,184,1.019,189,2.646,394,2.435,522,2.382,607,4.147,662,3.763,838,3.806,915,2.646,1135,5.345,1489,5.053,1491,3.514,1559,4.36,1575,2.726,1590,4.424,1668,4.124,1669,6.274,1671,3.884,1672,4.124,1673,5.345,1674,5.345,1680,5.345,2148,5.606,2149,4.424,2150,4.826,2159,4.826,2160,6.256,2196,5.437,2197,5.437,2198,5.437,2199,5.437]],["title/modules/KeyModule.html",[230,1.316,247,3.279]],["body/modules/KeyModule.html",[3,0.081,4,0.081,5,0.072,21,0.008,30,0.106,31,0.005,32,0.005,33,0.204,47,0.346,53,0.269,71,2.582,121,1.492,214,1.182,217,1.16,218,0.867,221,1.449,230,2.216,232,2.201,237,2.509,238,2.509,247,5.52,259,2.256,260,4.7,261,2.886,262,1.684,267,4.7,268,3.831,281,3.831,282,4.709,283,4.024,331,3.283,332,4.024,333,1.404,335,4.024,462,5.26,535,2.113,620,3.153,621,2.256,641,4.955,812,3.371,996,3.874,997,3.595,1249,4.7,1374,4.592,1396,3.79,1459,4.955,1518,4.482,1521,4.709,1522,5.26,1526,4.7,1534,6.287,1535,5.643,1581,4.024,1582,4.709,1583,5.643,1636,5.26,1637,4.955,2040,4.7,2041,2.93,2200,4.317,2201,6.859,2202,5.305,2203,6.859,2204,6.075,2205,5.305,2206,5.305,2207,6.156,2208,5.305,2209,6.156,2210,4.709,2211,4.709,2212,7.274,2213,4.024,2214,4.709,2215,4.709,2216,4.709,2217,4.709,2218,4.709,2219,6.935,2220,5.305,2221,5.305]],["title/classes/KeyObj.html",[33,0.176,2222,3.481]],["body/classes/KeyObj.html",[3,0.095,4,0.095,5,0.085,7,4.231,9,0.76,13,0.259,14,1.066,15,5.95,16,1.821,19,0.66,20,0.331,21,0.008,22,3.436,23,1.996,24,4.753,25,3.606,26,3.606,27,2.938,30,0.095,31,0.006,32,0.006,33,0.239,35,1.416,47,0.544,53,0.18,67,2.203,79,2.65,297,4.223,838,3.534,1298,4.753,1488,5.644,1553,5.382,1578,4.223,2148,5.892,2222,5.827,2223,5.532,2224,6.232,2225,6.232,2226,6.232]],["title/classes/KeyResponseDto.html",[33,0.176,470,3.481]],["body/classes/KeyResponseDto.html",[3,0.108,4,0.108,5,0.096,13,0.296,14,1.154,20,0.283,21,0.007,30,0.108,31,0.006,32,0.006,33,0.273,35,1.614,47,0.464,53,0.205,79,3.022,297,4.816,470,6.305,607,4.418,661,3.925,1553,5.694,1578,4.816,2148,5.633,2227,6.308]],["title/classes/KeyService.html",[33,0.176,1526,3.111]],["body/classes/KeyService.html",[0,1.679,3,0.053,4,0.053,5,0.047,7,2.522,9,0.427,13,0.145,16,1.813,17,0.933,19,0.728,20,0.361,21,0.008,22,2.048,23,1.98,24,4.226,30,0.053,31,0.004,32,0.004,33,0.134,35,0.794,47,0.559,53,0.25,70,1.261,71,1.702,118,2.561,119,1.182,140,1.608,145,2.28,153,3.996,184,1.605,185,3.193,214,1.155,217,1.932,218,0.571,221,0.972,261,2.528,262,1.11,401,1.983,485,2.637,486,2.907,521,1.429,523,2.409,534,1.35,535,1.881,568,2.384,668,5.025,769,2.498,811,1.931,825,4.079,835,2.078,838,3.355,880,2.001,914,4.54,983,4.879,996,3.424,1012,3.207,1040,2.862,1074,3.931,1182,2.966,1242,2.652,1420,2.369,1469,4.217,1478,3.512,1482,3.931,1526,3.512,1527,4.6,1530,7.362,1531,4.684,1532,6.474,1533,4.6,1534,5.025,1537,4.6,1541,4.217,1542,4.6,1554,5.482,1558,4.6,1559,4.226,1563,4.6,1565,3.103,1566,4.879,1569,4.6,1570,2.498,1575,1.753,1579,4.217,1580,2.652,1581,2.652,1612,3.103,1827,2.845,2222,2.652,2228,3.103,2229,9.386,2230,3.496,2231,3.496,2232,3.496,2233,3.496,2234,3.496,2235,3.496,2236,3.496,2237,3.496,2238,5.182,2239,3.496,2240,4.6,2241,3.496,2242,3.349,2243,6.829,2244,3.496,2245,3.496,2246,3.496,2247,3.496]],["title/classes/LocalFileStorage.html",[33,0.176,2248,3.481]],["body/classes/LocalFileStorage.html",[3,0.076,4,0.076,5,0.068,13,0.209,17,0.91,19,0.713,20,0.332,21,0.008,23,1.954,30,0.076,31,0.005,32,0.005,33,0.193,35,1.141,47,0.545,51,1.52,53,0.232,184,1.566,214,1.491,217,1.754,221,1.504,273,3.108,274,2.985,333,1.692,394,2.996,401,1.934,414,2.201,485,3.225,486,2.123,521,1.385,535,1.53,574,1.594,825,2.682,1171,3.164,1198,3.829,1203,3.81,1339,2.25,1722,4.861,1725,5.074,1726,5.705,1727,5.074,1729,5.444,1734,5.074,1736,4.087,1737,5.097,1738,6.335,1739,6.121,1740,5.73,1742,5.074,1743,3.108,1747,3.404,1751,3.81,2135,4.459,2248,5.074,2249,4.459,2250,5.023,2251,5.023,2252,6.689,2253,5.023,2254,5.023,2255,5.023,2256,5.023,2257,5.023,2258,5.023,2259,5.023,2260,5.023,2261,5.023,2262,5.023,2263,5.023,2264,4.087,2265,6.689,2266,6.689,2267,5.023,2268,6.689,2269,5.023,2270,6.689,2271,4.459,2272,5.023,2273,5.023,2274,5.023,2275,5.023,2276,5.023,2277,4.459,2278,5.023,2279,5.023,2280,5.023,2281,5.023,2282,4.459,2283,5.938,2284,5.023,2285,5.023,2286,5.023]],["title/injectables/LoggerConfigService.html",[801,0.966,2287,3.481]],["body/injectables/LoggerConfigService.html",[0,1.414,3,0.092,4,0.066,5,0.059,9,0.533,13,0.182,14,0.844,17,0.662,19,0.531,20,0.278,21,0.008,28,4.012,30,0.092,31,0.005,32,0.005,33,0.168,47,0.59,53,0.176,112,1.836,121,1.967,138,2.008,145,1.815,148,2.468,150,1.852,164,2.832,184,1.14,214,1.355,217,1.938,218,0.713,221,1.616,261,2.725,262,1.385,269,4.947,311,4.947,312,4.947,313,2.461,314,4.947,322,3.552,323,3.118,324,3.552,325,3.552,327,5.738,333,0.884,334,4.947,336,2.522,337,3.761,344,5.306,401,1.408,521,1.203,522,2.667,759,1.811,801,1.279,802,1.685,811,2.411,1032,4.496,1169,3.311,1170,2.959,1175,3.143,1177,5.396,1339,1.955,1437,4.343,1795,4.343,2287,4.611,2288,7.409,2289,6.715,2290,6.715,2291,6.715,2292,6.715,2293,6.715,2294,6.715,2295,6.715,2296,6.078,2297,6.715,2298,6.715,2299,4.364,2300,6.033,2301,4.364,2302,4.364,2303,7.311,2304,4.364,2305,4.364,2306,4.364,2307,4.364,2308,5.396,2309,4.364,2310,4.364,2311,5.396,2312,5.396,2313,4.12,2314,4.364,2315,5.396,2316,5.396,2317,5.396,2318,5.396,2319,5.396,2320,5.396,2321,5.396,2322,3.874,2323,3.874,2324,5.404,2325,3.874,2326,5.396,2327,5.306,2328,3.874,2329,3.874,2330,3.874,2331,3.874,2332,3.874,2333,3.874,2334,3.874]],["title/interfaces/LoggerConfiguration.html",[0,1.487,2300,3.481]],["body/interfaces/LoggerConfiguration.html",[0,1.635,2,2.529,3,0.102,4,0.077,5,0.068,13,0.21,14,0.931,19,0.383,20,0.333,21,0.008,28,4.168,30,0.102,31,0.005,32,0.005,33,0.194,53,0.194,112,1.68,121,1.418,138,2.321,145,1.506,148,2.66,150,1.537,164,3.253,218,0.824,221,1.671,261,2.494,262,1.601,269,4.105,311,5.459,312,5.459,313,2.716,314,5.459,322,4.105,323,3.604,324,4.105,325,4.105,327,6.345,333,1.022,334,6.807,336,2.093,337,3.121,344,6.345,522,2.296,759,2.093,801,1.412,1032,3.987,1169,3.827,1170,2.455,1175,2.609,1339,2.259,1437,3.604,1795,3.604,2287,3.827,2288,4.105,2289,4.478,2290,4.478,2291,4.478,2292,4.478,2293,4.478,2294,4.478,2295,4.478,2297,4.478,2298,4.478,2300,6.094,2303,7.634,2308,4.478,2311,4.478,2312,4.478,2313,3.419,2315,4.478,2316,4.478,2317,7.425,2318,7.425,2319,7.425,2320,5.955,2321,5.955,2322,4.478,2323,4.478,2324,5.74,2325,4.478,2326,5.955,2327,5.718,2328,4.478,2329,4.478,2330,4.478,2331,4.478,2332,4.478,2333,4.478,2334,4.478]],["title/modules/MetricModule.html",[230,1.316,248,3.279]],["body/modules/MetricModule.html",[3,0.107,4,0.107,5,0.095,21,0.008,30,0.107,31,0.006,32,0.006,33,0.269,53,0.238,119,2.368,148,2.473,218,1.145,230,2.364,232,2.907,248,5.889,259,2.98,464,3.513,623,4.528,624,4.748,695,5.006,1013,5.315,1399,3.87,1437,5.006,2335,7.006,2336,7.006,2337,7.006,2338,7.006,2339,7.006]],["title/classes/NoneTrustPolicy.html",[33,0.176,102,2.728]],["body/classes/NoneTrustPolicy.html",[3,0.057,4,0.057,5,0.05,9,0.454,12,0.862,13,0.155,14,0.753,16,1.401,17,0.698,19,0.613,20,0.148,21,0.008,23,1.51,25,1.544,26,1.544,27,1.258,28,2.431,30,0.126,31,0.004,32,0.004,33,0.317,34,2.213,35,0.846,36,2.213,37,3.508,38,1.713,39,5.342,40,5.568,41,2.678,42,3.996,43,5.01,44,3.071,45,2.406,46,2.66,47,0.243,51,1.994,53,0.233,54,3.358,55,1.925,56,2.721,57,4.139,58,3.759,59,1.925,60,2.898,61,3.049,62,3.119,63,2.457,64,2.642,65,0.987,66,1.624,67,1.837,68,3.358,69,3.358,70,1.343,71,3.118,72,2.406,73,3.759,74,1.688,75,2.131,76,1.925,77,2.998,78,2.131,79,1.583,80,3.312,81,2.304,82,2.234,83,2.131,84,2.642,85,1.988,86,3.358,87,2.92,88,2.304,89,2.304,90,2.304,91,2.304,92,2.304,93,2.304,94,3.508,95,2.406,96,4.549,97,1.713,98,1.988,99,3.963,100,2.213,101,2.406,102,3.226,103,3.508,104,3.226,105,2.406,106,1.988,107,1.925,108,1.988,109,2.213,110,2.406,111,2.131,112,1.798,113,1.812,114,2.056,115,2.497,116,2.497,117,1.206,118,1.026,119,1.258,120,2.304,121,1.801,122,1.925,123,1.507,124,1.373,125,1.624,126,2.304,127,4.044,128,3.118,129,1.314,130,1.991,131,2.304,132,1.867,133,2.304,134,2.213,135,2.998,136,1.867,137,4.044,138,2.497,139,2.406,140,1.713,141,1.507,142,1.988,143,2.304,144,2.406,145,1.111,146,2.304,147,3.508,148,1.915,149,2.304,150,1.951,151,2.406,152,1.544,153,1.624,154,2.002,155,2.642,156,2.406,157,2.406,158,2.406,159,2.406,160,1.988,161,2.056,162,1.925,163,1.343,164,1.507,165,2.721,166,1.812,167,2.056,168,2.304,169,1.667,170,1.925,171,2.406,172,3.226,173,2.056,174,2.213,175,2.213,2340,3.723]],["title/classes/NotificationRequestDto.html",[33,0.176,2341,3.481]],["body/classes/NotificationRequestDto.html",[3,0.103,4,0.103,5,0.092,13,0.281,14,1.121,19,0.613,20,0.321,21,0.007,30,0.103,31,0.006,32,0.006,33,0.31,35,1.536,47,0.527,49,1.543,53,0.233,55,3.497,59,3.497,63,2.629,65,1.793,780,4.019,795,6.003,799,6.003,1054,5.129,2341,6.123,2342,7.66,2343,8.629,2344,7.022,2345,6.762,2346,8.072,2347,6.762]],["title/controllers/OAuthController.html",[210,1.427,2348,3.481]],["body/controllers/OAuthController.html",[3,0.087,4,0.087,5,0.077,9,0.885,11,4.217,13,0.237,17,0.619,20,0.288,21,0.008,30,0.087,31,0.006,32,0.006,33,0.218,47,0.371,49,1.087,53,0.251,74,2.762,79,2.418,169,3.767,184,1.066,210,1.767,212,2.051,214,1.616,217,1.243,218,0.929,220,2.006,221,1.066,401,1.316,414,2.336,428,3.164,458,3.431,464,4.455,465,4.202,468,5.901,485,2.8,486,2.302,501,3.14,504,5.901,506,3.517,514,5.901,526,4.061,541,4.915,574,1.804,658,5.181,712,2.85,754,2.689,759,2.358,774,5.046,1339,2.546,2348,5.501,2349,5.046,2350,6.591,2351,7.985,2352,5.684,2353,6.009,2354,5.046,2355,7.07,2356,8.41,2357,5.684,2358,5.684,2359,7.251,2360,7.985,2361,4.061,2362,5.412,2363,5.046,2364,5.684,2365,5.684,2366,5.684]],["title/modules/OAuthModule.html",[230,1.316,2367,3.481]],["body/modules/OAuthModule.html",[3,0.096,4,0.096,5,0.085,21,0.008,30,0.117,31,0.006,32,0.006,33,0.241,53,0.259,212,2.784,218,1.026,230,2.396,232,2.604,233,2.969,234,3.147,235,3.147,236,2.888,237,3.952,238,3.952,243,4.864,254,3.869,255,3.147,256,3.147,259,3.282,268,4.262,278,3.884,333,1.271,637,6.279,2348,6.337,2362,6.464,2363,5.572,2367,7.123,2368,5.572,2369,6.276,2370,5.572,2371,5.572,2372,5.108,2373,6.276,2374,5.108,2375,5.572,2376,5.108]],["title/injectables/OAuthService.html",[801,0.966,2362,3.111]],["body/injectables/OAuthService.html",[3,0.06,4,0.06,5,0.053,11,1.972,12,1.308,13,0.164,14,0.784,17,0.893,19,0.714,20,0.326,21,0.008,23,0.844,28,3.234,30,0.06,31,0.004,32,0.004,33,0.151,47,0.558,53,0.221,74,1.756,79,1.672,98,3.015,106,2.1,111,2.251,112,0.876,117,1.274,118,1.557,122,2.92,130,2.054,152,2.342,182,1.223,184,1.537,192,2.541,214,1.473,217,1.793,218,0.643,221,1.354,261,2.634,262,1.248,333,1.612,397,1.914,401,1.899,414,2.329,439,2.342,458,1.518,465,3.125,486,2.292,491,3.827,502,3.491,514,4.595,521,1.557,522,2.747,528,2.809,530,2.983,531,2.665,534,1.518,535,2.013,536,2.665,542,5.191,543,5.994,562,3.491,568,2.598,569,2.541,574,1.792,584,3.494,600,3.2,601,2.809,602,2.665,658,5.463,754,1.86,759,3.172,789,6.038,801,1.188,802,1.518,811,2.172,812,3.578,825,2.1,842,2.033,915,1.914,959,2.809,1012,2.433,1032,4.545,1164,3.232,1173,2.251,1399,2.172,1443,3.649,1503,4.595,1548,2.665,1656,3.2,1784,3.491,2313,2.665,2324,2.809,2350,2.983,2353,5.159,2361,2.809,2362,3.827,2376,3.2,2377,3.491,2378,5.646,2379,6.606,2380,6.606,2381,5.646,2382,7.22,2383,5.646,2384,6.606,2385,5.646,2386,5.646,2387,3.932,2388,3.932,2389,3.932,2390,3.932,2391,3.932,2392,5.646,2393,3.932,2394,3.932,2395,5.646,2396,3.932,2397,3.932,2398,3.932,2399,5.013,2400,5.646,2401,3.932,2402,3.932,2403,3.491,2404,3.932,2405,2.983,2406,5.646,2407,3.932,2408,6.606,2409,3.932,2410,3.932,2411,5.646,2412,3.932,2413,5.013,2414,3.932,2415,5.646,2416,5.013,2417,4.034,2418,5.646,2419,3.932,2420,4.595,2421,3.491,2422,2.983,2423,3.932,2424,3.932,2425,3.932,2426,3.932,2427,3.932]],["title/classes/Oauth2AuthorizationServerResponse.html",[33,0.176,2428,3.279]],["body/classes/Oauth2AuthorizationServerResponse.html",[3,0.074,4,0.074,5,0.066,9,0.592,12,1.513,13,0.202,14,0.907,19,0.713,20,0.356,21,0.008,23,1.401,28,2.926,29,5.8,30,0.074,31,0.005,32,0.005,33,0.186,35,1.102,38,3.638,47,0.585,124,2.726,129,2.306,152,2.71,164,2.645,191,4.189,199,5.359,205,3.663,457,3.883,458,2.523,463,3.739,464,4.537,469,4.785,476,5.377,477,1.508,585,5.279,587,5.279,661,2.678,717,4.222,725,5.649,732,6.434,862,5.605,865,5.605,867,5.605,868,5.605,870,5.605,872,5.605,897,4.956,1295,5.847,1298,3,1472,5.649,2064,4.304,2194,4.668,2428,4.668,2429,8.032,2430,4.849,2431,4.849,2432,8.502,2433,4.849,2434,4.849,2435,3.678,2436,4.849,2437,4.849,2438,5.316,2439,6.533,2440,3.946]],["title/classes/OfferRequestDto.html",[33,0.176,1982,3.111]],["body/classes/OfferRequestDto.html",[3,0.073,4,0.073,5,0.065,9,0.96,12,1.109,13,0.199,14,1.092,16,1.72,17,0.96,19,0.669,20,0.355,21,0.008,30,0.099,31,0.005,32,0.005,33,0.282,35,1.088,41,2.479,44,3.696,47,0.575,49,1.619,53,0.227,56,3.248,59,2.476,61,2.709,62,3.101,63,2.237,65,1.27,82,2.497,112,1.753,114,3.578,121,1.822,128,4.346,130,2.634,136,3.248,138,2.981,187,4.121,196,2.561,204,2.973,220,1.69,403,2.145,413,2.203,422,3.35,440,3.578,474,4.629,477,2.014,564,2.803,754,2.265,780,2.846,788,4.745,790,4.251,945,4.543,1107,4.543,1108,4.629,1153,4.914,1158,4.745,1666,2.557,1982,4.391,1985,3.095,1991,4.745,1992,4.976,1993,3.897,2004,4.629,2013,5.967,2014,3.897,2441,7.049,2442,6.518,2443,4.789,2444,4.789,2445,4.789,2446,4.251,2447,4.789,2448,4.789,2449,5.751,2450,4.789,2451,4.789,2452,4.914,2453,4.789,2454,4.789,2455,4.789,2456,4.789,2457,3.897,2458,4.251,2459,4.251,2460,4.251]],["title/classes/OfferResponse.html",[33,0.176,1985,2.966]],["body/classes/OfferResponse.html",[3,0.085,4,0.085,5,0.076,9,0.874,12,1.291,13,0.232,14,1.098,16,1.566,19,0.683,20,0.332,21,0.008,30,0.109,31,0.006,32,0.006,33,0.304,35,1.267,41,2.315,44,3.452,47,0.517,53,0.241,56,3.591,59,2.883,61,2.919,62,3.259,63,2.182,65,1.478,82,2.273,112,1.596,114,3.08,121,1.568,128,4.065,130,2.46,136,2.796,138,2.565,187,3.968,196,2.204,204,2.9,220,1.968,413,2.565,422,2.883,440,3.08,474,3.984,477,1.734,564,2.858,754,2.637,780,3.314,788,3.603,945,3.45,1107,4.896,1108,5.117,1153,4.229,1158,3.603,1666,4.226,1982,3.779,1985,4.629,1991,4.629,1992,4.854,1993,4.537,2004,5.117,2013,5.433,2014,4.537,2441,6.439,2442,4.95,2449,4.95,2452,4.229,2457,4.537,2458,4.95,2459,4.95,2460,4.95,2461,5.576,2462,5.576]],["title/controllers/Oid4vciController.html",[210,1.427,2039,3.481]],["body/controllers/Oid4vciController.html",[3,0.071,4,0.071,5,0.063,9,0.57,12,1.993,13,0.195,17,0.79,20,0.324,21,0.008,30,0.071,31,0.005,32,0.005,33,0.179,41,2.385,47,0.473,49,1.386,51,1.448,53,0.262,55,2.417,74,1.981,82,2.023,107,2.417,119,2.154,123,3.547,184,1.46,201,1.764,207,5.18,210,2.254,212,1.686,214,1.42,217,1.782,218,0.764,219,2.892,220,1.649,221,1.46,333,0.947,360,5.28,401,1.679,433,3.339,464,4.086,485,3.248,486,2.023,491,4.319,501,2.581,519,3.02,523,1.941,564,3.168,712,2.343,717,4.118,739,3.02,742,2.675,743,2.675,744,2.417,745,4.914,746,3.545,747,3.02,748,3.545,754,2.211,757,3.545,759,1.939,924,2.892,977,2.343,1000,4.487,1001,3.339,1159,3.52,1173,2.675,1339,2.093,1357,3.943,1685,4.118,2035,2.892,2039,4.834,2043,3.339,2044,3.545,2341,5.907,2463,4.149,2464,4.673,2465,5.186,2466,4.673,2467,4.673,2468,4.673,2469,6.372,2470,4.673,2471,4.673,2472,4.673,2473,4.673,2474,4.673,2475,4.673,2476,4.149,2477,5.186,2478,4.673,2479,3.02,2480,4.673,2481,3.803,2482,4.673,2483,4.673,2484,4.149,2485,4.673,2486,4.149,2487,4.673,2488,4.673,2489,4.673,2490,4.673,2491,4.673,2492,4.673,2493,4.673,2494,4.673,2495,4.673,2496,4.673,2497,3.803,2498,4.673]],["title/controllers/Oid4vpController.html",[210,1.427,2499,3.481]],["body/controllers/Oid4vpController.html",[3,0.078,4,0.078,5,0.069,9,0.625,12,1.569,13,0.213,17,0.738,20,0.269,21,0.008,30,0.078,31,0.005,32,0.005,33,0.196,47,0.442,49,1.295,51,1.539,53,0.262,79,2.177,184,1.423,191,2.955,201,1.931,210,2.361,212,1.847,214,1.51,217,1.888,218,0.837,219,3.167,220,1.806,221,1.27,401,1.569,432,4.555,464,3.396,477,2.106,485,3.245,491,4.591,501,3.741,519,3.308,521,1.411,523,2.462,564,3.136,706,5.773,712,2.566,717,4.378,742,2.93,744,2.647,745,4.591,746,3.883,747,3.308,748,3.883,757,3.883,759,2.123,813,4.81,924,4.191,1157,3.741,1182,3.877,1339,2.292,1357,4.191,1499,3.883,1685,4.907,2035,3.167,2043,4.839,2044,3.883,2476,4.544,2477,5.512,2479,3.308,2481,4.165,2484,4.544,2486,6.013,2499,5.759,2500,4.544,2501,5.118,2502,5.512,2503,6.773,2504,6.74,2505,5.118,2506,5.118,2507,5.118,2508,5.145,2509,4.544,2510,5.118,2511,5.118,2512,4.544,2513,4.544,2514,5.118,2515,3.657,2516,5.118,2517,5.118,2518,5.118]],["title/modules/Oid4vpModule.html",[230,1.316,2034,2.966]],["body/modules/Oid4vpModule.html",[3,0.085,4,0.085,5,0.076,21,0.008,30,0.085,31,0.006,32,0.006,33,0.215,53,0.27,212,2.592,218,0.916,230,2.275,232,2.324,233,2.65,234,2.809,235,2.809,236,2.578,237,3.751,238,3.751,243,4.726,249,4.446,250,5.476,254,3.602,255,2.809,256,2.809,259,3.056,278,3.467,291,4.25,293,4.25,813,5.377,2034,6.184,2035,5.476,2036,5.26,2037,5.476,2040,4.869,2041,3.095,2043,5.133,2044,4.25,2045,4.003,2046,4.559,2499,6.016,2513,4.973,2519,4.973,2520,4.973,2521,5.602,2522,4.973,2523,5.602,2524,7.04,2525,4.643,2526,4.973,2527,5.602]],["title/injectables/Oid4vpService.html",[801,0.966,813,2.627]],["body/injectables/Oid4vpService.html",[3,0.04,4,0.04,5,0.036,11,2.091,12,1.768,13,0.11,16,0.576,17,0.641,19,0.563,20,0.234,21,0.008,23,0.565,25,1.093,30,0.04,31,0.003,32,0.003,33,0.101,44,2.569,47,0.384,53,0.248,74,1.995,79,1.774,118,2.156,119,1.75,121,0.741,123,1.066,140,1.212,141,2.384,145,0.786,148,0.93,153,1.82,162,2.157,182,0.819,184,1.104,185,2.678,191,2.8,201,0.994,205,2.096,206,1.362,209,1.18,214,0.93,217,1.403,218,0.431,221,0.782,261,2.366,262,0.836,273,1.63,313,3.002,333,1.807,337,3.644,361,2.581,364,1.82,374,2.157,401,1.581,403,2.637,414,2.234,428,3.12,432,3.53,463,1.508,469,1.362,477,1.831,485,1.611,486,1.869,498,2.827,521,1.15,522,2.259,523,2.259,534,1.999,535,1.794,544,2.827,556,2.304,564,2.867,568,1.212,574,2.648,584,3.204,590,2.338,597,3.253,600,2.144,601,1.882,602,1.785,607,1.321,659,1.882,663,2.827,664,3.394,672,1.455,706,4.207,739,2.696,740,1.785,744,1.362,749,3.585,750,1.702,754,1.246,764,1.63,781,1.882,788,1.702,801,0.878,802,1.017,812,2.978,813,2.387,835,1.566,842,1.362,857,2.581,859,4.725,880,1.508,915,2.03,924,2.581,973,1.455,977,1.321,998,4.425,999,2.144,1004,4.425,1005,2.144,1020,2.144,1040,2.304,1156,3.164,1158,2.696,1164,1.508,1175,1.362,1184,1.882,1219,3.644,1227,3.164,1337,2.98,1372,2.338,1400,2.338,1426,2.144,1442,2.144,1443,3.346,1451,1.882,1452,1.998,1454,3.164,1477,3.703,1482,4.467,1576,3.394,1577,1.998,1666,1.407,1708,2.338,1716,2.338,1985,1.702,2036,3.5,2037,4.425,2043,2.98,2045,1.882,2046,2.144,2074,3.971,2350,1.998,2399,2.338,2403,2.338,2420,2.144,2421,2.338,2422,1.998,2465,5.222,2479,3.346,2504,3.703,2508,5.175,2509,3.703,2512,2.338,2528,2.338,2529,4.171,2530,5.178,2531,4.425,2532,2.634,2533,4.171,2534,2.634,2535,2.696,2536,3.703,2537,3.394,2538,2.634,2539,4.467,2540,2.634,2541,2.634,2542,4.171,2543,2.144,2544,3.346,2545,2.634,2546,2.634,2547,2.634,2548,2.634,2549,4.868,2550,3.164,2551,3.394,2552,2.338,2553,4.171,2554,6.417,2555,5.888,2556,4.171,2557,5.178,2558,2.634,2559,2.581,2560,4.171,2561,6.417,2562,3.928,2563,2.634,2564,4.171,2565,2.634,2566,3.164,2567,2.634,2568,2.634,2569,2.144,2570,2.338,2571,2.634,2572,2.634,2573,2.634,2574,2.634,2575,6.417,2576,3.164,2577,2.634,2578,2.634,2579,2.634,2580,2.634,2581,2.634,2582,2.634,2583,2.634,2584,2.634,2585,2.634,2586,2.634,2587,4.171,2588,2.634,2589,2.634,2590,2.634,2591,2.634,2592,2.338,2593,2.338,2594,2.634,2595,2.144,2596,2.634,2597,2.634,2598,4.171,2599,2.634,2600,4.171,2601,2.634,2602,2.144,2603,2.144,2604,2.634,2605,2.634,2606,2.634,2607,2.634,2608,4.171,2609,4.171,2610,6.417,2611,2.634,2612,2.634,2613,2.634,2614,4.171,2615,2.634,2616,2.634,2617,4.596,2618,2.338,2619,2.634,2620,2.634,2621,4.171,2622,4.171,2623,3.703,2624,4.171,2625,2.634,2626,2.634,2627,2.634,2628,4.171,2629,2.634,2630,2.634,2631,4.171,2632,2.634,2633,5.178,2634,2.144,2635,2.634,2636,4.171,2637,2.634,2638,2.634,2639,4.171,2640,4.171,2641,2.634,2642,2.634,2643,2.634,2644,2.634,2645,2.634,2646,2.634,2647,2.634,2648,2.634]],["title/classes/ParResponseDto.html",[33,0.176,755,3.481]],["body/classes/ParResponseDto.html",[3,0.102,4,0.102,5,0.091,12,2.143,13,0.279,14,1.115,19,0.61,20,0.319,21,0.007,30,0.102,31,0.006,32,0.006,33,0.258,35,1.525,47,0.525,160,4.291,163,2.899,191,3.506,531,5.829,661,3.706,732,6.539,755,6.095,764,5.322,1444,7.133,1445,7.133,1666,4.761,2435,5.09,2440,5.461,2649,7.635]],["title/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.487,849,3.279]],["body/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.447,2,1.441,3,0.044,4,0.044,5,0.039,12,1.769,13,0.12,14,0.62,19,0.609,20,0.282,21,0.008,22,1.136,30,0.068,31,0.003,32,0.003,33,0.11,41,1.307,44,1.949,51,1.245,53,0.246,74,0.894,82,1.739,87,1.193,107,1.487,112,0.996,118,2.037,119,1.852,121,0.808,122,1.487,123,1.164,124,2.021,136,1.441,141,1.808,169,1.288,179,2.39,182,0.894,191,1.949,194,3.822,196,2.442,201,2.331,204,1.808,205,2.501,206,1.487,208,2.833,209,2.453,218,0.47,221,1.328,261,1.813,262,0.912,313,2.218,333,1.83,336,1.193,360,1.709,364,3.09,365,4.155,367,3.026,374,3.194,413,1.323,414,2.072,424,2.845,426,2.655,427,4.215,428,2.39,431,2.887,432,1.487,439,1.193,440,1.588,464,1.441,465,1.36,469,1.487,477,2.298,485,2.583,486,0.912,521,0.793,522,2.157,534,2.95,535,2.443,541,3.027,542,1.779,556,1.588,564,2.93,574,2.726,577,1.948,584,1.779,585,2.054,587,2.054,589,2.181,592,2.181,597,2.467,663,3.027,681,1.948,718,2.181,722,3.822,725,2.054,728,3.191,729,3.191,739,3.54,740,1.948,743,1.645,744,1.487,749,2.747,750,1.858,751,1.709,753,2.181,754,1.36,764,3.39,781,4.413,785,2.054,801,0.94,803,2.181,806,2.339,808,2.339,810,2.339,812,2.39,813,3.135,814,3.256,817,2.181,819,5.444,820,2.339,822,5.027,827,2.339,831,2.339,835,3.976,836,5.763,837,5.027,838,2.842,839,2.339,840,5.027,841,2.054,842,1.487,843,2.339,844,2.339,845,2.339,846,2.181,847,2.054,848,2.339,849,3.914,850,5.444,851,3.191,852,2.339,853,2.339,854,3.635,855,2.339,856,3.635,857,2.764,858,5.027,859,3.822,860,2.339,861,2.339,862,2.181,863,2.339,864,2.339,865,2.181,866,1.858,867,2.181,868,2.181,869,2.339,870,2.181,871,2.339,872,2.181,873,2.339,874,2.339,875,3.635,876,2.339,877,2.181,878,2.339,879,2.339,880,4.23,881,2.339,882,2.339,883,2.339,884,2.339,885,2.339,886,4.458,887,4.155,888,2.339,889,4.686,890,2.339,891,2.339,892,2.339,893,2.339,894,2.339,895,5.027,896,3.635,897,5.606,898,2.339,899,3.635,900,3.635,901,3.635,902,3.635,903,3.635,904,2.339,905,2.339,906,2.339,907,2.339,908,2.339,909,2.339,910,2.339,911,3.635,912,2.339,913,2.339,914,1.709,915,1.399,916,2.339,917,2.181,918,1.858,919,2.339,920,1.948,921,2.339,922,2.339,923,2.181,924,1.779,925,3.635,926,2.339,927,4.458,928,2.339,929,2.339,930,2.339,931,2.339,932,2.339,933,2.181,934,3.635,935,2.339,936,3.635,937,2.764,938,2.339,939,4.458,940,2.339,941,2.339,942,2.339,943,2.339,944,2.339,945,2.764,946,2.181,947,1.645,948,2.339,949,1.779,950,2.339,951,2.339,952,2.339,953,2.339,954,2.339,955,2.339,956,2.339,957,2.181,958,2.054,959,2.054,960,2.054,961,2.339,962,2.339,963,2.339,964,2.181,965,2.339,966,2.339,967,2.339]],["title/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.487,851,3.279]],["body/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.439,2,1.431,3,0.043,4,0.043,5,0.039,12,1.765,13,0.119,14,0.617,17,0.484,19,0.629,20,0.293,21,0.008,22,1.128,30,0.068,31,0.003,32,0.003,33,0.11,41,1.3,44,1.938,51,1.239,53,0.245,74,0.887,82,1.731,87,1.184,107,1.476,112,0.99,118,2.032,119,1.843,121,0.802,122,1.476,123,1.155,124,2.011,136,1.431,141,1.798,169,1.278,179,2.379,182,0.887,191,1.938,194,3.807,196,2.432,201,2.322,204,1.798,205,2.491,206,1.476,208,2.82,209,2.442,218,0.466,221,1.324,261,1.804,262,0.906,313,2.207,333,1.828,336,1.184,360,1.696,364,3.08,365,4.136,367,3.012,374,3.182,413,1.313,414,2.066,424,2.835,426,2.64,427,4.013,428,2.379,431,2.87,432,1.476,439,1.184,440,1.576,464,1.431,465,1.35,469,1.476,477,2.292,485,2.574,486,0.906,521,0.787,522,2.151,534,2.943,535,2.438,541,3.01,542,1.766,556,1.576,564,2.927,574,2.722,577,1.934,584,1.766,585,2.039,587,2.039,589,2.165,592,2.165,597,2.453,663,3.01,681,1.934,718,2.165,722,3.807,725,2.039,728,3.173,729,3.173,739,3.524,740,1.934,743,1.633,744,1.476,749,2.734,750,1.844,751,1.696,753,2.165,754,1.35,764,3.374,781,4.396,785,2.039,801,0.935,803,2.165,806,2.322,808,2.322,810,2.322,812,2.379,813,3.121,814,3.241,817,2.165,819,5.425,820,2.322,822,5.007,827,2.322,831,2.322,835,3.962,836,5.007,837,5.007,838,2.831,839,2.322,840,5.745,841,2.039,842,1.476,843,2.322,844,2.322,845,2.322,846,2.165,847,2.039,848,2.322,849,3.173,850,5.425,851,3.895,852,5.007,853,5.007,854,3.614,855,2.322,856,3.614,857,2.748,858,5.007,859,3.807,860,2.322,861,2.322,862,2.165,863,2.322,864,2.322,865,2.165,866,1.844,867,2.165,868,2.165,869,2.322,870,2.165,871,2.322,872,2.165,873,2.322,874,2.322,875,3.614,876,2.322,877,2.165,878,2.322,879,2.322,880,4.218,881,2.322,882,2.322,883,2.322,884,2.322,885,2.322,886,4.437,887,4.136,888,2.322,889,4.667,890,2.322,891,2.322,892,2.322,893,2.322,894,2.322,895,5.007,896,3.614,897,5.591,898,2.322,899,3.614,900,3.614,901,3.614,902,3.614,903,3.614,904,2.322,905,2.322,906,2.322,907,2.322,908,2.322,909,2.322,910,2.322,911,3.614,912,2.322,913,2.322,914,1.696,915,1.389,916,2.322,917,2.165,918,1.844,919,2.322,920,1.934,921,2.322,922,2.322,923,2.165,924,1.766,925,3.614,926,2.322,927,4.437,928,2.322,929,2.322,930,2.322,931,2.322,932,2.322,933,2.165,934,3.614,935,2.322,936,3.614,937,2.748,938,2.322,939,4.437,940,2.322,941,2.322,942,2.322,943,2.322,944,2.322,945,2.748,946,2.165,947,1.633,948,2.322,949,1.766,950,2.322,951,2.322,952,2.322,953,2.322,954,2.322,955,2.322,956,2.322,957,2.165,958,2.039,959,2.039,960,2.039,961,2.322,962,2.322,963,2.322,964,2.165,965,2.322,966,2.322,967,2.322]],["title/classes/PolicyCredential.html",[33,0.176,104,2.728]],["body/classes/PolicyCredential.html",[3,0.056,4,0.056,5,0.05,12,0.851,13,0.153,14,0.746,16,1.39,17,0.693,19,0.638,20,0.253,21,0.008,23,1.501,25,2.638,26,1.525,27,1.242,28,2.408,30,0.125,31,0.004,32,0.004,33,0.316,34,2.185,35,0.835,36,2.185,37,3.475,38,1.691,39,5.192,40,5.417,41,2.66,42,3.736,43,4.774,44,3.053,45,2.376,47,0.415,49,1.215,51,1.989,53,0.232,54,3.327,55,1.901,56,2.696,57,4.109,58,3.736,59,1.901,60,2.872,61,3.1,62,3.108,63,2.56,64,2.617,65,0.974,66,1.604,67,1.824,68,3.327,69,3.327,70,1.326,71,3.095,72,2.376,73,3.736,74,1.672,75,2.104,76,1.901,77,2.97,78,2.104,79,1.563,80,3.288,81,2.275,82,2.221,83,2.104,84,2.617,85,1.963,86,3.327,87,2.638,88,2.275,89,2.275,90,2.275,91,2.275,92,2.275,93,2.275,94,3.475,95,2.376,96,4.522,97,1.691,98,1.963,99,3.327,100,2.185,101,2.376,102,2.185,103,2.376,104,3.779,105,4.109,106,3.396,107,1.901,108,1.963,109,2.185,110,2.376,111,2.104,112,1.791,113,1.789,114,2.03,115,2.474,116,2.474,117,1.191,118,1.013,119,1.242,120,2.275,121,1.788,122,1.901,123,1.488,124,1.356,125,1.604,126,2.275,127,4.028,128,3.095,129,1.297,130,1.977,131,2.275,132,1.843,133,2.275,134,2.185,135,2.97,136,1.843,137,4.028,138,2.474,139,2.376,140,1.691,141,1.488,142,1.963,143,2.275,144,2.376,145,1.097,146,2.275,147,3.475,148,1.898,149,2.275,150,1.937,151,2.376,152,1.525,153,1.604,154,1.984,155,2.617,156,2.376,157,2.376,158,2.376,159,2.376,160,1.963,161,2.03,162,1.901,163,1.326,164,1.488,165,2.696,166,1.789,167,2.03,168,2.275,169,1.646,170,1.901,171,2.376,172,3.196,173,2.03,174,2.185,175,2.185,2650,3.676,2651,3.676,2652,3.676]],["title/classes/PresentationAttachment.html",[33,0.176,2653,3.481]],["body/classes/PresentationAttachment.html",[3,0.072,4,0.072,5,0.064,7,2.303,9,0.89,12,2.035,13,0.197,14,0.892,16,1.405,17,0.795,19,0.656,20,0.29,21,0.008,25,3.027,26,1.962,27,1.599,30,0.098,31,0.005,32,0.005,33,0.28,35,1.075,47,0.476,49,1.395,51,1.996,53,0.237,56,3.222,58,4.18,60,3.431,61,2.887,62,3.185,63,2.571,64,3.127,65,1.254,66,2.064,67,2.093,70,1.707,97,2.176,107,2.446,112,1.432,115,3.357,116,2.956,117,1.533,118,1.304,119,1.599,127,3.924,130,1.471,137,3.924,150,1.441,160,2.526,161,2.613,162,3.322,163,1.707,196,2.54,204,2.601,205,1.915,220,1.669,397,2.303,413,2.176,424,3.103,477,1.471,670,5.017,671,2.613,672,4.03,674,3.206,709,3.057,741,4.874,754,2.238,775,3.38,920,3.206,937,2.927,949,2.927,971,2.613,972,3.057,973,3.549,974,4.354,976,3.819,977,2.372,985,4.354,987,3.057,988,3.057,1157,2.613,1357,2.927,1859,3.588,1878,5.229,2535,3.057,2559,2.927,2562,3.588,2566,3.588,2653,5.535,2654,6.369,2655,6.948,2656,5.229,2657,6.477,2658,4.73,2659,4.73,2660,6.948,2661,4.73,2662,4.73,2663,4.354,2664,4.199,2665,4.199,2666,4.199,2667,4.199,2668,5.704,2669,3.38]],["title/entities/PresentationConfig.html",[67,1.316,2559,2.84]],["body/entities/PresentationConfig.html",[3,0.06,4,0.06,5,0.054,7,2.76,9,0.973,12,2.116,13,0.165,14,0.787,16,1.676,17,0.915,19,0.638,20,0.345,21,0.008,25,1.641,26,2.352,27,1.916,30,0.086,31,0.004,32,0.004,33,0.254,47,0.567,49,1.66,51,1.944,53,0.221,56,2.843,58,3.866,60,3.028,61,2.671,62,3.01,63,2.335,64,2.76,65,1.048,66,1.725,67,2.076,70,1.427,97,1.819,107,2.932,112,1.614,115,3.049,116,3.331,117,1.837,118,1.827,119,1.337,127,3.63,130,1.763,137,4.213,150,1.727,160,3.028,161,2.184,162,3.963,163,2.045,196,3.029,204,2.683,205,2.295,220,1.396,397,1.925,413,1.819,424,3.392,477,1.763,670,5.277,671,3.132,672,2.184,674,3.842,709,3.664,741,5.027,754,1.871,775,2.825,920,3.842,937,3.508,949,2.447,968,1.925,971,3.661,972,4.283,973,3.999,974,3.842,976,4.303,977,2.843,978,3.37,985,3.842,987,3.664,988,3.664,1119,2.556,1122,3.51,1137,3.51,1157,3.132,1273,3.218,1282,3.218,1357,3.508,1859,3,1861,3.51,1875,3.51,1878,4.614,2535,3.664,2559,3.508,2562,5.027,2566,5.027,2653,5.027,2654,7.151,2655,7.08,2656,3.218,2657,3.51,2660,5.883,2663,4.492,2664,3.51,2665,5.033,2666,5.033,2667,5.033,2668,5.883,2669,4.051,2670,3.954,2671,3.954,2672,3.954,2673,3.954,2674,3.954,2675,3.954,2676,3.954,2677,3.954,2678,3.954,2679,3.954,2680,3.954,2681,3.954,2682,3.954,2683,3.954,2684,3.954]],["title/classes/PresentationDuringIssuanceConfig.html",[33,0.176,405,2.966]],["body/classes/PresentationDuringIssuanceConfig.html",[3,0.058,4,0.058,5,0.052,9,0.794,12,1.282,13,0.159,14,0.768,17,0.417,19,0.599,20,0.351,21,0.008,30,0.115,31,0.004,32,0.004,33,0.312,35,0.869,41,1.903,47,0.25,49,0.731,53,0.188,61,2.042,62,2.69,63,2.172,64,2.694,65,1.467,82,2.064,87,3.455,97,1.76,112,1.856,121,2.57,123,3.062,148,1.953,150,2.172,167,3.057,179,3.916,184,0.717,186,3.057,189,1.862,190,2.273,196,2.188,201,1.443,204,2.633,205,2.886,209,3.859,221,1.561,333,1.121,338,2.189,364,4.008,368,2.913,388,3.751,389,3.577,390,2.472,391,2.901,392,2.472,393,2.901,394,1.713,395,4.198,397,1.862,398,2.901,399,4.934,402,2.901,403,3.193,404,4.889,405,5.096,406,5.641,407,2.733,408,2.733,409,2.592,411,4.198,412,4.198,413,1.76,414,1.119,415,3.954,416,4.198,417,3.866,418,5.981,419,4.198,420,3.577,421,5.093,422,2.862,423,2.901,424,3.354,425,2.901,426,4.949,427,4.175,428,3.943,429,3.954,430,2.901,431,2.472,432,3.912,433,3.954,434,4.025,435,2.901,436,2.547,437,2.733,438,3.577,439,2.296,440,3.593,441,2.901,442,2.901,443,3.057,444,2.901,445,2.472,446,2.901,447,2.592,448,2.733,449,2.113,2685,3.825]],["title/controllers/PresentationManagementController.html",[210,1.427,2686,3.481]],["body/controllers/PresentationManagementController.html",[3,0.058,4,0.058,5,0.052,9,0.467,12,1.929,13,0.159,16,1.654,17,0.777,19,0.542,20,0.351,21,0.008,25,1.587,30,0.058,31,0.004,32,0.004,33,0.147,44,1.669,47,0.465,49,1.363,53,0.252,112,1.758,119,1.293,121,2.004,129,1.35,154,2.042,155,3.166,164,2.633,165,2.775,182,1.721,184,1.337,186,3.057,187,1.918,196,1.512,206,1.978,210,1.189,212,1.38,214,1.234,217,1.856,218,0.625,220,1.35,221,1.219,333,1.121,368,3.988,371,4.408,374,3.912,401,1.651,414,1.903,422,1.978,424,3.609,427,3.261,436,2.547,439,1.587,458,2.753,474,3.954,477,2.639,485,3.14,501,3.593,503,4.198,505,4.504,506,2.367,517,4.464,521,1.054,522,1.686,523,2.304,526,3.954,574,1.757,615,2.113,712,1.918,742,2.189,743,2.189,754,2.618,759,2.296,767,3.112,788,3.577,813,3.723,988,3.577,1040,3.057,1171,1.809,1173,3.168,1181,3.425,1197,3.954,1198,3.168,1285,2.472,1323,2.733,1329,2.592,1330,2.592,1331,2.592,1334,3.751,1335,3.751,1343,2.733,1548,2.592,1666,2.956,1737,2.592,1897,4.934,1980,5.774,1981,3.395,1983,3.395,1984,4.913,1985,4.204,1986,3.395,1990,3.112,1991,4.204,1992,2.592,1995,3.395,1996,3.395,1997,4.913,1998,2.901,1999,6.328,2000,3.395,2001,3.395,2002,5.293,2003,4.913,2004,3.954,2005,3.395,2021,3.395,2022,3.395,2023,3.395,2024,3.395,2025,3.395,2026,3.395,2027,3.395,2508,3.751,2531,4.025,2543,3.112,2559,4.411,2686,4.198,2687,3.395,2688,5.535,2689,5.774,2690,3.825,2691,3.825,2692,3.825,2693,3.825,2694,5.981,2695,3.825,2696,3.825,2697,3.825,2698,3.825,2699,3.825,2700,3.825,2701,3.825,2702,3.112,2703,3.395,2704,3.825,2705,3.825,2706,3.825,2707,3.825,2708,3.825,2709,3.825,2710,3.825,2711,3.825,2712,3.825,2713,3.825,2714,3.825,2715,3.825,2716,3.825,2717,3.825,2718,3.825]],["title/classes/PresentationRequest.html",[33,0.176,2694,3.481]],["body/classes/PresentationRequest.html",[3,0.084,4,0.084,5,0.075,9,0.673,12,1.993,13,0.229,14,0.987,16,1.555,17,0.775,19,0.54,20,0.361,21,0.008,27,2.404,30,0.108,31,0.006,32,0.006,33,0.273,35,1.253,47,0.514,49,1.505,53,0.206,59,2.851,61,2.623,62,2.683,63,2.398,65,1.462,84,3.461,112,1.964,150,2.166,187,4.17,196,3.544,204,3.187,208,3.677,413,2.537,424,3.661,427,2.765,477,2.788,662,3.798,671,3.928,780,3.277,788,5.087,797,4.487,1157,3.928,1504,5.081,1666,4.204,1991,5.087,1992,5.335,2002,4.487,2004,3.94,2446,4.895,2452,4.183,2457,5.787,2508,5.335,2694,5.394,2719,6.308,2720,4.895,2721,5.514,2722,7.111,2723,5.787]],["title/interfaces/PresentationRequestOptions.html",[0,1.487,2539,3.481]],["body/interfaces/PresentationRequestOptions.html",[0,2.11,2,3.264,3,0.099,4,0.099,5,0.088,9,0.794,12,1.966,13,0.271,14,1.095,17,1.022,19,0.645,20,0.314,21,0.008,27,2.667,30,0.099,31,0.006,32,0.006,53,0.188,112,1.759,196,3.632,204,3.573,413,2.995,477,2.453,564,3.04,662,4.213,1157,4.358,2539,6.694,2719,4.938,2724,5.779,2725,7.004]],["title/modules/PresentationsModule.html",[230,1.316,2525,2.966]],["body/modules/PresentationsModule.html",[3,0.093,4,0.093,5,0.083,21,0.008,30,0.093,31,0.006,32,0.006,33,0.235,53,0.268,212,2.738,218,0.999,230,2.368,232,2.536,233,2.891,234,3.065,235,3.065,236,2.812,237,3.905,238,3.905,254,3.806,255,3.065,256,3.065,259,3.228,620,3.633,621,2.599,1285,3.95,2034,4.905,2040,5.144,2041,3.376,2524,6.738,2525,6.042,2531,5.882,2559,3.782,2686,6.262,2702,4.974,2703,5.426,2726,5.426,2727,5.426,2728,5.426,2729,5.426,2730,6.465,2731,6.112,2732,5.426,2733,6.112,2734,6.112,2735,6.112]],["title/injectables/PresentationsService.html",[801,0.966,2531,2.84]],["body/injectables/PresentationsService.html",[3,0.03,4,0.03,5,0.074,7,2.882,9,0.805,12,0.754,13,0.081,14,0.452,16,2.008,17,0.685,19,0.68,20,0.289,21,0.008,22,1.661,23,0.417,30,0.03,31,0.003,32,0.003,33,0.161,38,1.499,44,0.849,47,0.504,51,1.498,53,0.247,65,0.516,67,1.698,79,0.827,112,1.814,117,2.663,118,2.305,121,1.539,129,0.686,130,1.307,140,3.703,141,3.175,142,3.357,145,0.972,148,1.483,149,2.016,154,1.813,166,0.947,173,1.799,182,1.528,184,1.327,185,1.685,189,0.947,214,0.726,217,1.779,218,0.318,221,1.526,259,2.091,261,2.08,262,0.617,270,1.204,271,1.257,273,1.204,274,1.936,304,1.476,313,1.319,333,1.706,374,2.542,394,0.871,397,1.586,401,1.639,403,1.459,409,1.318,414,1.929,420,1.257,424,3.556,436,3.423,477,1.013,480,1.476,486,2.409,521,1.355,522,2.353,523,2.547,534,1.623,535,2.088,556,1.799,568,3.153,574,2.093,597,1.799,621,0.827,659,3.512,664,2.651,670,1.936,672,3.642,686,3.731,717,2.105,768,4.817,801,0.686,802,0.751,835,1.156,838,1.934,866,4.063,880,1.864,924,2.016,937,3.042,949,3.042,968,1.586,971,1.074,991,3.512,992,1.113,996,2.968,997,1.318,1032,1.156,1045,1.318,1047,2.208,1049,1.39,1054,1.936,1170,2.393,1171,2.325,1173,3.774,1175,2.173,1176,3.512,1181,2.016,1182,1.864,1183,5.853,1184,1.39,1188,3.042,1189,2.208,1193,1.39,1196,3.512,1197,1.39,1198,1.113,1199,2.471,1200,1.583,1201,1.583,1202,1.583,1203,1.476,1206,1.583,1207,1.583,1208,2.651,1210,3.42,1211,1.583,1212,1.583,1213,2.651,1214,1.583,1215,1.583,1216,1.583,1217,1.583,1218,3.42,1219,2.016,1220,1.583,1221,1.583,1222,1.318,1223,1.583,1224,4.453,1225,2.651,1226,1.583,1227,1.476,1228,1.583,1229,1.583,1230,1.583,1231,1.583,1234,2.651,1235,2.651,1236,1.583,1238,1.583,1239,1.583,1240,1.583,1244,1.39,1245,1.583,1246,1.39,1247,1.583,1250,1.257,1252,1.583,1253,1.583,1254,1.583,1255,1.583,1256,1.583,1258,1.39,1259,1.583,1285,1.257,1337,2.327,1357,2.016,1388,3.731,1390,1.476,1391,1.476,1394,6.084,1395,1.476,1420,1.318,1430,2.892,1447,3.731,1486,5.515,1488,1.318,1490,6.055,1566,2.327,1570,1.39,1574,1.583,1575,0.975,1666,3.161,1685,3.177,1795,2.327,1801,1.583,1913,4.817,1937,1.727,2041,1.074,2204,4.896,2242,1.257,2497,2.651,2502,2.651,2515,4.492,2531,3.042,2535,2.105,2559,4.697,2566,1.476,2656,3.42,2669,4.229,2689,2.892,2702,1.583,2736,1.727,2737,3.257,2738,6.593,2739,6.287,2740,4.202,2741,4.915,2742,3.257,2743,3.257,2744,4.202,2745,3.257,2746,1.583,2747,4.796,2748,4.915,2749,3.257,2750,3.257,2751,2.892,2752,3.257,2753,3.257,2754,1.945,2755,3.257,2756,3.257,2757,1.945,2758,1.945,2759,3.257,2760,1.945,2761,1.945,2762,4.915,2763,4.915,2764,1.945,2765,1.945,2766,1.945,2767,5.472,2768,4.915,2769,1.945,2770,3.257,2771,3.257,2772,3.257,2773,4.915,2774,1.945,2775,3.257,2776,1.945,2777,4.202,2778,1.945,2779,3.257,2780,1.945,2781,3.257,2782,1.945,2783,3.257,2784,1.476,2785,1.318,2786,1.945,2787,1.945,2788,1.945,2789,3.257,2790,1.945,2791,1.945,2792,1.945,2793,3.257,2794,1.945,2795,1.945,2796,1.945,2797,1.945,2798,1.583,2799,1.727,2800,1.945,2801,1.945,2802,1.945,2803,1.945,2804,1.945,2805,1.945,2806,1.945,2807,1.945,2808,1.945,2809,1.945,2810,1.945,2811,1.945,2812,1.945,2813,1.945,2814,3.257,2815,1.945,2816,1.945,2817,1.945,2818,1.945,2819,1.945,2820,1.945,2821,1.945,2822,1.945,2823,4.202,2824,1.945,2825,1.945,2826,1.945,2827,1.945,2828,3.257,2829,1.945]],["title/entities/RegistrarEntity.html",[67,1.316,2830,3.279]],["body/entities/RegistrarEntity.html",[3,0.101,4,0.101,5,0.09,13,0.277,14,1.109,19,0.701,20,0.341,21,0.007,30,0.101,31,0.006,32,0.006,33,0.255,47,0.559,49,1.637,51,1.815,53,0.192,66,2.9,67,2.291,70,2.398,115,3.941,116,3.676,118,2.361,968,3.235,978,5.091,2830,5.708,2831,5.9,2832,7.604,2833,7.604,2834,6.646,2835,6.646,2836,6.646]],["title/modules/RegistrarModule.html",[230,1.316,249,2.84]],["body/modules/RegistrarModule.html",[3,0.085,4,0.085,5,0.076,9,0.679,21,0.008,30,0.109,31,0.006,32,0.006,33,0.214,53,0.26,85,2.973,145,2.136,165,2.791,166,2.71,201,2.101,218,0.91,230,2.394,232,3.28,233,2.633,234,2.791,235,2.791,236,2.561,237,3.74,238,3.74,243,4.718,249,5.836,254,3.588,255,2.791,256,2.791,259,3.549,268,3.952,278,3.445,290,4.223,309,4.53,333,1.127,466,5.823,620,3.309,621,2.368,1004,5.86,1170,3.483,1525,4.849,1637,5.649,2313,3.773,2405,4.223,2525,5.71,2535,4.624,2830,3.977,2837,4.942,2838,5.567,2839,4.942,2840,4.942,2841,4.53,2842,6.434,2843,5.567,2844,4.942,2845,5.567,2846,4.942,2847,4.942,2848,4.942,2849,7.019,2850,7.019,2851,4.53,2852,4.53,2853,5.567]],["title/injectables/RegistrarService.html",[801,0.966,1004,2.84]],["body/injectables/RegistrarService.html",[3,0.035,4,0.035,5,0.031,7,4.137,9,0.574,11,4.294,13,0.095,14,0.516,16,1.306,17,0.697,19,0.67,20,0.28,21,0.008,24,1.414,28,1.023,30,0.035,31,0.003,32,0.004,33,0.088,44,1.623,47,0.519,51,0.845,53,0.221,70,0.824,74,1.157,108,2.897,112,1.331,117,1.206,118,2.19,119,1.834,121,0.642,129,0.806,145,1.62,146,1.414,148,1.313,150,1.133,153,2.053,163,0.824,169,1.666,178,2.822,184,1.566,209,1.023,214,0.829,217,1.737,218,0.373,221,1.49,261,2.408,262,0.725,274,2.797,313,1.506,333,1.582,336,1.543,338,3.664,360,2.211,364,1.623,374,1.924,392,2.404,394,1.023,401,1.483,414,2.39,421,1.632,436,1.712,439,1.952,458,2.717,465,4.104,469,1.181,476,3.357,477,0.71,485,1.817,486,1.722,489,2.521,496,3.028,521,1.496,522,2.589,523,1.819,534,1.817,535,2.379,538,2.822,542,2.302,543,2.658,574,2.479,621,0.972,641,2.658,692,1.548,717,2.404,741,1.733,754,1.081,801,0.783,802,0.882,811,1.262,812,3.264,826,1.262,842,1.181,917,1.733,918,1.477,937,2.302,970,4.816,973,2.055,977,3.21,991,4.574,992,1.308,996,2.72,1004,3.962,1024,3.028,1032,1.358,1113,3.677,1170,1.811,1173,1.308,1196,2.658,1197,4.574,1198,3.664,1219,1.414,1242,2.822,1337,2.658,1399,2.996,1437,3.876,1438,1.859,1443,1.477,1454,2.822,1471,1.859,1488,1.548,1491,1.477,1499,2.822,1525,2.521,1541,1.859,1545,2.028,1614,2.028,1685,2.404,1690,3.028,1702,3.028,1710,4.178,1844,3.303,1913,5.21,2017,2.028,2061,2.028,2133,2.028,2240,3.303,2242,3.506,2271,2.028,2413,4.178,2497,1.859,2502,3.028,2508,3.677,2515,4.574,2531,4.629,2535,2.404,2562,4.115,2592,2.028,2634,1.859,2663,3.677,2669,5.471,2723,4.415,2830,1.632,2832,3.303,2833,5.992,2842,7.176,2844,2.028,2851,1.859,2852,1.859,2854,2.028,2855,3.72,2856,3.303,2857,6.402,2858,8.063,2859,3.72,2860,6.75,2861,4.706,2862,4.706,2863,3.72,2864,3.72,2865,4.415,2866,5.425,2867,4.706,2868,3.72,2869,3.028,2870,3.72,2871,2.285,2872,2.285,2873,6.402,2874,2.285,2875,2.285,2876,3.72,2877,2.285,2878,3.72,2879,7.81,2880,3.72,2881,2.285,2882,2.285,2883,2.285,2884,6.402,2885,2.302,2886,3.72,2887,3.72,2888,2.285,2889,2.285,2890,2.285,2891,3.72,2892,3.72,2893,3.72,2894,2.285,2895,5.425,2896,2.285,2897,2.028,2898,2.285,2899,2.285,2900,3.72,2901,3.72,2902,3.72,2903,3.72,2904,3.72,2905,2.285,2906,2.285,2907,3.028,2908,2.285,2909,2.285,2910,2.285,2911,2.285,2912,2.285,2913,2.285,2914,2.285,2915,2.285,2916,6.402,2917,2.285,2918,2.285,2919,2.285,2920,3.72,2921,3.72,2922,3.72,2923,2.028,2924,2.285,2925,2.285,2926,2.285,2927,2.285,2928,2.285,2929,2.285,2930,2.285,2931,2.285,2932,2.285,2933,2.285,2934,1.859,2935,2.285,2936,2.285,2937,2.285,2938,2.285,2939,2.285,2940,2.285,2941,2.285,2942,5.425,2943,2.285,2944,2.285,2945,2.285,2946,2.285,2947,2.285,2948,2.285,2949,2.285,2950,2.285,2951,2.285,2952,2.285,2953,2.285,2954,4.706,2955,5.425,2956,2.285,2957,3.72,2958,2.285,2959,2.285,2960,3.72,2961,2.285,2962,2.285,2963,2.285,2964,2.285,2965,2.028,2966,3.72,2967,2.285,2968,2.285,2969,2.285,2970,2.285,2971,2.285,2972,2.285,2973,2.285,2974,3.72,2975,2.285,2976,2.285,2977,2.285,2978,2.285,2979,2.285,2980,2.285]],["title/classes/RegistrationCertificateRequest.html",[33,0.176,2663,3.111]],["body/classes/RegistrationCertificateRequest.html",[3,0.096,4,0.096,5,0.086,7,4.253,9,0.771,12,1.795,13,0.263,14,1.076,16,1.833,17,0.844,19,0.589,20,0.308,21,0.008,27,2.62,30,0.096,31,0.006,32,0.006,33,0.298,35,1.436,47,0.506,49,1.481,53,0.224,61,3.092,63,2.553,65,1.676,132,3.886,485,3.462,662,4.139,671,4.281,709,5.009,780,3.757,791,5.145,2535,5.009,2663,5.921,2669,6.242,2981,7.44,2982,8.381,2983,6.322,2984,6.322]],["title/modules/ResolverModule.html",[230,1.316,2730,3.279]],["body/modules/ResolverModule.html",[3,0.101,4,0.101,5,0.09,21,0.007,30,0.101,31,0.006,32,0.006,33,0.256,53,0.248,218,1.088,230,2.459,232,2.763,233,3.15,234,3.339,235,3.339,236,3.064,237,4.055,238,4.055,254,4.01,255,3.339,256,3.339,259,2.832,2040,5.421,2041,3.678,2730,6.673,2747,6.512,2985,5.911,2986,5.911,2987,5.911,2988,6.659,2989,6.659]],["title/injectables/ResolverService.html",[801,0.966,2747,3.111]],["body/injectables/ResolverService.html",[3,0.076,4,0.076,5,0.067,7,2.421,9,0.607,13,0.207,17,0.724,20,0.264,21,0.008,22,3.158,23,1.837,25,2.063,30,0.076,31,0.005,32,0.005,33,0.191,47,0.434,53,0.248,99,3.077,119,1.681,124,3.16,125,2.899,141,2.69,142,2.656,145,1.984,184,1.246,185,4.522,214,1.481,217,1.453,218,0.813,221,1.403,333,1.618,336,2.757,367,3.67,397,2.421,401,1.539,407,3.553,414,2.19,477,1.546,486,2.109,521,1.371,523,2.024,534,3.084,535,2.536,552,4.047,568,3.057,574,1.578,607,3.332,740,3.37,801,1.398,802,1.92,835,2.956,838,4.088,880,3.803,1242,5.04,1339,2.227,1451,4.747,1566,5.707,1575,2.493,1616,5.899,2028,3.553,2041,2.747,2204,6.119,2242,4.295,2277,5.899,2746,4.047,2747,4.503,2751,5.899,2784,5.04,2785,3.37,2965,4.414,2990,4.414,2991,6.645,2992,6.645,2993,4.973,2994,6.645,2995,4.973,2996,5.899,2997,6.645,2998,4.973,2999,4.973,3000,4.414,3001,4.973,3002,4.973,3003,4.973,3004,4.973,3005,4.973,3006,4.973,3007,4.973,3008,4.973,3009,4.973,3010,4.973,3011,4.973,3012,4.973,3013,6.645,3014,4.973,3015,4.973,3016,4.973,3017,4.973,3018,4.973,3019,4.973,3020,4.973,3021,4.973,3022,4.973,3023,4.973,3024,4.973]],["title/classes/RootOfTrustPolicy.html",[33,0.176,100,2.728]],["body/classes/RootOfTrustPolicy.html",[3,0.056,4,0.056,5,0.05,9,0.449,12,0.853,13,0.153,14,0.748,16,1.392,17,0.693,19,0.626,20,0.214,21,0.008,23,1.502,25,1.528,26,1.528,27,1.245,28,2.412,30,0.125,31,0.004,32,0.004,33,0.316,34,2.189,35,0.837,36,2.189,37,3.481,38,1.695,39,5.326,40,5.558,41,2.674,42,3.979,43,4.996,44,3.396,45,2.381,46,2.632,47,0.352,49,0.704,51,1.99,53,0.232,54,3.333,55,1.905,56,2.7,57,4.114,58,3.74,59,1.905,60,2.876,61,3.04,62,3.11,63,2.511,64,2.621,65,0.977,66,1.607,67,1.826,68,3.333,69,3.333,70,1.329,71,3.099,72,2.381,73,3.74,74,1.675,75,2.108,76,1.905,77,2.975,78,2.108,79,1.567,80,3.292,81,2.279,82,2.223,83,2.108,84,2.621,85,1.967,86,3.333,87,2.641,88,2.279,89,2.279,90,2.279,91,2.279,92,2.279,93,2.279,94,3.481,95,2.381,96,4.526,97,1.695,98,2.876,99,3.939,100,3.201,101,3.481,102,2.189,103,2.381,104,3.201,105,2.381,106,1.967,107,1.905,108,1.967,109,2.189,110,2.381,111,2.108,112,1.792,113,1.793,114,2.035,115,2.478,116,2.478,117,1.194,118,1.016,119,1.245,120,2.279,121,1.79,122,1.905,123,1.491,124,1.359,125,1.607,126,2.279,127,4.031,128,3.099,129,1.3,130,1.979,131,2.279,132,1.847,133,2.279,134,2.189,135,2.975,136,1.847,137,4.031,138,2.478,139,2.381,140,1.695,141,1.491,142,1.967,143,2.279,144,2.381,145,1.1,146,2.279,147,3.481,148,1.901,149,2.279,150,1.939,151,2.381,152,1.528,153,1.607,154,1.987,155,2.621,156,2.381,157,2.381,158,2.381,159,2.381,160,1.967,161,2.035,162,1.905,163,1.329,164,1.491,165,2.7,166,1.793,167,2.035,168,2.279,169,1.65,170,1.905,171,2.381,172,3.201,173,2.035,174,2.189,175,2.189,3025,3.684,3026,3.684]],["title/classes/S3FileStorage.html",[33,0.176,3027,3.481]],["body/classes/S3FileStorage.html",[3,0.064,4,0.064,5,0.057,12,0.975,13,0.175,17,0.93,19,0.714,20,0.324,21,0.008,22,2.712,23,2.002,30,0.064,31,0.005,32,0.005,33,0.162,35,0.957,47,0.532,51,0.957,53,0.215,125,1.838,148,1.486,163,2.475,184,1.527,205,2.778,214,1.322,217,1.716,221,1.472,333,1.508,394,2.656,401,1.886,403,2.656,414,2.628,415,3.009,485,3.031,486,1.882,521,1.635,522,2.09,535,2.481,544,2.854,556,2.326,565,3.195,572,3.195,574,2.491,825,3.166,826,3.275,1171,2.805,1198,3.394,1722,4.435,1724,6.091,1725,4.498,1726,5.205,1727,4.498,1729,4.825,1731,5.263,1732,6.611,1734,4.498,1736,3.427,1737,4.65,1738,5.954,1739,5.584,1740,5.321,1742,5.205,1743,4.246,1744,3.427,1747,2.854,1750,3.739,1751,4.498,2194,4.236,2264,3.427,2282,5.263,2283,3.739,3027,4.498,3028,3.739,3029,4.212,3030,6.611,3031,8.682,3032,6.862,3033,4.212,3034,4.902,3035,4.212,3036,4.212,3037,4.212,3038,4.212,3039,4.212,3040,5.929,3041,6.862,3042,6.862,3043,5.929,3044,4.825,3045,3.427,3046,3.739,3047,3.739,3048,4.212,3049,7.849,3050,8.142,3051,4.212,3052,5.929,3053,4.212,3054,4.212,3055,4.212,3056,4.212,3057,4.212,3058,4.212,3059,4.212,3060,4.212,3061,4.212,3062,4.212,3063,4.212,3064,4.212,3065,4.212,3066,4.212,3067,4.212,3068,4.212]],["title/classes/SchemaResponse.html",[33,0.176,77,2.535]],["body/classes/SchemaResponse.html",[3,0.095,4,0.095,5,0.085,13,0.261,14,1.241,19,0.662,20,0.367,21,0.008,30,0.095,31,0.006,32,0.006,33,0.296,35,1.423,47,0.569,49,1.665,53,0.181,56,4.186,61,3.079,63,2.724,65,1.661,77,4.257,78,5.118,130,2.396,138,3.546,165,4.186,182,2.396,201,3.15,422,3.986,661,3.461,708,5.099,1347,6.783,2435,4.752,2440,5.099,3069,7.707,3070,7.707,3071,7.707,3072,6.265]],["title/entities/Session.html",[67,1.316,564,1.519]],["body/entities/Session.html",[3,0.042,4,0.042,5,0.038,9,0.338,12,2.024,13,0.115,14,0.84,16,1.696,17,1.003,19,0.68,20,0.357,21,0.008,26,2.218,27,1.807,30,0.081,31,0.003,32,0.003,33,0.106,41,2.269,47,0.581,49,1.702,51,2.103,53,0.211,55,1.431,66,1.208,67,1.885,70,0.998,74,2.266,84,2.111,112,1.554,115,3.651,117,1.405,118,1.474,123,1.756,127,3.654,130,1.882,136,4.179,137,4.64,140,1.273,141,1.121,142,1.478,150,1.321,154,2.424,191,3.462,196,2.392,202,3.289,204,2.661,205,2.45,206,3.129,207,4.695,209,1.942,220,0.977,225,3.85,226,2.803,368,2.395,403,1.24,413,1.273,422,2.243,424,3.208,427,3.034,428,1.892,434,2.683,477,1.348,539,3.289,564,2.871,568,1.995,604,2.939,670,3.597,671,3.343,674,2.939,709,3.911,722,3.308,729,4.324,754,2.051,764,3.308,772,4.746,889,4.056,945,3.308,968,1.347,971,2.953,972,3.456,973,3.85,974,3.624,976,3.597,977,2.174,978,4.61,985,3.624,987,2.803,988,2.803,1054,1.645,1071,2.252,1107,2.683,1119,4.709,1154,5.527,1156,3.289,1157,2.395,1158,3.456,1159,4.167,1160,4.056,1170,1.347,1184,4.324,1250,2.803,1298,1.713,1357,2.683,1380,1.977,1395,2.099,1666,3.232,1677,3.529,1982,3.624,2344,3.529,2465,5.348,2508,3.624,2543,2.252,2570,4.746,2617,4.746,2623,4.746,2885,3.308,3073,2.099,3074,4.351,3075,5.347,3076,2.768,3077,2.768,3078,2.768,3079,4.336,3080,2.768,3081,2.768,3082,4.746,3083,2.768,3084,4.336,3085,2.768,3086,2.768,3087,2.768,3088,2.768,3089,2.768,3090,2.768,3091,2.768,3092,2.768,3093,5.347,3094,2.768,3095,2.768,3096,2.768,3097,2.768,3098,2.768,3099,4.925,3100,2.768,3101,2.768,3102,4.925,3103,2.768,3104,2.768,3105,4.336,3106,4.336,3107,2.768,3108,2.768,3109,4.336,3110,2.768,3111,3.85,3112,3.098,3113,3.85,3114,1.876,3115,2.768,3116,2.768,3117,2.768]],["title/controllers/SessionController.html",[210,1.427,3118,3.481]],["body/controllers/SessionController.html",[3,0.073,4,0.073,5,0.065,9,0.589,13,0.201,16,1.977,17,0.803,19,0.645,20,0.293,21,0.008,27,2.202,30,0.073,31,0.005,32,0.005,33,0.185,47,0.515,49,1.509,53,0.255,74,2.026,154,2.403,155,2.35,182,2.293,184,1.382,210,1.501,212,1.742,214,1.452,217,1.857,218,0.789,220,1.704,221,1.48,226,4.21,368,3.888,401,1.708,443,3.599,458,2.847,485,1.865,486,2.695,501,2.667,506,2.988,517,4.352,521,1.331,522,1.985,523,2.511,564,3.041,615,2.667,625,4.655,626,2.667,712,2.421,742,2.764,749,3.697,759,2.703,1002,4.22,1003,3.272,1047,4.415,1171,2.284,1181,4.031,1182,3.729,1188,4.884,1323,3.45,1329,3.272,1330,3.272,1331,3.272,1334,3.272,1335,3.272,1343,3.45,1344,3.663,1897,4.942,2177,3.929,3114,4.415,3118,4.942,3119,4.286,3120,7.373,3121,7.893,3122,6.515,3123,6.515,3124,4.828,3125,4.828,3126,4.828,3127,4.828,3128,4.828,3129,4.828,3130,4.828,3131,5.639,3132,4.828,3133,4.828,3134,3.929,3135,3.929,3136,3.929,3137,4.828,3138,4.828,3139,4.828,3140,4.828,3141,4.828,3142,4.828,3143,4.828,3144,4.828,3145,4.828,3146,4.828]],["title/guards/SessionGuard.html",[695,3.279,747,2.966]],["body/guards/SessionGuard.html",[3,0.093,4,0.093,5,0.083,12,1.758,13,0.254,16,1.66,17,0.827,20,0.302,21,0.008,30,0.093,31,0.006,32,0.006,33,0.235,47,0.496,51,1.389,53,0.219,184,1.423,214,1.692,217,1.336,218,0.999,221,1.146,333,1.672,361,5.108,394,2.737,401,1.912,414,2.416,486,2.409,521,1.685,534,2.931,535,2.312,564,2.938,574,1.94,747,4.905,749,4.537,759,2.536,801,1.597,880,4.344,1339,2.737,2067,7.665,2071,6.738,2072,6.169,2074,3.782,3136,4.974,3147,6.112,3148,5.426,3149,6.112,3150,6.112,3151,6.112,3152,8.255,3153,5.426,3154,6.112,3155,6.112,3156,5.426]],["title/interfaces/SessionLogContext.html",[0,1.487,2544,2.966]],["body/interfaces/SessionLogContext.html",[0,1.873,2,2.897,3,0.088,4,0.088,5,0.078,9,0.705,13,0.24,14,1.017,16,1.602,17,0.951,19,0.713,20,0.36,21,0.008,23,1.572,26,3.04,27,2.86,30,0.088,31,0.006,32,0.006,47,0.377,117,2.607,118,2.333,123,3.535,131,4.534,226,4.736,337,3.576,361,5.236,428,3.81,432,4.515,564,3.035,565,5.558,1154,5.558,1175,3.789,1270,5.558,2074,4.979,2544,4.736,2550,6.418,2551,7.375,2725,6.505,2856,5.13,3157,5.235,3158,5.13,3159,5.13,3160,5.778,3161,7.327,3162,7.327,3163,7.327]],["title/injectables/SessionLoggerInterceptor.html",[801,0.966,2035,2.84]],["body/injectables/SessionLoggerInterceptor.html",[3,0.055,4,0.055,5,0.049,9,0.844,12,2.017,13,0.149,14,0.733,17,0.683,20,0.306,21,0.008,23,0.769,28,2.365,30,0.055,31,0.004,32,0.004,33,0.138,47,0.451,53,0.23,112,1.177,118,1.456,125,3.215,129,1.265,148,1.265,173,3.462,184,1.296,205,3.311,214,1.177,217,1.512,218,0.586,221,1.296,226,4.468,261,2.809,262,1.138,270,2.219,271,2.317,313,2.537,323,2.562,333,1.797,337,4.278,361,4.56,364,3.568,367,1.98,368,1.606,369,4.687,371,2.43,375,3.183,394,1.606,401,1.451,458,1.384,464,1.798,477,1.949,485,3.363,521,1.906,522,2.543,523,2.348,528,2.562,534,1.384,554,2.219,564,2.707,578,2.918,672,2.916,717,3.412,759,3.198,801,1.111,802,1.384,1040,2.916,1054,3.725,1175,3.811,1176,5.507,1244,2.562,1258,3.772,1654,3.183,1830,4.005,2035,4.278,2068,3.183,2069,7.411,2072,4.939,2074,4.77,2075,2.918,2081,3.183,2213,5.244,2324,2.562,2327,4.005,2481,2.918,2515,5.265,2536,4.687,2537,2.918,2549,5.244,2550,5.59,2618,5.563,2634,2.918,2785,2.43,2865,5.1,2869,5.626,2907,4.297,2923,4.687,2934,5.626,3112,2.562,3153,3.183,3157,5.265,3164,3.183,3165,5.28,3166,5.28,3167,5.28,3168,5.28,3169,5.28,3170,5.28,3171,6.913,3172,3.585,3173,5.28,3174,5.28,3175,5.28,3176,5.28,3177,7.369,3178,5.28,3179,5.28,3180,3.585,3181,5.28,3182,6.267,3183,5.28,3184,6.913,3185,5.28,3186,3.585,3187,3.585,3188,3.585,3189,4.297,3190,3.585,3191,3.585,3192,3.183,3193,3.585,3194,3.585,3195,3.585,3196,3.585,3197,3.585,3198,3.585,3199,3.585,3200,3.585,3201,3.585,3202,3.585,3203,3.585,3204,6.267,3205,3.585,3206,3.585,3207,6.913,3208,3.585,3209,3.585,3210,3.585,3211,3.585,3212,3.585,3213,3.585,3214,3.585,3215,3.585,3216,3.183,3217,3.183,3218,2.72,3219,3.183,3220,3.585,3221,3.585,3222,3.585,3223,3.585,3224,3.585,3225,3.585,3226,3.585,3227,5.28,3228,3.585]],["title/injectables/SessionLoggerService.html",[801,0.966,2036,2.728]],["body/injectables/SessionLoggerService.html",[3,0.043,4,0.043,5,0.038,9,0.539,12,1.258,13,0.118,14,0.613,17,0.887,19,0.628,20,0.333,21,0.008,28,3.293,30,0.043,31,0.003,32,0.003,33,0.109,41,2.06,47,0.547,53,0.177,82,1.402,112,0.985,117,0.919,145,1.319,148,1.001,184,1.571,191,2.675,214,0.985,217,1.78,218,0.463,221,1.526,261,2.644,262,0.9,270,1.754,271,1.832,313,3.577,323,2.026,333,1.1,337,4.357,364,2.675,401,1.885,424,1.879,428,3.409,445,2.856,458,2.097,521,1.69,522,2.317,523,1.346,564,2.956,604,4.155,738,4.82,759,2.757,770,3.923,801,0.93,802,1.095,825,4.266,977,1.422,1032,4.748,1054,4.52,1159,3.671,1175,3.171,1176,5.433,1244,3.157,1246,3.157,1250,1.832,1258,5.433,1469,4.989,1830,4.651,2036,3.644,2074,5.664,2213,3.352,2313,2.995,2324,2.026,2327,6.741,2344,5.409,2515,3.157,2537,3.596,2544,5.982,2551,5.983,2552,2.517,2865,4.419,2869,3.596,2907,3.596,3082,5.9,3112,2.026,3157,6.057,3216,3.923,3217,7.673,3218,3.352,3219,3.923,3229,2.517,3230,6.131,3231,4.419,3232,4.419,3233,5.43,3234,5.43,3235,4.419,3236,5.43,3237,4.419,3238,5.43,3239,5.43,3240,5.43,3241,4.419,3242,6.131,3243,2.835,3244,4.419,3245,4.419,3246,9.415,3247,2.835,3248,2.835,3249,6.646,3250,2.835,3251,2.835,3252,2.835,3253,4.419,3254,2.835,3255,5.43,3256,2.835,3257,2.835,3258,4.419,3259,2.835,3260,2.835,3261,2.835,3262,2.835,3263,2.835,3264,2.835,3265,2.835,3266,4.419,3267,2.835,3268,2.835,3269,2.835,3270,7.989,3271,7.989,3272,2.835,3273,7.605,3274,2.835,3275,2.835,3276,2.835,3277,2.835,3278,2.835,3279,2.835,3280,2.835,3281,2.835,3282,2.835,3283,2.835,3284,4.419]],["title/modules/SessionModule.html",[230,1.316,250,2.84]],["body/modules/SessionModule.html",[3,0.085,4,0.085,5,0.076,9,0.682,21,0.008,30,0.109,31,0.006,32,0.006,33,0.215,53,0.263,130,2.232,154,2.648,163,2.018,184,1.049,212,2.589,218,0.914,230,2.398,232,2.32,233,2.646,234,2.805,235,2.805,236,2.574,237,3.749,238,3.749,250,5.78,254,3.599,255,2.805,256,2.805,259,3.053,268,3.964,292,4.243,333,1.133,368,3.549,564,1.851,580,4.552,581,4.552,614,5.717,620,3.324,621,2.379,622,6.371,623,3.615,624,3.791,625,3.996,626,3.09,627,4.552,656,4.965,657,4.552,749,4.71,1170,3.857,1525,4.864,2417,3.996,2576,6.011,3114,5.859,3118,6.011,3135,4.552,3136,4.552,3285,4.965,3286,4.965,3287,4.965,3288,5.593,3289,4.552,3290,5.593,3291,4.552,3292,4.965,3293,4.965,3294,4.965,3295,5.593,3296,5.593,3297,4.965,3298,4.965]],["title/injectables/SessionService.html",[749,2.301,801,0.966]],["body/injectables/SessionService.html",[3,0.048,4,0.048,5,0.043,13,0.132,16,1.802,17,0.835,19,0.645,20,0.305,21,0.008,30,0.048,31,0.004,32,0.004,33,0.122,44,3.217,47,0.538,53,0.234,70,1.148,82,1.852,98,1.699,117,1.564,118,2.033,121,1.357,129,1.123,130,1.814,154,3.133,184,1.436,214,1.076,217,1.93,218,0.52,221,1.48,223,4.21,236,2.221,261,2.535,262,1.01,264,2.588,333,1.696,394,1.425,401,1.774,414,2.365,443,2.667,465,1.505,486,2.068,521,1.331,522,1.984,523,2.462,535,1.471,564,3.006,569,4.526,574,2.068,604,3.954,621,1.353,623,2.056,657,2.588,663,5.585,668,2.588,749,2.421,759,2.003,769,3.449,785,4.169,801,1.016,802,1.228,826,2.667,857,1.968,859,2.987,877,3.662,945,2.987,946,2.413,971,1.757,972,2.056,977,1.595,991,5.267,992,1.821,993,2.588,994,5.301,995,2.413,996,3.266,1013,2.413,1014,4.748,1032,1.89,1040,3.598,1047,3.272,1113,3.272,1164,2.763,1171,2.284,1181,2.987,1250,3.12,1399,2.667,1443,3.12,1504,3.449,2417,3.449,2798,2.588,2799,2.824,2885,2.987,3099,5.699,3102,4.748,3112,2.273,3114,5.192,3135,2.588,3291,3.929,3297,6.217,3298,6.217,3299,2.824,3300,6.514,3301,4.828,3302,6.514,3303,3.181,3304,7.661,3305,5.835,3306,3.181,3307,4.828,3308,4.828,3309,6.514,3310,3.181,3311,4.828,3312,6.514,3313,3.181,3314,4.828,3315,3.181,3316,4.828,3317,3.181,3318,3.181,3319,4.828,3320,6.514,3321,3.181,3322,4.828,3323,3.181,3324,4.828,3325,6.514,3326,4.828,3327,4.828,3328,4.828,3329,4.286,3330,4.828,3331,3.181,3332,4.828,3333,4.828,3334,3.181,3335,4.828,3336,4.828,3337,3.181,3338,4.828,3339,3.181,3340,3.181,3341,3.181,3342,3.181,3343,3.181,3344,4.828,3345,4.828,3346,3.181,3347,4.828,3348,3.181,3349,3.181,3350,4.828,3351,3.181,3352,3.181,3353,3.181,3354,3.181,3355,3.181,3356,4.828,3357,4.828,3358,3.181,3359,4.828,3360,4.828,3361,4.828,3362,3.181,3363,4.828,3364,3.181,3365,3.181,3366,5.835,3367,4.828,3368,3.181,3369,3.181,3370,3.181,3371,3.181,3372,3.181,3373,3.181,3374,3.181,3375,4.828,3376,3.181,3377,4.828,3378,3.181,3379,3.181]],["title/controllers/StatusListController.html",[210,1.427,3380,3.481]],["body/controllers/StatusListController.html",[3,0.096,4,0.096,5,0.086,13,0.263,17,0.689,19,0.637,20,0.333,21,0.008,30,0.096,31,0.006,32,0.006,33,0.243,38,3.856,47,0.413,49,1.208,51,1.436,53,0.242,118,2.137,154,3.092,155,4.079,184,1.185,185,3.269,210,1.966,212,2.281,214,1.727,217,1.695,218,1.033,219,3.912,220,2.231,221,1.185,401,1.464,506,3.912,519,4.086,523,1.926,626,4.281,712,3.17,1002,4.797,1003,4.285,1339,2.831,3380,5.879,3381,5.009,3382,5.612,3383,6.322,3384,6.88,3385,5.612,3386,6.322,3387,6.322,3388,7.75,3389,6.322,3390,6.322,3391,6.322,3392,6.322,3393,5.612,3394,6.322,3395,6.322]],["title/entities/StatusListEntity.html",[67,1.316,3396,3.279]],["body/entities/StatusListEntity.html",[3,0.08,4,0.08,5,0.072,9,0.645,13,0.22,14,0.961,16,1.513,17,0.754,19,0.622,20,0.338,21,0.008,30,0.08,31,0.005,32,0.005,33,0.203,38,4.31,47,0.555,49,1.624,51,1.859,53,0.2,66,2.308,67,2.347,70,1.908,97,3.184,115,3.184,116,3.184,117,2.652,118,2.127,127,3.47,137,3.47,140,2.433,141,3.439,150,2.109,154,3.486,161,2.921,163,3.144,164,2.802,457,4.114,458,2.673,536,4.691,674,4.691,968,2.574,978,4.114,1119,4.473,1222,5.757,1393,4.012,1862,4.695,3218,6.443,3381,5.632,3396,4.945,3397,7.091,3398,4.695,3399,7.54,3400,7.715,3401,5.289,3402,5.289,3403,5.289,3404,5.289,3405,6.144,3406,5.289,3407,6.921]],["title/modules/StatusListModule.html",[230,1.316,614,2.966]],["body/modules/StatusListModule.html",[3,0.094,4,0.094,5,0.083,21,0.008,30,0.094,31,0.006,32,0.006,33,0.236,53,0.266,154,2.812,212,2.75,218,1.006,230,2.375,232,2.553,233,2.911,234,3.086,235,3.086,236,2.832,237,3.917,238,3.917,243,4.841,254,3.822,255,3.086,256,3.086,259,3.242,278,3.809,614,6.049,620,3.658,621,2.618,626,3.4,1002,5.445,1003,4.171,3380,6.282,3381,3.978,3396,5.446,3408,5.464,3409,5.464,3410,6.155,3411,5.464,3412,6.155,3413,6.767,3414,5.464,3415,4.397,3416,5.464,3417,6.155,3418,6.155]],["title/injectables/StatusListService.html",[801,0.966,1002,2.627]],["body/injectables/StatusListService.html",[3,0.045,4,0.045,5,0.109,9,0.359,13,0.231,16,1.368,17,0.812,19,0.655,20,0.296,21,0.008,30,0.045,31,0.004,32,0.004,33,0.113,38,4.216,41,1.627,47,0.487,53,0.241,70,1.062,106,2.429,112,1.239,117,2.027,118,2.4,119,0.995,126,1.821,140,2.093,141,2.894,145,1.358,152,1.221,154,3.411,155,2.214,163,2.579,164,1.841,182,2.457,184,1.397,185,2.352,214,1.014,217,1.684,218,0.481,221,1.042,261,2.366,262,0.934,273,3.44,274,1.749,333,1.776,361,2.814,392,2.939,401,1.726,403,1.318,414,2.525,486,1.444,521,1.254,522,2.271,523,1.905,534,1.756,535,2.407,564,2.615,568,2.093,569,4.37,574,2.608,584,3.44,597,1.625,602,1.994,605,4.935,621,1.251,626,4.253,744,1.522,801,0.957,802,1.136,811,1.625,812,3.252,826,1.625,835,2.703,842,1.522,857,1.821,859,2.814,880,1.684,915,1.432,987,1.902,992,1.684,996,3.737,1002,2.603,1012,2.814,1040,3.949,1047,4.239,1149,3.701,1164,1.684,1173,1.684,1189,1.994,1198,2.603,1199,4.744,1219,2.814,1222,3.768,1380,4.831,1392,2.612,1393,2.232,1420,1.994,1438,6.265,1443,3.593,1451,2.102,1452,2.232,1540,3.701,1549,3.701,1566,3.249,1570,2.102,1666,1.571,1690,3.701,1702,3.701,1751,3.45,2177,2.395,2420,2.395,2422,2.232,2595,2.395,2798,3.701,2934,3.701,3131,4.469,3218,5.84,3381,4.976,3384,4.037,3385,4.037,3396,4.469,3399,2.612,3405,4.935,3413,4.037,3414,2.612,3415,2.102,3416,2.612,3419,2.612,3420,5.559,3421,4.548,3422,4.548,3423,4.548,3424,5.559,3425,5.559,3426,2.942,3427,2.942,3428,2.942,3429,4.548,3430,4.548,3431,2.942,3432,2.942,3433,2.942,3434,4.548,3435,6.255,3436,7.149,3437,4.548,3438,4.548,3439,4.548,3440,2.942,3441,4.548,3442,2.942,3443,4.548,3444,2.942,3445,4.548,3446,2.942,3447,2.942,3448,2.942,3449,2.942,3450,2.942,3451,2.942,3452,2.942,3453,2.942,3454,2.942,3455,2.942,3456,2.942,3457,2.942,3458,2.942,3459,4.548,3460,2.942,3461,2.942,3462,6.255,3463,4.548,3464,4.548,3465,2.942,3466,4.548,3467,2.942,3468,2.942,3469,2.942,3470,4.548,3471,6.762,3472,2.942,3473,2.942,3474,2.942,3475,2.942,3476,2.942,3477,2.942,3478,2.942,3479,4.548,3480,4.548,3481,2.942,3482,2.942,3483,2.942]],["title/entities/StatusMapping.html",[67,1.316,3415,3.279]],["body/entities/StatusMapping.html",[3,0.093,4,0.093,5,0.082,13,0.359,14,1.05,19,0.686,20,0.368,21,0.007,30,0.093,31,0.006,32,0.006,33,0.233,38,3.789,47,0.563,49,1.647,51,2.104,53,0.176,66,3.868,67,2.17,70,2.193,116,4.262,163,2.729,361,5.096,968,2.959,1380,5.884,3381,5.729,3397,7.214,3415,5.405,3484,5.397,3485,8.618,3486,9.037,3487,6.08,3488,7.565,3489,6.08,3490,6.08,3491,6.08]],["title/classes/StatusUpdateDto.html",[33,0.176,3131,3.279]],["body/classes/StatusUpdateDto.html",[3,0.091,4,0.091,5,0.081,13,0.249,14,1.039,16,1.873,17,0.933,18,7.604,19,0.651,20,0.325,21,0.008,30,0.091,31,0.006,32,0.006,33,0.287,35,1.358,41,2.506,47,0.534,49,1.562,53,0.173,60,3.997,62,2.824,63,2.609,65,1.584,74,2.327,112,1.668,154,3.254,163,2.7,190,3.552,208,3.87,361,5.057,368,3.352,564,2.834,937,4.631,1135,4.533,1164,4.902,1219,4.631,1380,5.838,3131,5.347,3134,6.97,3381,5.536,3492,4.863,3493,5.976,3494,5.976,3495,5.976,3496,5.976,3497,5.976]],["title/modules/StorageModule.html",[230,1.316,251,3.111]],["body/modules/StorageModule.html",[3,0.08,4,0.08,5,0.071,20,0.208,21,0.008,30,0.105,31,0.005,32,0.005,33,0.201,47,0.342,51,1.191,53,0.26,74,1.63,214,1.168,217,1.146,218,0.857,221,1.44,230,2.203,232,2.174,237,2.479,238,2.479,251,5.206,259,2.229,260,3.552,261,2.542,262,1.664,267,4.663,268,3.8,294,3.976,301,4.653,318,4.265,328,4.653,331,3.243,332,3.976,333,1.393,462,5.219,464,2.628,535,2.34,1636,3.976,1637,6.051,1722,4.447,1755,5.488,1756,5.488,1758,3.976,2201,6.819,2203,6.819,2218,4.653,2248,5.219,2264,4.265,3027,5.219,3030,6.108,3034,6.556,3044,4.265,3045,4.265,3498,3.976,3499,5.241,3500,5.241,3501,5.241,3502,5.241,3503,6.251,3504,4.653,3505,4.653,3506,4.653,3507,4.653,3508,7.865,3509,4.653,3510,4.653,3511,4.653,3512,6.108,3513,6.108,3514,4.653,3515,6.108,3516,4.653,3517,4.653,3518,5.241,3519,5.241,3520,5.241,3521,5.241,3522,5.241,3523,5.241,3524,7.681,3525,5.241,3526,5.241,3527,5.241,3528,5.241,3529,5.241]],["title/interfaces/TokenPayload.html",[0,1.487,517,2.301]],["body/interfaces/TokenPayload.html",[0,2.138,2,3.307,3,0.1,4,0.1,5,0.089,9,0.805,11,3.307,12,1.842,13,0.275,14,1.104,19,0.649,20,0.262,21,0.008,30,0.121,31,0.006,32,0.006,44,3.47,53,0.191,74,2.051,218,1.078,221,1.237,333,1.611,368,3.562,422,3.411,458,3.423,465,3.12,498,4.471,517,4.281,568,3.035,569,5.729,672,3.644,826,3.644,918,4.263,2072,5.682,3530,5.368,3531,7.06,3532,5.856,3533,5.856,3534,5.856]],["title/classes/TokenRequestDto.html",[33,0.176,2353,3.279]],["body/classes/TokenRequestDto.html",[3,0.089,4,0.089,5,0.079,9,1.036,11,3.693,12,1.706,13,0.243,14,1.023,16,1.274,17,0.802,19,0.679,20,0.348,21,0.007,27,2.49,30,0.089,31,0.006,32,0.006,33,0.283,35,1.324,47,0.554,49,1.622,53,0.213,63,2.586,65,1.545,84,3.585,148,2.6,187,4.606,190,3.463,201,2.78,220,2.056,403,2.61,465,4.345,491,4.992,498,5.474,499,6.573,525,7.17,527,7.17,541,4.992,554,4.998,780,3.463,789,6.64,791,4.742,797,4.742,1094,6.064,1107,5.417,2353,5.263,2720,5.172,3535,7.124,3536,5.826,3537,5.826,3538,5.826,3539,5.826,3540,5.826]],["title/classes/TokenResponse.html",[33,0.176,478,3.481]],["body/classes/TokenResponse.html",[3,0.104,4,0.104,5,0.092,13,0.283,14,1.124,17,0.882,19,0.68,20,0.344,21,0.007,30,0.104,31,0.006,32,0.006,33,0.261,35,1.545,47,0.585,163,2.922,192,4.396,478,6.144,528,6.18,530,6.562,531,5.863,578,7.04,661,3.757,2227,6.038,2435,5.159,3541,8.121,3542,6.802,3543,6.802]],["title/classes/TokenResponseDto.html",[33,0.176,2361,3.279]],["body/classes/TokenResponseDto.html",[3,0.091,4,0.091,5,0.081,9,1.045,11,4.512,13,0.249,14,1.039,17,0.815,19,0.651,20,0.351,21,0.007,30,0.091,31,0.006,32,0.006,33,0.229,35,1.358,47,0.559,49,1.637,53,0.173,148,2.641,160,3.997,162,3.87,163,2.7,187,4.629,192,5.281,201,2.824,220,2.109,458,3.565,491,5.072,528,5.838,530,6.199,531,5.538,661,3.301,789,6.69,1094,6.119,1107,5.458,2361,5.347,2416,6.644,3535,7.177,3544,7.484,3545,5.976,3546,5.976,3547,5.976,3548,5.976]],["title/classes/UpdateCredentialIssuanceBindingDto.html",[33,0.176,1114,3.279]],["body/classes/UpdateCredentialIssuanceBindingDto.html",[3,0.078,4,0.078,5,0.07,9,1.115,13,0.213,14,0.941,16,2.014,19,0.688,20,0.204,21,0.008,23,1.961,26,2.127,27,1.733,30,0.116,31,0.005,32,0.005,33,0.31,35,1.165,41,2.617,47,0.335,49,0.98,53,0.196,63,2.463,65,1.359,82,2.797,112,1.802,121,1.441,150,1.562,152,3.711,153,3.669,170,4.467,187,4.583,220,1.809,439,3.152,477,1.594,535,2.315,662,4.318,971,2.831,973,2.831,976,3.047,977,2.57,1088,3.662,1089,5.143,1090,3.888,1091,4.171,1092,4.844,1093,4.844,1094,3.662,1095,5.518,1098,6.183,1099,6.183,1100,6.183,1101,6.183,1104,6.843,1107,5.656,1108,4.844,1109,5.518,1110,6.183,1111,5.518,1112,5.518,1113,4.595,1114,4.844,1115,4.171,1116,3.662,1117,4.171,1118,4.171,3549,5.126,3550,5.126]],["title/classes/UpdateKeyDto.html",[33,0.176,2173,3.481]],["body/classes/UpdateKeyDto.html",[3,0.108,4,0.108,5,0.096,21,0.007,23,1.518,30,0.108,31,0.006,32,0.006,33,0.272,35,1.608,42,4.428,53,0.24,220,2.498,333,1.679,1489,5.359,1559,4.379,1580,5.368,2148,4.796,2173,6.29,3492,5.759,3551,8.292,3552,7.077]],["title/classes/VCT.html",[33,0.176,73,2.451]],["body/classes/VCT.html",[3,0.089,4,0.089,5,0.079,9,0.986,13,0.243,14,1.024,17,1.029,19,0.724,20,0.361,21,0.007,30,0.089,31,0.006,32,0.006,33,0.283,35,1.326,42,4.317,47,0.593,49,1.736,53,0.169,63,2.911,65,1.547,73,4.677,75,5.26,184,1.516,390,3.772,1347,6.971,3553,8.083,3554,8.083,3555,8.083,3556,5.836,3557,5.836,3558,5.836,3559,5.836,3560,5.836,3561,5.836,3562,5.836]],["title/modules/VerifierModule.html",[230,1.316,252,3.279]],["body/modules/VerifierModule.html",[3,0.094,4,0.094,5,0.084,21,0.008,30,0.094,31,0.006,32,0.006,33,0.237,53,0.266,218,1.008,230,2.377,232,2.558,233,2.917,234,3.092,235,3.092,236,2.837,237,2.917,238,2.917,243,4.843,249,5.611,250,5.611,252,6.847,254,3.827,255,3.092,256,3.092,259,3.246,278,3.815,291,4.677,293,4.677,2034,5.861,2040,5.172,2041,3.406,2525,5.861,2526,5.473,2732,5.473,3563,6.166,3564,6.166,3565,6.166]],["title/classes/WebHookAuthConfig.html",[33,0.176,197,3.279]],["body/classes/WebHookAuthConfig.html",[3,0.081,4,0.081,5,0.072,9,0.646,13,0.22,14,0.962,17,0.577,19,0.586,20,0.374,21,0.008,23,1.823,30,0.125,31,0.005,32,0.005,33,0.326,35,1.203,47,0.452,49,1.324,53,0.2,61,2.848,62,2.614,63,2.495,65,1.404,84,2.578,112,1.98,121,2.171,150,2.589,176,5.851,177,3.784,178,6.446,179,4.011,180,5.233,181,4.31,182,2.154,184,0.993,185,3.583,186,3.827,187,3.474,189,2.578,190,3.148,191,2.311,192,3.423,193,4.31,194,4.777,195,6.072,196,3.446,197,5.851,198,5.638,199,4.695,200,4.31,201,2.614,202,4.018,203,3.784,204,2.144,205,2.805,206,2.739,207,3.784,208,2.739,209,2.372,3566,5.297,3567,5.297,3568,5.297,3569,5.297]],["title/classes/WebhookConfig.html",[33,0.176,204,1.858]],["body/classes/WebhookConfig.html",[3,0.08,4,0.08,5,0.072,9,0.645,13,0.22,14,0.961,17,0.892,19,0.622,20,0.365,21,0.008,23,1.756,30,0.125,31,0.005,32,0.005,33,0.326,35,1.202,47,0.452,49,1.323,53,0.2,61,2.846,62,2.612,63,2.588,65,1.402,84,2.574,112,1.979,121,1.487,150,2.655,176,5.512,177,3.779,178,6.208,179,3.974,180,5.547,181,4.304,182,2.152,184,0.992,185,3.579,186,3.823,187,3.47,189,2.574,190,3.143,191,2.308,192,3.418,193,4.304,194,4.283,195,5.512,196,3.445,197,5.847,198,4.304,199,3.584,200,4.304,201,1.996,202,5.25,203,4.945,204,2.802,205,3.439,206,3.579,207,4.945,208,3.579,209,3.455,3570,5.289,3571,5.289,3572,5.289]],["title/classes/WebhookResponse.html",[33,0.176,3573,3.481]],["body/classes/WebhookResponse.html",[3,0.062,4,0.062,5,0.055,9,0.498,17,0.445,19,0.441,21,0.008,23,1.244,30,0.088,31,0.004,32,0.004,33,0.223,35,0.928,47,0.267,51,0.928,53,0.24,74,2.506,82,1.841,87,2.407,119,1.961,135,3.204,138,3.38,145,1.219,180,2.768,186,3.204,195,4.145,196,3.628,208,2.112,218,0.667,221,1.265,313,2.349,333,1.366,367,4.057,414,1.974,424,2.467,477,2.506,521,1.599,522,2.055,523,2.663,534,2.24,535,1.767,564,2.893,574,2.141,672,2.256,744,2.112,749,3.683,750,2.639,801,1.221,857,3.59,960,5.759,1045,5.463,1049,4.145,1053,4.4,1157,3.204,1159,4.681,1173,4.204,1175,2.112,1685,2.639,2036,3.448,2037,3.59,2041,2.256,2045,2.918,2074,2.527,2204,5.248,2438,3.323,2479,3.749,2544,4.36,2549,6.539,2569,4.721,2602,5.49,2603,4.721,2784,5.118,2785,2.768,2885,2.527,3074,4.721,3159,3.625,3573,5.572,3574,3.323,3575,4.084,3576,5.15,3577,5.989,3578,3.625,3579,3.625,3580,3.625,3581,3.625,3582,3.625,3583,3.625,3584,3.625,3585,6.521,3586,6.521,3587,5.15,3588,3.625,3589,5.15,3590,5.15,3591,5.15,3592,7.361,3593,5.15,3594,5.15,3595,5.15,3596,5.15,3597,5.15,3598,5.15,3599,5.15,3600,5.15,3601,3.625,3602,3.625,3603,3.625,3604,3.625,3605,3.625,3606,3.625,3607,5.15,3608,3.625]],["title/injectables/WebhookService.html",[801,0.966,2037,2.84]],["body/injectables/WebhookService.html",[3,0.056,4,0.056,5,0.05,9,0.66,13,0.154,17,0.813,19,0.281,20,0.254,21,0.008,23,0.794,30,0.082,31,0.004,32,0.004,33,0.208,47,0.417,51,1.228,53,0.233,74,2.566,82,1.716,87,2.243,119,1.827,130,1.151,135,2.986,138,2.938,145,1.614,180,3.664,182,1.151,184,1.197,186,2.986,195,3.863,196,3.615,208,2.796,214,1.205,217,1.182,218,0.605,221,1.316,313,2.189,333,1.293,367,3.878,401,1.479,414,2.185,424,2.299,477,2.503,521,1.936,522,1.945,523,2.606,534,2.088,535,1.647,564,3.011,574,2.027,672,2.986,744,1.915,749,4.138,750,2.393,801,1.138,802,1.43,825,1.978,857,3.345,960,5.571,1045,5.285,1049,3.863,1053,5.326,1157,2.045,1159,4.889,1173,4.019,1175,1.915,1685,3.494,2036,4.173,2037,4.345,2041,2.045,2045,2.646,2074,2.291,2204,5.753,2438,4.4,2479,4.538,2544,5.204,2549,6.714,2569,4.4,2602,5.196,2603,4.4,2746,3.014,2784,4.844,2785,2.51,2885,3.345,3074,4.4,3573,4.844,3574,3.014,3576,4.799,3577,6.629,3578,4.799,3579,5.668,3580,3.287,3581,3.287,3582,3.287,3583,3.287,3584,3.287,3585,6.233,3586,6.233,3587,4.799,3588,3.287,3589,4.799,3590,4.799,3591,4.799,3592,7.148,3593,4.799,3594,4.799,3595,4.799,3596,4.799,3597,4.799,3598,4.799,3599,4.799,3600,4.799,3601,5.668,3602,3.287,3603,3.287,3604,3.287,3605,3.287,3606,3.287,3607,4.799,3608,3.287,3609,3.703,3610,3.703,3611,3.703,3612,3.703,3613,3.703]],["title/controllers/WellKnownController.html",[210,1.427,258,3.481]],["body/controllers/WellKnownController.html",[3,0.068,4,0.068,5,0.061,9,0.867,13,0.187,17,0.774,20,0.32,21,0.008,23,1.332,30,0.068,31,0.005,32,0.005,33,0.173,41,1.817,47,0.464,49,1.359,51,1.41,53,0.258,79,2.64,117,2.012,118,1.24,124,3.203,125,3.717,129,2.509,164,2.513,184,1.437,185,2.327,191,3.717,201,1.698,210,2.21,212,1.623,214,1.384,217,1.95,218,0.735,219,2.784,220,1.588,221,1.333,253,5.194,258,5.392,297,4.818,298,5.813,300,3.994,401,1.646,457,3.69,463,3.553,469,4.406,486,1.97,504,5.052,519,2.908,521,1.24,523,2.166,526,3.214,564,3.09,712,2.256,714,7.707,715,4.709,742,2.575,744,2.327,745,4.818,746,3.413,747,2.908,748,3.413,757,3.413,759,1.866,769,3.214,804,6.31,817,3.413,1182,3.553,1188,3.842,1295,4.953,1339,2.015,1682,3.049,1743,5.272,1990,3.661,2019,3.994,2028,5.078,2354,3.994,2428,5.078,2477,5.052,3393,3.994,3614,3.994,3615,4.499,3616,6.803,3617,5.511,3618,4.499,3619,4.499,3620,4.499,3621,4.499,3622,6.208,3623,4.499,3624,4.499,3625,4.499,3626,6.237,3627,4.499,3628,4.499,3629,4.499,3630,5.511,3631,4.499,3632,3.994,3633,3.994,3634,3.994,3635,4.499,3636,4.499,3637,4.499,3638,4.499,3639,3.994,3640,4.499,3641,4.499,3642,4.499,3643,4.499,3644,4.499,3645,4.499,3646,4.499,3647,4.499]],["title/injectables/WellKnownService.html",[253,3.111,801,0.966]],["body/injectables/WellKnownService.html",[3,0.059,4,0.059,5,0.053,9,0.473,11,2.802,12,0.898,13,0.161,17,0.781,19,0.498,20,0.344,21,0.008,23,1.406,30,0.059,31,0.004,32,0.004,33,0.149,41,1.635,47,0.468,53,0.25,79,2.377,106,2.07,117,2.567,118,1.541,124,3.012,125,3.924,129,1.972,132,1.943,141,2.653,145,1.668,153,2.438,162,2.004,164,3.207,169,3.212,182,1.737,184,1.345,191,2.859,214,1.245,217,1.89,218,0.633,221,1.345,253,4.861,280,3.154,281,2.141,297,3.787,298,5.768,333,1.132,354,3.44,371,3.787,401,1.661,408,3.992,414,1.917,457,4.263,458,2.158,463,3.198,469,3.389,486,1.774,521,1.977,522,2.185,523,2.316,564,2.86,568,2.571,569,2.505,574,2.08,601,2.769,602,2.627,607,1.943,671,3.087,715,4.239,728,3.992,744,2.004,751,4.967,759,2.975,801,1.176,802,1.497,812,3.646,826,3.087,842,2.004,859,4.055,915,1.886,957,2.94,1000,5.052,1001,2.769,1164,2.218,1182,4.534,1188,3.458,1294,4.239,1295,4.914,1374,4.853,1396,2.769,1399,2.141,1403,3.44,1426,3.154,1442,3.154,1443,2.505,1451,2.769,1452,2.94,1682,2.627,1743,4.705,1998,4.239,2127,4.96,2350,4.239,2355,4.547,2417,3.992,2422,2.94,2428,5.124,2593,3.44,2595,3.154,2723,4.547,2996,4.96,3000,3.44,3616,4.96,3617,4.96,3626,5.837,3630,3.44,3632,3.44,3633,3.44,3634,3.44,3639,3.44,3648,3.44,3649,5.588,3650,5.588,3651,5.588,3652,3.875,3653,3.875,3654,5.588,3655,3.875,3656,5.588,3657,3.875,3658,5.588,3659,5.588,3660,5.588,3661,5.837,3662,6.553,3663,4.96,3664,5.588,3665,3.875,3666,3.875,3667,3.875,3668,3.875,3669,3.875,3670,3.875,3671,3.875,3672,5.588,3673,3.875,3674,3.875,3675,3.875,3676,3.875,3677,3.875]],["title/coverage.html",[3678,5.587]],["body/coverage.html",[0,2.648,1,1.862,5,0.031,6,2.031,7,1.114,8,2.031,12,0.53,20,0.325,21,0.008,22,0.904,23,0.491,27,0.773,31,0.003,32,0.003,33,0.36,34,1.36,36,4.014,43,1.36,67,2.241,71,1.114,73,1.222,75,1.309,77,1.264,78,1.309,80,1.183,82,1.723,100,1.36,102,1.36,104,1.36,109,1.36,113,1.114,124,0.844,176,1.634,177,3.879,191,0.998,194,1.416,197,1.634,204,0.926,210,2.57,211,1.735,213,2.031,236,1.053,253,1.55,258,1.735,276,1.735,279,1.735,281,3.73,283,1.735,287,1.735,290,1.735,292,1.735,294,1.735,298,2.825,388,1.55,389,4.14,390,4.14,404,1.479,405,1.479,417,1.36,449,1.264,450,1.735,451,2.031,458,0.883,465,1.082,469,1.183,470,1.735,473,1.735,478,1.735,500,3.306,508,1.416,515,1.479,517,1.147,535,0.697,564,0.757,615,1.264,616,1.634,617,4.418,626,2.057,630,1.55,633,1.634,635,1.862,636,1.862,659,1.634,660,2.031,661,4.134,681,1.55,682,2.031,695,1.634,706,1.634,707,2.031,710,1.735,711,2.031,722,1.416,745,1.55,747,1.479,749,1.147,751,1.36,755,1.735,779,2.031,780,4.014,801,1.856,803,3.573,812,0.998,813,1.309,814,1.36,847,1.634,849,1.634,851,1.634,914,1.36,923,7.169,947,1.309,969,3.031,983,1.634,989,3.031,998,1.416,1000,1.416,1002,1.309,1004,1.416,1065,2.031,1066,2.031,1069,3.031,1073,1.862,1088,1.634,1089,3.573,1090,3.573,1114,1.634,1116,1.634,1147,1.735,1148,3.031,1152,1.55,1159,1.264,1166,1.479,1167,2.031,1168,1.634,1169,3.573,1175,1.183,1219,5.859,1265,2.031,1266,2.031,1287,2.031,1294,1.735,1295,4.14,1296,2.031,1297,3.031,1316,1.735,1317,2.031,1338,1.479,1346,1.735,1347,3.573,1348,1.862,1349,2.031,1367,2.031,1374,1.36,1463,4.771,1464,1.862,1467,1.55,1468,4.418,1478,1.55,1486,1.735,1492,3.031,1500,1.862,1506,1.735,1514,1.735,1518,1.479,1522,1.735,1523,2.031,1524,3.306,1526,1.55,1553,1.479,1559,1.416,1578,2.524,1627,1.862,1629,1.862,1659,1.735,1660,3.031,1662,1.862,1682,1.55,1684,2.031,1722,1.479,1723,4.118,1740,1.634,1743,1.416,1747,1.55,1756,1.634,1758,1.735,1759,2.031,1798,1.735,1799,3.031,1838,1.735,1839,2.031,1858,2.031,1859,3.573,1882,1.735,1883,2.031,1910,2.031,1976,1.735,1977,2.031,1978,1.862,1979,2.031,1982,1.55,1985,1.479,2028,1.634,2029,2.031,2035,1.416,2036,1.36,2037,1.416,2038,1.862,2039,1.735,2065,2.031,2077,1.862,2092,2.031,2148,4.05,2149,3.031,2161,2.031,2173,1.735,2188,3.031,2193,1.862,2200,1.862,2207,2.031,2222,1.735,2223,2.031,2228,2.031,2242,2.407,2248,1.735,2249,2.031,2287,1.735,2288,3.031,2300,1.735,2341,1.735,2342,2.031,2348,1.735,2349,2.031,2353,1.634,2361,1.634,2362,1.55,2372,1.862,2374,1.862,2377,2.031,2428,1.634,2429,2.031,2441,3.031,2463,2.031,2479,1.479,2499,1.735,2500,2.031,2528,2.031,2531,1.416,2539,1.735,2544,1.479,2559,1.416,2576,2.825,2649,2.031,2653,1.735,2654,3.031,2663,1.55,2686,1.735,2687,2.031,2694,1.735,2719,2.825,2724,2.031,2736,2.031,2747,1.55,2830,1.634,2831,2.031,2841,1.862,2854,2.031,2981,2.031,2990,2.031,3027,1.735,3028,2.031,3073,2.825,3118,1.735,3119,2.031,3131,1.634,3134,1.862,3148,2.031,3157,4.27,3158,2.031,3164,2.031,3189,1.862,3229,2.031,3289,1.862,3299,2.031,3329,7.705,3380,1.735,3381,3.862,3382,2.031,3396,1.634,3397,3.031,3398,2.031,3415,1.634,3419,2.031,3484,2.031,3492,3.031,3498,2.825,3503,1.862,3530,3.031,3535,3.031,3541,2.031,3573,1.735,3574,3.031,3614,2.031,3648,2.031,3678,2.031,3679,2.288,3680,2.288,3681,3.724,3682,2.288,3683,3.724,3684,3.724,3685,5.976,3686,5.429,3687,6.754,3688,9.082,3689,2.288,3690,2.288,3691,5.429,3692,8.066,3693,6.406,3694,2.288,3695,4.71,3696,3.306,3697,3.724,3698,3.306,3699,6.25,3700,6.754,3701,3.306,3702,3.724,3703,2.288,3704,2.031,3705,6.754,3706,2.288,3707,2.288,3708,2.288,3709,2.288,3710,2.288,3711,5.429,3712,5.429,3713,2.031,3714,3.724,3715,7.04,3716,8.5,3717,2.288,3718,5.976,3719,3.724,3720,2.288,3721,4.71,3722,2.288,3723,2.288,3724,5.429,3725,5.429,3726,7.28,3727,3.306,3728,3.724,3729,3.724,3730,3.724,3731,2.288,3732,2.288,3733,3.724,3734,3.724,3735,2.031,3736,2.288,3737,2.031,3738,2.288,3739,2.031,3740,5.429,3741,2.288,3742,2.288,3743,2.288,3744,3.306,3745,2.288,3746,1.862,3747,2.031,3748,2.288,3749,2.288,3750,2.288,3751,2.288,3752,2.288]],["title/dependencies.html",[233,2.615,3753,3.39]],["body/dependencies.html",[12,1.287,21,0.008,31,0.006,32,0.006,33,0.274,38,2.557,55,2.874,65,1.473,70,2.005,125,2.425,140,3.837,141,2.894,142,2.968,154,2.05,189,2.705,218,0.908,220,1.961,233,2.629,262,1.764,264,4.523,266,4.934,267,3.767,268,3.07,270,3.439,271,5.106,327,4.216,463,3.181,465,3.381,619,4.216,621,2.364,623,3.592,624,3.767,743,3.181,841,3.971,995,4.216,1390,4.216,1391,4.216,1393,4.216,1395,4.216,1570,3.971,1575,2.787,1577,4.216,1795,3.971,1850,4.523,1991,3.592,2041,3.07,2075,4.523,2110,4.934,2113,4.934,2785,3.767,2897,4.934,3034,3.971,3044,5.817,3045,4.523,3046,4.934,3047,4.934,3754,7.147,3755,5.558,3756,7.147,3757,7.901,3758,5.558,3759,5.558,3760,5.558,3761,5.558,3762,5.558,3763,5.558,3764,5.558,3765,5.558,3766,5.558,3767,7.147,3768,8.34,3769,8.34,3770,8.34,3771,5.558,3772,5.558,3773,5.558,3774,5.558,3775,7.901,3776,5.558,3777,5.558,3778,5.558,3779,5.558,3780,5.558,3781,5.558,3782,5.558,3783,5.558,3784,5.558,3785,5.558,3786,5.558,3787,5.558,3788,5.558,3789,5.558,3790,5.558,3791,5.558,3792,5.558,3793,5.558,3794,5.558,3795,5.558,3796,5.558,3797,5.558,3798,5.558,3799,5.558,3800,5.558]],["title/miscellaneous/enumerations.html",[3801,2.363,3802,4.907]],["body/miscellaneous/enumerations.html",[12,1.475,13,0.265,20,0.253,21,0.007,31,0.006,32,0.006,36,3.785,40,3.94,84,3.789,85,4.157,86,4.817,87,3.229,88,3.94,89,3.94,90,3.94,91,3.94,92,3.94,93,3.94,150,1.94,182,2.982,424,2.708,477,1.98,780,4.627,1250,5.031,1298,3.94,1666,4.157,1991,5.031,1992,5.276,1998,4.83,2452,4.83,2719,4.83,2885,3.94,3073,4.83,3099,6.335,3102,6.335,3111,6.91,3112,5.562,3113,6.91,3626,6.335,3661,5.182,3663,5.653,3746,5.182,3801,3.94,3802,5.653,3803,5.653,3804,7.784,3805,6.368,3806,6.368,3807,5.653,3808,6.368,3809,6.368]],["title/miscellaneous/functions.html",[684,4.499,3801,2.363]],["body/miscellaneous/functions.html",[12,2.035,13,0.294,17,0.769,20,0.281,21,0.007,31,0.006,32,0.006,184,1.324,217,1.544,236,4.171,270,4.37,360,4.198,367,3.901,401,1.636,545,5.748,683,6.27,684,5.748,743,4.042,847,5.917,887,5.357,1012,4.37,2242,5.353,2885,4.37,3735,6.27,3737,6.27,3801,4.37,3810,7.063,3811,7.063,3812,7.063]],["title/index.html",[13,0.191,3813,4.074]],["body/index.html",[2,1.879,21,0.008,31,0.004,32,0.004,35,0.851,212,1.352,230,1.075,231,7.166,232,1.554,233,1.772,234,1.879,235,1.879,236,1.724,237,1.772,238,1.772,239,3.326,240,3.326,241,3.326,242,6.647,243,4.84,244,5.044,245,4.593,246,6.427,247,4.593,248,4.593,249,5.437,250,5.377,251,4.357,252,6.337,253,4.357,254,2.734,255,1.879,256,1.879,508,3.978,515,5.223,610,3.326,611,3.326,612,3.326,613,3.326,614,5.543,615,4.464,616,5.773,695,2.677,749,4.052,751,4.803,802,1.447,812,3.526,813,4.625,814,3.821,968,1.824,998,5,1000,5,1002,4.625,1004,5,1164,2.144,1166,4.155,1338,4.155,1374,4.803,1459,5.36,1460,3.326,1461,3.326,1462,3.326,1510,3.326,1511,3.326,1512,3.326,2030,3.326,2031,3.326,2032,3.326,2033,3.326,2034,5.891,2035,4.369,2036,4.196,2037,4.369,2362,5.477,2367,6.13,2368,3.326,2370,3.326,2371,3.326,2519,3.326,2520,3.326,2522,3.326,2525,5.456,2531,5,2726,3.326,2727,3.326,2728,3.326,2729,3.326,2730,5.594,2747,5.477,2837,3.326,2839,3.326,2840,3.326,2985,3.326,2986,3.326,2987,3.326,3285,3.326,3286,3.326,3287,3.326,3408,3.326,3409,3.326,3411,3.326,3696,3.326,3699,3.326,3727,3.326,3813,3.326,3814,3.747,3815,3.747,3816,3.747]],["title/modules.html",[232,2.611]],["body/modules.html",[21,0.006,31,0.006,32,0.006,231,4.857,232,2.656,242,4.575,243,3.419,244,4.575,245,4.575,246,4.34,247,4.575,248,4.575,249,3.962,250,3.962,251,4.34,252,4.575,536,6.098,539,7.278,614,4.138,1459,4.575,2034,4.138,2367,4.857,2525,4.138,2730,4.575,3817,9.595,3818,9.595,3819,9.707,3820,8.997]],["title/properties.html",[14,0.767,3753,3.39]],["body/properties.html",[9,0.874,14,0.995,21,0.007,31,0.006,32,0.006,228,6.796,924,4.433,996,3.592,2355,5.83,3821,7.164,3822,7.164,3823,7.164,3824,7.164,3825,7.164,3826,7.164,3827,8.351,3828,7.164,3829,7.164,3830,7.164,3831,7.164,3832,7.164,3833,7.164,3834,7.164]],["title/miscellaneous/typealiases.html",[3801,2.363,3835,5.528]],["body/miscellaneous/typealiases.html",[11,2.971,13,0.247,20,0.375,21,0.007,23,1.271,31,0.006,32,0.006,67,1.7,84,2.884,85,3.164,97,2.726,129,2.091,150,1.805,152,2.458,177,4.233,179,3.248,180,4.016,194,4.607,223,3.83,281,4.112,313,2.399,364,2.585,368,2.654,389,3.83,390,4.811,428,2.585,436,2.726,438,3.83,443,3.273,447,4.016,448,4.233,449,4.112,564,1.961,597,3.273,669,6.585,914,4.425,969,4.822,983,5.319,1069,4.822,1073,6.058,1074,4.495,1159,4.112,1170,2.884,1298,3.667,1463,5.045,1468,6.949,1478,5.045,1486,5.647,1492,6.058,1500,6.058,1506,4.495,1660,4.822,1662,6.058,1698,4.822,1713,4.822,1723,4.495,1740,5.319,1747,5.045,1755,4.233,2188,4.822,2193,6.058,2194,4.233,2242,4.811,2885,3.667,3034,4.233,3073,4.495,3114,4.016,3498,4.495,3503,6.058,3801,3.667,3807,5.26,3836,5.925,3837,5.925,3838,5.925,3839,5.925,3840,5.925,3841,7.58,3842,5.925,3843,5.26,3844,5.925,3845,6.609]],["title/miscellaneous/variables.html",[2405,4.193,3801,2.363]],["body/miscellaneous/variables.html",[11,1.511,12,1.672,13,0.125,19,0.617,20,0.353,21,0.008,22,1.831,23,0.646,31,0.004,32,0.004,51,1.052,85,1.609,98,2.474,108,1.609,121,0.847,123,1.22,125,1.315,130,2.838,145,0.9,148,1.635,150,0.918,165,1.511,166,1.467,182,2.816,184,1.188,201,1.137,214,0.672,221,1.455,230,1.329,276,3.514,279,3.514,281,1.665,283,3.514,287,3.514,290,3.514,292,3.514,294,3.514,309,2.452,318,2.452,333,1.699,337,1.865,367,1.665,368,1.35,371,2.042,403,1.35,414,2,422,4.392,432,1.558,458,2.179,489,2.042,517,1.511,535,1.411,545,2.452,564,2.096,568,1.386,574,2.386,580,2.452,581,2.452,617,2.452,633,3.31,634,2.675,635,3.77,636,3.77,637,6.612,638,2.452,639,6.673,640,2.675,641,6.135,642,2.675,643,2.675,644,2.675,645,2.675,646,2.452,647,2.675,648,2.675,649,2.675,650,2.286,651,2.675,652,2.675,653,2.675,672,3.776,745,3.14,826,3.117,838,2.914,866,2.994,915,1.467,1161,2.286,1170,1.467,1175,2.396,1432,2.675,1433,3.77,1463,3.14,1464,3.77,1465,2.675,1466,2.675,1467,2.042,1473,2.452,1478,2.042,1479,2.675,1483,2.452,1484,2.675,1487,2.675,1488,4.293,1489,4.094,1490,4.592,1506,5.186,1627,2.452,1629,3.77,1630,2.675,1631,2.675,1632,2.675,1633,2.675,1634,5.623,1635,6.069,1636,5.886,1637,6.194,1638,2.675,1639,2.675,1640,2.675,1641,2.675,1642,2.675,1709,2.675,1723,2.286,1743,2.867,1755,2.153,1756,3.31,1757,2.675,1772,2.452,2038,2.452,2057,2.675,2058,2.675,2072,4.032,2077,3.77,2194,3.31,2200,2.452,2209,2.675,2210,2.675,2211,2.675,2212,5.01,2213,2.286,2214,2.675,2215,2.675,2216,2.675,2217,2.675,2313,2.042,2372,2.452,2374,3.77,2375,2.675,2376,2.452,2405,3.514,2417,2.153,2479,2.994,2550,3.514,2576,4.281,2841,2.452,2842,2.452,2846,2.675,2847,2.675,2848,2.675,2849,5.01,2850,5.01,2851,2.452,2852,2.452,3034,5.371,3114,2.042,3156,2.675,3157,2.153,3189,3.77,3192,4.112,3289,2.452,3291,2.452,3292,2.675,3293,2.675,3294,2.675,3498,2.286,3504,2.675,3505,2.675,3506,2.675,3507,2.675,3508,6.673,3509,2.675,3510,2.675,3511,2.675,3512,2.675,3513,2.675,3514,2.675,3515,2.675,3516,2.675,3517,2.675,3530,2.452,3531,5.01,3532,5.01,3533,5.01,3534,2.675,3661,2.452,3698,2.675,3701,2.675,3704,4.112,3713,2.675,3739,2.675,3744,5.01,3746,2.452,3747,4.112,3801,1.865,3803,2.675,3841,2.675,3843,2.675,3845,2.675,3846,6.334,3847,3.013,3848,3.013,3849,3.013,3850,4.632,3851,3.013,3852,3.013,3853,3.013,3854,3.013,3855,4.632,3856,3.013,3857,3.013,3858,3.013,3859,3.013,3860,5.643,3861,3.013,3862,6.334,3863,3.013,3864,7.218,3865,3.013,3866,4.632,3867,3.013,3868,3.013,3869,4.632,3870,3.013,3871,4.632,3872,3.013,3873,3.013,3874,3.013,3875,3.013,3876,4.632,3877,3.013,3878,3.013,3879,3.013,3880,3.013]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1219,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["0.0.1",{"_index":3822,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":3775,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":3776,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":3781,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":3795,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":3768,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":3799,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3456,"title":{},"body":{"injectables/StatusListService.html":{}}}],["0.5.1",{"_index":3780,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":3688,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3719,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":3720,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3681,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3687,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":3695,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3691,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3740,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3741,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3714,"title":{},"body":{"coverage.html":{}}}],["01",{"_index":1111,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["01'})@isstring",{"_index":1105,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["02",{"_index":1115,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["02'})@isstring",{"_index":3549,"title":{},"body":{"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["03t10:30:00z",{"_index":1118,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["08",{"_index":1117,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["1",{"_index":1164,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/WellKnownService.html":{},"index.html":{}}}],["1.11.0",{"_index":3779,"title":{},"body":{"dependencies.html":{}}}],["1.13.0",{"_index":3774,"title":{},"body":{"dependencies.html":{}}}],["1.5.4",{"_index":3793,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":3716,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":3700,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":3725,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":3728,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":3697,"title":{},"body":{"coverage.html":{}}}],["10)}/${randomuuid()}${safeext",{"_index":1783,"title":{},"body":{"injectables/FilesService.html":{}}}],["10,000",{"_index":3435,"title":{},"body":{"injectables/StatusListService.html":{}}}],["10.5.0",{"_index":3790,"title":{},"body":{"dependencies.html":{}}}],["10/15",{"_index":3706,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":923,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["1000",{"_index":1443,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["10000",{"_index":3449,"title":{},"body":{"injectables/StatusListService.html":{}}}],["11.0.0",{"_index":3767,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":3762,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":3800,"title":{},"body":{"dependencies.html":{}}}],["11.1.6",{"_index":3757,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":3766,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":3815,"title":{},"body":{"index.html":{}}}],["12/14",{"_index":3745,"title":{},"body":{"coverage.html":{}}}],["12/schema",{"_index":3071,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["123e4567",{"_index":1098,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["12d3",{"_index":1100,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["13.1.1",{"_index":3791,"title":{},"body":{"dependencies.html":{}}}],["14/14",{"_index":3738,"title":{},"body":{"coverage.html":{}}}],["15",{"_index":3816,"title":{},"body":{"index.html":{}}}],["15.1.3",{"_index":3792,"title":{},"body":{"dependencies.html":{}}}],["15/15",{"_index":3749,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":3696,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["18",{"_index":3814,"title":{},"body":{"index.html":{}}}],["18.0.0",{"_index":3782,"title":{},"body":{"dependencies.html":{}}}],["19/21",{"_index":3703,"title":{},"body":{"coverage.html":{}}}],["2.0",{"_index":2355,"title":{},"body":{"controllers/OAuthController.html":{},"injectables/WellKnownService.html":{},"properties.html":{}}}],["2/2",{"_index":3718,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":3721,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":3710,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":460,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":1984,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["2024",{"_index":1104,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["20250714110838",{"_index":3770,"title":{},"body":{"dependencies.html":{}}}],["23",{"_index":3742,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":580,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["24h",{"_index":576,"title":{},"body":{"controllers/AuthController.html":{}}}],["25",{"_index":3727,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["256",{"_index":1433,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["3.0.1",{"_index":3761,"title":{},"body":{"dependencies.html":{}}}],["3.14.3",{"_index":3786,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":3784,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":3755,"title":{},"body":{"dependencies.html":{}}}],["3.864.0",{"_index":3754,"title":{},"body":{"dependencies.html":{}}}],["3/13",{"_index":3743,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":3726,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3686,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":3748,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":920,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/FilesService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["30d",{"_index":579,"title":{},"body":{"controllers/AuthController.html":{}}}],["33",{"_index":3724,"title":{},"body":{"coverage.html":{}}}],["36/36",{"_index":3684,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":2416,"title":{},"body":{"injectables/OAuthService.html":{},"classes/TokenResponseDto.html":{}}}],["4.0.1",{"_index":3756,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":3758,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":3787,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":3715,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":3712,"title":{},"body":{"coverage.html":{}}}],["4/6",{"_index":3694,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":479,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["426614174000",{"_index":1110,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["426614174000'})@isuuid",{"_index":1102,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["47",{"_index":3708,"title":{},"body":{"coverage.html":{}}}],["4909",{"_index":2010,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["5",{"_index":2130,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["5.0.3",{"_index":3765,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":3798,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":3705,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":3699,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["500",{"_index":773,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["6.0.0",{"_index":3764,"title":{},"body":{"dependencies.html":{}}}],["6.0.12",{"_index":3783,"title":{},"body":{"dependencies.html":{}}}],["6.0.2",{"_index":3777,"title":{},"body":{"dependencies.html":{}}}],["6/10",{"_index":3689,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":3723,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":3731,"title":{},"body":{"coverage.html":{}}}],["6/8",{"_index":3736,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":2576,"title":{},"body":{"injectables/Oid4vpService.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["66",{"_index":3693,"title":{},"body":{"coverage.html":{}}}],["7.8.2",{"_index":3796,"title":{},"body":{"dependencies.html":{}}}],["7/7",{"_index":3722,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":3685,"title":{},"body":{"coverage.html":{}}}],["8.16.3",{"_index":3789,"title":{},"body":{"dependencies.html":{}}}],["8/12",{"_index":3717,"title":{},"body":{"coverage.html":{}}}],["8/8",{"_index":3729,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":3711,"title":{},"body":{"coverage.html":{}}}],["81",{"_index":3733,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":3730,"title":{},"body":{"coverage.html":{}}}],["86400",{"_index":532,"title":{},"body":{"controllers/AuthController.html":{}}}],["8a7a",{"_index":2011,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["8ad6",{"_index":2009,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["9/10",{"_index":3751,"title":{},"body":{"coverage.html":{}}}],["9/11",{"_index":3734,"title":{},"body":{"coverage.html":{}}}],["9/19",{"_index":3709,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":3750,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":3702,"title":{},"body":{"coverage.html":{}}}],["_d",{"_index":1591,"title":{},"body":{"classes/DBKeyService.html":{}}}],["_ext",{"_index":1595,"title":{},"body":{"classes/DBKeyService.html":{}}}],["_key_ops",{"_index":1593,"title":{},"body":{"classes/DBKeyService.html":{}}}],["a128gcm",{"_index":2590,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["a456",{"_index":1101,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["a739c2c412c0",{"_index":2012,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["abstract",{"_index":2229,"title":{},"body":{"classes/KeyService.html":{}}}],["accept",{"_index":2019,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/WellKnownController.html":{}}}],["accepts",{"_index":483,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":11,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"injectables/WellKnownService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["access_token",{"_index":528,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["accesscert",{"_index":2598,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscert?.length",{"_index":2607,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscertificatecontrollerregister",{"_index":2900,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["accesscertificateid",{"_index":2832,"title":{},"body":{"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificateresponse",{"_index":1,"title":{"interfaces/AccessCertificateResponse.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["accessing",{"_index":2869,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["accesskeyid",{"_index":3525,"title":{},"body":{"modules/StorageModule.html":{}}}],["accesstoken",{"_index":2413,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{}}}],["accesstokenrequest",{"_index":886,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["accordingly",{"_index":1058,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["acl",{"_index":1744,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/S3FileStorage.html":{}}}],["acl=public",{"_index":1752,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["action",{"_index":2555,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["active",{"_index":3102,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["actual",{"_index":606,"title":{},"body":{"controllers/AuthController.html":{}}}],["adapters/db",{"_index":2206,"title":{},"body":{"modules/KeyModule.html":{}}}],["adapters/local.storage",{"_index":3500,"title":{},"body":{"modules/StorageModule.html":{}}}],["adapters/s3.storage",{"_index":3501,"title":{},"body":{"modules/StorageModule.html":{}}}],["adapters/vault",{"_index":2208,"title":{},"body":{"modules/KeyModule.html":{}}}],["add",{"_index":1399,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/MetricModule.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/WellKnownService.html":{}}}],["add(issuer_state",{"_index":3308,"title":{},"body":{"injectables/SessionService.html":{}}}],["addaccesscertificate",{"_index":2861,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addaccesscertificate(tenantid",{"_index":2871,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addclient",{"_index":2378,"title":{},"body":{"injectables/OAuthService.html":{}}}],["addclient(clientid",{"_index":2386,"title":{},"body":{"injectables/OAuthService.html":{}}}],["adding",{"_index":2857,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["additional",{"_index":1270,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/SessionLogContext.html":{}}}],["additionaldata",{"_index":3246,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["addkey",{"_index":2162,"title":{},"body":{"controllers/KeyController.html":{}}}],["addkey(token",{"_index":2166,"title":{},"body":{"controllers/KeyController.html":{}}}],["addregistrationcertificate",{"_index":2862,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addregistrationcertificate(req",{"_index":2874,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp",{"_index":2863,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp(name",{"_index":2876,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["adds",{"_index":2878,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["against",{"_index":1236,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["agent",{"_index":369,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["alg",{"_index":915,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["algorithm",{"_index":1491,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/RegistrarService.html":{}}}],["algorithms",{"_index":1472,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["alias",{"_index":3692,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":3836,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":37,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["allow_list",{"_index":88,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/enumerations.html":{}}}],["allowedsigningalgs",{"_index":901,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["allowing",{"_index":1055,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["allowinsecureurls",{"_index":2063,"title":{},"body":{"modules/IssuerModule.html":{}}}],["allowlist",{"_index":89,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/enumerations.html":{}}}],["allowlistpolicy",{"_index":34,"title":{"classes/AllowListPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["allows",{"_index":2359,"title":{},"body":{"controllers/OAuthController.html":{}}}],["alpha",{"_index":3769,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":1197,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["always",{"_index":1678,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["amount",{"_index":1162,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{}}}],["any).$schema",{"_index":1413,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["any).azp",{"_index":2146,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any).issuer",{"_index":2145,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any).method",{"_index":964,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/IssuanceService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["apache",{"_index":3830,"title":{},"body":{"properties.html":{}}}],["api",{"_index":178,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/RegistrarService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["api:read",{"_index":2705,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["api:write",{"_index":2706,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apibody",{"_index":503,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apibody({description",{"_index":731,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["apiexcludecontroller",{"_index":219,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiexcludecontroller(process.env.swagger_all",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiheader",{"_index":3636,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apihideproperty",{"_index":1878,"title":{},"body":{"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["apihideproperty()@column('varchar",{"_index":1875,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apikey",{"_index":195,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["apikeyconfig",{"_index":176,"title":{"classes/ApiKeyConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["apioperation",{"_index":504,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OAuthController.html":{},"controllers/WellKnownController.html":{}}}],["apioperation({summary",{"_index":2354,"title":{},"body":{"controllers/OAuthController.html":{},"controllers/WellKnownController.html":{}}}],["apiparam",{"_index":2477,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["apiproduces",{"_index":1990,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["apiproduces(\"application/json",{"_index":2001,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproduces(mediatype.application_json",{"_index":3638,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiproperty",{"_index":1107,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/Session.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["apiproperty({description",{"_index":1094,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["apiproperty({enum",{"_index":3100,"title":{},"body":{"entities/Session.html":{}}}],["apiproperty({example",{"_index":2451,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["apiproperty({type",{"_index":2443,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["apiresponse",{"_index":505,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiresponse({description",{"_index":1983,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apisecurity",{"_index":1329,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apisecurity(\"oauth2",{"_index":1335,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["apitags",{"_index":506,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{}}}],["apitags(\"authentication",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"issuer",{"_index":1333,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["apitags(\"oauth",{"_index":2364,"title":{},"body":{"controllers/OAuthController.html":{}}}],["apitags(\"presentation",{"_index":2704,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apitags(\"session",{"_index":3137,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags(\"status",{"_index":3390,"title":{},"body":{"controllers/StatusListController.html":{}}}],["app/app.controller",{"_index":275,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":211,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":2885,"title":{},"body":{"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["application/json",{"_index":1998,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/jwk",{"_index":3622,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["application/jwt",{"_index":3663,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/statuslist+jwt",{"_index":3388,"title":{},"body":{"controllers/StatusListController.html":{}}}],["application_json",{"_index":3808,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["application_jwt",{"_index":3809,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["applications",{"_index":495,"title":{},"body":{"controllers/AuthController.html":{}}}],["applied",{"_index":157,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["appmodule",{"_index":231,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["args",{"_index":402,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["args.object",{"_index":416,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["array",{"_index":1189,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["array(size",{"_index":3452,"title":{},"body":{"injectables/StatusListService.html":{}}}],["array(size).fill(0).map",{"_index":3450,"title":{},"body":{"injectables/StatusListService.html":{}}}],["array.isarray(dcql_query",{"_index":2573,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["associated",{"_index":1154,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{}}}],["assume",{"_index":936,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["async",{"_index":414,"title":{},"body":{"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["att",{"_index":2823,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attached",{"_index":2655,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["attestation",{"_index":107,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{}}}],["attestation_based",{"_index":92,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/enumerations.html":{}}}],["attestationbased",{"_index":93,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/enumerations.html":{}}}],["attestationbasedpolicy",{"_index":109,"title":{"classes/AttestationBasedPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["attestations",{"_index":2656,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["attestations.map((att",{"_index":2824,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attribute",{"_index":1271,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["aud",{"_index":600,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["audience",{"_index":577,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth",{"_index":209,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["auth.controller",{"_index":628,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":629,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.module",{"_index":1802,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["auth/auth.guard",{"_index":1330,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth/auth.module",{"_index":277,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/token.decorator",{"_index":1331,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["auth_client_id",{"_index":652,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["auth_client_secret",{"_index":650,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"miscellaneous/variables.html":{}}}],["auth_queries",{"_index":772,"title":{},"body":{"controllers/AuthorizeController.html":{},"entities/Session.html":{}}}],["auth_session",{"_index":781,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth_validation_schema",{"_index":276,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authconfig",{"_index":194,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["authconfigvalidator",{"_index":388,"title":{"classes/AuthConfigValidator.html":{}},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authcontroller",{"_index":450,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":497,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["authenticate(req",{"_index":2097,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authenticating",{"_index":2893,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["authentication",{"_index":179,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/typealiases.html":{}}}],["authentication.'})@apiresponse({status",{"_index":493,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticationconfig",{"_index":449,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["authenticationconfigdto",{"_index":417,"title":{"classes/AuthenticationConfigDto.html":{}},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationconfighelper",{"_index":681,"title":{"classes/AuthenticationConfigHelper.html":{}},"body":{"classes/AuthenticationConfigHelper.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["authenticationconfighelper.isauthurlauth(authconfig",{"_index":955,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationconfighelper.isnoneauth(authconfig",{"_index":961,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationconfighelper.ispresentationduringissuanceauth",{"_index":951,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authenticationurlconfig",{"_index":404,"title":{"classes/AuthenticationUrlConfig.html":{}},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authfixed",{"_index":2006,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["authguard",{"_index":2076,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard(\"jwt",{"_index":2066,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":546,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.startswith(\"basic",{"_index":548,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.substring(6",{"_index":550,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":242,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{}}}],["author",{"_index":3832,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":191,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["authorization_challenge_endpoint",{"_index":872,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_code",{"_index":889,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorization_encrypted_response_alg",{"_index":2588,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_encrypted_response_enc",{"_index":2589,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_endpoint",{"_index":862,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_request",{"_index":2552,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{}}}],["authorization_server",{"_index":1299,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["authorization_servers",{"_index":1300,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["authorizationchallengeendpoint",{"_index":718,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationchallengeendpoint(res",{"_index":721,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{}}}],["authorizationcodegrantidentifier",{"_index":836,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationresponse",{"_index":706,"title":{"classes/AuthorizationResponse.html":{}},"body":{"classes/AuthorizationResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["authorizationserver",{"_index":854,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata",{"_index":819,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.dpop_signing_alg_values_supported",{"_index":902,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.issuer",{"_index":921,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorize",{"_index":719,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(@query",{"_index":760,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(queries",{"_index":726,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize.service",{"_index":752,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize/authorize.controller",{"_index":2048,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorize/authorize.service",{"_index":2049,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorizecontroller",{"_index":710,"title":{"controllers/AuthorizeController.html":{}},"body":{"controllers/AuthorizeController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["authorized",{"_index":426,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["authorized_code",{"_index":892,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizequeries",{"_index":722,"title":{"classes/AuthorizeQueries.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"coverage.html":{}}}],["authorizequeries})@post('par",{"_index":733,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorizeservice",{"_index":751,"title":{"injectables/AuthorizeService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["authresponse",{"_index":659,"title":{"interfaces/AuthResponse.html":{}},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["authserver",{"_index":856,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/.well",{"_index":864,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize",{"_index":863,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/challenge",{"_index":873,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/par",{"_index":869,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/token",{"_index":861,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authtype",{"_index":3587,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["authz",{"_index":2596,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authzmetadata",{"_index":804,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/WellKnownController.html":{}}}],["authzmetadata(session",{"_index":817,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/WellKnownController.html":{}}}],["autoloadentities",{"_index":1647,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["autologging",{"_index":346,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":2315,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["available",{"_index":536,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/OAuthService.html":{},"entities/StatusListEntity.html":{},"modules.html":{}}}],["avoid",{"_index":3221,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["await",{"_index":574,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":3044,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["axios",{"_index":3778,"title":{},"body":{"dependencies.html":{}}}],["back",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{}}}],["badgateway/oauth2",{"_index":2897,"title":{},"body":{"injectables/RegistrarService.html":{},"dependencies.html":{}}}],["badrequestexception",{"_index":990,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["base",{"_index":435,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["base64",{"_index":552,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/FileStorage.html":{},"injectables/ResolverService.html":{}}}],["base64credentials",{"_index":549,"title":{},"body":{"controllers/AuthController.html":{}}}],["base64url",{"_index":3875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":108,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/variables.html":{}}}],["basedir",{"_index":2252,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["baseurl",{"_index":2918,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["basic",{"_index":484,"title":{},"body":{"controllers/AuthController.html":{}}}],["batch",{"_index":1163,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{}}}],["batch_credential_issuance",{"_index":1301,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batch_size",{"_index":1165,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{}}}],["bearer",{"_index":192,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["before",{"_index":933,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["being",{"_index":131,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"interfaces/SessionLogContext.html":{}}}],["belongs",{"_index":3407,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["better",{"_index":3590,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["between",{"_index":667,"title":{},"body":{"interfaces/AuthResponse.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/IssuanceService.html":{}}}],["binary",{"_index":2000,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["binding",{"_index":170,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["binding.credentialconfig",{"_index":171,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["binding.credentialconfigid",{"_index":1408,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["binding.dto.ts",{"_index":1090,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["binding.dto.ts:13",{"_index":1097,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["binding.dto.ts:20",{"_index":1103,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["binding.dto.ts:28",{"_index":1106,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["binding.dto.ts:40",{"_index":3550,"title":{},"body":{"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["binding.dto.ts:51",{"_index":1291,"title":{},"body":{"classes/CredentialIssuanceBindingResponseDto.html":{}}}],["binding.dto.ts:57",{"_index":1290,"title":{},"body":{"classes/CredentialIssuanceBindingResponseDto.html":{}}}],["binding.dto.ts:63",{"_index":1292,"title":{},"body":{"classes/CredentialIssuanceBindingResponseDto.html":{}}}],["binding.dto.ts:69",{"_index":1293,"title":{},"body":{"classes/CredentialIssuanceBindingResponseDto.html":{}}}],["binding.dto.ts:75",{"_index":1289,"title":{},"body":{"classes/CredentialIssuanceBindingResponseDto.html":{}}}],["binding.entity",{"_index":83,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["binding.entity.ts",{"_index":1266,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"coverage.html":{}}}],["binding.entity.ts:21",{"_index":1278,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:24",{"_index":1281,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:34",{"_index":1277,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:44",{"_index":1280,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:51",{"_index":1274,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.entity.ts:58",{"_index":1283,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["binding.issuanceconfig",{"_index":1867,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["binding?.credentialconfig?.keyid",{"_index":1425,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["bindings",{"_index":168,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["bits",{"_index":3399,"title":{},"body":{"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["bitsperstatus",{"_index":3400,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["body",{"_index":485,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["body.auth_session",{"_index":934,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.client_id",{"_index":559,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.client_secret",{"_index":560,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.code",{"_index":890,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.grant_type",{"_index":540,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.issuer_state",{"_index":927,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.privatekey",{"_index":1587,"title":{},"body":{"classes/DBKeyService.html":{}}}],["body.requestid",{"_index":2710,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body.response",{"_index":2627,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["body.response_type",{"_index":2021,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["body.webhook",{"_index":2711,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body['pre",{"_index":891,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["boolean",{"_index":28,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/PolicyCredential.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["bootstrap",{"_index":236,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["both",{"_index":767,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bound",{"_index":146,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{}}}],["browse",{"_index":3819,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3817,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":3031,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["buffer",{"_index":1737,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuerManagementController.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"classes/S3FileStorage.html":{}}}],["buffer.from",{"_index":551,"title":{},"body":{"controllers/AuthController.html":{}}}],["buffer.from(signature).tostring(\"base64url",{"_index":3872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.from(signaturebase64url",{"_index":3874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bugs",{"_index":3826,"title":{},"body":{"properties.html":{}}}],["builder/querypartialentity",{"_index":3341,"title":{},"body":{"injectables/SessionService.html":{}}}],["c.id",{"_index":1027,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["cache",{"_index":2127,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/WellKnownService.html":{}}}],["call",{"_index":2923,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["callback",{"_index":668,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{}}}],["callbacks",{"_index":431,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["called",{"_index":2884,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["callhandler",{"_index":3171,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["canactivate",{"_index":2067,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/SessionGuard.html":{}}}],["canactivate(context",{"_index":2071,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/SessionGuard.html":{}}}],["canonical",{"_index":1748,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["cascade",{"_index":172,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["case",{"_index":1508,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["catch",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{}}}],["catcherror",{"_index":3186,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["catcherror((error",{"_index":3214,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["cb",{"_index":2132,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cb(err",{"_index":2136,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cert",{"_index":1242,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["cert.crt",{"_index":2246,"title":{},"body":{"classes/KeyService.html":{}}}],["cert.id",{"_index":1614,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/RegistrarService.html":{}}}],["cert.publickey.export",{"_index":3011,"title":{},"body":{"injectables/ResolverService.html":{}}}],["cert.revoked",{"_index":2969,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cert.subjectaltname?.includes(new",{"_index":3008,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certentity",{"_index":71,"title":{"entities/CertEntity.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["certificate",{"_index":7,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"coverage.html":{}}}],["certificatechainlength",{"_index":2606,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["certificates",{"_index":970,"title":{},"body":{"entities/CertEntity.html":{},"injectables/RegistrarService.html":{}}}],["certificatetype",{"_index":983,"title":{},"body":{"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["certrepository",{"_index":1534,"title":{},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{}}}],["certs",{"_index":2965,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["certs?.length",{"_index":2971,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["certs[0",{"_index":3007,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certs[0].jwt",{"_index":2972,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cfg",{"_index":3518,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get",{"_index":3524,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_bucket",{"_index":3527,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_endpoint",{"_index":3522,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_public_base_url",{"_index":3528,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_region",{"_index":3521,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"storage_driver",{"_index":3519,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.getorthrow(\"local_storage_dir",{"_index":3529,"title":{},"body":{"modules/StorageModule.html":{}}}],["chain",{"_index":3004,"title":{},"body":{"injectables/ResolverService.html":{}}}],["challenge",{"_index":725,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["check",{"_index":336,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["checked",{"_index":941,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["checking",{"_index":3434,"title":{},"body":{"injectables/StatusListService.html":{}}}],["checks",{"_index":1844,"title":{},"body":{"controllers/HealthController.html":{},"injectables/RegistrarService.html":{}}}],["checksum",{"_index":1745,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{}}}],["checksumsha256",{"_index":3054,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["checl",{"_index":3012,"title":{},"body":{"injectables/ResolverService.html":{}}}],["child",{"_index":1952,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["children",{"_index":1949,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["claims",{"_index":128,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["claims_supported",{"_index":599,"title":{},"body":{"controllers/AuthController.html":{}}}],["claimswebhook",{"_index":1158,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["class",{"_index":33,"title":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":35,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"index.html":{}}}],["clear",{"_index":2643,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client",{"_index":465,"title":{"interfaces/Client.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"coverage.html":{},"dependencies.html":{}}}],["client.id",{"_index":570,"title":{},"body":{"controllers/AuthController.html":{}}}],["client.secret",{"_index":1028,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["client.service",{"_index":509,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["client_credentials",{"_index":525,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenRequestDto.html":{}}}],["client_credentials'})@isstring()@isin(['client_credentials",{"_index":3539,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["client_id",{"_index":498,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{}}}],["client_metadata",{"_index":2582,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_name",{"_index":2591,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_secret",{"_index":499,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"classes/TokenRequestDto.html":{}}}],["client_secret_basic",{"_index":593,"title":{},"body":{"controllers/AuthController.html":{}}}],["client_secret_post",{"_index":594,"title":{},"body":{"controllers/AuthController.html":{}}}],["clientcredentialsdto",{"_index":473,"title":{"classes/ClientCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["cliententry",{"_index":630,"title":{"entities/ClientEntry.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"coverage.html":{}}}],["clientid",{"_index":542,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["clientrepository",{"_index":1009,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["clients",{"_index":658,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{}}}],["clientsecret",{"_index":543,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{}}}],["clientservice",{"_index":508,"title":{"injectables/ClientService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["clientstatus",{"_index":1073,"title":{},"body":{"entities/ClientEntry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["cloudfront",{"_index":3048,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["cluster_appmodule",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":610,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_exports",{"_index":612,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":611,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_providers",{"_index":613,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule",{"_index":1460,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule_exports",{"_index":1462,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule_providers",{"_index":1461,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptomodule",{"_index":1510,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_cryptomodule_exports",{"_index":1511,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_cryptomodule_providers",{"_index":1512,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_issuermodule",{"_index":2030,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_exports",{"_index":2032,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_imports",{"_index":2033,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_providers",{"_index":2031,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_oauthmodule",{"_index":2368,"title":{},"body":{"modules/OAuthModule.html":{},"index.html":{}}}],["cluster_oauthmodule_exports",{"_index":2370,"title":{},"body":{"modules/OAuthModule.html":{},"index.html":{}}}],["cluster_oauthmodule_imports",{"_index":2369,"title":{},"body":{"modules/OAuthModule.html":{}}}],["cluster_oauthmodule_providers",{"_index":2371,"title":{},"body":{"modules/OAuthModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule",{"_index":2519,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule_exports",{"_index":2520,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule_imports",{"_index":2521,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["cluster_oid4vpmodule_providers",{"_index":2522,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_presentationsmodule",{"_index":2726,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_exports",{"_index":2728,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_imports",{"_index":2729,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_providers",{"_index":2727,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_registrarmodule",{"_index":2837,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_registrarmodule_exports",{"_index":2840,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_registrarmodule_imports",{"_index":2838,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["cluster_registrarmodule_providers",{"_index":2839,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_resolvermodule",{"_index":2985,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_resolvermodule_exports",{"_index":2986,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_resolvermodule_providers",{"_index":2987,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_sessionmodule",{"_index":3285,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_exports",{"_index":3286,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_imports",{"_index":3288,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":3287,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_statuslistmodule",{"_index":3408,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_statuslistmodule_exports",{"_index":3411,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_statuslistmodule_imports",{"_index":3410,"title":{},"body":{"modules/StatusListModule.html":{}}}],["cluster_statuslistmodule_providers",{"_index":3409,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_verifiermodule",{"_index":3563,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cluster_verifiermodule_imports",{"_index":3564,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cnf",{"_index":1447,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["cnonce",{"_index":911,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["cnonceexpiresin",{"_index":922,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["code",{"_index":427,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{}}}],["code_challenge",{"_index":782,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_method",{"_index":783,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_methods_supported",{"_index":870,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["colorize",{"_index":350,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":66,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/DisplayEntity.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{}}}],["column(\"boolean",{"_index":147,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["column(\"date",{"_index":3116,"title":{},"body":{"entities/Session.html":{}}}],["column(\"int",{"_index":161,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"entities/StatusListEntity.html":{}}}],["column(\"json",{"_index":127,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column(\"varchar",{"_index":115,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column('date",{"_index":3085,"title":{},"body":{"entities/Session.html":{}}}],["column('int",{"_index":1862,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/StatusListEntity.html":{}}}],["column('json",{"_index":1119,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column('json')@isobject",{"_index":1122,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["column('varchar",{"_index":978,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column({type",{"_index":3485,"title":{},"body":{"entities/StatusMapping.html":{}}}],["commonoptions",{"_index":1645,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["comparison",{"_index":2976,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["complete",{"_index":2756,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["completed",{"_index":3112,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["completion",{"_index":3255,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["components",{"_index":1620,"title":{},"body":{"classes/DBKeyService.html":{}}}],["computed",{"_index":3056,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["condition",{"_index":3322,"title":{},"body":{"injectables/SessionService.html":{}}}],["config",{"_index":121,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/SessionService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/variables.html":{}}}],["config.config",{"_index":702,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.dto",{"_index":76,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationConfigHelper.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["config.dto.ts",{"_index":390,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/VCT.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["config.dto.ts:100",{"_index":2685,"title":{},"body":{"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.dto.ts:11",{"_index":3557,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:115",{"_index":680,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["config.dto.ts:125",{"_index":676,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["config.dto.ts:13",{"_index":3558,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:132",{"_index":678,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["config.dto.ts:15",{"_index":3560,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:17",{"_index":3561,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:21",{"_index":410,"title":{},"body":{"classes/AuthConfigValidator.html":{}}}],["config.dto.ts:5",{"_index":3562,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:50",{"_index":400,"title":{},"body":{"classes/AuthConfigValidator.html":{}}}],["config.dto.ts:7",{"_index":3559,"title":{},"body":{"classes/VCT.html":{}}}],["config.dto.ts:79",{"_index":703,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:88",{"_index":705,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:9",{"_index":3556,"title":{},"body":{"classes/VCT.html":{}}}],["config.entity",{"_index":1285,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["config.entity.ts",{"_index":1859,"title":{},"body":{"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"coverage.html":{}}}],["config.entity.ts:102",{"_index":2682,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:111",{"_index":2671,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:22",{"_index":2662,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:24",{"_index":1873,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:25",{"_index":2661,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:29",{"_index":2659,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:31",{"_index":1876,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:37",{"_index":1871,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:42",{"_index":2676,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:47",{"_index":1868,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:50",{"_index":2681,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:58",{"_index":1861,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["config.entity.ts:65",{"_index":1865,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:66",{"_index":2677,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:72",{"_index":1877,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:74",{"_index":2673,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:78",{"_index":1864,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:81",{"_index":2679,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:84",{"_index":1874,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:88",{"_index":2684,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:91",{"_index":1863,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:95",{"_index":2672,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.helper",{"_index":845,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["config.helper.ts",{"_index":682,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{},"coverage.html":{}}}],["config.helper.ts:14",{"_index":697,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.helper.ts:23",{"_index":694,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.helper.ts:32",{"_index":699,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.helper.ts:44",{"_index":691,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.key",{"_index":1251,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.keyid",{"_index":1241,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.method",{"_index":700,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["config.service",{"_index":1332,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["config.service.ts",{"_index":1169,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["config.service.ts:132",{"_index":1187,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:145",{"_index":1191,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:159",{"_index":1195,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:17",{"_index":1177,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{}}}],["config.service.ts:172",{"_index":1180,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:23",{"_index":2307,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:33",{"_index":1192,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:47",{"_index":2309,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:59",{"_index":2299,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:63",{"_index":2306,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:67",{"_index":2305,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:71",{"_index":2304,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:75",{"_index":2302,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:79",{"_index":2301,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:86",{"_index":2310,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:94",{"_index":2314,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.type",{"_index":425,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.url",{"_index":423,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["config/credential",{"_index":1168,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["config_folder",{"_index":320,"title":{},"body":{"modules/AppModule.html":{}}}],["config_import",{"_index":317,"title":{},"body":{"modules/AppModule.html":{}}}],["config_import_force",{"_index":319,"title":{},"body":{"modules/AppModule.html":{}}}],["config_storage_schema",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":260,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["configmodule.forroot",{"_index":301,"title":{},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{}}}],["configpath",{"_index":1206,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["configs",{"_index":1193,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["configservice",{"_index":261,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{}}}],["configservice.get",{"_index":335,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{}}}],["configservice.get(\"jwt_issuer",{"_index":2144,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"jwt_secret",{"_index":2140,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"keycloak_algorithm",{"_index":2138,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"log_level",{"_index":345,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"oidc",{"_index":2115,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow(\"db_database",{"_index":1657,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_host",{"_index":1649,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_password",{"_index":1655,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_port",{"_index":1651,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_username",{"_index":1653,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"folder",{"_index":380,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configservie",{"_index":1497,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["configurable",{"_index":573,"title":{},"body":{"controllers/AuthController.html":{}}}],["configuration",{"_index":112,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["configuration(@token",{"_index":2714,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configuration(user",{"_index":2690,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configurations",{"_index":436,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/typealiases.html":{}}}],["configured",{"_index":1504,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationRequest.html":{},"injectables/SessionService.html":{}}}],["conflictexception",{"_index":835,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{}}}],["conflictexception(\"certificate",{"_index":2247,"title":{},"body":{"classes/KeyService.html":{}}}],["conflictexception(\"issuer",{"_index":3019,"title":{},"body":{"injectables/ResolverService.html":{}}}],["conflictexception(\"no",{"_index":2629,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["conflictexception('authorization",{"_index":893,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["conflictexception(`request",{"_index":2804,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["connect",{"_index":492,"title":{},"body":{"controllers/AuthController.html":{}}}],["connect/certs",{"_index":2126,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["connect/token",{"_index":2912,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["connection",{"_index":1845,"title":{},"body":{"controllers/HealthController.html":{}}}],["console.error",{"_index":2133,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{}}}],["console.error(\"error",{"_index":2956,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["console.error(err",{"_index":1046,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["console.log('session",{"_index":2496,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["console.log(err",{"_index":2814,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["console.warn",{"_index":1804,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["const",{"_index":333,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateKeyDto.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["constraints",{"_index":1247,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["constructor",{"_index":521,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["constructor(@inject(file_storage",{"_index":1776,"title":{},"body":{"injectables/FilesService.html":{}}}],["constructor(basedir",{"_index":2250,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["constructor(configservice",{"_index":811,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"classes/DBKeyService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["constructor(configservie",{"_index":1495,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["constructor(credentialconfigrepository",{"_index":1174,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["constructor(cryptoservice",{"_index":1372,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["constructor(httpservice",{"_index":2746,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/WebhookService.html":{}}}],["constructor(issuanceconfigrepo",{"_index":1914,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["constructor(keyrepository",{"_index":1691,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["constructor(logger",{"_index":3243,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["constructor(oid4vciservice",{"_index":3652,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["constructor(private",{"_index":1339,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["constructor(reflector",{"_index":2068,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["constructor(s3",{"_index":3029,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["constructor(sessionrepository",{"_index":3303,"title":{},"body":{"injectables/SessionService.html":{}}}],["constructor(sessionservice",{"_index":3149,"title":{},"body":{"guards/SessionGuard.html":{}}}],["constructor(storage",{"_index":1762,"title":{},"body":{"injectables/FilesService.html":{}}}],["containing",{"_index":671,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"injectables/WellKnownService.html":{}}}],["content",{"_index":371,"title":{},"body":{"modules/AppModule.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["contenttype",{"_index":1743,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":2074,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/Oid4vpService.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["context.flowtype",{"_index":3271,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.getclass",{"_index":2082,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":2081,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.sessionid",{"_index":3273,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.switchtohttp().getrequest",{"_index":3153,"title":{},"body":{"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":3193,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.tenantid",{"_index":3274,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.ts",{"_index":3158,"title":{},"body":{"interfaces/SessionLogContext.html":{},"coverage.html":{}}}],["context.ts:21",{"_index":3160,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["continue",{"_index":1234,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["controller",{"_index":210,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["controller(\":session/.well",{"_index":3635,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["controller(\":session/authorize",{"_index":758,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["controller(\":session/oid4vp",{"_index":2514,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["controller(\":session/vci",{"_index":2483,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["controller(\":tenantid/credentials",{"_index":1359,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["controller(\":tenantid/status",{"_index":3391,"title":{},"body":{"controllers/StatusListController.html":{}}}],["controller(\"health",{"_index":1851,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"issuer",{"_index":1336,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["controller(\"key",{"_index":2178,"title":{},"body":{"controllers/KeyController.html":{}}}],["controller(\"oauth",{"_index":2365,"title":{},"body":{"controllers/OAuthController.html":{}}}],["controller(\"presentation",{"_index":2707,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["controller(\"session",{"_index":3138,"title":{},"body":{"controllers/SessionController.html":{}}}],["controllers",{"_index":212,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"modules/CryptoModule.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["convert",{"_index":1615,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{}}}],["coordinate",{"_index":1680,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["copy",{"_index":3220,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["correct",{"_index":942,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["corresponds",{"_index":448,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/typealiases.html":{}}}],["count",{"_index":1014,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/SessionService.html":{}}}],["countby",{"_index":1034,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["counter",{"_index":1218,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["coverage",{"_index":3678,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covered",{"_index":2961,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["create",{"_index":1040,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["create(session",{"_index":3311,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(tenantid",{"_index":1537,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["create_authorization_request",{"_index":2556,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest",{"_index":2529,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest(session",{"_index":2533,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationservermetadata",{"_index":860,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["createcredentialissuancebindingdto",{"_index":1088,"title":{"classes/CreateCredentialIssuanceBindingDto.html":{}},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["created",{"_index":977,"title":{},"body":{"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["createdat",{"_index":971,"title":{},"body":{"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["createdatecolumn",{"_index":974,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["createdsession",{"_index":3361,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.issuanceid",{"_index":3365,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.tenantid",{"_index":3364,"title":{},"body":{"injectables/SessionService.html":{}}}],["createentry",{"_index":3420,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createentry(session",{"_index":3427,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createhash('sha256').update(bufferorstreamtobuffer(body)).digest('base64",{"_index":1787,"title":{},"body":{"injectables/FilesService.html":{}}}],["createheaderandpayload",{"_index":3443,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist",{"_index":3421,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist(entry",{"_index":3430,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createparamdecorator",{"_index":3531,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["createreadstream",{"_index":2257,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createreadstream(fullpath",{"_index":2284,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createrequest",{"_index":2530,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createrequest(requestid",{"_index":2538,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["creates",{"_index":1482,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{}}}],["createwritestream",{"_index":2258,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createwritestream(fullpath",{"_index":2272,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["creating",{"_index":1091,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["creation",{"_index":2667,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["credential",{"_index":41,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["credential(req",{"_index":2466,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credential_configurations_supported",{"_index":1302,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{}}}],["credential_configurations_supported[value.id",{"_index":1417,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_creation",{"_index":3280,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_endpoint",{"_index":1303,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["credential_ids",{"_index":2657,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["credential_issuance",{"_index":3279,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_issuer",{"_index":1304,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["credential_revoked",{"_index":2346,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["credential_signing_alg_values_supported",{"_index":1404,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_verification",{"_index":3282,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credentialconfig",{"_index":113,"title":{"entities/CredentialConfig.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["credentialconfig.config",{"_index":1973,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfig.credentialissuancebindings",{"_index":1276,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["credentialconfig.keybinding",{"_index":1448,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.keyid",{"_index":1974,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfig.lifetime",{"_index":1446,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.schema",{"_index":1458,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.statusmanagement",{"_index":1439,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct",{"_index":1453,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct.vct",{"_index":1455,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigid",{"_index":1092,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/IssuanceService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["credentialconfigid.id",{"_index":1965,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfigmapping",{"_index":1147,"title":{"classes/CredentialConfigMapping.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["credentialconfigrepo",{"_index":1373,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigrepository",{"_index":1178,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfigs",{"_index":1155,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{}}}],["credentialconfigservice",{"_index":1166,"title":{"injectables/CredentialConfigService.html":{}},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["credentialconfiguration",{"_index":1418,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.claims",{"_index":1423,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.disclosureframe",{"_index":1424,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigurationid",{"_index":1380,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["credentialconfigurationids",{"_index":2442,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["credentialconfigurationsupported",{"_index":54,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["credentialcount",{"_index":2639,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialid",{"_index":1387,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialissuancebinding",{"_index":80,"title":{"entities/CredentialIssuanceBinding.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["credentialissuancebindingrepo",{"_index":1915,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialissuancebindingresponsedto",{"_index":1116,"title":{"classes/CredentialIssuanceBindingResponseDto.html":{}},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["credentialissuancebindings",{"_index":175,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["credentialissuancebindings.credentialconfig",{"_index":1962,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialissuer",{"_index":3669,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["credentialissuermetadatadto",{"_index":1294,"title":{"classes/CredentialIssuerMetadataDto.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["credentialofferobject",{"_index":3093,"title":{},"body":{"entities/Session.html":{}}}],["credentialpayload",{"_index":3074,"title":{},"body":{"entities/Session.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["credentialresponse",{"_index":2478,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credentials",{"_index":74,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["credentials.dto",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":1066,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:5",{"_index":1067,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:7",{"_index":1068,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.length",{"_index":2638,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentials.push",{"_index":1966,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentials.split",{"_index":555,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials/credential",{"_index":1930,"title":{},"body":{"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials/credentials.controller",{"_index":2050,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials/credentials.service",{"_index":1358,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{}}}],["credentials/entities/credential.entity",{"_index":1284,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials?.length",{"_index":2640,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialsconfigservice",{"_index":1916,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialscontroller",{"_index":1316,"title":{"controllers/CredentialsController.html":{}},"body":{"controllers/CredentialsController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsmetadatacontroller",{"_index":1346,"title":{"controllers/CredentialsMetadataController.html":{}},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsservice",{"_index":1338,"title":{"injectables/CredentialsService.html":{}},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["credentialtype",{"_index":3249,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["cron",{"_index":3326,"title":{},"body":{"injectables/SessionService.html":{}}}],["crt",{"_index":15,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{}}}],["crv",{"_index":1671,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["crypto",{"_index":1249,"title":{},"body":{"injectables/CredentialConfigService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"modules/KeyModule.html":{}}}],["crypto.service",{"_index":1515,"title":{},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{}}}],["crypto.webcrypto.subtle.exportkey",{"_index":3866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.generatekey",{"_index":3865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.importkey",{"_index":3869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.sign",{"_index":3870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.verify",{"_index":3877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto/crypto.module",{"_index":278,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["crypto/crypto.service",{"_index":842,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["crypto/encryption/encryption.service",{"_index":999,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{}}}],["crypto/key/crypto",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialsService.html":{},"injectables/WellKnownService.html":{}}}],["crypto/key/dto/key",{"_index":507,"title":{},"body":{"controllers/AuthController.html":{}}}],["crypto/key/entities/cert.entity",{"_index":72,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["crypto/key/key.module",{"_index":284,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto_alg",{"_index":1465,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"miscellaneous/variables.html":{}}}],["crypto_validation_schema",{"_index":279,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptoImplementatationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptographic",{"_index":2870,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cryptographic_binding_methods_supported",{"_index":1405,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["cryptoimplementatationmodule",{"_index":1459,"title":{"modules/CryptoImplementatationModule.html":{}},"body":{"modules/CryptoImplementatationModule.html":{},"modules/KeyModule.html":{},"index.html":{},"modules.html":{}}}],["cryptoimplementation",{"_index":1467,"title":{"interfaces/CryptoImplementation.html":{}},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptoimplementationservice",{"_index":1374,"title":{"injectables/CryptoImplementationService.html":{}},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["cryptokey",{"_index":1571,"title":{},"body":{"classes/DBKeyService.html":{}}}],["cryptomodule",{"_index":243,"title":{"modules/CryptoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["cryptoservice",{"_index":812,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["cryptoservice.getcrypto",{"_index":1586,"title":{},"body":{"classes/DBKeyService.html":{}}}],["cryptotype",{"_index":1500,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ctx",{"_index":3532,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3533,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":1945,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["currently",{"_index":198,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["curve",{"_index":1668,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["custom",{"_index":391,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["customprops",{"_index":359,"title":{},"body":{"modules/AppModule.html":{}}}],["d",{"_index":1590,"title":{},"body":{"classes/DBKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["data",{"_index":672,"title":{},"body":{"interfaces/AuthResponse.html":{},"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["database",{"_index":1656,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"injectables/OAuthService.html":{}}}],["database/database.module",{"_index":285,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":244,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"index.html":{},"modules.html":{}}}],["date",{"_index":973,"title":{},"body":{"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["date().gettime",{"_index":1442,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["date().toisostring().slice(0",{"_index":1782,"title":{},"body":{"injectables/FilesService.html":{}}}],["date(date.now",{"_index":3379,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(token.expiresat",{"_index":2930,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["date.gettime",{"_index":2941,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["date.now",{"_index":2618,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["day",{"_index":3336,"title":{},"body":{"injectables/SessionService.html":{}}}],["db",{"_index":1852,"title":{},"body":{"controllers/HealthController.html":{}}}],["db_database",{"_index":1642,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_host",{"_index":1633,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_password",{"_index":1641,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_port",{"_index":1638,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_type",{"_index":1630,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_username",{"_index":1640,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_validation_schema",{"_index":1629,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbkeyservice",{"_index":1522,"title":{"classes/DBKeyService.html":{}},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["dbtype",{"_index":1644,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dc+sd",{"_index":2586,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcql",{"_index":2668,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["dcql_query",{"_index":2562,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{}}}],["dcql_query.length",{"_index":2574,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcqlquerycount",{"_index":2572,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dd",{"_index":355,"title":{},"body":{"modules/AppModule.html":{}}}],["deal",{"_index":1996,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["debug",{"_index":311,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["debugging",{"_index":1833,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["declarations",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["declare",{"_index":96,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["decode",{"_index":1831,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodedvc",{"_index":2806,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.header",{"_index":2809,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.payload",{"_index":2808,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodejwt",{"_index":1800,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodejwt(token",{"_index":1835,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decodetoken",{"_index":2084,"title":{},"body":{"injectables/JwtService.html":{}}}],["decodetoken(token",{"_index":1834,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["decorator",{"_index":3860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":49,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"entities/DisplayEntity.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/RegistrarEntity.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["decrease",{"_index":3370,"title":{},"body":{"injectables/SessionService.html":{}}}],["decryption",{"_index":1687,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe",{"_index":1688,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe(response",{"_index":1693,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["dedicated",{"_index":2421,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["deeppartial",{"_index":3312,"title":{},"body":{"injectables/SessionService.html":{}}}],["default",{"_index":130,"title":{},"body":{"classes/AllowListPolicy.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/JwtService.html":{},"entities/KeyEntity.html":{},"classes/NoneTrustPolicy.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["default_auth_client_id",{"_index":635,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_auth_client_secret",{"_index":636,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_jwt_secret",{"_index":633,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultclientid",{"_index":2406,"title":{},"body":{"injectables/OAuthService.html":{}}}],["defaultclientsecret",{"_index":2408,"title":{},"body":{"injectables/OAuthService.html":{}}}],["defaultmessage",{"_index":396,"title":{},"body":{"classes/AuthConfigValidator.html":{}}}],["defaultmessage(args",{"_index":398,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["defaultmetrics",{"_index":2339,"title":{},"body":{"modules/MetricModule.html":{}}}],["define",{"_index":775,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["defined",{"_index":47,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["defines",{"_index":2846,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["degree",{"_index":1109,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["degree'})@isstring",{"_index":1096,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{}}}],["delete",{"_index":1171,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["delete(\":id",{"_index":1343,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["delete(':id",{"_index":1323,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["delete(id",{"_index":3314,"title":{},"body":{"injectables/SessionService.html":{}}}],["delete(key",{"_index":1727,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["delete(tenantid",{"_index":1179,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["deleteconfiguration",{"_index":2688,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(@param(\"id",{"_index":2717,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(id",{"_index":2692,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteissuanceconfiguration",{"_index":1319,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["deleteissuanceconfiguration(id",{"_index":1322,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{}}}],["deleteissuanceconfiguration(tenantid",{"_index":1919,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["deletekey",{"_index":2163,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(@token",{"_index":2186,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(token",{"_index":2168,"title":{},"body":{"controllers/KeyController.html":{}}}],["deleteobjectcommand",{"_index":3040,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["deletepresentationconfig",{"_index":2742,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletepresentationconfig(id",{"_index":2753,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletes",{"_index":1181,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{}}}],["deletesession",{"_index":3120,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletesession(id",{"_index":3124,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletion",{"_index":2755,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dependencies",{"_index":233,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"dependencies.html":{},"index.html":{}}}],["desc",{"_index":2799,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionService.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/NoneTrustPolicy.html":{},"controllers/OAuthController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"properties.html":{}}}],["details",{"_index":709,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{}}}],["detection",{"_index":1786,"title":{},"body":{"injectables/FilesService.html":{}}}],["determine",{"_index":1161,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"miscellaneous/variables.html":{}}}],["determines",{"_index":437,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["development/testing",{"_index":1022,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["different",{"_index":1471,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{}}}],["digest",{"_index":1388,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["direct_post.jwt",{"_index":2581,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["directly",{"_index":962,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["directory",{"_index":2763,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dirname",{"_index":2263,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["disable",{"_index":2933,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["disclosure",{"_index":39,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["disclosureframe",{"_index":143,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["discovery",{"_index":490,"title":{},"body":{"controllers/AuthController.html":{}}}],["discovery.dto",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{}}}],["discovery.dto.ts",{"_index":3683,"title":{},"body":{"coverage.html":{}}}],["discoveryendpoint",{"_index":2913,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["display",{"_index":120,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["displayentity",{"_index":1659,"title":{"entities/DisplayEntity.html":{}},"body":{"entities/DisplayEntity.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["displayinfo",{"_index":1662,"title":{},"body":{"entities/DisplayEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["dns",{"_index":2953,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["document",{"_index":2996,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["documentation",{"_index":3679,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":2752,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dpop",{"_index":897,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpop_jkt",{"_index":784,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["dpop_signing_alg_values_supported",{"_index":865,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpopvalue",{"_index":895,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["driver",{"_index":3503,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["dto",{"_index":662,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["dto/auth",{"_index":2787,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dto/authentication",{"_index":1880,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{}}}],["dto/authorization",{"_index":2512,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["dto/authorize",{"_index":753,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dto/client",{"_index":510,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/credential",{"_index":3667,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["dto/issuance.dto",{"_index":1892,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["dto/issuer",{"_index":2999,"title":{},"body":{"injectables/ResolverService.html":{}}}],["dto/jwks",{"_index":3633,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/key",{"_index":1579,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{}}}],["dto/notification",{"_index":2482,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["dto/oauth",{"_index":3634,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/oidc",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/par",{"_index":756,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["dto/presentation",{"_index":2547,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dto/status",{"_index":3446,"title":{},"body":{"injectables/StatusListService.html":{}}}],["dto/token",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{}}}],["dto/vp",{"_index":2664,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["duration",{"_index":3207,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["duration}ms",{"_index":3213,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["during",{"_index":135,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["dynamically",{"_index":2424,"title":{},"body":{"injectables/OAuthService.html":{}}}],["dynamicmodule",{"_index":2203,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["e",{"_index":1704,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["e.g",{"_index":565,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{},"interfaces/SessionLogContext.html":{}}}],["e89b",{"_index":1099,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["each",{"_index":97,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"entities/StatusListEntity.html":{},"miscellaneous/typealiases.html":{}}}],["easier",{"_index":2974,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["ec",{"_index":1669,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["ec_public",{"_index":1553,"title":{"classes/EC_Public.html":{}},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["ecdh",{"_index":1716,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["ecdsa",{"_index":3861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ecdsa_p256",{"_index":3704,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ed25519",{"_index":1506,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["eddsa",{"_index":3864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":126,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/StatusListService.html":{}}}],["elements",{"_index":1222,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["elliptic",{"_index":1667,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["embedded",{"_index":94,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["embeddeddisclosurepolicy",{"_index":43,"title":{"classes/EmbeddedDisclosurePolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["embeddeddisclosurepolicy:40",{"_index":48,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["embeddeddisclosurepolicy:50",{"_index":3025,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["embeddeddisclosurepolicy:60",{"_index":2340,"title":{},"body":{"classes/NoneTrustPolicy.html":{}}}],["embeddeddisclosurepolicy:76",{"_index":386,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["emits",{"_index":3178,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["emitter",{"_index":3760,"title":{},"body":{"dependencies.html":{}}}],["empty",{"_index":605,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StatusListService.html":{}}}],["enabled",{"_index":1437,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"injectables/RegistrarService.html":{}}}],["enabledebugmode",{"_index":2318,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablehttplogger",{"_index":334,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablesessionlogger",{"_index":2317,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["encodeuri(key",{"_index":3060,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["encodeuricomponent(key)}=${encodeuricomponent(value",{"_index":2616,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["encrypt",{"_index":1698,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"miscellaneous/typealiases.html":{}}}],["encrypted",{"_index":1699,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption",{"_index":1686,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption/encryption.service",{"_index":1516,"title":{},"body":{"modules/CryptoModule.html":{}}}],["encryptionservice",{"_index":998,"title":{"injectables/EncryptionService.html":{}},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"coverage.html":{},"index.html":{}}}],["encrypts",{"_index":1696,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["endpoint",{"_index":464,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/HealthController.html":{},"modules/MetricModule.html":{},"controllers/OAuthController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/StorageModule.html":{}}}],["endpoints",{"_index":715,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/HealthController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["enhanced",{"_index":608,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":392,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entities",{"_index":968,"title":{},"body":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"index.html":{}}}],["entities/cert.entity",{"_index":1581,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{}}}],["entities/credential",{"_index":1931,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["entities/credential.entity",{"_index":1204,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{}}}],["entities/issuance",{"_index":1932,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["entities/keys.entity",{"_index":1582,"title":{},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{}}}],["entities/presentation",{"_index":2702,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["entities/registrar.entity",{"_index":2844,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{}}}],["entities/session.entity",{"_index":3135,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["entities/status",{"_index":3413,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["entitites/client.entity",{"_index":631,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["entity",{"_index":67,"title":{"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/DisplayEntity.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["entries",{"_index":3436,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entries.length",{"_index":3481,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry",{"_index":1438,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entry.bits",{"_index":3461,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.elements",{"_index":3477,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.elements[id",{"_index":3476,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.key",{"_index":1721,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["entry.key.d",{"_index":1720,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["entry.relyingpartyid",{"_index":2966,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["entry.tenantid",{"_index":3462,"title":{},"body":{"injectables/StatusListService.html":{}}}],["enum",{"_index":84,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationRequest.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"classes/TokenRequestDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["enumerations",{"_index":3802,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":2313,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"modules/RegistrarModule.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["environments",{"_index":1806,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["erika",{"_index":2458,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["err",{"_index":1045,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["err.message",{"_index":1049,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/PresentationsService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["error",{"_index":313,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/typealiases.html":{}}}],["error(\"error",{"_index":2957,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["error(\"issuer",{"_index":3002,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(\"key",{"_index":3024,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(\"no",{"_index":2818,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["error(\"stack",{"_index":3473,"title":{},"body":{"injectables/StatusListService.html":{}}}],["error(\"subject",{"_index":3010,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('credential",{"_index":944,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["error(`error",{"_index":3600,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["error(`invalid",{"_index":1829,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["error(`unsupported",{"_index":1509,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["error.children",{"_index":1950,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["error.children.length",{"_index":1951,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["error.constraints",{"_index":1255,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error.message",{"_index":1830,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.name",{"_index":3216,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.property",{"_index":1254,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error.stack",{"_index":3219,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.value",{"_index":1256,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error_description",{"_index":932,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["errormessages",{"_index":1954,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["errors",{"_index":1246,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerService.html":{}}}],["es",{"_index":1708,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["es256",{"_index":597,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["es256.getverifier(publickey",{"_index":2811,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["eslint",{"_index":2932,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["eslint/no",{"_index":2937,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["etag",{"_index":1750,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["eudi",{"_index":3825,"title":{},"body":{"properties.html":{}}}],["eudiplo",{"_index":222,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["event",{"_index":1054,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/NotificationRequestDto.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["events",{"_index":3230,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["everything",{"_index":1051,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["example",{"_index":187,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["examples",{"_index":474,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{}}}],["exchange",{"_index":738,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["execution",{"_index":3174,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["executioncontext",{"_index":2072,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1549,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/StatusListService.html":{}}}],["existing",{"_index":1113,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/KeyController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["exists",{"_index":1198,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"interfaces/FileStorage.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/StatusListService.html":{}}}],["exists(key",{"_index":1729,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["existssync",{"_index":2259,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["exp",{"_index":601,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["expandvariables",{"_index":329,"title":{},"body":{"modules/AppModule.html":{}}}],["expect",{"_index":3578,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["expected",{"_index":2452,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["expectedcode",{"_index":909,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedpreauthorizedcode",{"_index":904,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedtxcode",{"_index":906,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectresponse",{"_index":3577,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["expiration",{"_index":1444,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/ParResponseDto.html":{}}}],["expirationdate",{"_index":2929,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["expirationdate.gettime",{"_index":2940,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["expire",{"_index":2143,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expired",{"_index":3113,"title":{},"body":{"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["expires_in",{"_index":531,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/OAuthService.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["expiresat",{"_index":2617,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["expiresin",{"_index":572,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/S3FileStorage.html":{}}}],["expiresinsec",{"_index":1732,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["expiresinseconds",{"_index":919,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["export",{"_index":30,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["exportable",{"_index":1603,"title":{},"body":{"classes/DBKeyService.html":{}}}],["exportjwk",{"_index":1572,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["exportjwk(secret.privatekey",{"_index":1711,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exports",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["exportspki",{"_index":1573,"title":{},"body":{"classes/DBKeyService.html":{}}}],["exportspki(publickeyinstance",{"_index":1623,"title":{},"body":{"classes/DBKeyService.html":{}}}],["expose",{"_index":1794,"title":{},"body":{"injectables/FilesService.html":{}}}],["express",{"_index":743,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["ext",{"_index":1594,"title":{},"body":{"classes/DBKeyService.html":{}}}],["extends",{"_index":42,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/DBKeyService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{}}}],["extends#integrity",{"_index":3553,"title":{},"body":{"classes/VCT.html":{}}}],["external",{"_index":537,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["extname",{"_index":1774,"title":{},"body":{"injectables/FilesService.html":{}}}],["extname(filename",{"_index":1778,"title":{},"body":{"injectables/FilesService.html":{}}}],["extract",{"_index":545,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["extractable",{"_index":1619,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["extracterrormessages",{"_index":1943,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extracterrormessages(child",{"_index":1953,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extracterrormessages(error",{"_index":1956,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extractjwt",{"_index":2111,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2137,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":529,"title":{},"body":{"controllers/AuthController.html":{}}}],["eyjhbgcioijsuzi1niisinr5cci6ikpxvcj9",{"_index":3544,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["failed",{"_index":1250,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["failure",{"_index":3369,"title":{},"body":{"injectables/SessionService.html":{}}}],["failwitherror",{"_index":2120,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fall",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{}}}],["false",{"_index":148,"title":{},"body":{"classes/AllowListPolicy.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"injectables/Oid4vpService.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"miscellaneous/variables.html":{}}}],["family_name",{"_index":2459,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["fatal",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["fd3ebf28",{"_index":2008,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["fetch",{"_index":2781,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fetched",{"_index":3111,"title":{},"body":{"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["fields",{"_index":2634,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["file#asynchronous",{"_index":342,"title":{},"body":{"modules/AppModule.html":{}}}],["file.jwt",{"_index":3469,"title":{},"body":{"injectables/StatusListService.html":{}}}],["file.replace(\".json",{"_index":1230,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["file.stack.pop",{"_index":3472,"title":{},"body":{"injectables/StatusListService.html":{}}}],["file_storage",{"_index":1756,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["filename",{"_index":1771,"title":{},"body":{"injectables/FilesService.html":{}}}],["files",{"_index":1225,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["files.service",{"_index":3502,"title":{},"body":{"modules/StorageModule.html":{}}}],["files/:key",{"_index":1796,"title":{},"body":{"injectables/FilesService.html":{}}}],["filesservice",{"_index":1758,"title":{"injectables/FilesService.html":{}},"body":{"injectables/FilesService.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["filestorage",{"_index":1722,"title":{"interfaces/FileStorage.html":{}},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["fill(0",{"_index":3453,"title":{},"body":{"injectables/StatusListService.html":{}}}],["filter((tenant",{"_index":1216,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["finally",{"_index":2997,"title":{},"body":{"injectables/ResolverService.html":{}}}],["find",{"_index":1029,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["findclientbyid",{"_index":1076,"title":{},"body":{"injectables/ClientService.html":{}}}],["findclientbyid(clientid",{"_index":1030,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["findonebyorfail",{"_index":1420,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["findoptionswhere",{"_index":3320,"title":{},"body":{"injectables/SessionService.html":{}}}],["fine",{"_index":1052,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["first",{"_index":1616,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/ResolverService.html":{}}}],["firstvaluefrom",{"_index":2784,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["firstvaluefrom(this.httpservice.get(uri)).then",{"_index":2815,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fixed",{"_index":2007,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["flag",{"_index":156,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["flow",{"_index":428,"title":{},"body":{"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/typealiases.html":{}}}],["flow_complete",{"_index":3277,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_error",{"_index":3278,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_start",{"_index":3275,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flowtype",{"_index":2550,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["folder",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["forbidnonwhitelisted",{"_index":1240,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["force",{"_index":1210,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["forcepathstyle",{"_index":3523,"title":{},"body":{"modules/StorageModule.html":{}}}],["format",{"_index":25,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/NoneTrustPolicy.html":{},"injectables/Oid4vpService.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{}}}],["formats",{"_index":3659,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["forroot",{"_index":2201,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["forwardref",{"_index":2524,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{}}}],["found",{"_index":880,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"injectables/StatusListService.html":{}}}],["foundation",{"_index":228,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"properties.html":{}}}],["frame",{"_index":139,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["free",{"_index":3429,"title":{},"body":{"injectables/StatusListService.html":{}}}],["fresh",{"_index":2609,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["fs",{"_index":1203,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/PresentationsService.html":{}}}],["fullpath",{"_index":2265,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["function",{"_index":2242,"title":{},"body":{"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":684,"title":{"miscellaneous/functions.html":{}},"body":{"classes/AuthenticationConfigHelper.html":{},"miscellaneous/functions.html":{}}}],["further",{"_index":3079,"title":{},"body":{"entities/Session.html":{}}}],["g",{"_index":2564,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["gauge",{"_index":994,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/SessionService.html":{}}}],["generate",{"_index":1548,"title":{},"body":{"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/OAuthService.html":{},"controllers/PresentationManagementController.html":{}}}],["generateaccesstoken",{"_index":2379,"title":{},"body":{"injectables/OAuthService.html":{}}}],["generateaccesstoken(clientid",{"_index":2388,"title":{},"body":{"injectables/OAuthService.html":{}}}],["generated",{"_index":1541,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["generated/client.gen",{"_index":2905,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["generatekeypair",{"_index":1473,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["generatekeypair(\"ecdh",{"_index":1707,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generates",{"_index":1477,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{}}}],["generatesalt",{"_index":1389,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["generatetoken",{"_index":1807,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generatetoken(payload",{"_index":2088,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetokenoptions",{"_index":1798,"title":{"interfaces/GenerateTokenOptions.html":{}},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["generation",{"_index":1809,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generic",{"_index":1469,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyService.html":{},"injectables/SessionLoggerService.html":{}}}],["get(\".well",{"_index":582,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\":id",{"_index":3140,"title":{},"body":{"controllers/SessionController.html":{}}}],["get(\"jwks.json",{"_index":3645,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"oauth",{"_index":3642,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"openid",{"_index":3640,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"schema/:id",{"_index":1364,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get(\"status",{"_index":3392,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get(\"vct/:id",{"_index":1360,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('.well",{"_index":455,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':id",{"_index":3128,"title":{},"body":{"controllers/SessionController.html":{}}}],["get('oauth",{"_index":3618,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('schema/:id",{"_index":1352,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('session",{"_index":2495,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["get('status",{"_index":3386,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get('vct/:id",{"_index":1355,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get()@healthcheck",{"_index":1846,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@sessionlogger('session",{"_index":2506,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get(state",{"_index":3316,"title":{},"body":{"injectables/SessionService.html":{}}}],["get(tenantid",{"_index":1186,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getalg",{"_index":1493,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getall",{"_index":3300,"title":{},"body":{"injectables/SessionService.html":{}}}],["getallsessions",{"_index":3121,"title":{},"body":{"controllers/SessionController.html":{}}}],["getauthorizationserver",{"_index":805,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["getauthorizationserver(tenantid",{"_index":820,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["getauthzmetadata",{"_index":3650,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getauthzmetadata(session",{"_index":3654,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getby",{"_index":877,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["getby(where",{"_index":3319,"title":{},"body":{"injectables/SessionService.html":{}}}],["getbyid",{"_index":1172,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getbyid(tenantid",{"_index":1190,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getcertificate",{"_index":1533,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getcertificate(tenantid",{"_index":1569,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getclients",{"_index":1017,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["getconfigs",{"_index":1320,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(@token",{"_index":1340,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(user",{"_index":1325,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfiguration",{"_index":2289,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getcredential",{"_index":1368,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential(credentialconfigurationid",{"_index":1376,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfigurationsupported",{"_index":1369,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfigurationsupported(session",{"_index":1381,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcrypto",{"_index":1494,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getcrypto(alg",{"_index":1501,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getdownloadurl",{"_index":1760,"title":{},"body":{"injectables/FilesService.html":{}}}],["getdownloadurl(key",{"_index":1766,"title":{},"body":{"injectables/FilesService.html":{}}}],["getencryptionpublickey",{"_index":1689,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getencryptionpublickey(tenantid",{"_index":1700,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getexistingrp",{"_index":2864,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getexistingrp(name",{"_index":2880,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getexternaloidcconfig",{"_index":2094,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getexternaloidcconfig(configservice",{"_index":2099,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getglobaljwks",{"_index":452,"title":{},"body":{"controllers/AuthController.html":{}}}],["getheadersfromrequest",{"_index":847,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getheadersfromrequest(req",{"_index":887,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["getintegratedoauth2config",{"_index":2095,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getintegratedoauth2config(configservice",{"_index":2103,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getissuanceconfiguration",{"_index":1911,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfiguration(tenantid",{"_index":1921,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid",{"_index":1912,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid(issuanceconfigid",{"_index":1923,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurations",{"_index":1885,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(@token",{"_index":1894,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(user",{"_index":1888,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuermetadata",{"_index":3651,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getissuermetadata(session",{"_index":3656,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getjwks",{"_index":3617,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["getjwks(@sessionentity",{"_index":3646,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(session",{"_index":3620,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(tenantid",{"_index":3664,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getkeys",{"_index":2164,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkeys(@token",{"_index":2180,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkeys(token",{"_index":2170,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkid",{"_index":1527,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getkid(tenantid",{"_index":1542,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getlist",{"_index":3384,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlist(@param(\"tenantid",{"_index":3394,"title":{},"body":{"controllers/StatusListController.html":{}}}],["getlist(tenantid",{"_index":3385,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlogformat",{"_index":2290,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getloglevel",{"_index":2291,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getoauth2token",{"_index":453,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoauth2token(body",{"_index":471,"title":{},"body":{"controllers/AuthController.html":{}}}],["getobjectcommand",{"_index":3041,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["getoffer",{"_index":1980,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoffer(res",{"_index":1981,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoidcdiscovery",{"_index":454,"title":{},"body":{"controllers/AuthController.html":{}}}],["getorthrow(\"public_url",{"_index":2061,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/RegistrarService.html":{}}}],["getpresentationconfig",{"_index":686,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{},"injectables/PresentationsService.html":{}}}],["getpresentationconfig(config",{"_index":690,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["getpresentationconfig(id",{"_index":2757,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs",{"_index":2743,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs(tenantid",{"_index":2759,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getprivatekey",{"_index":1528,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getprivatekey(tenantid",{"_index":1546,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpubfromprivatekey",{"_index":1529,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpubfromprivatekey(privatekey",{"_index":1550,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpublickey",{"_index":1530,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getpublickey(type",{"_index":1554,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getrepositorytoken",{"_index":2205,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrepositorytoken(certentity",{"_index":2220,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrepositorytoken(keyentity",{"_index":2221,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrequestwithsession",{"_index":2503,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(@sessionentity",{"_index":2516,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(session",{"_index":2505,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getresponse",{"_index":2504,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["getresponse(body",{"_index":2509,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["gets",{"_index":1544,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getschema",{"_index":1370,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschema(credentialconfigurationid",{"_index":1383,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getsession",{"_index":3122,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(@param(\"id",{"_index":3141,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(id",{"_index":3127,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsignedurl",{"_index":1724,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsignedurl(key",{"_index":1731,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsignedurl?(key",{"_index":1754,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["getsigner",{"_index":1474,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsigner(privatekeyjwk",{"_index":1479,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["getstream",{"_index":1725,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getstream(key",{"_index":1734,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getting",{"_index":1042,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialIssuerMetadataDto.html":{}}}],["gettoken",{"_index":2351,"title":{},"body":{"controllers/OAuthController.html":{}}}],["gettoken(tokenrequest",{"_index":2352,"title":{},"body":{"controllers/OAuthController.html":{}}}],["getvct",{"_index":1371,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getvct(credentialid",{"_index":1385,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getverifier",{"_index":1475,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getverifier(publickeyjwk",{"_index":1484,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["given",{"_index":1182,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"classes/KeyService.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["given_name",{"_index":2014,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["global",{"_index":462,"title":{},"body":{"controllers/AuthController.html":{},"modules/CryptoImplementatationModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["globalthis.headers",{"_index":3812,"title":{},"body":{"miscellaneous/functions.html":{}}}],["go",{"_index":1288,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["grant",{"_index":541,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"controllers/OAuthController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/TokenRequestDto.html":{}}}],["grant_type",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenRequestDto.html":{}}}],["grant_types_supported",{"_index":591,"title":{},"body":{"controllers/AuthController.html":{}}}],["granttype",{"_index":850,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["graph",{"_index":3820,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":695,"title":{"guards/SessionGuard.html":{}},"body":{"classes/AuthenticationConfigHelper.html":{},"modules/MetricModule.html":{},"coverage.html":{},"index.html":{}}}],["guards",{"_index":3147,"title":{},"body":{"guards/SessionGuard.html":{}}}],["handle",{"_index":728,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{}}}],["handleclientcredentialsgrant",{"_index":2380,"title":{},"body":{"injectables/OAuthService.html":{}}}],["handleclientcredentialsgrant(request",{"_index":2390,"title":{},"body":{"injectables/OAuthService.html":{}}}],["handled",{"_index":1827,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["handler",{"_index":3175,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["handles",{"_index":716,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["handlesigningkeyerror",{"_index":2131,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":1685,"title":{},"body":{"injectables/EncryptionService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["hasclient",{"_index":2381,"title":{},"body":{"injectables/OAuthService.html":{}}}],["hasclient(clientid",{"_index":2392,"title":{},"body":{"injectables/OAuthService.html":{}}}],["hash",{"_index":3863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashalg",{"_index":1431,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hasher",{"_index":1430,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["hasresponsedata",{"_index":3598,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["haswebhook",{"_index":2632,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["head",{"_index":3057,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.contentlength",{"_index":3063,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.contenttype",{"_index":3064,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.etag",{"_index":3062,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["header",{"_index":185,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["header(\"content",{"_index":3393,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["header('content",{"_index":3621,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["header.kid",{"_index":3023,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c",{"_index":3003,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c.map",{"_index":3005,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header[\"jwk",{"_index":3013,"title":{},"body":{"injectables/ResolverService.html":{}}}],["headername",{"_index":181,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["headers",{"_index":367,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["headers.authorization",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{}}}],["headers[session.claimswebhook!.auth.config.headername",{"_index":3582,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["headers[webhook.auth.config.headername",{"_index":3605,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["headobjectcommand",{"_index":3042,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["health",{"_index":1840,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1857,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":286,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1848,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1842,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1838,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":245,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"index.html":{},"modules.html":{}}}],["help",{"_index":656,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{}}}],["here",{"_index":957,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{}}}],["hh:mm:ss",{"_index":356,"title":{},"body":{"modules/AppModule.html":{}}}],["holdercnf",{"_index":1377,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["host",{"_index":1454,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["hosted",{"_index":144,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["hostname",{"_index":2575,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${session.id}/oid4vp",{"_index":2579,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${session.tenantid",{"_index":2558,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid}/credentials",{"_index":1456,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hot",{"_index":2311,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["hour",{"_index":2417,"title":{},"body":{"injectables/OAuthService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["hours",{"_index":581,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["hs256",{"_index":1817,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["http",{"_index":1795,"title":{},"body":{"injectables/FilesService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["httpmethod",{"_index":837,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["httpmodule",{"_index":2040,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules/VerifierModule.html":{}}}],["https://${this.bucket}.s3.amazonaws.com/${encodeuri(key",{"_index":3061,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["https://github.com/iamolegga/nestjs",{"_index":339,"title":{},"body":{"modules/AppModule.html":{}}}],["https://github.com/openwallet",{"_index":3827,"title":{},"body":{"properties.html":{}}}],["https://json",{"_index":3069,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["https://openwallet",{"_index":227,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["httpservice",{"_index":2204,"title":{},"body":{"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["iat",{"_index":602,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["id",{"_index":16,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["id'})@isstring",{"_index":3536,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["id).catch",{"_index":1233,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["id_token_signing_alg_values_supported",{"_index":596,"title":{},"body":{"controllers/AuthController.html":{}}}],["identifier",{"_index":27,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"classes/TokenRequestDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["identify",{"_index":151,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["ids",{"_index":1153,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["idx",{"_index":3471,"title":{},"body":{"injectables/StatusListService.html":{}}}],["ignore",{"_index":357,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":2142,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":2025,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png",{"_index":1999,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png')@apibody({type",{"_index":1987,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["image/png')@useguards(jwtauthguard)@apisecurity('oauth2')@apibody({type",{"_index":2695,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["imeplement",{"_index":1470,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation",{"_index":1503,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/OAuthService.html":{}}}],["implementation.module",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{}}}],["implementation.module.ts",{"_index":1464,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["implementation.service",{"_index":1396,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{}}}],["implementation.service.ts",{"_index":1492,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.service.ts:10",{"_index":1496,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:17",{"_index":1498,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:26",{"_index":1502,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.ts",{"_index":1468,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.ts:19",{"_index":1476,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:24",{"_index":1481,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:29",{"_index":1485,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation/crypto",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["implementation/ed25519.ts",{"_index":3713,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":394,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/EC_Public.html":{},"injectables/IssuanceService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/LocalFileStorage.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{}}}],["import",{"_index":53,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["import(tenantid",{"_index":1558,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["import.dto",{"_index":1580,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/UpdateKeyDto.html":{}}}],["import.dto.ts",{"_index":2149,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"coverage.html":{}}}],["import.dto.ts:11",{"_index":2157,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:13",{"_index":2158,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:15",{"_index":2152,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:17",{"_index":2153,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:19",{"_index":2151,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:31",{"_index":2199,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:38",{"_index":2196,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:45",{"_index":2197,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:7",{"_index":2154,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:9",{"_index":2156,"title":{},"body":{"classes/Key.html":{}}}],["imported",{"_index":1259,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["importing",{"_index":2160,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["importjwk",{"_index":1574,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{}}}],["importjwk(keyentity.key",{"_index":1715,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["importjwk(payload.cnf.jwk",{"_index":2819,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["importjwk(privatekey",{"_index":1624,"title":{},"body":{"classes/DBKeyService.html":{}}}],["imports",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CredentialConfigService.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{}}}],["include",{"_index":563,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{}}}],["included",{"_index":1870,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["includes",{"_index":1156,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["including",{"_index":2856,"title":{},"body":{"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":3159,"title":{},"body":{"interfaces/SessionLogContext.html":{},"classes/WebhookResponse.html":{}}}],["indexes",{"_index":3405,"title":{},"body":{"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["indicates",{"_index":29,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["indicating",{"_index":2722,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["information",{"_index":226,"title":{},"body":{"controllers/AppController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/IssuerManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["inherited",{"_index":46,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/DBKeyService.html":{},"classes/NoneTrustPolicy.html":{},"classes/RootOfTrustPolicy.html":{}}}],["init",{"_index":1074,"title":{},"body":{"entities/ClientEntry.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"miscellaneous/typealiases.html":{}}}],["init(tenant",{"_index":1561,"title":{},"body":{"classes/DBKeyService.html":{}}}],["init(tenantid",{"_index":2238,"title":{},"body":{"classes/KeyService.html":{}}}],["initialization",{"_index":3276,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["initialize",{"_index":1012,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/StatusListService.html":{},"miscellaneous/functions.html":{}}}],["initializeclients",{"_index":2382,"title":{},"body":{"injectables/OAuthService.html":{}}}],["initialized",{"_index":2240,"title":{},"body":{"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["initializes",{"_index":1337,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["inject",{"_index":331,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["inject(\"keyservice",{"_index":2179,"title":{},"body":{"controllers/KeyController.html":{}}}],["injectable",{"_index":801,"title":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["injectables",{"_index":802,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"index.html":{}}}],["injectmetric",{"_index":993,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/SessionService.html":{}}}],["injectmetric(\"sessions",{"_index":3343,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectmetric(\"tenant_client_total",{"_index":1010,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["injectrepository",{"_index":992,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["injectrepository(cliententry",{"_index":1008,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["injectrepository(credentialconfig",{"_index":1205,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["injectrepository(credentialissuancebinding",{"_index":1934,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["injectrepository(issuanceconfig",{"_index":1933,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["injectrepository(keyentity",{"_index":1706,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["injectrepository(presentationconfig",{"_index":2788,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["injectrepository(registrarentity",{"_index":2906,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["injectrepository(session",{"_index":3342,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(statuslistentity",{"_index":3448,"title":{},"body":{"injectables/StatusListService.html":{}}}],["injectrepository(statusmapping",{"_index":3447,"title":{},"body":{"injectables/StatusListService.html":{}}}],["instance",{"_index":2515,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["instance.decode(`${data}.${signature",{"_index":2807,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["instanceof",{"_index":2135,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalFileStorage.html":{}}}],["instead",{"_index":2121,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["insufficient_authorization",{"_index":931,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["int",{"_index":3488,"title":{},"body":{"entities/StatusMapping.html":{}}}],["integrated",{"_index":1151,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/IssuanceDto.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["integration",{"_index":1006,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["intended",{"_index":1676,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["interact",{"_index":3824,"title":{},"body":{"properties.html":{}}}],["interacting",{"_index":2895,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["interaction",{"_index":2855,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["intercept",{"_index":3167,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercept(context",{"_index":3170,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interceptor",{"_index":3165,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercepts",{"_index":3173,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/Client.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["interval",{"_index":3347,"title":{},"body":{"injectables/SessionService.html":{}}}],["intervaltime",{"_index":3345,"title":{},"body":{"injectables/SessionService.html":{}}}],["invalid",{"_index":480,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["is_public_key",{"_index":2077,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isabsolute",{"_index":272,"title":{},"body":{"modules/AppModule.html":{}}}],["isabsolute(folder",{"_index":382,"title":{},"body":{"modules/AppModule.html":{}}}],["isarray",{"_index":56,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{}}}],["isarray()@isoptional",{"_index":2448,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["isarray()@validatenested({each",{"_index":1904,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["isauthurlauth",{"_index":687,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isauthurlauth(config",{"_index":693,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isboolean",{"_index":57,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isboolean()@isoptional()@column('boolean",{"_index":1141,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isdebugmodeenabled",{"_index":2292,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isdefined",{"_index":1248,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["isempty",{"_index":58,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isempty()@column('varchar",{"_index":1143,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isempty()@createdatecolumn",{"_index":1273,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["isempty()@manytoone(undefined",{"_index":1131,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isempty()@onetomany(undefined",{"_index":1124,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isempty()@updatedatecolumn",{"_index":1282,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["isenabled",{"_index":2865,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["isenum",{"_index":59,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationRequest.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isenum([\"credential_accepted",{"_index":2347,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum([\"ec",{"_index":2159,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["isenum(['credential_accepted",{"_index":2345,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum(['ec",{"_index":2155,"title":{},"body":{"classes/Key.html":{}}}],["isenum(policytype",{"_index":95,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isenum(responsetype",{"_index":2457,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isglobal",{"_index":328,"title":{},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{}}}],["ishttploggerenabled",{"_index":2293,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isin",{"_index":190,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin([\"apikey",{"_index":200,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isin([\"client_credentials",{"_index":3540,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["isin([\"none",{"_index":442,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isin(['apikey",{"_index":3568,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["isin(['none",{"_index":679,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["isin([0",{"_index":3497,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnoneauth",{"_index":688,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isnoneauth(config",{"_index":696,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["isnotempty",{"_index":2660,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["isnotempty()@isstring({each",{"_index":2658,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["isnull",{"_index":3338,"title":{},"body":{"injectables/SessionService.html":{}}}],["isnumber",{"_index":60,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/StatusUpdateDto.html":{}}}],["isnumber()@isin(['0",{"_index":3495,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber()@isoptional",{"_index":1901,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["isnumber()@isoptional()@column('int",{"_index":1137,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["isobject",{"_index":61,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isobject()@column('json",{"_index":1860,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["isobject()@isoptional",{"_index":2446,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/PresentationRequest.html":{}}}],["isobject()@isoptional()@column('json",{"_index":1139,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isobject()@isoptional()@validatenested()@type(undefined",{"_index":704,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{},"classes/IssuanceDto.html":{}}}],["isobject()@type(undefined",{"_index":2198,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["isobject()@validatenested()@type(undefined",{"_index":1899,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["isoptional",{"_index":62,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isoptional()@isarray()@validatenested()@column('json",{"_index":2670,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["isoptional()@isobject()@column('json",{"_index":2678,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["isoptional()@isstring",{"_index":677,"title":{},"body":{"classes/AuthenticationConfigDto.html":{},"classes/AuthorizeQueries.html":{}}}],["isoptional()@validate(authconfigvalidator",{"_index":675,"title":{},"body":{"classes/AuthenticationConfigDto.html":{}}}],["ispresentationduringissuanceauth",{"_index":689,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["ispresentationduringissuanceauth(config",{"_index":698,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["ispublic",{"_index":1772,"title":{},"body":{"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["iss",{"_index":106,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"injectables/OAuthService.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["issessionloggerenabled",{"_index":2294,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["issetup",{"_index":1077,"title":{},"body":{"injectables/ClientService.html":{}}}],["issetup(id",{"_index":1031,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["isstring",{"_index":63,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["isstring()@column('varchar",{"_index":1129,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isstring()@isoptional",{"_index":1135,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/IssuanceDto.html":{},"classes/KeyImportDto.html":{},"classes/StatusUpdateDto.html":{}}}],["isstring({each",{"_index":50,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["issuance",{"_index":82,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["issuance.service",{"_index":1893,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["issuance/credentials",{"_index":1209,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["issuance/dto/authentication",{"_index":844,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuance/entities/credential",{"_index":81,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["issuance/entities/issuance",{"_index":1397,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{}}}],["issuance/issuance",{"_index":1938,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuance/issuance.controller",{"_index":2052,"title":{},"body":{"modules/IssuerModule.html":{}}}],["issuance/issuance.service",{"_index":846,"title":{},"body":{"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig",{"_index":947,"title":{"entities/IssuanceConfig.html":{}},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["issuanceconfig.authenticationconfig",{"_index":950,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig.claimswebhook",{"_index":952,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig.credentialissuancebindings",{"_index":1279,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["issuanceconfig.credentialissuancebindings.find",{"_index":1407,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuanceconfigid",{"_index":1093,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/IssuanceService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["issuanceconfigrepo",{"_index":1918,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuancecontroller",{"_index":1882,"title":{"controllers/IssuanceController.html":{}},"body":{"controllers/IssuanceController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuancecounter",{"_index":3356,"title":{},"body":{"injectables/SessionService.html":{}}}],["issuancedto",{"_index":1152,"title":{"classes/IssuanceDto.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"coverage.html":{}}}],["issuanceid",{"_index":945,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["issuanceservice",{"_index":814,"title":{"injectables/IssuanceService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"index.html":{}}}],["issue",{"_index":2469,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["issued",{"_index":132,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/WellKnownService.html":{}}}],["issuer",{"_index":124,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["issuer/authorize/authorize.service",{"_index":3666,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["issuer/authorize/dto/authorize",{"_index":3110,"title":{},"body":{"entities/Session.html":{}}}],["issuer/issuer.module",{"_index":288,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["issuer/oid4vci/dto/offer",{"_index":2543,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["issuer/oid4vci/oid4vci.service",{"_index":1001,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/WellKnownService.html":{}}}],["issuer/status",{"_index":625,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{}}}],["issuer_state",{"_index":785,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["issuer_validation_schema",{"_index":287,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["issuermanagementcontroller",{"_index":1976,"title":{"controllers/IssuerManagementController.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuermetadata",{"_index":2028,"title":{"interfaces/IssuerMetadata.html":{}},"body":{"interfaces/IssuerMetadata.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["issuermetadata(session",{"_index":3625,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuermodule",{"_index":246,"title":{"modules/IssuerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"index.html":{},"modules.html":{}}}],["issues",{"_index":1379,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuing",{"_index":3281,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["isuance",{"_index":1971,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["isurl",{"_index":411,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isused",{"_index":1406,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["isused?.credentialconfig",{"_index":1415,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["isusingexternaloidc",{"_index":1836,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["isuuid",{"_index":1108,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["isuuid()@isoptional",{"_index":2455,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["isverified",{"_index":3876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["it's",{"_index":3591,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["item.name",{"_index":2948,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["iterate",{"_index":1220,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["job",{"_index":3327,"title":{},"body":{"injectables/SessionService.html":{}}}],["joi",{"_index":268,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/OAuthModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["joi.boolean().default(false",{"_index":318,"title":{},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.boolean().when(joi.ref(\"storage_driver",{"_index":3516,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.exist",{"_index":2850,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().default(24",{"_index":3294,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().default(60",{"_index":3292,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().when(\"db_type",{"_index":1639,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.object",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.optional",{"_index":1636,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.required",{"_index":1637,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string",{"_index":309,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"../../assets/config",{"_index":321,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"../../tmp",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"24h",{"_index":649,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"eudiplo",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"http://localhost:3000",{"_index":2058,"title":{},"body":{"modules/IssuerModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"rs256",{"_index":643,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"uploads",{"_index":3509,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(default_auth_client_id",{"_index":653,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(default_auth_client_secret",{"_index":651,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(default_jwt_secret",{"_index":645,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().optional",{"_index":637,"title":{},"body":{"modules/AuthModule.html":{},"modules/OAuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().optional().default(\"eudiplo",{"_index":647,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":640,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().uri().when(\"km_type",{"_index":2215,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"db",{"_index":2210,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"es256\").default(\"es256",{"_index":1466,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"local",{"_index":3505,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"sqlite",{"_index":1631,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(\"db_type",{"_index":1634,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(\"km_type",{"_index":2217,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(\"registrar_url",{"_index":2849,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(joi.ref(\"storage_driver",{"_index":3508,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.when(\"oidc",{"_index":639,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":273,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["join(__dirname",{"_index":384,"title":{},"body":{"modules/AppModule.html":{}}}],["join(configpath",{"_index":1223,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["join(folder",{"_index":383,"title":{},"body":{"modules/AppModule.html":{}}}],["join(this.basedir",{"_index":2266,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["jose",{"_index":1575,"title":{},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"dependencies.html":{}}}],["joseheaderparameters",{"_index":2243,"title":{},"body":{"classes/KeyService.html":{}}}],["json",{"_index":164,"title":{},"body":{"classes/AllowListPolicy.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"entities/CredentialConfig.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/PolicyCredential.html":{},"controllers/PresentationManagementController.html":{},"classes/RootOfTrustPolicy.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["json.parse",{"_index":1227,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["json.stringify",{"_index":3117,"title":{},"body":{"entities/Session.html":{}}}],["json.stringify(data",{"_index":3211,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["json.stringify(presentationconfig.dcql_query).replace",{"_index":2563,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(presentationconfig.registrationcert).replace",{"_index":2567,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jsonwebkey",{"_index":1480,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["junction",{"_index":1267,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["jwe",{"_index":1697,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwk",{"_index":838,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"miscellaneous/variables.html":{}}}],["jwk_ec_private",{"_index":1551,"title":{},"body":{"classes/DBKeyService.html":{}}}],["jwk_ec_public",{"_index":1670,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["jwks",{"_index":463,"title":{},"body":{"controllers/AuthController.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["jwks_uri",{"_index":587,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["jwksrequestsperminute",{"_index":2129,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksresponsedto",{"_index":1682,"title":{"classes/JwksResponseDto.html":{}},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["jwksuri",{"_index":2124,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt",{"_index":141,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["jwt.service",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["jwt.setaudience(options.audience",{"_index":1824,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.sign(secretkey",{"_index":1825,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.strategy",{"_index":632,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt/crypto",{"_index":1390,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":1393,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt/sd",{"_index":1395,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt/types",{"_index":1570,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt_alg_values",{"_index":2587,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jwt_expires_in",{"_index":648,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["jwt_issuer",{"_index":646,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":644,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":615,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"coverage.html":{},"index.html":{}}}],["jwtdecrypt",{"_index":1705,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtdecrypt(response",{"_index":1717,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtfromrequest",{"_index":2102,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtheaderparameters",{"_index":1567,"title":{},"body":{"classes/DBKeyService.html":{}}}],["jwtpayload",{"_index":1566,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{}}}],["jwtservice",{"_index":515,"title":{"injectables/JwtService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"index.html":{}}}],["jwtstrategy",{"_index":616,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["jwtstrategy.getexternaloidcconfig(configservice",{"_index":2116,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy.getintegratedoauth2config(configservice",{"_index":2117,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtverify",{"_index":1801,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{}}}],["jwtverify(`${data}.${signature",{"_index":2820,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["jwtverify(token",{"_index":1828,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwtwithstatuslistpayload",{"_index":1392,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/StatusListService.html":{}}}],["kb",{"_index":1400,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["kbverifier",{"_index":2739,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key",{"_index":23,"title":{"classes/Key.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"classes/PolicyCredential.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/UpdateKeyDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["key).then",{"_index":2821,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key.key",{"_index":1611,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.kid",{"_index":3022,"title":{},"body":{"injectables/ResolverService.html":{}}}],["key.service",{"_index":1583,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{}}}],["key.service.ts",{"_index":1524,"title":{},"body":{"classes/DBKeyService.html":{},"coverage.html":{}}}],["key.service.ts:118",{"_index":1547,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:153",{"_index":1556,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:158",{"_index":1557,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:28",{"_index":1536,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:62",{"_index":1552,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key/entities/cert.entity",{"_index":1517,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key/entities/keys.entity",{"_index":1519,"title":{},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{}}}],["key/key.controller",{"_index":1520,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key_ops",{"_index":1592,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key_validation_schema",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["keybinding",{"_index":149,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{}}}],["keybindingnonce",{"_index":2768,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindings",{"_index":2779,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keycloak",{"_index":2134,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycloak_algorithm",{"_index":642,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["keycloak_internal_issuer_url",{"_index":638,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["keycloakissuerurl",{"_index":2123,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycloakissuerurl}/protocol/openid",{"_index":2125,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycontroller",{"_index":1514,"title":{"controllers/KeyController.html":{}},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{},"coverage.html":{}}}],["keyentity",{"_index":1518,"title":{"entities/KeyEntity.html":{}},"body":{"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["keyid",{"_index":153,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/IssuanceService.html":{},"classes/KeyService.html":{},"classes/NoneTrustPolicy.html":{},"injectables/Oid4vpService.html":{},"classes/PolicyCredential.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"injectables/WellKnownService.html":{}}}],["keyimportdto",{"_index":1559,"title":{"classes/KeyImportDto.html":{}},"body":{"classes/DBKeyService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["keymodule",{"_index":247,"title":{"modules/KeyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"index.html":{},"modules.html":{}}}],["keymodule.forroot",{"_index":377,"title":{},"body":{"modules/AppModule.html":{}}}],["keyobj",{"_index":2222,"title":{"classes/KeyObj.html":{}},"body":{"classes/KeyObj.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["keypair",{"_index":1478,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["keypair.privatekey",{"_index":3868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keypair.publickey",{"_index":3867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyrepository",{"_index":1535,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"modules/KeyModule.html":{}}}],["keyresponsedto",{"_index":470,"title":{"classes/KeyResponseDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["keys",{"_index":607,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyResponseDto.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["keys.privatekey",{"_index":1599,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice",{"_index":1526,"title":{"classes/KeyService.html":{}},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["keyservice:109",{"_index":1564,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:136",{"_index":1543,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:152",{"_index":1555,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:195",{"_index":1568,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:46",{"_index":1560,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:77",{"_index":1562,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:86",{"_index":1538,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyusage",{"_index":2193,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["kid",{"_index":2150,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["km_type",{"_index":2209,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["kmtype",{"_index":2219,"title":{},"body":{"modules/KeyModule.html":{}}}],["know",{"_index":2962,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["known",{"_index":3616,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["known.controller",{"_index":299,"title":{},"body":{"modules/AppModule.html":{}}}],["known.controller.ts",{"_index":3614,"title":{},"body":{"controllers/WellKnownController.html":{},"coverage.html":{}}}],["known.controller.ts:47",{"_index":3629,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:59",{"_index":3619,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:71",{"_index":3624,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.service",{"_index":300,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["known.service.ts",{"_index":3648,"title":{},"body":{"injectables/WellKnownService.html":{},"coverage.html":{}}}],["known.service.ts:16",{"_index":3653,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:39",{"_index":3657,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:77",{"_index":3655,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:87",{"_index":3665,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known/dto/credential",{"_index":1296,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"coverage.html":{}}}],["known/dto/jwks",{"_index":1578,"title":{},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["known/dto/oauth",{"_index":2429,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"coverage.html":{}}}],["known/jwks.json",{"_index":589,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["known/jwks.json')@apioperation({summary",{"_index":456,"title":{},"body":{"controllers/AuthController.html":{}}}],["known/jwt",{"_index":3016,"title":{},"body":{"injectables/ResolverService.html":{}}}],["known/oauth",{"_index":487,"title":{},"body":{"controllers/AuthController.html":{}}}],["known/openid",{"_index":2915,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["known/well",{"_index":298,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["kty",{"_index":1672,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["labelnames",{"_index":3296,"title":{},"body":{"modules/SessionModule.html":{}}}],["labs.github.io/eudiplo/latest",{"_index":229,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["labs/eudiplo.git",{"_index":3831,"title":{},"body":{"properties.html":{}}}],["labs/eudiplo/issues",{"_index":3828,"title":{},"body":{"properties.html":{}}}],["last",{"_index":987,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{}}}],["later",{"_index":609,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{}}}],["legend",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["length",{"_index":3212,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["lessthan",{"_index":3339,"title":{},"body":{"injectables/SessionService.html":{}}}],["lessthan(new",{"_index":3378,"title":{},"body":{"injectables/SessionService.html":{}}}],["level",{"_index":344,"title":{},"body":{"modules/AppModule.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels",{"_index":2325,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels[level.tolowercase",{"_index":2328,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["license",{"_index":3829,"title":{},"body":{"properties.html":{}}}],["lifetime",{"_index":162,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"injectables/Oid4vpService.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TokenResponseDto.html":{},"injectables/WellKnownService.html":{}}}],["line",{"_index":2935,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["link",{"_index":167,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{}}}],["links",{"_index":1869,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["list",{"_index":38,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/IssuerMetadata.html":{},"classes/NoneTrustPolicy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/PolicyCredential.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{}}}],["list')@header('content",{"_index":3387,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller",{"_index":3417,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.controller.ts",{"_index":3382,"title":{},"body":{"controllers/StatusListController.html":{},"coverage.html":{}}}],["list.controller.ts:17",{"_index":3389,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.entity",{"_index":3414,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["list.entity.ts",{"_index":3398,"title":{},"body":{"entities/StatusListEntity.html":{},"coverage.html":{}}}],["list.entity.ts:13",{"_index":3406,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:19",{"_index":3402,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:25",{"_index":3404,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:31",{"_index":3401,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:37",{"_index":3403,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.module",{"_index":627,"title":{},"body":{"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/SessionModule.html":{}}}],["list.module.ts",{"_index":3412,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.service",{"_index":1003,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{}}}],["list.service.ts",{"_index":3419,"title":{},"body":{"injectables/StatusListService.html":{},"coverage.html":{}}}],["list.service.ts:105",{"_index":3432,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:115",{"_index":3428,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:157",{"_index":3440,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:173",{"_index":3442,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:20",{"_index":3426,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:36",{"_index":3433,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:59",{"_index":3431,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list/dto/status",{"_index":3134,"title":{},"body":{"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["list/entities/status",{"_index":3397,"title":{},"body":{"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["list/status",{"_index":626,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["listen",{"_index":1056,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["literal",{"_index":669,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"miscellaneous/typealiases.html":{}}}],["livetime",{"_index":159,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["load",{"_index":1020,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{}}}],["loadclients",{"_index":1021,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["loadconfiguration",{"_index":2295,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loadtypemetadataformat",{"_index":1435,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["local",{"_index":1755,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"modules/StorageModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["local_storage_dir",{"_index":3507,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["locale",{"_index":1664,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["localfilestorage",{"_index":2248,"title":{"classes/LocalFileStorage.html":{}},"body":{"classes/LocalFileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["log",{"_index":2327,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_debug_mode",{"_index":324,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_enable_http_logger",{"_index":322,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_enable_session_logger",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_format",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_level",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["logauthorizationrequest",{"_index":3232,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logauthorizationrequest(context",{"_index":3245,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcontext",{"_index":2549,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["logcredentialissuance",{"_index":3233,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialissuance(context",{"_index":3248,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification",{"_index":3234,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification(context",{"_index":3251,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete",{"_index":3235,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete(context",{"_index":3253,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror",{"_index":3236,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror(context",{"_index":3256,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart",{"_index":3237,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart(context",{"_index":3258,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logformat",{"_index":2319,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["logged",{"_index":3161,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["logger",{"_index":1175,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.decorator",{"_index":2481,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logger.decorator.ts",{"_index":3744,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.interceptor",{"_index":2044,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["logger.interceptor.ts",{"_index":3164,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{}}}],["logger.interceptor.ts:136",{"_index":3180,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:19",{"_index":3169,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:44",{"_index":3172,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.service",{"_index":2045,"title":{},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["logger.service.ts",{"_index":3229,"title":{},"body":{"injectables/SessionLoggerService.html":{},"coverage.html":{}}}],["logger.service.ts:102",{"_index":3250,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:12",{"_index":3244,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:124",{"_index":3252,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:146",{"_index":3247,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:163",{"_index":3267,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:180",{"_index":3261,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:202",{"_index":3263,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:221",{"_index":3265,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:30",{"_index":3268,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:37",{"_index":3259,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:56",{"_index":3254,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:75",{"_index":3257,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger/session",{"_index":3576,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["loggerconfigservice",{"_index":2287,"title":{"injectables/LoggerConfigService.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggerconfiguration",{"_index":2300,"title":{"interfaces/LoggerConfiguration.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggermodule",{"_index":269,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggermodule.forrootasync",{"_index":330,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":337,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["loglevel",{"_index":2303,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["lognotification",{"_index":3238,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["lognotification(context",{"_index":3260,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logo",{"_index":1665,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["logs",{"_index":2536,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logsession",{"_index":3239,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsession(context",{"_index":3262,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror",{"_index":3240,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror(context",{"_index":3264,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange",{"_index":3241,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange(context",{"_index":3266,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["long",{"_index":2666,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["made",{"_index":2665,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{}}}],["main",{"_index":215,"title":{},"body":{"controllers/AppController.html":{}}}],["maintain",{"_index":666,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["make",{"_index":571,"title":{},"body":{"controllers/AuthController.html":{}}}],["makegaugeprovider",{"_index":622,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{}}}],["makes",{"_index":3674,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["making",{"_index":2750,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["manage",{"_index":111,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/NoneTrustPolicy.html":{},"injectables/OAuthService.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["management",{"_index":155,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"controllers/PresentationManagementController.html":{},"classes/RootOfTrustPolicy.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["management.controller",{"_index":2053,"title":{},"body":{"modules/IssuerModule.html":{}}}],["management.controller.ts",{"_index":1979,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["management.controller.ts:83",{"_index":1989,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management/credentials",{"_index":1318,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["management/issuance",{"_index":1884,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["management/issuer",{"_index":1978,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["managing",{"_index":1170,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["many",{"_index":1268,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["manytoone",{"_index":68,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["manytoone(undefined",{"_index":1275,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["map",{"_index":2399,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["map((_",{"_index":3454,"title":{},"body":{"injectables/StatusListService.html":{}}}],["map((error",{"_index":1955,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["mapping",{"_index":1149,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity",{"_index":3416,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity.ts",{"_index":3484,"title":{},"body":{"entities/StatusMapping.html":{},"coverage.html":{}}}],["mapping.entity.ts:12",{"_index":3489,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:15",{"_index":3487,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:6",{"_index":3491,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:9",{"_index":3490,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mark",{"_index":3880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marks",{"_index":3332,"title":{},"body":{"injectables/SessionService.html":{}}}],["match",{"_index":407,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/ResolverService.html":{}}}],["matches",{"_index":393,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["matching",{"_index":32,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":2191,"title":{},"body":{"entities/KeyEntity.html":{}}}],["math.floor(date.now",{"_index":2420,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{}}}],["math.floor(new",{"_index":2593,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["math.random",{"_index":3457,"title":{},"body":{"injectables/StatusListService.html":{}}}],["math.round(new",{"_index":1441,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["max",{"_index":2015,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["maybe",{"_index":2977,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["media",{"_index":3661,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mediatype",{"_index":3626,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["mediatype.application_jwt",{"_index":3639,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["mediatype.application_jwt)@get('openid",{"_index":3628,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["message",{"_index":3217,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["messages",{"_index":1944,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.join",{"_index":1958,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.length",{"_index":1957,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.push",{"_index":1946,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["meta",{"_index":105,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["metadata",{"_index":125,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["metadata+jwt",{"_index":3671,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.'})@apiproduces(mediatype.application_json",{"_index":3627,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["metadata.controller",{"_index":2051,"title":{},"body":{"modules/IssuerModule.html":{}}}],["metadata.controller.ts",{"_index":1349,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"coverage.html":{}}}],["metadata.controller.ts:15",{"_index":1356,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.controller.ts:25",{"_index":1353,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.credential_issuer",{"_index":3672,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.dto",{"_index":3000,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["metadata.dto.ts",{"_index":1297,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["metadata.dto.ts:12",{"_index":1308,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:16",{"_index":1312,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:20",{"_index":1315,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:24",{"_index":1310,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:33",{"_index":1314,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:37",{"_index":1311,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:41",{"_index":1306,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:8",{"_index":1313,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata/credentials",{"_index":1348,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["metadata/dto/credential",{"_index":75,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["metadata/dto/schema",{"_index":78,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["metadata/vct/${credentialconfig.id",{"_index":1457,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["method",{"_index":364,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":214,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["metric/metric.module",{"_index":289,"title":{},"body":{"modules/AppModule.html":{}}}],["metricmodule",{"_index":248,"title":{"modules/MetricModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetricModule.html":{},"index.html":{},"modules.html":{}}}],["metrics",{"_index":1013,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/MetricModule.html":{},"injectables/SessionService.html":{}}}],["middleware",{"_index":3823,"title":{},"body":{"properties.html":{}}}],["mirko",{"_index":3833,"title":{},"body":{"properties.html":{}}}],["miscellaneous",{"_index":3801,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misused",{"_index":2938,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["mkdirsync",{"_index":2260,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["mkdirsync(dirname(fullpath",{"_index":2267,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["mm",{"_index":354,"title":{},"body":{"modules/AppModule.html":{},"injectables/WellKnownService.html":{}}}],["modify",{"_index":2018,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["modifying",{"_index":3222,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["module",{"_index":230,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":232,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["mollik",{"_index":3834,"title":{},"body":{"properties.html":{}}}],["more",{"_index":225,"title":{},"body":{"controllers/AppController.html":{},"entities/Session.html":{}}}],["move",{"_index":2403,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["mso_mdoc",{"_index":2585,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["multi",{"_index":3105,"title":{},"body":{"entities/Session.html":{}}}],["mustermann",{"_index":2460,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["mysql2",{"_index":3785,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":184,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"entities/DisplayEntity.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name)?.id",{"_index":2949,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["namedcurve",{"_index":3862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["necessary",{"_index":2535,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["need",{"_index":496,"title":{},"body":{"controllers/AuthController.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/RegistrarService.html":{}}}],["needed",{"_index":338,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{}}}],["needs",{"_index":940,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["nestinterceptor",{"_index":3185,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["nestjs",{"_index":270,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":2041,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"modules/VerifierModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":218,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"modules/VerifierModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":262,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2075,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":3759,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":619,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":3763,"title":{},"body":{"dependencies.html":{}}}],["nestjs/schedule",{"_index":264,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":266,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":220,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/UpdateKeyDto.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1850,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":621,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["new",{"_index":535,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":2934,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{}}}],["next.handle",{"_index":3191,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.handle().pipe",{"_index":3205,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["node:crypto",{"_index":740,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{}}}],["nodejs",{"_index":1391,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["noncce",{"_index":3109,"title":{},"body":{"entities/Session.html":{}}}],["nonce",{"_index":2465,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["nonce(@sessionentity",{"_index":2493,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["nonce(session",{"_index":2470,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["none",{"_index":87,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["nonetrustpolicy",{"_index":102,"title":{"classes/NoneTrustPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["not(isnull",{"_index":3358,"title":{},"body":{"injectables/SessionService.html":{}}}],["notfoundexception",{"_index":3152,"title":{},"body":{"guards/SessionGuard.html":{}}}],["notification",{"_index":1159,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["notification_endpoint",{"_index":1305,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["notification_id",{"_index":2343,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["notificationevent",{"_index":2344,"title":{},"body":{"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["notificationrequestdto",{"_index":2341,"title":{"classes/NotificationRequestDto.html":{}},"body":{"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["notifications",{"_index":207,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["notifications(body",{"_index":2473,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["notifywebhook",{"_index":1160,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"entities/Session.html":{}}}],["now",{"_index":122,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["null",{"_index":692,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["nullable",{"_index":137,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["number",{"_index":163,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"modules/AuthModule.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"modules/SessionModule.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["oauth",{"_index":2350,"title":{},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["oauth.controller",{"_index":2373,"title":{},"body":{"modules/OAuthModule.html":{}}}],["oauth.service",{"_index":2363,"title":{},"body":{"controllers/OAuthController.html":{},"modules/OAuthModule.html":{}}}],["oauth2",{"_index":476,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{}}}],["oauth2authorizationserver",{"_index":822,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oauth2authorizationserverresponse",{"_index":2428,"title":{"classes/Oauth2AuthorizationServerResponse.html":{}},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["oauth2client",{"_index":2860,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oauth_client_id",{"_index":2375,"title":{},"body":{"modules/OAuthModule.html":{},"miscellaneous/variables.html":{}}}],["oauth_client_secret",{"_index":2376,"title":{},"body":{"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"miscellaneous/variables.html":{}}}],["oauth_validation_schema",{"_index":2374,"title":{},"body":{"modules/OAuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["oauthcontroller",{"_index":2348,"title":{"controllers/OAuthController.html":{}},"body":{"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"coverage.html":{}}}],["oauthmodule",{"_index":2367,"title":{"modules/OAuthModule.html":{}},"body":{"modules/OAuthModule.html":{},"index.html":{},"modules.html":{}}}],["oauthservice",{"_index":2362,"title":{"injectables/OAuthService.html":{}},"body":{"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"coverage.html":{},"index.html":{}}}],["obj",{"_index":415,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/S3FileStorage.html":{}}}],["obj.body",{"_index":3065,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.contentlength",{"_index":3067,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.contenttype",{"_index":3066,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.method",{"_index":418,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["object",{"_index":422,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["object.dto",{"_index":2245,"title":{},"body":{"classes/KeyService.html":{}}}],["object.dto.ts",{"_index":2223,"title":{},"body":{"classes/KeyObj.html":{},"coverage.html":{}}}],["object.dto.ts:11",{"_index":2225,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.dto.ts:15",{"_index":2226,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.dto.ts:19",{"_index":2224,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.entries(params",{"_index":2615,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["object.keys(res.vp_token",{"_index":2822,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["object.values",{"_index":1947,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["observable",{"_index":3177,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["obtain",{"_index":2356,"title":{},"body":{"controllers/OAuthController.html":{}}}],["offer",{"_index":136,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{}}}],["offerrequestdto",{"_index":1982,"title":{"classes/OfferRequestDto.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/Session.html":{},"coverage.html":{}}}],["offerresponse",{"_index":1985,"title":{"classes/OfferResponse.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["offerurl",{"_index":3075,"title":{},"body":{"entities/Session.html":{}}}],["oid4vci",{"_index":123,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/NoneTrustPolicy.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"miscellaneous/variables.html":{}}}],["oid4vci/dto/offer",{"_index":1994,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["oid4vci/entities/display.entity",{"_index":2054,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.controller",{"_index":2055,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.service",{"_index":2056,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/util",{"_index":848,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oid4vcicontroller",{"_index":2039,"title":{"controllers/Oid4vciController.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["oid4vciservice",{"_index":1000,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["oid4vp",{"_index":432,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"miscellaneous/variables.html":{}}}],["oid4vp.controller",{"_index":2527,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["oid4vp.service",{"_index":2513,"title":{},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vp/dto/presentation",{"_index":2700,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vp/oid4vp.module",{"_index":2732,"title":{},"body":{"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{}}}],["oid4vp/oid4vp.service",{"_index":2701,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vpcontroller",{"_index":2499,"title":{"controllers/Oid4vpController.html":{}},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"coverage.html":{}}}],["oid4vpmodule",{"_index":2034,"title":{"modules/Oid4vpModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["oid4vpservice",{"_index":813,"title":{"injectables/Oid4vpService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{},"index.html":{}}}],["oidc",{"_index":489,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["oidcdiscoverydto",{"_index":500,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["oidcissuerurl",{"_index":2908,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/.well",{"_index":2914,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/protocol/openid",{"_index":2911,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["older",{"_index":3335,"title":{},"body":{"injectables/SessionService.html":{}}}],["omittype",{"_index":3552,"title":{},"body":{"classes/UpdateKeyDto.html":{}}}],["omittype(keyimportdto",{"_index":3551,"title":{},"body":{"classes/UpdateKeyDto.html":{}}}],["on(\"error",{"_index":2278,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["on(\"finish",{"_index":2276,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["onapplicationbootstrap",{"_index":991,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{}}}],["once",{"_index":2873,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["ondelete",{"_index":174,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["one",{"_index":1545,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/RegistrarService.html":{}}}],["ones",{"_index":1421,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["onetomany",{"_index":69,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["onetomany(undefined",{"_index":1866,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["onmoduleinit",{"_index":1913,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["ontenantinit",{"_index":1690,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit(tenantid",{"_index":1702,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["openid",{"_index":491,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{}}}],["openid4vc",{"_index":438,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/typealiases.html":{}}}],["openid4vc/oauth2",{"_index":841,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"dependencies.html":{}}}],["openid4vc/openid4vci",{"_index":55,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["openid4vc/openid4vp",{"_index":3771,"title":{},"body":{"dependencies.html":{}}}],["openid4vc/utils",{"_index":3772,"title":{},"body":{"dependencies.html":{}}}],["openid4vci",{"_index":714,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/WellKnownController.html":{}}}],["openid4vp://?${(await",{"_index":928,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["openid4vp://?${querystring",{"_index":2624,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["openid4vp://?${values.uri",{"_index":2713,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["openidvci",{"_index":3670,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["operation",{"_index":1185,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["operations",{"_index":1499,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"controllers/Oid4vpController.html":{},"injectables/RegistrarService.html":{}}}],["optional",{"_index":17,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"classes/NoneTrustPolicy.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":349,"title":{},"body":{"modules/AppModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["options.audience",{"_index":1823,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.dto",{"_index":2548,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["options.dto.ts",{"_index":2724,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["options.expiresin",{"_index":1812,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["opts",{"_index":1739,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["opts?.acl",{"_index":3052,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["opts?.checksum",{"_index":3055,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["opts?.contenttype",{"_index":2282,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["opts?.metadata",{"_index":3051,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["order",{"_index":2798,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["original",{"_index":3223,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["originalname",{"_index":1789,"title":{},"body":{"injectables/FilesService.html":{}}}],["otherwhise",{"_index":1995,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["otherwise",{"_index":641,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":256,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["ov",{"_index":341,"title":{},"body":{"modules/AppModule.html":{}}}],["over",{"_index":1221,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["override",{"_index":2013,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["overrides",{"_index":2449,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["overview",{"_index":3813,"title":{"index.html":{}},"body":{"index.html":{}}}],["overwrite",{"_index":1929,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["overwritten",{"_index":133,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["p",{"_index":1709,"title":{},"body":{"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":3753,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pairs",{"_index":673,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["par",{"_index":720,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(@body",{"_index":763,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(body",{"_index":730,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["param",{"_index":523,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["param(\"id",{"_index":1344,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/SessionController.html":{}}}],["param(\"tenantid",{"_index":1362,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["parameter",{"_index":665,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["parameters",{"_index":401,"title":{},"body":{"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2611,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["parresponsedto",{"_index":755,"title":{"classes/ParResponseDto.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"coverage.html":{}}}],["parse",{"_index":2770,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseaccesstokenrequest",{"_index":885,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest",{"_index":806,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest(body",{"_index":823,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["parsed",{"_index":2771,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parsedaccesstokenauthorizationcoderequestgrant",{"_index":849,"title":{"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenpreauthorizedcoderequestgrant",{"_index":851,"title":{"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenrequest",{"_index":884,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.accesstokenrequest",{"_index":900,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.dpop?.jwt",{"_index":903,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant",{"_index":899,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.granttype",{"_index":896,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.preauthorizedcode",{"_index":905,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.txcode",{"_index":907,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parseloglevel",{"_index":2296,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["parseloglevel(level",{"_index":2308,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["parseresponse",{"_index":2744,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseresponse(res",{"_index":2766,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["part",{"_index":2783,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parties",{"_index":2859,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["party",{"_index":2879,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pass",{"_index":2017,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/RegistrarService.html":{}}}],["passed",{"_index":134,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["passport",{"_index":2113,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":2109,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":618,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2108,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":2093,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":1654,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["path",{"_index":274,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["payload",{"_index":568,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["payload.cnf",{"_index":2817,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["payload.id",{"_index":1231,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["payload.iss",{"_index":3001,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.iss}/.well",{"_index":3015,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.sub",{"_index":1821,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["payloads",{"_index":2991,"title":{},"body":{"injectables/ResolverService.html":{}}}],["peculiar/x509",{"_index":3773,"title":{},"body":{"dependencies.html":{}}}],["pem",{"_index":24,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["perform",{"_index":1843,"title":{},"body":{"controllers/HealthController.html":{}}}],["periodically",{"_index":2892,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pg",{"_index":3788,"title":{},"body":{"dependencies.html":{}}}],["pid",{"_index":2004,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["pid,hostname",{"_index":358,"title":{},"body":{"modules/AppModule.html":{}}}],["pino",{"_index":271,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{}}}],["pino?tab=readme",{"_index":340,"title":{},"body":{"modules/AppModule.html":{}}}],["pinohttp",{"_index":343,"title":{},"body":{"modules/AppModule.html":{}}}],["pinologger",{"_index":1176,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["pkcecodechallengemethod",{"_index":839,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["pkcecodechallengemethod.s256",{"_index":871,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["plaintoclass",{"_index":1200,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["plaintoclass(credentialconfig",{"_index":1237,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["plaintoclass(issuancedto",{"_index":1940,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["plaintoclass(presentationconfig",{"_index":2795,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["please",{"_index":1038,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["png",{"_index":1997,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["policy",{"_index":40,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/enumerations.html":{}}}],["policycredential",{"_index":104,"title":{"classes/PolicyCredential.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["policytype",{"_index":86,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/enumerations.html":{}}}],["policytype.allow_list",{"_index":45,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["policytype.attestation_based",{"_index":110,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["policytype.none",{"_index":103,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["policytype.root_of_trust",{"_index":101,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["port",{"_index":1650,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["post",{"_index":501,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["post(\"challenge",{"_index":777,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post(\"credential",{"_index":2485,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"nonce",{"_index":2491,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"notification",{"_index":2488,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"oauth2/token",{"_index":524,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"offer",{"_index":2016,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["post(\"par",{"_index":762,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post(\"request",{"_index":2708,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["post(\"revoke",{"_index":3144,"title":{},"body":{"controllers/SessionController.html":{}}}],["post(\"token",{"_index":774,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/OAuthController.html":{}}}],["post('credential')@sessionlogger('session",{"_index":2467,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('nonce')@sessionlogger('nonce",{"_index":2471,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification')@sessionlogger('notification_id",{"_index":2474,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('oauth2/token')@apibody({type",{"_index":472,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('revoke",{"_index":3132,"title":{},"body":{"controllers/SessionController.html":{}}}],["post()@sessionlogger('session",{"_index":2510,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["postgres",{"_index":1648,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres\").default(\"sqlite",{"_index":1632,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["pre",{"_index":440,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["preauthorizedcode",{"_index":852,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["preauthorizedcodegrantidentifier",{"_index":840,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["predefined",{"_index":2762,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["preferred",{"_index":1307,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["prefix",{"_index":712,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["preheader",{"_index":3464,"title":{},"body":{"injectables/StatusListService.html":{}}}],["prepayload",{"_index":3463,"title":{},"body":{"injectables/StatusListService.html":{}}}],["present",{"_index":419,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["presentation",{"_index":424,"title":{},"body":{"classes/AuthConfigValidator.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["presentationattachment",{"_index":2653,"title":{"classes/PresentationAttachment.html":{}},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"coverage.html":{}}}],["presentationconfig",{"_index":2559,"title":{"entities/PresentationConfig.html":{}},"body":{"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["presentationconfig.lifetime",{"_index":2619,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfig.webhook",{"_index":2622,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationduringissuance",{"_index":406,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["presentationduringissuanceconfig",{"_index":405,"title":{"classes/PresentationDuringIssuanceConfig.html":{}},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["presentationexists",{"_index":2793,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["presentationmanagementcontroller",{"_index":2686,"title":{"controllers/PresentationManagementController.html":{}},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"coverage.html":{}}}],["presentationrequest",{"_index":2694,"title":{"classes/PresentationRequest.html":{}},"body":{"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"coverage.html":{}}}],["presentationrequestoptions",{"_index":2539,"title":{"interfaces/PresentationRequestOptions.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["presentations",{"_index":2502,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["presentations.controller",{"_index":2734,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["presentations.service",{"_index":2703,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentations/dto/auth",{"_index":2545,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentations/presentations.module",{"_index":2526,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["presentations/presentations.service",{"_index":2546,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationsmodule",{"_index":2525,"title":{"modules/PresentationsModule.html":{}},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["presentationsservice",{"_index":2531,"title":{"injectables/PresentationsService.html":{}},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"coverage.html":{},"index.html":{}}}],["presigned",{"_index":1753,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["presigner",{"_index":3047,"title":{},"body":{"classes/S3FileStorage.html":{},"dependencies.html":{}}}],["pretty",{"_index":327,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"dependencies.html":{}}}],["primary",{"_index":116,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/KeyEntity.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"classes/RootOfTrustPolicy.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{}}}],["primarycolumn",{"_index":1071,"title":{},"body":{"entities/ClientEntry.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/Session.html":{}}}],["primarycolumn(\"uuid",{"_index":3115,"title":{},"body":{"entities/Session.html":{}}}],["primarycolumn('uuid",{"_index":3087,"title":{},"body":{"entities/Session.html":{}}}],["primarygeneratedcolumn",{"_index":1879,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["primarygeneratedcolumn(\"uuid",{"_index":1881,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":1872,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["private",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}}}],["private_key",{"_index":3225,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["privateencryptionkey",{"_index":1714,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privatekey",{"_index":1489,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/UpdateKeyDto.html":{},"miscellaneous/variables.html":{}}}],["privatekey.alg",{"_index":1601,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.ext",{"_index":1604,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.key_ops",{"_index":1605,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.kid",{"_index":1589,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekeyinstance",{"_index":1617,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekeyjwk",{"_index":1483,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"miscellaneous/variables.html":{}}}],["proceed",{"_index":3176,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["process",{"_index":434,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{}}}],["process.env.node_env",{"_index":315,"title":{},"body":{"modules/AppModule.html":{}}}],["process_presentation_response",{"_index":2631,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processes",{"_index":2542,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["production",{"_index":316,"title":{},"body":{"modules/AppModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["progress",{"_index":3163,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["prom",{"_index":995,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["prometheus",{"_index":624,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"dependencies.html":{}}}],["prometheus/dist/injector",{"_index":3337,"title":{},"body":{"injectables/SessionService.html":{}}}],["prometheusmodule",{"_index":2336,"title":{},"body":{"modules/MetricModule.html":{}}}],["prometheusmodule.register",{"_index":2338,"title":{},"body":{"modules/MetricModule.html":{}}}],["promise",{"_index":486,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["promise((resolve",{"_index":2269,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.all(att",{"_index":2829,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["promise.resolve",{"_index":2283,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["promise.resolve(existssync(join(this.basedir",{"_index":2286,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.resolve(this.storage.delete(key",{"_index":1791,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.resolve(this.storage.getstream(key",{"_index":1790,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.resolve(undefined",{"_index":1797,"title":{},"body":{"injectables/FilesService.html":{}}}],["promises",{"_index":2939,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["proof_signing_alg_values_supported",{"_index":1402,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["proof_types_supported",{"_index":1401,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"properties.html":{}}}],["property",{"_index":420,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{}}}],["protect",{"_index":2337,"title":{},"body":{"modules/MetricModule.html":{}}}],["protected",{"_index":1532,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["provide",{"_index":2218,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["provided",{"_index":208,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["provider",{"_index":538,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["providers",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["provides",{"_index":466,"title":{},"body":{"controllers/AuthController.html":{},"injectables/IssuanceService.html":{},"modules/RegistrarModule.html":{}}}],["providing",{"_index":1841,"title":{},"body":{"controllers/HealthController.html":{}}}],["public",{"_index":22,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":2078,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["public_url",{"_index":2057,"title":{},"body":{"modules/IssuerModule.html":{},"miscellaneous/variables.html":{}}}],["publicbaseurl",{"_index":3032,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["publicjwk",{"_index":916,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["publickey",{"_index":1488,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyObj.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["publickeyinstance",{"_index":1622,"title":{},"body":{"classes/DBKeyService.html":{}}}],["publickeyjwk",{"_index":1487,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["publicurl",{"_index":583,"title":{},"body":{"controllers/AuthController.html":{}}}],["publicurl}/.well",{"_index":588,"title":{},"body":{"controllers/AuthController.html":{}}}],["publicurl}/oauth2/token",{"_index":586,"title":{},"body":{"controllers/AuthController.html":{}}}],["purpose",{"_index":2963,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pushed",{"_index":732,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["pushed_authorization_request_endpoint",{"_index":868,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["put",{"_index":1726,"title":{},"body":{"interfaces/FileStorage.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["put(\":id",{"_index":2184,"title":{},"body":{"controllers/KeyController.html":{}}}],["put(':id",{"_index":2174,"title":{},"body":{"controllers/KeyController.html":{}}}],["put(key",{"_index":1736,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["putobjectcommand",{"_index":3043,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["putoptions",{"_index":1740,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["qr",{"_index":2002,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["qrcode",{"_index":1991,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["qrcode.tobuffer(values.uri",{"_index":2023,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["qrcodebuffer",{"_index":2022,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["queries",{"_index":729,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["queries.request_uri",{"_index":875,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["query",{"_index":741,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{}}}],["querydeeppartialentity",{"_index":3309,"title":{},"body":{"injectables/SessionService.html":{}}}],["querystring",{"_index":2614,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["r",{"_index":3017,"title":{},"body":{"injectables/ResolverService.html":{}}}],["r.data",{"_index":3018,"title":{},"body":{"injectables/ResolverService.html":{}}}],["random",{"_index":1600,"title":{},"body":{"classes/DBKeyService.html":{}}}],["randomness",{"_index":3438,"title":{},"body":{"injectables/StatusListService.html":{}}}],["randomuuid",{"_index":739,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/FilesService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["ratelimit",{"_index":2128,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["re",{"_index":926,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["reach",{"_index":956,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["reachable",{"_index":3020,"title":{},"body":{"injectables/ResolverService.html":{}}}],["react",{"_index":1057,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["read",{"_index":3053,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["readable",{"_index":1738,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["readable.from(body",{"_index":2274,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["readdirsync",{"_index":1201,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readdirsync(configpath",{"_index":1214,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readdirsync(path",{"_index":1226,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync",{"_index":1202,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync(join(path",{"_index":1228,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readonly",{"_index":759,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["real",{"_index":2400,"title":{},"body":{"injectables/OAuthService.html":{}}}],["really",{"_index":1286,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["receive",{"_index":1157,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["received",{"_index":3594,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["record",{"_index":138,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/FileStorage.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["recursive",{"_index":2268,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["recursively",{"_index":1948,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["redacted",{"_index":3228,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["redirect",{"_index":441,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["redirect_uri",{"_index":786,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["redirected",{"_index":429,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["reference",{"_index":114,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/DBKeyService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["reflect",{"_index":3794,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2069,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["refresh",{"_index":2887,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["refresh_token",{"_index":578,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["refreshaccesstoken",{"_index":2866,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["refreshes",{"_index":2891,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["regcert",{"_index":2561,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["region",{"_index":3520,"title":{},"body":{"modules/StorageModule.html":{}}}],["register",{"_index":3324,"title":{},"body":{"injectables/SessionService.html":{}}}],["registrar",{"_index":2842,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar.service",{"_index":2845,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar/generated",{"_index":2984,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrar/registrar.module",{"_index":291,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["registrar/registrar.service",{"_index":1005,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{}}}],["registrar_oidc_client_id",{"_index":2851,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_client_secret",{"_index":2852,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_url",{"_index":2848,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["registrar_url",{"_index":2847,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["registrar_validation_schema",{"_index":290,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registrarentity",{"_index":2830,"title":{"entities/RegistrarEntity.html":{}},"body":{"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"coverage.html":{}}}],["registrarmodule",{"_index":249,"title":{"modules/RegistrarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["registrarrepository",{"_index":2867,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrarservice",{"_index":1004,"title":{"injectables/RegistrarService.html":{}},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/Oid4vpService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"coverage.html":{},"index.html":{}}}],["registration",{"_index":2669,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["registrationcert",{"_index":2566,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["registrationcertid",{"_index":2777,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["registrationcertificatecontrollerall",{"_index":2901,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrollerregister",{"_index":2902,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrationcertificatecreation",{"_index":2982,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrationcertificaterequest",{"_index":2663,"title":{"classes/RegistrationCertificateRequest.html":{}},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"coverage.html":{}}}],["reject",{"_index":2270,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["related",{"_index":2213,"title":{},"body":{"modules/KeyModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["relations",{"_index":1261,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{}}}],["relationship",{"_index":1269,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["relevant",{"_index":433,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/Oid4vciController.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["reload",{"_index":2312,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["reloadconfiguration",{"_index":2297,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["relying",{"_index":2858,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerfindall",{"_index":2903,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerregister",{"_index":2904,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartyid",{"_index":2833,"title":{},"body":{"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{}}}],["remove",{"_index":173,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/DBKeyService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["removeclient",{"_index":2383,"title":{},"body":{"injectables/OAuthService.html":{}}}],["removeclient(clientid",{"_index":2395,"title":{},"body":{"injectables/OAuthService.html":{}}}],["replace(\"https",{"_index":2952,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["repository",{"_index":996,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"properties.html":{}}}],["representing",{"_index":674,"title":{},"body":{"interfaces/AuthResponse.html":{},"interfaces/IssuerMetadata.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["represents",{"_index":1298,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/Session.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["repsonse",{"_index":10,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{}}}],["req",{"_index":360,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/JwtStrategy.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["req+jwt",{"_index":2597,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["req.body",{"_index":2973,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["req.headers[\"content",{"_index":372,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers[\"user",{"_index":370,"title":{},"body":{"modules/AppModule.html":{}}}],["req.id",{"_index":2970,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["req.method",{"_index":365,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["req.params?.session",{"_index":362,"title":{},"body":{"modules/AppModule.html":{}}}],["req.params?.tenantid",{"_index":373,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url",{"_index":366,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":12,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/NoneTrustPolicy.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["request.'})@isenum(responsetype",{"_index":2453,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.client_id",{"_index":2411,"title":{},"body":{"injectables/OAuthService.html":{}}}],["request.client_secret",{"_index":2412,"title":{},"body":{"injectables/OAuthService.html":{}}}],["request.dto",{"_index":754,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["request.dto.ts",{"_index":780,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TokenRequestDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["request.dto.ts:12",{"_index":791,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TokenRequestDto.html":{}}}],["request.dto.ts:15",{"_index":796,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:17",{"_index":2983,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:18",{"_index":798,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:19",{"_index":3537,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["request.dto.ts:21",{"_index":800,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:22",{"_index":2454,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:24",{"_index":792,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:26",{"_index":2720,"title":{},"body":{"classes/PresentationRequest.html":{},"classes/TokenRequestDto.html":{}}}],["request.dto.ts:27",{"_index":793,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:29",{"_index":2450,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:30",{"_index":794,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:33",{"_index":797,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/PresentationRequest.html":{},"classes/TokenRequestDto.html":{}}}],["request.dto.ts:36",{"_index":790,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/OfferRequestDto.html":{}}}],["request.dto.ts:41",{"_index":2721,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:54",{"_index":2445,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:6",{"_index":795,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.dto.ts:61",{"_index":2447,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:68",{"_index":2456,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:72",{"_index":2462,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:73",{"_index":2461,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:9",{"_index":799,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.header",{"_index":2599,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.headers[\"accept",{"_index":3859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.headers[\"content",{"_index":3201,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers[\"user",{"_index":3200,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.method",{"_index":3196,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params.session",{"_index":3154,"title":{},"body":{"guards/SessionGuard.html":{}}}],["request.params?.tenantid",{"_index":3195,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params[sessionidparam",{"_index":3194,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.payload",{"_index":2601,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.scope",{"_index":2415,"title":{},"body":{"injectables/OAuthService.html":{}}}],["request.session",{"_index":3156,"title":{},"body":{"guards/SessionGuard.html":{},"miscellaneous/variables.html":{}}}],["request.url",{"_index":3197,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.user",{"_index":3534,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["request/response",{"_index":2316,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["request_error",{"_index":3215,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_start",{"_index":3199,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_success",{"_index":3208,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_uri",{"_index":764,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["requested",{"_index":2497,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["requestid",{"_index":2508,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["requests",{"_index":717,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["requesturl",{"_index":2623,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["require_pushed_authorization_requests",{"_index":867,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["required",{"_index":201,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["requiredclaimkeys",{"_index":2826,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredfields",{"_index":2767,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requires",{"_index":2439,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["res",{"_index":374,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["res.data",{"_index":2816,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["res.data![\"crt",{"_index":2959,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data![\"id",{"_index":2960,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data![\"jwt",{"_index":2980,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data?.filter",{"_index":2968,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.error",{"_index":2955,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.payload",{"_index":1718,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["res.redirect(`${values.redirect_uri}?code=${code",{"_index":882,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send",{"_index":966,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send(qrcodebuffer",{"_index":2026,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.send(values",{"_index":2027,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.setheader(\"content",{"_index":2024,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.state",{"_index":2628,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["res.status",{"_index":1037,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["res.status(400).send(response",{"_index":954,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.statuscode",{"_index":376,"title":{},"body":{"modules/AppModule.html":{}}}],["reset",{"_index":255,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["resolve",{"_index":2277,"title":{},"body":{"classes/LocalFileStorage.html":{},"injectables/ResolverService.html":{}}}],["resolvepublickey",{"_index":2992,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey(payload",{"_index":2994,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolver.service",{"_index":2989,"title":{},"body":{"modules/ResolverModule.html":{}}}],["resolver/resolver.module",{"_index":2733,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["resolver/resolver.service",{"_index":2786,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolvermodule",{"_index":2730,"title":{"modules/ResolverModule.html":{}},"body":{"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"index.html":{},"modules.html":{}}}],["resolverservice",{"_index":2747,"title":{"injectables/ResolverService.html":{}},"body":{"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"index.html":{}}}],["resolves",{"_index":1183,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/PresentationsService.html":{}}}],["resolving",{"_index":2751,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["resource",{"_index":787,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["response",{"_index":477,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["response.data!.find((item",{"_index":2947,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.data![\"id",{"_index":2945,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.dto",{"_index":79,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/NoneTrustPolicy.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/PolicyCredential.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["response.dto.ts",{"_index":661,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:11",{"_index":708,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"classes/SchemaResponse.html":{}}}],["response.dto.ts:13",{"_index":2431,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:14",{"_index":3548,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["response.dto.ts:15",{"_index":1675,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:17",{"_index":2436,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:19",{"_index":1679,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:2",{"_index":3542,"title":{},"body":{"classes/TokenResponse.html":{}}}],["response.dto.ts:20",{"_index":3546,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["response.dto.ts:21",{"_index":2433,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:23",{"_index":1681,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:25",{"_index":2434,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:27",{"_index":3547,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["response.dto.ts:29",{"_index":2437,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:3",{"_index":3543,"title":{},"body":{"classes/TokenResponse.html":{}}}],["response.dto.ts:33",{"_index":2064,"title":{},"body":{"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:37",{"_index":2430,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:4",{"_index":2227,"title":{},"body":{"classes/KeyResponseDto.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:5",{"_index":2435,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:7",{"_index":3072,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:8",{"_index":3545,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["response.dto.ts:9",{"_index":2440,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{}}}],["response.error",{"_index":2943,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.jwks.keys.find((key",{"_index":3021,"title":{},"body":{"injectables/ResolverService.html":{}}}],["response.statuscode",{"_index":3209,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["response.ts",{"_index":8,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["response_mode",{"_index":2580,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_processing",{"_index":2630,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_type",{"_index":788,"title":{},"body":{"classes/AuthorizeQueries.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["response_types_supported",{"_index":590,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Oid4vpService.html":{}}}],["response_uri",{"_index":2578,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responses",{"_index":3166,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsesize",{"_index":3210,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsestatus",{"_index":3596,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["responsetype",{"_index":1992,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["responsetype.qrcode",{"_index":2003,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsetype.uri",{"_index":2005,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsible",{"_index":1525,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/HealthController.html":{},"controllers/KeyController.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{}}}],["result",{"_index":1184,"title":{},"body":{"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["result.payload",{"_index":2827,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["results",{"_index":31,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":3649,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["retrieve",{"_index":768,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{}}}],["retrieves",{"_index":1188,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["retry",{"_index":1039,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["return",{"_index":221,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":2723,"title":{},"body":{"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["returning",{"_index":2122,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["returns",{"_index":217,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigHelper.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["reuse",{"_index":2645,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["review",{"_index":3673,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["revokeall",{"_index":3123,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(@body",{"_index":3145,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(value",{"_index":3130,"title":{},"body":{"controllers/SessionController.html":{}}}],["revoked",{"_index":18,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/StatusUpdateDto.html":{}}}],["rmdirsync",{"_index":2261,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["rmdirsync(join(this.basedir",{"_index":2285,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["root",{"_index":98,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"injectables/OAuthService.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["root_of_trust",{"_index":90,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/enumerations.html":{}}}],["rootoftrust",{"_index":91,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/enumerations.html":{}}}],["rootoftrustpolicy",{"_index":100,"title":{"classes/RootOfTrustPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["rootpath",{"_index":381,"title":{},"body":{"modules/AppModule.html":{}}}],["rp",{"_index":2954,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["rp_name",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["rpid",{"_index":2942,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["rs256",{"_index":2423,"title":{},"body":{"injectables/OAuthService.html":{}}}],["rsa",{"_index":2110,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["run",{"_index":3328,"title":{},"body":{"injectables/SessionService.html":{}}}],["running",{"_index":224,"title":{},"body":{"controllers/AppController.html":{}}}],["rxjs",{"_index":2785,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":3188,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["s3",{"_index":3034,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["s3\").default(\"local",{"_index":3506,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_access_key_id",{"_index":3512,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_bucket",{"_index":3511,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_endpoint",{"_index":3514,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_force_path_style",{"_index":3515,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_public_base_url",{"_index":3517,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_region",{"_index":3510,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_secret_access_key",{"_index":3513,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3client",{"_index":3030,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{}}}],["s3filestorage",{"_index":3027,"title":{"classes/S3FileStorage.html":{}},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["safeext",{"_index":1777,"title":{},"body":{"injectables/FilesService.html":{}}}],["saltgenerator",{"_index":1434,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["same",{"_index":925,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sanitize",{"_index":3183,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody",{"_index":3168,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody(body",{"_index":3179,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized",{"_index":3184,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized[field",{"_index":3227,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizes",{"_index":3181,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["save",{"_index":766,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/DBKeyService.html":{}}}],["saveuserupload",{"_index":1761,"title":{},"body":{"injectables/FilesService.html":{}}}],["saveuserupload(tenantid",{"_index":1770,"title":{},"body":{"injectables/FilesService.html":{}}}],["schedulemodule",{"_index":263,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":378,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":3304,"title":{},"body":{"injectables/SessionService.html":{}}}],["schema",{"_index":165,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"controllers/PresentationManagementController.html":{},"modules/RegistrarModule.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"miscellaneous/variables.html":{}}}],["schema(@param(\"id",{"_index":1365,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema(id",{"_index":1351,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema.org/draft/2020",{"_index":3070,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["schema_uri",{"_index":3554,"title":{},"body":{"classes/VCT.html":{}}}],["schema_uri#integrity",{"_index":3555,"title":{},"body":{"classes/VCT.html":{}}}],["schemaresponse",{"_index":77,"title":{"classes/SchemaResponse.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["scope",{"_index":789,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/OAuthService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{}}}],["scopes_supported",{"_index":598,"title":{},"body":{"controllers/AuthController.html":{}}}],["sd",{"_index":140,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/KeyService.html":{},"classes/NoneTrustPolicy.html":{},"injectables/Oid4vpService.html":{},"classes/PolicyCredential.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["sdjwt",{"_index":1427,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwt.issue",{"_index":1449,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwtinstance",{"_index":2740,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["sdjwtvcinstance",{"_index":1394,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["sdk/client",{"_index":3045,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":3046,"title":{},"body":{"classes/S3FileStorage.html":{},"dependencies.html":{}}}],["seconds",{"_index":160,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TokenResponseDto.html":{}}}],["secret",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenRequestDto.html":{}}}],["secret'})@isstring",{"_index":3538,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["secretaccesskey",{"_index":3526,"title":{},"body":{"modules/StorageModule.html":{}}}],["secretkey",{"_index":1814,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secretorkey",{"_index":2139,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkeyprovider",{"_index":2101,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":1805,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["securely",{"_index":2402,"title":{},"body":{"injectables/OAuthService.html":{}}}],["selected",{"_index":444,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["send",{"_index":206,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["sendauthorizationcode",{"_index":807,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sendauthorizationcode(res",{"_index":827,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse",{"_index":808,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse(queries",{"_index":829,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sending",{"_index":960,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sends",{"_index":1053,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook",{"_index":3579,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook(session",{"_index":3610,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhooknotification",{"_index":3601,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhooknotification(session",{"_index":3612,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sense",{"_index":3675,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["sensitive",{"_index":3182,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields",{"_index":3224,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields.foreach((field",{"_index":3226,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sent",{"_index":186,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["serializers",{"_index":363,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":469,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["server')@apioperation({summary",{"_index":488,"title":{},"body":{"controllers/AuthController.html":{}}}],["server's",{"_index":2432,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["servers",{"_index":1309,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["servestaticmodule",{"_index":265,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":379,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":145,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"injectables/Oid4vpService.html":{},"classes/PolicyCredential.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["service.db",{"_index":1658,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["service_documentation",{"_index":603,"title":{},"body":{"controllers/AuthController.html":{}}}],["services",{"_index":203,"title":{},"body":{"classes/ApiKeyConfig.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["session",{"_index":564,"title":{"entities/Session.html":{}},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["session.auth_queries",{"_index":879,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.authorization_code",{"_index":910,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.claimswebhook",{"_index":2633,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.claimswebhook!.auth",{"_index":3580,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth.config.value",{"_index":3583,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth.type",{"_index":3581,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth?.type",{"_index":3588,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.url",{"_index":3586,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.controller",{"_index":3290,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.credentialpayload",{"_index":3595,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.credentialpayload!.claims",{"_index":3593,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.credentialpayload?.claims?.[credentialconfigurationid",{"_index":1422,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["session.credentials",{"_index":938,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.id",{"_index":857,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.issuanceid",{"_index":946,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["session.notifywebhook",{"_index":3602,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.requestid",{"_index":2554,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.service",{"_index":3136,"title":{},"body":{"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{}}}],["session.tenantid",{"_index":859,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["session.vp_nonce",{"_index":2636,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session/.well",{"_index":3615,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["session/authorize",{"_index":713,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["session/entities/session.entity",{"_index":744,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["session/oid4vp",{"_index":2501,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["session/session.decorator",{"_index":746,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["session/session.guard",{"_index":748,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["session/session.module",{"_index":293,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["session/session.service",{"_index":750,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session/vci",{"_index":2464,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_id",{"_index":2498,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_logger_key",{"_index":3189,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["session_tidy_up_interval",{"_index":3291,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["session_ttl",{"_index":3293,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["session_type",{"_index":3298,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session_validation_schema",{"_index":292,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessioncontroller",{"_index":3118,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionentity",{"_index":745,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionguard",{"_index":747,"title":{"guards/SessionGuard.html":{}},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"guards/SessionGuard.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["sessionid",{"_index":361,"title":{},"body":{"modules/AppModule.html":{},"injectables/Oid4vpService.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["sessionidparam",{"_index":3192,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["sessionlogcontext",{"_index":2544,"title":{"interfaces/SessionLogContext.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["sessionlogger",{"_index":2479,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionlogger(\"nonce",{"_index":2492,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger(\"notification_id",{"_index":2489,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger(\"session",{"_index":2486,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["sessionloggerinterceptor",{"_index":2035,"title":{"injectables/SessionLoggerInterceptor.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"index.html":{}}}],["sessionloggerservice",{"_index":2036,"title":{"injectables/SessionLoggerService.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["sessionmodule",{"_index":250,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/SessionModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["sessionrepository",{"_index":3307,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":3114,"title":{},"body":{"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sessionscounter",{"_index":3305,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionservice",{"_index":749,"title":{"injectables/SessionService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["sessionstatus",{"_index":3099,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["sessionstatus.active",{"_index":3351,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.completed",{"_index":3353,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.expired",{"_index":3354,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.failed",{"_index":3355,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.fetched",{"_index":3352,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus})@column('varchar",{"_index":3101,"title":{},"body":{"entities/Session.html":{}}}],["sessiontype",{"_index":3366,"title":{},"body":{"injectables/SessionService.html":{}}}],["set",{"_index":129,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/PolicyCredential.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/typealiases.html":{}}}],["set+json",{"_index":3644,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["set+json')@get('jwks.json",{"_index":3623,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["setauthcode",{"_index":809,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["setauthcode(issuer_state",{"_index":831,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["setentry",{"_index":3422,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setentry(id",{"_index":3439,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setexpirationtime(expiresin",{"_index":1822,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setglobalconfig",{"_index":2042,"title":{},"body":{"modules/IssuerModule.html":{}}}],["setinterval(callback",{"_index":3348,"title":{},"body":{"injectables/SessionService.html":{}}}],["setissuedat",{"_index":1818,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setissuer(issuer",{"_index":1819,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setmetadata(is_public_key",{"_index":3878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(session_logger_key",{"_index":3879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprotectedheader",{"_index":1816,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader(header",{"_index":1625,"title":{},"body":{"classes/DBKeyService.html":{}}}],["setstate",{"_index":3301,"title":{},"body":{"injectables/SessionService.html":{}}}],["setstate(session",{"_index":3330,"title":{},"body":{"injectables/SessionService.html":{}}}],["setsubject(options.subject",{"_index":1820,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["settimeout",{"_index":2931,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["setting",{"_index":1050,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["setupclient",{"_index":1078,"title":{},"body":{"injectables/ClientService.html":{}}}],["setupclient(id",{"_index":1059,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["sha",{"_index":1432,"title":{},"body":{"injectables/CredentialsService.html":{},"miscellaneous/variables.html":{}}}],["sha256",{"_index":1746,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["shouldenableautologging",{"_index":2298,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["shouldlog",{"_index":3242,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["shuffel",{"_index":3451,"title":{},"body":{"injectables/StatusListService.html":{}}}],["shuffled",{"_index":3437,"title":{},"body":{"injectables/StatusListService.html":{}}}],["sign",{"_index":2194,"title":{},"body":{"entities/KeyEntity.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/S3FileStorage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sign(privatekeyinstance",{"_index":1626,"title":{},"body":{"classes/DBKeyService.html":{}}}],["signalg",{"_index":1429,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["signature",{"_index":1490,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["signature).catch((err",{"_index":2813,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["signaturebase64url",{"_index":3873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signed",{"_index":3662,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["signedjwt",{"_index":2600,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwt.length",{"_index":2605,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwtlength",{"_index":2604,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signer",{"_index":914,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["signer(tenantid",{"_index":1563,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["signing",{"_index":152,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/StatusListService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"miscellaneous/typealiases.html":{}}}],["signjwt",{"_index":1531,"title":{},"body":{"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["signjwt(payload",{"_index":1565,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["signl",{"_index":1041,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["simplicity",{"_index":2828,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["singleline",{"_index":351,"title":{},"body":{"modules/AppModule.html":{}}}],["size",{"_index":1751,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"injectables/StatusListService.html":{}}}],["skip",{"_index":1235,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["slice(1",{"_index":1780,"title":{},"body":{"injectables/FilesService.html":{}}}],["someone",{"_index":2978,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["sort",{"_index":3455,"title":{},"body":{"injectables/StatusListService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["specific",{"_index":443,"title":{},"body":{"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["specified",{"_index":408,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/WellKnownService.html":{}}}],["specifying",{"_index":1272,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{}}}],["sqlite",{"_index":1635,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["sqlite3",{"_index":3797,"title":{},"body":{"dependencies.html":{}}}],["src",{"_index":2273,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src.pipe(write",{"_index":2275,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/.../auth.module.ts",{"_index":3846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication",{"_index":3838,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../cert.entity.ts",{"_index":3839,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../client.entity.ts",{"_index":3840,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../credential.entity.ts",{"_index":3805,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../crypto",{"_index":3841,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../crypto.service.ts",{"_index":3848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.module.ts",{"_index":3847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../display.entity.ts",{"_index":3842,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../ed25519.ts",{"_index":3849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../issuer.module.ts",{"_index":3851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../key.module.ts",{"_index":3852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../keys.entity.ts",{"_index":3844,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":3810,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../media",{"_index":3803,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../oauth.module.ts",{"_index":3853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../presentation",{"_index":3806,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../public.decorator.ts",{"_index":3850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registrar.module.ts",{"_index":3854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session",{"_index":3855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.decorator.ts",{"_index":3857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.entity.ts",{"_index":3807,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../session.module.ts",{"_index":3856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../storage.module.ts",{"_index":3843,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../storage.types.ts",{"_index":3845,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../token.decorator.ts",{"_index":3858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../util.ts",{"_index":3811,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../webhook.dto.ts",{"_index":3837,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/app.module.ts",{"_index":257,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":213,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:8",{"_index":216,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/dto/oidc",{"_index":3682,"title":{},"body":{"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":451,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:166",{"_index":494,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:201",{"_index":461,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:70",{"_index":481,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":2065,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":2073,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:7",{"_index":2070,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":617,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/client.service.ts",{"_index":989,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"coverage.html":{}}}],["src/auth/client.service.ts:142",{"_index":1086,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:26",{"_index":1080,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:41",{"_index":1085,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:51",{"_index":1082,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:61",{"_index":1084,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:77",{"_index":1087,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:90",{"_index":1081,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/client.service.ts:99",{"_index":1083,"title":{},"body":{"injectables/ClientService.html":{}}}],["src/auth/dto/client",{"_index":1065,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/dto/oidc",{"_index":3690,"title":{},"body":{"coverage.html":{}}}],["src/auth/dto/token",{"_index":3541,"title":{},"body":{"classes/TokenResponse.html":{},"coverage.html":{}}}],["src/auth/entitites/client.entity.ts",{"_index":1069,"title":{},"body":{"entities/ClientEntry.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/auth/entitites/client.entity.ts:11",{"_index":1075,"title":{},"body":{"entities/ClientEntry.html":{}}}],["src/auth/entitites/client.entity.ts:14",{"_index":1070,"title":{},"body":{"entities/ClientEntry.html":{}}}],["src/auth/entitites/client.entity.ts:8",{"_index":1072,"title":{},"body":{"entities/ClientEntry.html":{}}}],["src/auth/jwt.service.ts",{"_index":1799,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["src/auth/jwt.service.ts:102",{"_index":2090,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:14",{"_index":2086,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:28",{"_index":2089,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:65",{"_index":2091,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:91",{"_index":2087,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":2092,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:10",{"_index":2096,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:24",{"_index":2098,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:31",{"_index":2100,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:61",{"_index":2104,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:85",{"_index":2106,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/public.decorator.ts",{"_index":3698,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/token.decorator.ts",{"_index":3530,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/crypto.module.ts",{"_index":1513,"title":{},"body":{"modules/CryptoModule.html":{}}}],["src/crypto/crypto.service.ts",{"_index":3701,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/encryption/encryption.service.ts",{"_index":1684,"title":{},"body":{"injectables/EncryptionService.html":{},"coverage.html":{}}}],["src/crypto/encryption/encryption.service.ts:13",{"_index":1692,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:27",{"_index":1703,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:47",{"_index":1694,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:67",{"_index":1701,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/key/adapters/db",{"_index":1523,"title":{},"body":{"classes/DBKeyService.html":{},"coverage.html":{}}}],["src/crypto/key/adapters/vault",{"_index":3707,"title":{},"body":{"coverage.html":{}}}],["src/crypto/key/crypto",{"_index":1463,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/dto/key",{"_index":2148,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["src/crypto/key/entities/cert.entity.ts",{"_index":969,"title":{},"body":{"entities/CertEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/cert.entity.ts:15",{"_index":981,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:21",{"_index":982,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:27",{"_index":979,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:33",{"_index":984,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:39",{"_index":980,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:45",{"_index":975,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:51",{"_index":986,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts",{"_index":2188,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/keys.entity.ts:15",{"_index":2189,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:21",{"_index":2192,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:27",{"_index":2190,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:33",{"_index":2195,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/key.controller.ts",{"_index":2161,"title":{},"body":{"controllers/KeyController.html":{},"coverage.html":{}}}],["src/crypto/key/key.controller.ts:39",{"_index":2171,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:51",{"_index":2167,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:67",{"_index":2175,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:82",{"_index":2169,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.module.ts",{"_index":2200,"title":{},"body":{"modules/KeyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/key.module.ts:33",{"_index":2202,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.service.ts",{"_index":2228,"title":{},"body":{"classes/KeyService.html":{},"coverage.html":{}}}],["src/crypto/key/key.service.ts:13",{"_index":2230,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:24",{"_index":2239,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:31",{"_index":2231,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:38",{"_index":2237,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:44",{"_index":2241,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:50",{"_index":2233,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:56",{"_index":2234,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:61",{"_index":2235,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:66",{"_index":2236,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:73",{"_index":2244,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:86",{"_index":2232,"title":{},"body":{"classes/KeyService.html":{}}}],["src/database/database.module.ts",{"_index":1627,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/health/health.controller.ts",{"_index":1839,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:25",{"_index":1847,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1855,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/issuer/authorize/authorize.controller.ts",{"_index":711,"title":{},"body":{"controllers/AuthorizeController.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.controller.ts:41",{"_index":727,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:55",{"_index":734,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:77",{"_index":737,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:94",{"_index":724,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.service.ts",{"_index":803,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.service.ts:104",{"_index":834,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:209",{"_index":824,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:227",{"_index":816,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:301",{"_index":828,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:308",{"_index":832,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:38",{"_index":815,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:49",{"_index":821,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:56",{"_index":818,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:79",{"_index":830,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/dto/authorize",{"_index":779,"title":{},"body":{"classes/AuthorizeQueries.html":{},"coverage.html":{}}}],["src/issuer/authorize/dto/par",{"_index":2649,"title":{},"body":{"classes/ParResponseDto.html":{},"coverage.html":{}}}],["src/issuer/credentials",{"_index":1347,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["src/issuer/credentials/credential",{"_index":1167,"title":{},"body":{"injectables/CredentialConfigService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts",{"_index":1317,"title":{},"body":{"controllers/CredentialsController.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts:35",{"_index":1326,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:45",{"_index":1328,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:58",{"_index":1324,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.service.ts",{"_index":1367,"title":{},"body":{"injectables/CredentialsService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.service.ts:102",{"_index":1378,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:210",{"_index":1386,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:23",{"_index":1375,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:236",{"_index":1384,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:46",{"_index":1382,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts",{"_index":36,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:106",{"_index":1123,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:112",{"_index":1121,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:118",{"_index":1126,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:125",{"_index":1146,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:134",{"_index":1134,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:142",{"_index":1136,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:146",{"_index":1132,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:155",{"_index":1142,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:162",{"_index":1138,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:170",{"_index":1140,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:180",{"_index":1125,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:189",{"_index":1128,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:33",{"_index":1683,"title":{},"body":{"classes/EmbeddedDisclosurePolicy.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:43",{"_index":52,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:53",{"_index":3026,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:65",{"_index":2650,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:67",{"_index":2652,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:69",{"_index":2651,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:79",{"_index":387,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:92",{"_index":1130,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:98",{"_index":1144,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/issuance/dto/authentication",{"_index":389,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/issuer/issuance/dto/credential",{"_index":1089,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts",{"_index":1148,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:21",{"_index":1150,"title":{},"body":{"classes/CredentialConfigMapping.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:33",{"_index":1908,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:40",{"_index":1907,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:48",{"_index":1906,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:57",{"_index":1900,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:66",{"_index":1903,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:75",{"_index":1909,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:83",{"_index":1902,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/entities/credential",{"_index":1265,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"coverage.html":{}}}],["src/issuer/issuance/entities/issuance",{"_index":1858,"title":{},"body":{"entities/IssuanceConfig.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts",{"_index":1883,"title":{},"body":{"controllers/IssuanceController.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts:28",{"_index":1889,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:38",{"_index":1891,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:54",{"_index":1887,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.service.ts",{"_index":1910,"title":{},"body":{"injectables/IssuanceService.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.service.ts:160",{"_index":1922,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:173",{"_index":1924,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:189",{"_index":1928,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:23",{"_index":1917,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:259",{"_index":1920,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:43",{"_index":1926,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:52",{"_index":1925,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuer",{"_index":1977,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["src/issuer/issuer.module.ts",{"_index":2038,"title":{},"body":{"modules/IssuerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/issuer/oid4vci/dto/notification",{"_index":2342,"title":{},"body":{"classes/NotificationRequestDto.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/dto/offer",{"_index":2441,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/entities/display.entity.ts",{"_index":1660,"title":{},"body":{"entities/DisplayEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/issuer/oid4vci/entities/display.entity.ts:15",{"_index":1661,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/oid4vci/entities/display.entity.ts:18",{"_index":1663,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts",{"_index":2463,"title":{},"body":{"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:39",{"_index":2468,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:53",{"_index":2475,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:63",{"_index":2472,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts",{"_index":3732,"title":{},"body":{"coverage.html":{}}}],["src/issuer/oid4vci/util.ts",{"_index":3735,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/issuer/status",{"_index":3381,"title":{},"body":{"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":3737,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/metric/metric.module.ts",{"_index":2335,"title":{},"body":{"modules/MetricModule.html":{}}}],["src/oauth/dto/token",{"_index":3535,"title":{},"body":{"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"coverage.html":{}}}],["src/oauth/oauth.controller.ts",{"_index":2349,"title":{},"body":{"controllers/OAuthController.html":{},"coverage.html":{}}}],["src/oauth/oauth.controller.ts:22",{"_index":2358,"title":{},"body":{"controllers/OAuthController.html":{}}}],["src/oauth/oauth.module.ts",{"_index":2372,"title":{},"body":{"modules/OAuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/oauth/oauth.service.ts",{"_index":2377,"title":{},"body":{"injectables/OAuthService.html":{},"coverage.html":{}}}],["src/oauth/oauth.service.ts:10",{"_index":2385,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:100",{"_index":2393,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:20",{"_index":2394,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:33",{"_index":2391,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:60",{"_index":2398,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:68",{"_index":2389,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:92",{"_index":2387,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:96",{"_index":2396,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/registrar/dto/access",{"_index":6,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["src/registrar/entities/registrar.entity.ts",{"_index":2831,"title":{},"body":{"entities/RegistrarEntity.html":{},"coverage.html":{}}}],["src/registrar/entities/registrar.entity.ts:12",{"_index":2834,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:6",{"_index":2836,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:9",{"_index":2835,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/registrar.module.ts",{"_index":2841,"title":{},"body":{"modules/RegistrarModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/registrar/registrar.service.ts",{"_index":2854,"title":{},"body":{"injectables/RegistrarService.html":{},"coverage.html":{}}}],["src/registrar/registrar.service.ts:100",{"_index":2883,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:111",{"_index":2889,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:133",{"_index":2890,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:150",{"_index":2877,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:173",{"_index":2881,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:190",{"_index":2872,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:232",{"_index":2875,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:32",{"_index":2896,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:36",{"_index":2894,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:40",{"_index":2868,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:59",{"_index":2888,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:92",{"_index":2882,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/session/entities/session.entity.ts",{"_index":3073,"title":{},"body":{"entities/Session.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/session/entities/session.entity.ts:103",{"_index":3090,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:109",{"_index":3080,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:115",{"_index":3107,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:118",{"_index":3086,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:124",{"_index":3094,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:130",{"_index":3095,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:136",{"_index":3081,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:141",{"_index":3078,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:146",{"_index":3092,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:151",{"_index":3091,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:156",{"_index":3104,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:163",{"_index":3103,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:56",{"_index":3088,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:59",{"_index":3089,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:65",{"_index":3097,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:71",{"_index":3098,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:77",{"_index":3083,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:82",{"_index":3077,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:87",{"_index":3096,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:92",{"_index":3076,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:97",{"_index":3108,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session.controller.ts",{"_index":3119,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{}}}],["src/session/session.controller.ts:32",{"_index":3126,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:41",{"_index":3129,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:52",{"_index":3125,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:65",{"_index":3133,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.decorator.ts",{"_index":3739,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/session/session.guard.ts",{"_index":3148,"title":{},"body":{"guards/SessionGuard.html":{},"coverage.html":{}}}],["src/session/session.guard.ts:10",{"_index":3150,"title":{},"body":{"guards/SessionGuard.html":{}}}],["src/session/session.guard.ts:13",{"_index":3151,"title":{},"body":{"guards/SessionGuard.html":{}}}],["src/session/session.module.ts",{"_index":3289,"title":{},"body":{"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/session/session.service.ts",{"_index":3299,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/session/session.service.ts:110",{"_index":3331,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:136",{"_index":3310,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:144",{"_index":3318,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:155",{"_index":3317,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:164",{"_index":3321,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:171",{"_index":3334,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:184",{"_index":3315,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:19",{"_index":3306,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:34",{"_index":3323,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:90",{"_index":3313,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/storage/adapters/local.storage.ts",{"_index":2249,"title":{},"body":{"classes/LocalFileStorage.html":{},"coverage.html":{}}}],["src/storage/adapters/local.storage.ts:15",{"_index":2251,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:18",{"_index":2256,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:39",{"_index":2255,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:44",{"_index":2253,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:50",{"_index":2254,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts",{"_index":3028,"title":{},"body":{"classes/S3FileStorage.html":{},"coverage.html":{}}}],["src/storage/adapters/s3.storage.ts:13",{"_index":3033,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:20",{"_index":3039,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:56",{"_index":3038,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:68",{"_index":3035,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:74",{"_index":3036,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:85",{"_index":3037,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/files.service.ts",{"_index":1759,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/storage/files.service.ts:13",{"_index":1763,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:16",{"_index":1773,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:38",{"_index":1769,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:42",{"_index":1765,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:46",{"_index":1768,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/storage.module.ts",{"_index":3498,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/storage/storage.module.ts:51",{"_index":3499,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/storage/storage.types.ts",{"_index":1723,"title":{},"body":{"interfaces/FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/storage/storage.types.ts:21",{"_index":1741,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:27",{"_index":1735,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:31",{"_index":1728,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:33",{"_index":1730,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:35",{"_index":1733,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/utils/logger/logger",{"_index":2288,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["src/utils/logger/session",{"_index":3157,"title":{},"body":{"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mediatype/media",{"_index":3746,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/utils/webhook/webhook.dto.ts",{"_index":177,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/utils/webhook/webhook.dto.ts:13",{"_index":183,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:19",{"_index":188,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:36",{"_index":3569,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:43",{"_index":3567,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:54",{"_index":3572,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:62",{"_index":3571,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.service.ts",{"_index":3574,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["src/utils/webhook/webhook.service.ts:111",{"_index":3613,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:12",{"_index":3575,"title":{},"body":{"classes/WebhookResponse.html":{}}}],["src/utils/webhook/webhook.service.ts:20",{"_index":3609,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:40",{"_index":3611,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/verifier/oid4vp/dto/authorization",{"_index":707,"title":{},"body":{"classes/AuthorizationResponse.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/dto/presentation",{"_index":2719,"title":{},"body":{"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts",{"_index":2500,"title":{},"body":{"controllers/Oid4vpController.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:41",{"_index":2507,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:52",{"_index":2511,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.module.ts",{"_index":2523,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts",{"_index":2528,"title":{},"body":{"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:20",{"_index":2532,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:205",{"_index":2540,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:264",{"_index":2541,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:41",{"_index":2534,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/presentations/dto/auth",{"_index":660,"title":{},"body":{"interfaces/AuthResponse.html":{},"coverage.html":{}}}],["src/verifier/presentations/dto/vp",{"_index":2981,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{},"coverage.html":{}}}],["src/verifier/presentations/entities/presentation",{"_index":2654,"title":{},"body":{"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts",{"_index":2687,"title":{},"body":{"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts:111",{"_index":2691,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:121",{"_index":2699,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:137",{"_index":2693,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:79",{"_index":2697,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.module.ts",{"_index":2731,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["src/verifier/presentations/presentations.service.ts",{"_index":2736,"title":{},"body":{"injectables/PresentationsService.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.service.ts:137",{"_index":2760,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:150",{"_index":2774,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:161",{"_index":2754,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:171",{"_index":2758,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:192",{"_index":2776,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:205",{"_index":2782,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:228",{"_index":2780,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:243",{"_index":2778,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:260",{"_index":2769,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:28",{"_index":2749,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:48",{"_index":2765,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:60",{"_index":2764,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:67",{"_index":2761,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/resolver/dto/issuer",{"_index":2029,"title":{},"body":{"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.module.ts",{"_index":2988,"title":{},"body":{"modules/ResolverModule.html":{}}}],["src/verifier/resolver/resolver.service.ts",{"_index":2990,"title":{},"body":{"injectables/ResolverService.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.service.ts:12",{"_index":2993,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:21",{"_index":2995,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/verifier.module.ts",{"_index":3565,"title":{},"body":{"modules/VerifierModule.html":{}}}],["src/well",{"_index":1295,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["st",{"_index":2279,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["st.size",{"_index":2281,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["stack",{"_index":3218,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["stage",{"_index":2551,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["start",{"_index":2537,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["started",{"_index":3272,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["starting",{"_index":3203,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["starts",{"_index":2886,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["startswith(\"http",{"_index":2062,"title":{},"body":{"modules/IssuerModule.html":{}}}],["starttime",{"_index":3204,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["state",{"_index":663,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["statements",{"_index":3680,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":3350,"title":{},"body":{"injectables/SessionService.html":{}}}],["static",{"_index":267,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationConfigHelper.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["statsync",{"_index":2262,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["statsync(fullpath",{"_index":2280,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["status",{"_index":154,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"dependencies.html":{}}}],["status_list",{"_index":3475,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuscode",{"_index":375,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["statuslist",{"_index":3444,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslist(entry.elements",{"_index":3460,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslist+jwt",{"_index":3465,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistcontroller",{"_index":3380,"title":{"controllers/StatusListController.html":{}},"body":{"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"coverage.html":{}}}],["statuslistentity",{"_index":3396,"title":{"entities/StatusListEntity.html":{}},"body":{"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["statuslistfetcher",{"_index":2741,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["statuslistjwtheaderparameters",{"_index":3445,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistmodule",{"_index":614,"title":{"modules/StatusListModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"index.html":{},"modules.html":{}}}],["statuslistrepository",{"_index":3425,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistservice",{"_index":1002,"title":{"injectables/StatusListService.html":{}},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{},"index.html":{}}}],["statusmanagement",{"_index":158,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["statusmapping",{"_index":3415,"title":{"entities/StatusMapping.html":{}},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["statusmappingrepository",{"_index":3424,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statusupdatedto",{"_index":3131,"title":{"classes/StatusUpdateDto.html":{}},"body":{"controllers/SessionController.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["statutslistservice",{"_index":1007,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["step",{"_index":770,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["still",{"_index":567,"title":{},"body":{"controllers/AuthController.html":{}}}],["storage",{"_index":1764,"title":{},"body":{"injectables/FilesService.html":{}}}],["storage.types",{"_index":2264,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"modules/StorageModule.html":{}}}],["storage/storage.module",{"_index":295,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["storage/storage.types",{"_index":1775,"title":{},"body":{"injectables/FilesService.html":{}}}],["storage_driver",{"_index":3504,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["storagemodule",{"_index":251,"title":{"modules/StorageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/StorageModule.html":{},"index.html":{},"modules.html":{}}}],["storagemodule.forroot",{"_index":385,"title":{},"body":{"modules/AppModule.html":{}}}],["store",{"_index":1173,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["store(tenantid",{"_index":1194,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["storecredentialconfiguration",{"_index":1321,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["storecredentialconfiguration(config",{"_index":1327,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["stored",{"_index":1199,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["storedobject",{"_index":1747,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["storedsecret",{"_index":2418,"title":{},"body":{"injectables/OAuthService.html":{}}}],["storeissuanceconfiguration",{"_index":1886,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["storeissuanceconfiguration(config",{"_index":1890,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["storeissuanceconfiguration(tenantid",{"_index":1927,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["storepresentationconfig",{"_index":2689,"title":{},"body":{"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["storepresentationconfig(config",{"_index":2698,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["storepresentationconfig(tenantid",{"_index":2772,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid",{"_index":2745,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid(registrationcertid",{"_index":2775,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["stores",{"_index":1196,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["strategy",{"_index":2112,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1742,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["string",{"_index":19,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":949,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{}}}],["structured",{"_index":3231,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["sub",{"_index":569,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/OAuthService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{}}}],["subfolder",{"_index":1208,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["subject",{"_index":918,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{}}}],["subject_types_supported",{"_index":595,"title":{},"body":{"controllers/AuthController.html":{}}}],["succeeded",{"_index":3283,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["success",{"_index":3368,"title":{},"body":{"injectables/SessionService.html":{}}}],["successful",{"_index":3333,"title":{},"body":{"injectables/SessionService.html":{}}}],["successfully",{"_index":2603,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["such",{"_index":1677,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/Session.html":{}}}],["summary",{"_index":526,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["super",{"_index":2079,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super(config",{"_index":2118,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(configservice",{"_index":1584,"title":{},"body":{"classes/DBKeyService.html":{}}}],["super.authenticate(req",{"_index":2119,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":2083,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["supersecret",{"_index":634,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["support",{"_index":539,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/Session.html":{},"modules.html":{}}}],["supported",{"_index":199,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["supportedauthenticationscheme.clientattestationjwt",{"_index":874,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["supports",{"_index":482,"title":{},"body":{"controllers/AuthController.html":{}}}],["svg",{"_index":3818,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":3637,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["switch",{"_index":1507,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["symbol(\"file_storage",{"_index":1757,"title":{},"body":{"interfaces/FileStorage.html":{},"miscellaneous/variables.html":{}}}],["symmetric",{"_index":2141,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["synchronize",{"_index":1646,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["system",{"_index":1540,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"injectables/StatusListService.html":{}}}],["t",{"_index":1695,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["table",{"_index":1287,"title":{},"body":{"entities/CredentialIssuanceBinding.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3752,"title":{},"body":{"coverage.html":{}}}],["tamper",{"_index":1785,"title":{},"body":{"injectables/FilesService.html":{}}}],["tap",{"_index":3187,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["tap((data",{"_index":3206,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["target",{"_index":348,"title":{},"body":{"modules/AppModule.html":{}}}],["tell",{"_index":2641,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenancy",{"_index":3106,"title":{},"body":{"entities/Session.html":{}}}],["tenant",{"_index":117,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/NoneTrustPolicy.html":{},"injectables/OAuthService.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["tenant.isdirectory",{"_index":1217,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["tenant.name",{"_index":1224,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["tenant/2025/08/14/uuid.ext",{"_index":1749,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["tenant_client_total",{"_index":655,"title":{},"body":{"modules/AuthModule.html":{}}}],["tenant_id",{"_index":3297,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["tenantclienttotal",{"_index":1011,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["tenantfolders",{"_index":1213,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["tenanthost",{"_index":2557,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenantid",{"_index":118,"title":{},"body":{"classes/AllowListPolicy.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"entities/DisplayEntity.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"classes/NoneTrustPolicy.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["tenantid)).uri",{"_index":930,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["tenantid/credentials",{"_index":1350,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["tenantid/status",{"_index":3383,"title":{},"body":{"controllers/StatusListController.html":{}}}],["tenantid}/${new",{"_index":1781,"title":{},"body":{"injectables/FilesService.html":{}}}],["terminusmodule",{"_index":1856,"title":{},"body":{"modules/HealthModule.html":{}}}],["textencoder().encode(data",{"_index":3871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textencoder().encode(secret",{"_index":1815,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["then((cert",{"_index":1613,"title":{},"body":{"classes/DBKeyService.html":{}}}],["then((count",{"_index":1035,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["then((entry",{"_index":1719,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["then((file",{"_index":3468,"title":{},"body":{"injectables/StatusListService.html":{}}}],["then((key",{"_index":1610,"title":{},"body":{"classes/DBKeyService.html":{}}}],["then((res",{"_index":2967,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["then((response",{"_index":2946,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["then((session",{"_index":878,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["then(async",{"_index":1710,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{}}}],["think",{"_index":566,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.accesstoken",{"_index":2920,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.addaccesscertificate",{"_index":2925,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.addrp(name",{"_index":2924,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.authorizeservice.authorizationchallengeendpoint",{"_index":778,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.authzmetadata",{"_index":3676,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.authorizeservice.sendauthorizationresponse(queries",{"_index":761,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.validatetokenrequest(body",{"_index":776,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authzmetadata(session",{"_index":894,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.bucket",{"_index":3050,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.certrepository",{"_index":1612,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["this.client",{"_index":2916,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.client.setconfig",{"_index":2917,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.clientrepository",{"_index":1033,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientrepository.countby",{"_index":1015,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientrepository.findonebyorfail",{"_index":1036,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientrepository.save",{"_index":1043,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clientrepository.update",{"_index":1048,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clients",{"_index":1018,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.clients.delete(clientid",{"_index":2426,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.get(clientid",{"_index":2419,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.has(clientid",{"_index":2427,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.set(clientid",{"_index":2425,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.set(defaultclientid",{"_index":2409,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clientservice.issetup(sub",{"_index":2147,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.clientservice.validateclient",{"_index":561,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config",{"_index":2321,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enabledebugmode",{"_index":2331,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablehttplogger",{"_index":2330,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablesessionlogger",{"_index":2329,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.level",{"_index":2332,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.logformat",{"_index":2333,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice",{"_index":2951,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.get",{"_index":2324,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.configservice.get(\"config_import",{"_index":1212,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.get(\"config_import_force",{"_index":1211,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.get(\"jwt_secret",{"_index":1803,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.get(\"log_level",{"_index":2323,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice.get(\"oauth_client_id",{"_index":2407,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.configservice.get(\"oidc",{"_index":1837,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["this.configservice.get(\"registrar_url",{"_index":2921,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow",{"_index":1024,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"auth_client_id",{"_index":1023,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.configservice.getorthrow(\"config_folder",{"_index":1207,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.getorthrow(\"jwt_expires_in",{"_index":1813,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"jwt_issuer",{"_index":1811,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"jwt_secret",{"_index":1810,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"public_url",{"_index":584,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}${req.url",{"_index":883,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.id",{"_index":913,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.tenantid}/credentials/vct/${credentialconfigurationid",{"_index":1450,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.tenantid}/credentials/vct/${value.id",{"_index":1411,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${values.session}/oid4vp",{"_index":2613,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.configservice.getorthrow(\"registrar_oidc_url",{"_index":2909,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"registrar_url",{"_index":2919,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"rp_name",{"_index":2592,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"session_tidy_up_interval",{"_index":3346,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservice.getorthrow(\"session_ttl",{"_index":3376,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservie.get(\"crypto_alg",{"_index":1505,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["this.create(tenant",{"_index":1597,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.create(tenantid",{"_index":1609,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.createlist(entry",{"_index":3459,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.credentialconfigrepo",{"_index":1419,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findby",{"_index":1398,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findonebyorfail",{"_index":1436,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepository.delete",{"_index":1264,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.find",{"_index":1260,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.findonebyorfail",{"_index":1262,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.save",{"_index":1263,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialissuancebindingrepo.save",{"_index":1972,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsconfigservice.getbyid",{"_index":1964,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsconfigservice.import",{"_index":1936,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsservice.delete(user.sub",{"_index":1345,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.get(user.sub",{"_index":1341,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.getschema(id",{"_index":1366,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.getvct(id",{"_index":1363,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.store(user.sub",{"_index":1342,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.crypto",{"_index":1585,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.alg",{"_index":1602,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.generatekeypair",{"_index":1598,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.getsigner(privatekey",{"_index":1607,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.cryptoimplementationservice.getalg",{"_index":1403,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.deletekey(token.sub",{"_index":2187,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getalg",{"_index":1618,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.cryptoservice.getcallbackcontext(tenantid",{"_index":855,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.cryptoservice.getcertchain",{"_index":1452,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.getcertentry",{"_index":1243,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.cryptoservice.getcerts(tenantid",{"_index":2182,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getjwks(tenantid).then((key",{"_index":3677,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.cryptoservice.import",{"_index":1935,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.cryptoservice.importkey(tenantid",{"_index":2183,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.keyservice.getkid",{"_index":1426,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.keyservice.getkid(tenantid",{"_index":2950,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.getpublickey",{"_index":917,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.signer",{"_index":1428,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.cryptoservice.ontenantinit(id",{"_index":1060,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.cryptoservice.signjwt",{"_index":2422,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.storeaccesscertificate",{"_index":2958,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.cryptoservice.updatecert(tenantid",{"_index":2185,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.db.pingcheck(\"database",{"_index":1854,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.encryptionservice.decryptjwe",{"_index":2626,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.getencryptionpublickey",{"_index":2583,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.ontenantinit(id",{"_index":1061,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.generateaccesstoken",{"_index":2414,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.getauthorizationserver",{"_index":858,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getauthorizationserver(tenantid).createaccesstokenresponse",{"_index":912,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getbyid(tenant.name",{"_index":1232,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.getclients().find((c",{"_index":1026,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.getexistingrp(name",{"_index":2944,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.getissuanceconfigurationbyid",{"_index":1939,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.getkid(tenant).catch(async",{"_index":1596,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getkid(tenantid).catch",{"_index":1608,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getpresentationconfig",{"_index":2794,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.getprivatekey(tenantid",{"_index":1606,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getpubfromprivatekey(privatekeyjwk",{"_index":1621,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.health.check",{"_index":1853,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpservice.get",{"_index":3014,"title":{},"body":{"injectables/ResolverService.html":{}}}],["this.httpservice.post",{"_index":3589,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.import",{"_index":1937,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.initializeclients",{"_index":2404,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.isenabled",{"_index":2907,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.ishttploggerenabled",{"_index":2334,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.ispresentationduringissuanceauth(config",{"_index":701,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["this.issuanceconfigrepo.delete",{"_index":1975,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.find",{"_index":1960,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.findoneorfail",{"_index":1961,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.save",{"_index":1970,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceservice.deleteissuanceconfiguration(user.sub",{"_index":1898,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfiguration(user.sub",{"_index":1895,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfigurationbyid",{"_index":948,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.issuanceservice.storeissuanceconfiguration",{"_index":1896,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.isusingexternaloidc",{"_index":1808,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.jwtservice.generatetoken(payload",{"_index":575,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.isusingexternaloidc",{"_index":533,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.kbverifier.bind(this",{"_index":2791,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.keyrepository",{"_index":1588,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["this.keyrepository.save",{"_index":1712,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.loadclients",{"_index":1019,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.loadconfiguration",{"_index":2320,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.logger.error",{"_index":1244,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.info",{"_index":1258,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.setcontext(\"sessionlogger",{"_index":3198,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.logger.setcontext(\"sessionloggerservice",{"_index":3269,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.oauth2client",{"_index":2910,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.oauth2client.clientcredentials().then((token",{"_index":2927,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.oauthservice.handleclientcredentialsgrant",{"_index":2366,"title":{},"body":{"controllers/OAuthController.html":{}}}],["this.oid4vciservice.createoffer",{"_index":2020,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.oid4vciservice.getcredential(req",{"_index":2487,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.handlenotification(req",{"_index":2490,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.issuermetadata(session",{"_index":3668,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.oid4vciservice.noncerequest(session",{"_index":2494,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.ontenantinit(id",{"_index":1064,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.oid4vpservice.createauthorizationrequest(session",{"_index":2517,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.oid4vpservice.createrequest",{"_index":2709,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.oid4vpservice.createrequest(\"pid",{"_index":929,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.oid4vpservice.getresponse(body",{"_index":2518,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.parsechallengerequest",{"_index":953,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.parseloglevel",{"_index":2322,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.presentationsservice.deletepresentationconfig(id",{"_index":2718,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.getpresentationconfig",{"_index":2560,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.getpresentationconfigs(user.sub",{"_index":2715,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.parseresponse",{"_index":2635,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.storepresentationconfig",{"_index":2716,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.storercid",{"_index":2979,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.publicbaseurl",{"_index":3058,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.publicbaseurl.replace",{"_index":3059,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.reflector.get",{"_index":3190,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.reflector.getallandoverride",{"_index":2080,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refreshaccesstoken",{"_index":2922,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.findonebyorfail",{"_index":2964,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.save",{"_index":2926,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarservice.addregistrationcertificate",{"_index":2568,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.isenabled",{"_index":2565,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.ontenantinit(id",{"_index":1063,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.resolverservice.resolvepublickey",{"_index":2810,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.s3",{"_index":3068,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.s3.send",{"_index":3049,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.sanitizebody(request.body",{"_index":3202,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.schedulerregistry.addinterval(\"tidyupsessions",{"_index":3349,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sdjwtinstance",{"_index":2789,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.sendauthorizationcode(res",{"_index":939,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionlogger.logauthorizationrequest(logcontext",{"_index":2571,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logcredentialverification",{"_index":2637,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowcomplete(logcontext",{"_index":2647,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowerror(logcontext",{"_index":2608,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowstart(logcontext",{"_index":2553,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logsession",{"_index":2602,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsession(logcontext",{"_index":3584,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsessionerror",{"_index":3599,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionrepository.countby",{"_index":3357,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.delete",{"_index":3377,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.find",{"_index":3372,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail",{"_index":3373,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail(where",{"_index":3374,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":3362,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.update",{"_index":3367,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.dec",{"_index":3371,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.inc",{"_index":3363,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.set",{"_index":3359,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice",{"_index":876,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(body.issuer_state",{"_index":771,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.sessionservice.add(issuer_state",{"_index":967,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(res.state",{"_index":2642,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(session.id",{"_index":2569,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionservice.add(values.session",{"_index":2625,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.create",{"_index":2620,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.delete(id",{"_index":3143,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(body.auth_session",{"_index":935,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(body.issuer_state",{"_index":943,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(id",{"_index":3142,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(sessionid",{"_index":3155,"title":{},"body":{"guards/SessionGuard.html":{}}}],["this.sessionservice.getall",{"_index":3139,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.getby",{"_index":888,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setauthcode(issuer_state",{"_index":965,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setauthcode(values.issuer_state",{"_index":881,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setentry(entry.index",{"_index":3482,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.setupclient(id).catch(async",{"_index":1044,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.shouldlog",{"_index":3270,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.statuslistfetcher.bind(this",{"_index":2792,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.statuslistrepository",{"_index":3467,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.findonebyorfail",{"_index":3470,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.save",{"_index":3458,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.update",{"_index":3466,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistservice.createentry",{"_index":1440,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.statuslistservice.getlist(tenantid",{"_index":3395,"title":{},"body":{"controllers/StatusListController.html":{}}}],["this.statuslistservice.updatestatus(value",{"_index":3146,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.statusmappingrepository.findby",{"_index":3478,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.save",{"_index":3474,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statutslistservice.ontenantinit(id",{"_index":1062,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.storage.getsignedurl",{"_index":1792,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.getsignedurl(key",{"_index":1793,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.put(key",{"_index":1788,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.store(tenant.name",{"_index":1257,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.storeissuanceconfiguration",{"_index":1959,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.storepresentationconfig(tenant.name",{"_index":2796,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.tenantclienttotal.set",{"_index":1016,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["this.tidyupsessions",{"_index":3344,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.validateclientcredentials",{"_index":2410,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.verifier.bind(this",{"_index":2790,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository",{"_index":2803,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.delete",{"_index":2802,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.find",{"_index":2797,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.save(vprequest",{"_index":2801,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.update",{"_index":2805,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.webhookservice.sendwebhook",{"_index":2646,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.wellknownservice.getauthzmetadata(session",{"_index":3643,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getissuermetadata(session",{"_index":3641,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getjwks(session.tenantid",{"_index":3647,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["throw",{"_index":534,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"guards/SessionGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["tidy",{"_index":3325,"title":{},"body":{"injectables/SessionService.html":{}}}],["tidyupsessions",{"_index":3302,"title":{},"body":{"injectables/SessionService.html":{}}}],["time",{"_index":1445,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/ParResponseDto.html":{}}}],["timestamp",{"_index":976,"title":{},"body":{"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["todo",{"_index":119,"title":{},"body":{"classes/AllowListPolicy.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/FilesService.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["token",{"_index":458,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponseDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token(body",{"_index":735,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["token.accesstoken",{"_index":2928,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["token.decorator",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["token.sub",{"_index":2181,"title":{},"body":{"controllers/KeyController.html":{}}}],["token_endpoint",{"_index":585,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_endpoint_auth_methods_supported",{"_index":592,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_exchange",{"_index":3284,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["token_type",{"_index":530,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["tokenpayload",{"_index":517,"title":{"interfaces/TokenPayload.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenrequest",{"_index":2360,"title":{},"body":{"controllers/OAuthController.html":{}}}],["tokenrequestdto",{"_index":2353,"title":{"classes/TokenRequestDto.html":{}},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenRequestDto.html":{},"coverage.html":{}}}],["tokenresponse",{"_index":478,"title":{"classes/TokenResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{},"coverage.html":{}}}],["tokenresponsedto",{"_index":2361,"title":{"classes/TokenResponseDto.html":{}},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenResponseDto.html":{},"coverage.html":{}}}],["tokens",{"_index":468,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/OAuthController.html":{}}}],["tolowercase",{"_index":1779,"title":{},"body":{"injectables/FilesService.html":{}}}],["toodo",{"_index":1941,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["tostring(\"ascii",{"_index":553,"title":{},"body":{"controllers/AuthController.html":{}}}],["total",{"_index":657,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["tracking",{"_index":2725,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{}}}],["transformer",{"_index":189,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["translatetime",{"_index":352,"title":{},"body":{"modules/AppModule.html":{}}}],["transport",{"_index":347,"title":{},"body":{"modules/AppModule.html":{}}}],["true",{"_index":51,"title":{},"body":{"classes/AllowListPolicy.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"guards/SessionGuard.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"modules/StorageModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["true})@isboolean()@isoptional()@column('boolean",{"_index":1133,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isempty",{"_index":2680,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isobject",{"_index":1120,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isobject()@isoptional",{"_index":1145,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isobject()@isoptional()@validatenested",{"_index":1127,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isoptional()@isobject",{"_index":2683,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isoptional()@isstring",{"_index":2674,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isstring",{"_index":2675,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@type(undefined",{"_index":1905,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["trust",{"_index":99,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{}}}],["try",{"_index":544,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"classes/S3FileStorage.html":{}}}],["ttl",{"_index":3375,"title":{},"body":{"injectables/SessionService.html":{}}}],["ttlseconds",{"_index":1767,"title":{},"body":{"injectables/FilesService.html":{}}}],["two",{"_index":3658,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["txcode",{"_index":853,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["typ",{"_index":2595,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["type",{"_index":20,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"interfaces/Client.html":{},"classes/ClientCredentialsDto.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"guards/SessionGuard.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isobject",{"_index":3566,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["type(undefined)@isoptional()@isobject",{"_index":3570,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["type.'})@post('token",{"_index":2357,"title":{},"body":{"controllers/OAuthController.html":{}}}],["type.decorator",{"_index":3631,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["type.decorator.ts",{"_index":3747,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":3632,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["type.enum.ts",{"_index":3804,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":3835,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":421,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{}}}],["typeorm",{"_index":70,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CertEntity.html":{},"entities/ClientEntry.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"injectables/CredentialsService.html":{},"entities/DisplayEntity.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":3340,"title":{},"body":{"injectables/SessionService.html":{}}}],["typeorm/repository/repository",{"_index":997,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"modules/KeyModule.html":{},"injectables/PresentationsService.html":{}}}],["typeormhealthindicator",{"_index":1849,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":620,"title":{},"body":{"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{}}}],["typeormmodule.forfeature",{"_index":2059,"title":{},"body":{"modules/IssuerModule.html":{}}}],["typeormmodule.forfeature([certentity",{"_index":1521,"title":{},"body":{"modules/CryptoModule.html":{},"modules/KeyModule.html":{}}}],["typeormmodule.forfeature([cliententry",{"_index":654,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forfeature([presentationconfig",{"_index":2735,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["typeormmodule.forfeature([registrarentity",{"_index":2853,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["typeormmodule.forfeature([session",{"_index":3295,"title":{},"body":{"modules/SessionModule.html":{}}}],["typeormmodule.forfeature([statusmapping",{"_index":3418,"title":{},"body":{"modules/StatusListModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1643,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1628,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":85,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/KeyEntity.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"modules/RegistrarModule.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":2936,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["typically",{"_index":958,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["unauthorizedexception",{"_index":502,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{}}}],["unauthorizedexception(\"invalid",{"_index":562,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{}}}],["undefined",{"_index":403,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/OfferRequestDto.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"classes/TokenRequestDto.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apiproduces('application/json",{"_index":1986,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["undefined})@apiresponse({status",{"_index":475,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isobject()@isoptional",{"_index":2444,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["undefined})@post('offer",{"_index":1988,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["undefined})@post('request",{"_index":2696,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["union",{"_index":447,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/IssuanceService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/typealiases.html":{}}}],["unique",{"_index":26,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CertEntity.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["university",{"_index":1095,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["unknown",{"_index":826,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["unsecure",{"_index":2060,"title":{},"body":{"modules/IssuerModule.html":{}}}],["unsigned",{"_index":3660,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["unsupported",{"_index":963,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["up",{"_index":223,"title":{},"body":{"controllers/AppController.html":{},"interfaces/Client.html":{},"entities/ClientEntry.html":{},"injectables/ClientService.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{}}}],["update",{"_index":1047,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["update.dto",{"_index":2177,"title":{},"body":{"controllers/KeyController.html":{},"controllers/SessionController.html":{},"injectables/StatusListService.html":{}}}],["update.dto.ts",{"_index":3492,"title":{},"body":{"classes/StatusUpdateDto.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["update.dto.ts:16",{"_index":3493,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:24",{"_index":3496,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:8",{"_index":3494,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["updatecredentialissuancebindingdto",{"_index":1114,"title":{"classes/UpdateCredentialIssuanceBindingDto.html":{}},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"coverage.html":{}}}],["updated",{"_index":988,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["updatedat",{"_index":972,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["updatedatecolumn",{"_index":985,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{}}}],["updatekey",{"_index":2165,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatekey(token",{"_index":2172,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatekeydto",{"_index":2173,"title":{"classes/UpdateKeyDto.html":{}},"body":{"controllers/KeyController.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["updates",{"_index":2176,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatestatus",{"_index":3423,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updatestatus(value",{"_index":3441,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updating",{"_index":1112,"title":{},"body":{"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["uri",{"_index":1666,"title":{},"body":{"entities/DisplayEntity.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"miscellaneous/enumerations.html":{}}}],["url",{"_index":205,"title":{},"body":{"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/DisplayEntity.html":{},"interfaces/FileStorage.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["url(payload.iss).hostname",{"_index":3009,"title":{},"body":{"injectables/ResolverService.html":{}}}],["urn:${randomuuid",{"_index":765,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["usage",{"_index":1713,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"miscellaneous/typealiases.html":{}}}],["use",{"_index":439,"title":{},"body":{"classes/AuthConfigValidator.html":{},"controllers/AuthController.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CredentialsService.html":{},"classes/EC_Public.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{}}}],["used",{"_index":150,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["useexternaloidc",{"_index":2114,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":332,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["useful",{"_index":3162,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["useguards",{"_index":742,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{}}}],["useguards(jwtauthguard",{"_index":1334,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["useguards(sessionguard",{"_index":757,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["useguards(sessionguard)@post('challenge",{"_index":723,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["useguards(sessionguard)@post('token",{"_index":736,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["useinterceptors",{"_index":2476,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["useinterceptors(sessionloggerinterceptor",{"_index":2484,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["user",{"_index":368,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/CredentialsController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/SessionModule.html":{},"classes/StatusUpdateDto.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user.sub",{"_index":1897,"title":{},"body":{"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{}}}],["username",{"_index":1652,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["users",{"_index":430,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["uses",{"_index":445,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationConfigHelper.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/HealthController.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionLoggerService.html":{}}}],["using",{"_index":169,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"controllers/OAuthController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/WellKnownService.html":{}}}],["utf8",{"_index":1229,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["utility",{"_index":683,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{},"miscellaneous/functions.html":{}}}],["utils/logger//session",{"_index":2480,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["utils/logger/session",{"_index":2043,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["utils/mediatype/media",{"_index":3630,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["utils/webhook/webhook.dto",{"_index":413,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{}}}],["utils/webhook/webhook.service",{"_index":2046,"title":{},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["uuid",{"_index":1577,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"dependencies.html":{}}}],["v4",{"_index":1576,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["valid",{"_index":937,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{}}}],["valid(\"json",{"_index":326,"title":{},"body":{"modules/AppModule.html":{}}}],["valid(\"trace",{"_index":310,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":397,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/OAuthService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["validate(authconfigvalidator",{"_index":446,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["validate(config",{"_index":409,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{}}}],["validate(issuancedto",{"_index":1942,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["validate(payload",{"_index":2105,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateclient",{"_index":1079,"title":{},"body":{"injectables/ClientService.html":{}}}],["validateclient(clientid",{"_index":1025,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{}}}],["validateclientcredentials",{"_index":2384,"title":{},"body":{"injectables/OAuthService.html":{}}}],["validateclientcredentials(clientid",{"_index":2397,"title":{},"body":{"injectables/OAuthService.html":{}}}],["validated",{"_index":2107,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":64,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{}}}],["validatetokenrequest",{"_index":810,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["validatetokenrequest(body",{"_index":833,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["validation",{"_index":166,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/variables.html":{}}}],["validationarguments",{"_index":399,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["validationerror",{"_index":1245,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors",{"_index":1238,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors.length",{"_index":1252,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors.map((error",{"_index":1253,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationschema",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":65,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"classes/ClientCredentialsDto.html":{},"classes/CreateCredentialIssuanceBindingDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"entities/CredentialIssuanceBinding.html":{},"classes/CredentialIssuanceBindingResponseDto.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/UpdateCredentialIssuanceBindingDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["validatorconstraint",{"_index":412,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["validatorconstraintinterface",{"_index":395,"title":{},"body":{"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["value",{"_index":182,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/ClientService.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"entities/DisplayEntity.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"classes/SchemaResponse.html":{},"controllers/SessionController.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.authenticationconfig",{"_index":1969,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.authenticationconfig.config",{"_index":1968,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.authenticationconfig.method",{"_index":1967,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.config",{"_index":1416,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.config.disclosure_policy",{"_index":1414,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.config.vct",{"_index":1410,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.credentialconfigs",{"_index":1963,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.credentialconfigurationid",{"_index":3480,"title":{},"body":{"injectables/StatusListService.html":{}}}],["value.embeddeddisclosurepolicy",{"_index":1412,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.id",{"_index":1409,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.sessionid",{"_index":3479,"title":{},"body":{"injectables/StatusListService.html":{}}}],["value.status",{"_index":3483,"title":{},"body":{"injectables/StatusListService.html":{}}}],["values",{"_index":44,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/SessionService.html":{},"interfaces/TokenPayload.html":{}}}],["values.session",{"_index":2610,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["values.uri",{"_index":2712,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["values.webhook",{"_index":2621,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["varchar",{"_index":3486,"title":{},"body":{"entities/StatusMapping.html":{}}}],["variable",{"_index":3329,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["variables",{"_index":2405,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/OAuthService.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":202,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["vault",{"_index":2212,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault\").default(\"db",{"_index":2211,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault_token",{"_index":2216,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault_url",{"_index":2214,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vaultkeyservice",{"_index":2207,"title":{},"body":{"modules/KeyModule.html":{},"coverage.html":{}}}],["vc",{"_index":142,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["vcs",{"_index":2738,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vct",{"_index":73,"title":{"classes/VCT.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["vct(@param(\"id",{"_index":1361,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["vct(id",{"_index":1354,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["verbose",{"_index":2326,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["verifiable",{"_index":1357,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["verification",{"_index":604,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{}}}],["verification.'})@apiresponse({status",{"_index":459,"title":{},"body":{"controllers/AuthController.html":{}}}],["verificationcounter",{"_index":3360,"title":{},"body":{"injectables/SessionService.html":{}}}],["verificationresult",{"_index":3082,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verified",{"_index":3084,"title":{},"body":{"entities/Session.html":{}}}],["verifier",{"_index":1486,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["verifier/oid4vp/dto/presentation",{"_index":1993,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["verifier/oid4vp/oid4vp.module",{"_index":2047,"title":{},"body":{"modules/IssuerModule.html":{}}}],["verifier/oid4vp/oid4vp.service",{"_index":843,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifier/presentations/dto/vp",{"_index":2898,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["verifier/presentations/presentations.module",{"_index":2843,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["verifier/presentations/presentations.service",{"_index":2899,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["verifier/verifier.module",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["verifier_attestations",{"_index":2594,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["verifiermodule",{"_index":252,"title":{"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["verify",{"_index":866,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["verify(data",{"_index":2812,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verify(res.vp_token[att",{"_index":2825,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verifyauthorizationcodeaccesstokenrequest",{"_index":908,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifying",{"_index":467,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifypreauthorizedcodeaccesstokenrequest",{"_index":898,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifytoken",{"_index":2085,"title":{},"body":{"injectables/JwtService.html":{}}}],["verifytoken(token",{"_index":1826,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["version",{"_index":3821,"title":{},"body":{"properties.html":{}}}],["via",{"_index":769,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/FilesService.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{}}}],["void",{"_index":1032,"title":{},"body":{"interfaces/Client.html":{},"injectables/ClientService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{}}}],["vp",{"_index":670,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"entities/CertEntity.html":{},"entities/CredentialIssuanceBinding.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["vp_formats",{"_index":2584,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vp_nonce",{"_index":2570,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["vp_token",{"_index":664,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["vprequest",{"_index":2773,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequest.tenantid",{"_index":2800,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequestrepository",{"_index":2748,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vps",{"_index":2737,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["wallet",{"_index":924,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"properties.html":{}}}],["want",{"_index":1784,"title":{},"body":{"injectables/FilesService.html":{},"injectables/OAuthService.html":{}}}],["warn",{"_index":312,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["we'll",{"_index":959,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["web",{"_index":457,"title":{},"body":{"controllers/AuthController.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/StatusListEntity.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["webhook",{"_index":196,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth",{"_index":3603,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth.config.value",{"_index":3606,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth.type",{"_index":3604,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth?.type",{"_index":3608,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.url",{"_index":3607,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhookauthconfig",{"_index":197,"title":{"classes/WebHookAuthConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookconfig",{"_index":204,"title":{"classes/WebhookConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthConfigValidator.html":{},"classes/AuthenticationConfigDto.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookresponse",{"_index":3573,"title":{"classes/WebhookResponse.html":{}},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["webhookresponse.data",{"_index":3592,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhookresponse.status",{"_index":3597,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhooks",{"_index":180,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/typealiases.html":{}}}],["webhooksent",{"_index":2648,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookservice",{"_index":2037,"title":{"injectables/WebhookService.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["webhookurl",{"_index":3585,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webook",{"_index":2644,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["well",{"_index":297,"title":{},"body":{"modules/AppModule.html":{},"classes/DBKeyService.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["wellknowncontroller",{"_index":258,"title":{"controllers/WellKnownController.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["wellknownservice",{"_index":253,"title":{"injectables/WellKnownService.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["whether",{"_index":2438,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["whitelist",{"_index":1239,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["willsoto/nestjs",{"_index":623,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/Client.html":{},"injectables/ClientService.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["withfiletypes",{"_index":1215,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["without",{"_index":1832,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["working",{"_index":685,"title":{},"body":{"classes/AuthenticationConfigHelper.html":{}}}],["write",{"_index":2271,"title":{},"body":{"classes/LocalFileStorage.html":{},"injectables/RegistrarService.html":{}}}],["writing",{"_index":2975,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["wrtites",{"_index":1539,"title":{},"body":{"classes/DBKeyService.html":{}}}],["x",{"_index":1673,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["x509_san_dns",{"_index":2577,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509_san_dns:${hostname",{"_index":2612,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509certificate",{"_index":2998,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x509certificate(buffer.from(cert",{"_index":3006,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x5c",{"_index":1451,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["y",{"_index":1674,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["yes",{"_index":825,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/OAuthService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{}}}],["you'd",{"_index":2401,"title":{},"body":{"injectables/OAuthService.html":{}}}],["your_api_key_here",{"_index":193,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebhookConfig.html":{}}}],["yyyy",{"_index":353,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":254,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessCertificateResponse.html":{"url":"interfaces/AccessCertificateResponse.html","title":"interface - AccessCertificateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccessCertificateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/dto/access-certificate-response.ts\n        \n\n\n            \n                Description\n            \n            \n                Repsonse of access certificate request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            crt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        crt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        crt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The public key in PEM format.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier of the access certificate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if the access certificate is revoked.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllowListPolicy.html":{"url":"classes/AllowListPolicy.html","title":"class - AllowListPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllowListPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Allow list disclosure policy for the credential.\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                policy\n                            \n                            \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyType.ALLOW_LIST\n\n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:40\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:43\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CredentialConfigurationSupported } from \"@openid4vc/openid4vci\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsEmpty,\n    IsEnum,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToOne, OneToMany } from \"typeorm\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { VCT } from \"../../credentials-metadata/dto/credential-config.dto\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { CredentialIssuanceBinding } from \"../../issuance/entities/credential-issuance-binding.entity\";\n\n/**\n * Enum for the policy types.\n */\nexport enum PolicyType {\n    NONE = \"none\",\n    ALLOW_LIST = \"allowList\",\n    ROOT_OF_TRUST = \"rootOfTrust\",\n    ATTESTATION_BASED = \"attestationBased\",\n}\n/**\n * Embedded disclosure policy for the credential.\n */\nexport class EmbeddedDisclosurePolicy {\n    @IsEnum(PolicyType)\n    policy: PolicyType;\n}\n\n/**\n * Allow list disclosure policy for the credential.\n */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ALLOW_LIST;\n\n    @IsString({ each: true })\n    values: string[];\n}\n\n/**\n * Root of trust disclosure policy for the credential.\n */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ROOT_OF_TRUST;\n\n    @IsString()\n    values: string;\n}\n\n/**\n * None trust disclosure policy for the credential.\n */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.NONE;\n}\n\nexport class PolicyCredential {\n    @IsString()\n    format: string;\n    @IsObject()\n    meta: any;\n    @IsString()\n    iss: string;\n}\n\n/**\n * Attestation based disclosure policy for the credential.\n */\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ATTESTATION_BASED;\n\n    @IsArray()\n    values: PolicyCredential[];\n}\n\n/**\n * Entity to manage a credential configuration\n */\n@Entity()\nexport class CredentialConfig {\n    /**\n     * Unique identifier for the configuration to reference it.\n     */\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id: string;\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @IsEmpty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    //TODO: only allow display config for now\n    /**\n     * OID4VCI issuer metadata credential configuration element.\n     */\n    @Column(\"json\")\n    @IsObject()\n    config: CredentialConfigurationSupported;\n    /**\n     * Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    claims: Record;\n    /**\n     * Disclosure frame for the sd jwt vc.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    disclosureFrame: Record;\n    @Column(\"json\", { nullable: true })\n    /**\n     * VCT values that are hosted by this service.\n     */\n    @IsObject()\n    @IsOptional()\n    vct?: VCT;\n    @Column(\"json\", { nullable: true })\n\n    /**\n     * If true, the credential will be key bound.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    keyBinding?: boolean;\n\n    /**\n     * Optional key ID for the credential configuration.\n     * This is used to identify the key used for signing the credential.\n     */\n    @IsString()\n    @IsOptional()\n    keyId?: string;\n\n    @IsEmpty()\n    @ManyToOne(() => CertEntity)\n    key: CertEntity;\n\n    /**\n     * Optional status management flag for the credential configuration.\n     * If true, a status management will be applied to the credential.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    statusManagement?: boolean;\n    /**\n     * Optional livetime for the credential configuration in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    lifeTime?: number;\n\n    /**\n     * json schema that is used during issuance for the validation of the claims.\n     */\n    @IsObject()\n    @IsOptional()\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n    /**\n     * Link to all the issuance config bindings that are using this credential.\n     */\n    @IsEmpty()\n    @OneToMany(\n        () => CredentialIssuanceBinding,\n        (binding) => binding.credentialConfig,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    credentialIssuanceBindings: CredentialIssuanceBinding[];\n\n    /**\n     * Embedded disclosure policy for the credential.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiKeyConfig.html":{"url":"classes/ApiKeyConfig.html","title":"class - ApiKeyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for API key authentication in webhooks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                headerName\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:13\n                        \n                    \n\n            \n                \n                    The name of the header where the API key will be sent.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:19\n                        \n                    \n\n            \n                \n                    The value of the API key to be sent in the header.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsIn, IsObject, IsOptional, IsString } from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = \"apiKey\";\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn([\"apiKey\"])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                main\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        main\n                        \n                    \n                \n            \n            \n                \n                        \n                    main()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { ApiExcludeController } from \"@nestjs/swagger\";\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n    @Get()\n    main(): string {\n        return 'EUDIPLO is up and running, more information at https://openwallet-foundation-labs.github.io/eudiplo/latest/';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WellKnownService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WellKnownController\n                        \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CryptoModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            KeyModule\n                        \n                        \n                            MetricModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StorageModule\n                        \n                        \n                            VerifierModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\nimport { ServeStaticModule } from \"@nestjs/serve-static\";\nimport * as Joi from \"joi\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { isAbsolute, join } from \"path\";\nimport { AppController } from \"./app/app.controller\";\nimport { AUTH_VALIDATION_SCHEMA, AuthModule } from \"./auth/auth.module\";\nimport { CryptoModule } from \"./crypto/crypto.module\";\nimport { CRYPTO_VALIDATION_SCHEMA } from \"./crypto/key/crypto-implementation/crypto-implementation.module\";\nimport { KEY_VALIDATION_SCHEMA, KeyModule } from \"./crypto/key/key.module\";\nimport { DatabaseModule } from \"./database/database.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { ISSUER_VALIDATION_SCHEMA, IssuerModule } from \"./issuer/issuer.module\";\nimport { MetricModule } from \"./metric/metric.module\";\nimport {\n    REGISTRAR_VALIDATION_SCHEMA,\n    RegistrarModule,\n} from \"./registrar/registrar.module\";\nimport {\n    SESSION_VALIDATION_SCHEMA,\n    SessionModule,\n} from \"./session/session.module\";\nimport { CONFIG_STORAGE_SCHEMA, StorageModule } from \"./storage/storage.module\";\nimport { VerifierModule } from \"./verifier/verifier.module\";\nimport { WellKnownController } from \"./well-known/well-known.controller\";\nimport { WellKnownService } from \"./well-known/well-known.service\";\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            validationSchema: Joi.object({\n                FOLDER: Joi.string().default(\"../../tmp\"),\n                RP_NAME: Joi.string().default(\"EUDIPLO\"),\n                LOG_LEVEL: Joi.string()\n                    .valid(\"trace\", \"debug\", \"info\", \"warn\", \"error\", \"fatal\")\n                    .default(\n                        process.env.NODE_ENV === \"production\"\n                            ? \"warn\"\n                            : \"debug\",\n                    ),\n                CONFIG_IMPORT: Joi.boolean().default(false),\n                CONFIG_IMPORT_FORCE: Joi.boolean().default(false),\n                CONFIG_FOLDER: Joi.string().default(\"../../assets/config\"),\n                ...AUTH_VALIDATION_SCHEMA,\n                ...REGISTRAR_VALIDATION_SCHEMA,\n                ...KEY_VALIDATION_SCHEMA,\n                ...CRYPTO_VALIDATION_SCHEMA,\n                ...ISSUER_VALIDATION_SCHEMA,\n                ...SESSION_VALIDATION_SCHEMA,\n                ...CONFIG_STORAGE_SCHEMA,\n                LOG_ENABLE_HTTP_LOGGER: Joi.boolean().default(false),\n                LOG_ENABLE_SESSION_LOGGER: Joi.boolean().default(false),\n                LOG_DEBUG_MODE: Joi.boolean().default(false),\n                LOG_FORMAT: Joi.string()\n                    .valid(\"json\", \"pretty\")\n                    .default(\n                        process.env.NODE_ENV === \"production\"\n                            ? \"json\"\n                            : \"pretty\",\n                    ),\n            }),\n            isGlobal: true,\n            expandVariables: true,\n        }),\n        LoggerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const enableHttpLogger = configService.get(\n                    \"LOG_ENABLE_HTTP_LOGGER\",\n                    false,\n                );\n                //TODO: check if logging to file is needed: https://github.com/iamolegga/nestjs-pino?tab=readme-ov-file#asynchronous-logging\n                return {\n                    pinoHttp: {\n                        level: configService.get(\"LOG_LEVEL\", \"info\"),\n                        autoLogging: enableHttpLogger,\n                        transport: {\n                            target: \"pino-pretty\",\n                            options: {\n                                colorize: true,\n                                singleLine: false,\n                                translateTime: \"yyyy-mm-dd HH:MM:ss\",\n                                ignore: \"pid,hostname\",\n                            },\n                        },\n                        customProps: (req: any) => ({\n                            sessionId: req.params?.session,\n                        }),\n                        serializers: {\n                            req: (req: any) => ({\n                                method: req.method,\n                                url: req.url,\n                                headers: {\n                                    \"user-agent\": req.headers[\"user-agent\"],\n                                    \"content-type\": req.headers[\"content-type\"],\n                                },\n                                sessionId: req.params?.session,\n                                tenantId: req.params?.tenantId,\n                            }),\n                            res: (res: any) => ({\n                                statusCode: res.statusCode,\n                            }),\n                        },\n                    },\n                };\n            },\n        }),\n        KeyModule.forRoot(),\n        CryptoModule,\n        IssuerModule,\n        VerifierModule,\n        RegistrarModule,\n        ScheduleModule.forRoot(),\n        ServeStaticModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const folder = configService.getOrThrow(\"FOLDER\");\n                const rootPath = isAbsolute(folder)\n                    ? join(folder, \"public\")\n                    : join(__dirname, \"../\", folder, \"public\");\n                return [\n                    {\n                        rootPath,\n                    },\n                ];\n            },\n        }),\n        DatabaseModule,\n        SessionModule,\n        DatabaseModule,\n        HealthModule,\n        AuthModule,\n        MetricModule,\n        StorageModule.forRoot(),\n    ],\n    controllers: [WellKnownController, AppController],\n    providers: [WellKnownService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AttestationBasedPolicy.html":{"url":"classes/AttestationBasedPolicy.html","title":"class - AttestationBasedPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AttestationBasedPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Attestation based disclosure policy for the credential.\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                policy\n                            \n                            \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyType.ATTESTATION_BASED\n\n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:76\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyCredential[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:79\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CredentialConfigurationSupported } from \"@openid4vc/openid4vci\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsEmpty,\n    IsEnum,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToOne, OneToMany } from \"typeorm\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { VCT } from \"../../credentials-metadata/dto/credential-config.dto\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { CredentialIssuanceBinding } from \"../../issuance/entities/credential-issuance-binding.entity\";\n\n/**\n * Enum for the policy types.\n */\nexport enum PolicyType {\n    NONE = \"none\",\n    ALLOW_LIST = \"allowList\",\n    ROOT_OF_TRUST = \"rootOfTrust\",\n    ATTESTATION_BASED = \"attestationBased\",\n}\n/**\n * Embedded disclosure policy for the credential.\n */\nexport class EmbeddedDisclosurePolicy {\n    @IsEnum(PolicyType)\n    policy: PolicyType;\n}\n\n/**\n * Allow list disclosure policy for the credential.\n */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ALLOW_LIST;\n\n    @IsString({ each: true })\n    values: string[];\n}\n\n/**\n * Root of trust disclosure policy for the credential.\n */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ROOT_OF_TRUST;\n\n    @IsString()\n    values: string;\n}\n\n/**\n * None trust disclosure policy for the credential.\n */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.NONE;\n}\n\nexport class PolicyCredential {\n    @IsString()\n    format: string;\n    @IsObject()\n    meta: any;\n    @IsString()\n    iss: string;\n}\n\n/**\n * Attestation based disclosure policy for the credential.\n */\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ATTESTATION_BASED;\n\n    @IsArray()\n    values: PolicyCredential[];\n}\n\n/**\n * Entity to manage a credential configuration\n */\n@Entity()\nexport class CredentialConfig {\n    /**\n     * Unique identifier for the configuration to reference it.\n     */\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id: string;\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @IsEmpty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    //TODO: only allow display config for now\n    /**\n     * OID4VCI issuer metadata credential configuration element.\n     */\n    @Column(\"json\")\n    @IsObject()\n    config: CredentialConfigurationSupported;\n    /**\n     * Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    claims: Record;\n    /**\n     * Disclosure frame for the sd jwt vc.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    disclosureFrame: Record;\n    @Column(\"json\", { nullable: true })\n    /**\n     * VCT values that are hosted by this service.\n     */\n    @IsObject()\n    @IsOptional()\n    vct?: VCT;\n    @Column(\"json\", { nullable: true })\n\n    /**\n     * If true, the credential will be key bound.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    keyBinding?: boolean;\n\n    /**\n     * Optional key ID for the credential configuration.\n     * This is used to identify the key used for signing the credential.\n     */\n    @IsString()\n    @IsOptional()\n    keyId?: string;\n\n    @IsEmpty()\n    @ManyToOne(() => CertEntity)\n    key: CertEntity;\n\n    /**\n     * Optional status management flag for the credential configuration.\n     * If true, a status management will be applied to the credential.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    statusManagement?: boolean;\n    /**\n     * Optional livetime for the credential configuration in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    lifeTime?: number;\n\n    /**\n     * json schema that is used during issuance for the validation of the claims.\n     */\n    @IsObject()\n    @IsOptional()\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n    /**\n     * Link to all the issuance config bindings that are using this credential.\n     */\n    @IsEmpty()\n    @OneToMany(\n        () => CredentialIssuanceBinding,\n        (binding) => binding.credentialConfig,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    credentialIssuanceBindings: CredentialIssuanceBinding[];\n\n    /**\n     * Embedded disclosure policy for the credential.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthConfigValidator.html":{"url":"classes/AuthConfigValidator.html","title":"class - AuthConfigValidator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthConfigValidator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Custom validator to ensure config type matches the authentication method\n\n            \n\n\n            \n                Implements\n            \n            \n                        ValidatorConstraintInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                defaultMessage\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        defaultMessage\n                        \n                    \n                \n            \n            \n                \ndefaultMessage(args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.dto.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         \"config must be undefined when method is \\\"none\\\"\" | \"config must be of type AuthenticationUrlConfig when method is \\\"auth\\\"\" | \"config must be of type PresentationDuringIssuanceConfig when method is \\\"presentationDuringIssuance\\\"\" | \"config type does not match the specified method\"\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(config: any, args: ValidationArguments)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.dto.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                args\n                                            \n                                                        ValidationArguments\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUrl,\n    Validate,\n    ValidateNested,\n    ValidationArguments,\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Custom validator to ensure config type matches the authentication method\n */\n@ValidatorConstraint({ name: \"authConfigValidator\", async: false })\nexport class AuthConfigValidator implements ValidatorConstraintInterface {\n    validate(config: any, args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === \"none\") {\n            // For 'none' method, config should be undefined\n            return config === undefined;\n        }\n\n        if (obj.method === \"auth\") {\n            // For 'auth' method, config must be present and have 'url' property\n            return (\n                config &&\n                typeof config === \"object\" &&\n                typeof config.url === \"string\"\n            );\n        }\n\n        if (obj.method === \"presentationDuringIssuance\") {\n            // For 'presentationDuringIssuance' method, config must be present and have 'presentation' property\n            return (\n                config &&\n                typeof config === \"object\" &&\n                typeof config.type === \"string\"\n            );\n        }\n\n        return false;\n    }\n\n    defaultMessage(args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === \"none\") {\n            return 'config must be undefined when method is \"none\"';\n        }\n\n        if (obj.method === \"auth\") {\n            return 'config must be of type AuthenticationUrlConfig when method is \"auth\"';\n        }\n\n        if (obj.method === \"presentationDuringIssuance\") {\n            return 'config must be of type PresentationDuringIssuanceConfig when method is \"presentationDuringIssuance\"';\n        }\n\n        return \"config type does not match the specified method\";\n    }\n}\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn([\"none\", \"auth\", \"presentationDuringIssuance\"])\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    @Validate(AuthConfigValidator)\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n\n    /**\n     * Description of the authentication configuration.\n     */\n    @IsOptional()\n    @IsString()\n    description?: string;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: \"none\" } // Pre-authorized code flow\n    | { method: \"auth\"; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: \"presentationDuringIssuance\"; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getGlobalJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOAuth2Token\n                            \n                            \n                                    \n                                    \n                                    \n                                getOidcDiscovery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getGlobalJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGlobalJwks()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/jwks.json')@ApiOperation({summary: 'JSON Web Key Set', description: 'Returns the JSON Web Key Set for token verification.'})@ApiResponse({status: 200, description: 'JSON Web Key Set'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:201\n                        \n                    \n\n\n            \n                \n                        Global JWKS endpoint for client credentials flow.\nThis provides the JSON Web Key Set for verifying tokens issued by this server.\n\n\n                        \n                            Returns :         KeyResponseDto\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('oauth2/token')@ApiBody({type: ClientCredentialsDto, examples: undefined})@ApiResponse({status: 200, description: 'OAuth2 token response', type: TokenResponse, example: undefined})@ApiResponse({status: 401, description: 'Invalid client credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:70\n                        \n                    \n\n\n            \n                \n                        OAuth2 Token endpoint - supports client credentials flow only\nAccepts client credentials either in Authorization header (Basic auth) or request body\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getOidcDiscovery\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOidcDiscovery()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/oauth-authorization-server')@ApiOperation({summary: 'OIDC Discovery Configuration', description: 'Returns the OpenID Connect discovery configuration for client credentials authentication.'})@ApiResponse({status: 200, description: 'OIDC Discovery Configuration'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:166\n                        \n                    \n\n\n            \n                \n                        OIDC Discovery endpoint for client credentials flow.\nThis endpoint provides the OpenID Connect configuration for applications\nthat need to authenticate using client_id and client_secret.\n\n\n                        \n                            Returns :         OidcDiscoveryDto\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Headers,\n    Post,\n    UnauthorizedException,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    ApiBody,\n    ApiExcludeController,\n    ApiOperation,\n    ApiResponse,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { KeyResponseDto } from \"../crypto/key/dto/key-response.dto\";\nimport { ClientService } from \"./client.service\";\nimport { ClientCredentialsDto } from \"./dto/client-credentials.dto\";\nimport { OidcDiscoveryDto } from \"./dto/oidc-discovery.dto\";\nimport { TokenResponse } from \"./dto/token-response.dto\";\nimport { JwtService } from \"./jwt.service\";\nimport { TokenPayload } from \"./token.decorator\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiTags(\"Authentication\")\n@Controller(\"\")\nexport class AuthController {\n    constructor(\n        private jwtService: JwtService,\n        private clientService: ClientService,\n        private configService: ConfigService,\n    ) {}\n\n    /**\n     * OAuth2 Token endpoint - supports client credentials flow only\n     * Accepts client credentials either in Authorization header (Basic auth) or request body\n     * @param body\n     * @param headers\n     * @returns\n     */\n    @Post(\"oauth2/token\")\n    @ApiBody({\n        type: ClientCredentialsDto,\n        examples: {\n            client_credentials: {\n                summary: \"Client Credentials Flow\",\n                value: {\n                    grant_type: \"client_credentials\",\n                    client_id: \"root\",\n                    client_secret: \"root\",\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"OAuth2 token response\",\n        type: TokenResponse,\n        example: {\n            access_token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n            token_type: \"Bearer\",\n            expires_in: 86400,\n        },\n    })\n    @ApiResponse({\n        status: 401,\n        description: \"Invalid client credentials\",\n    })\n    async getOAuth2Token(\n        @Body() body: any,\n        @Headers() headers: any,\n    ): Promise {\n        if (this.jwtService.isUsingExternalOIDC()) {\n            throw new UnauthorizedException(\n                \"OAuth2 token endpoint is not available when using external OIDC provider. Use your external OIDC provider for authentication.\",\n            );\n        }\n\n        // Only support client credentials flow\n        if (body.grant_type !== \"client_credentials\") {\n            throw new UnauthorizedException(\n                \"Only client_credentials grant type is supported\",\n            );\n        }\n\n        let clientId: string;\n        let clientSecret: string;\n\n        // Try to extract credentials from Authorization header (Basic auth)\n        const authHeader = headers.authorization;\n        if (authHeader && authHeader.startsWith(\"Basic \")) {\n            try {\n                const base64Credentials = authHeader.substring(6);\n                const credentials = Buffer.from(\n                    base64Credentials,\n                    \"base64\",\n                ).toString(\"ascii\");\n                const [id, secret] = credentials.split(\":\");\n                clientId = id;\n                clientSecret = secret;\n            } catch {\n                throw new UnauthorizedException(\n                    \"Invalid Authorization header format\",\n                );\n            }\n        } else {\n            // Fall back to request body\n            clientId = body.client_id;\n            clientSecret = body.client_secret;\n        }\n\n        if (!clientId || !clientSecret) {\n            throw new UnauthorizedException(\n                \"Client credentials must be provided either in Authorization header (Basic auth) or request body\",\n            );\n        }\n\n        const client = this.clientService.validateClient(\n            clientId,\n            clientSecret,\n        );\n        if (!client) {\n            throw new UnauthorizedException(\"Invalid client credentials\");\n        }\n\n        //TODO: check if the access token should only include the session id or also e.g. the credentials that should be issued. I would think this is not required since we still need the claims for it.\n        const payload: TokenPayload = {\n            sub: client.id,\n        };\n\n        //TODO: make expiresIn configurable?\n        const access_token = await this.jwtService.generateToken(payload, {\n            expiresIn: \"24h\",\n            audience: \"eudiplo-service\",\n        });\n\n        const refresh_token = await this.jwtService.generateToken(payload, {\n            expiresIn: \"30d\",\n            audience: \"eudiplo-service\",\n        });\n\n        return {\n            access_token,\n            refresh_token,\n            token_type: \"Bearer\",\n            expires_in: 86400, // 24 hours in seconds\n        };\n    }\n\n    /**\n     * OIDC Discovery endpoint for client credentials flow.\n     * This endpoint provides the OpenID Connect configuration for applications\n     * that need to authenticate using client_id and client_secret.\n     */\n    @Get(\".well-known/oauth-authorization-server\")\n    @ApiOperation({\n        summary: \"OIDC Discovery Configuration\",\n        description:\n            \"Returns the OpenID Connect discovery configuration for client credentials authentication.\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"OIDC Discovery Configuration\",\n    })\n    getOidcDiscovery(): OidcDiscoveryDto {\n        const publicUrl = this.configService.getOrThrow(\"PUBLIC_URL\");\n\n        return {\n            issuer: publicUrl,\n            token_endpoint: `${publicUrl}/oauth2/token`,\n            jwks_uri: `${publicUrl}/.well-known/jwks.json`,\n            response_types_supported: [\"token\"],\n            grant_types_supported: [\"client_credentials\"],\n            token_endpoint_auth_methods_supported: [\n                \"client_secret_basic\",\n                \"client_secret_post\",\n            ],\n            subject_types_supported: [\"public\"],\n            id_token_signing_alg_values_supported: [\"ES256\"],\n            scopes_supported: [\"openid\"],\n            claims_supported: [\"iss\", \"sub\", \"aud\", \"exp\", \"iat\"],\n            service_documentation:\n                \"https://openwallet-foundation-labs.github.io/eudiplo/latest/\",\n        };\n    }\n\n    /**\n     * Global JWKS endpoint for client credentials flow.\n     * This provides the JSON Web Key Set for verifying tokens issued by this server.\n     */\n    @Get(\".well-known/jwks.json\")\n    @ApiOperation({\n        summary: \"JSON Web Key Set\",\n        description: \"Returns the JSON Web Key Set for token verification.\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"JSON Web Key Set\",\n    })\n    getGlobalJwks(): KeyResponseDto {\n        // For now, return an empty key set since the actual keys are tenant-specific\n        // This can be enhanced later to include global signing keys if needed\n        return {\n            keys: [],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCryptoModule->AuthModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAuthModule -->\n\nIssuerModule->AuthModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAuthModule -->\n\nRegistrarModule->AuthModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nAuthModule -->\n\nStatusListModule->AuthModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ClientService\n                        \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { makeGaugeProvider } from \"@willsoto/nestjs-prometheus\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { IssuerModule } from \"../issuer/issuer.module\";\nimport { StatusListModule } from \"../issuer/status-list/status-list.module\";\nimport { RegistrarModule } from \"../registrar/registrar.module\";\nimport { StorageModule } from \"../storage/storage.module\";\nimport { AuthController } from \"./auth.controller\";\nimport { JwtAuthGuard } from \"./auth.guard\";\nimport { ClientService } from \"./client.service\";\nimport { ClientEntry } from \"./entitites/client.entity\";\nimport { JwtService } from \"./jwt.service\";\nimport { JwtStrategy } from \"./jwt.strategy\";\n\nexport const DEFAULT_JWT_SECRET = \"supersecret\";\nexport const DEFAULT_AUTH_CLIENT_ID = \"root\";\nexport const DEFAULT_AUTH_CLIENT_SECRET = \"root\";\n\nexport const AUTH_VALIDATION_SCHEMA = {\n    OIDC: Joi.string().optional(),\n    KEYCLOAK_INTERNAL_ISSUER_URL: Joi.when(\"OIDC\", {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    KEYCLOAK_ALGORITHM: Joi.when(\"OIDC\", {\n        then: Joi.string().default(\"RS256\"),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_JWT_SECRET),\n    }),\n    JWT_ISSUER: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default(\"eudiplo-service\"),\n    }),\n    JWT_EXPIRES_IN: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(\"24h\"),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_SECRET),\n    }),\n    AUTH_CLIENT_ID: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_ID),\n    }),\n};\n@Module({\n    imports: [\n        PassportModule,\n        ConfigModule,\n        CryptoModule,\n        StatusListModule,\n        RegistrarModule,\n        IssuerModule,\n        TypeOrmModule.forFeature([ClientEntry]),\n    ],\n    providers: [\n        JwtStrategy,\n        JwtAuthGuard,\n        JwtService,\n        ClientService,\n        makeGaugeProvider({\n            name: \"tenant_client_total\",\n            help: \"Total number of tenant clients\",\n        }),\n    ],\n    controllers: [AuthController],\n    exports: [PassportModule, JwtStrategy, JwtAuthGuard, JwtService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/auth-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResponse DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                        \n                                            vp_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state parameter to maintain state between the request and callback.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vp_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vp_token:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The VP token containing the presentation data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthResponse {\n    /**\n     * The VP token containing the presentation data.\n     */\n    vp_token: {\n        /**\n         * Key-value pairs representing the VP token data.\n         */\n        [key: string]: string;\n    };\n    /**\n     * The state parameter to maintain state between the request and callback.\n     */\n    state: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationConfigDto.html":{"url":"classes/AuthenticationConfigDto.html","title":"class - AuthenticationConfigDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationConfigDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Base class for authentication configurations\nDetermines which OpenID4VC flow to use for the issuance process\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                config\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationUrlConfig | PresentationDuringIssuanceConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Validate(AuthConfigValidator)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:125\n                        \n                    \n\n            \n                \n                    Configuration specific to the selected authentication method\n\nFor 'none': no config needed (undefined) - uses pre-authorized code flow\nFor 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\nFor 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:132\n                        \n                    \n\n            \n                \n                    Description of the authentication configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Type :     \"none\" | \"auth\" | \"presentationDuringIssuance\"\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['none', 'auth', 'presentationDuringIssuance'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:115\n                        \n                    \n\n            \n                \n                    The authentication method to use:\n\n'none': Pre-authorized code flow (no user authentication)\n'auth': OID4VCI authorized code flow (user redirect for authentication)\n'presentationDuringIssuance': OID4VP flow (credential presentation required)\n\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUrl,\n    Validate,\n    ValidateNested,\n    ValidationArguments,\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Custom validator to ensure config type matches the authentication method\n */\n@ValidatorConstraint({ name: \"authConfigValidator\", async: false })\nexport class AuthConfigValidator implements ValidatorConstraintInterface {\n    validate(config: any, args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === \"none\") {\n            // For 'none' method, config should be undefined\n            return config === undefined;\n        }\n\n        if (obj.method === \"auth\") {\n            // For 'auth' method, config must be present and have 'url' property\n            return (\n                config &&\n                typeof config === \"object\" &&\n                typeof config.url === \"string\"\n            );\n        }\n\n        if (obj.method === \"presentationDuringIssuance\") {\n            // For 'presentationDuringIssuance' method, config must be present and have 'presentation' property\n            return (\n                config &&\n                typeof config === \"object\" &&\n                typeof config.type === \"string\"\n            );\n        }\n\n        return false;\n    }\n\n    defaultMessage(args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === \"none\") {\n            return 'config must be undefined when method is \"none\"';\n        }\n\n        if (obj.method === \"auth\") {\n            return 'config must be of type AuthenticationUrlConfig when method is \"auth\"';\n        }\n\n        if (obj.method === \"presentationDuringIssuance\") {\n            return 'config must be of type PresentationDuringIssuanceConfig when method is \"presentationDuringIssuance\"';\n        }\n\n        return \"config type does not match the specified method\";\n    }\n}\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn([\"none\", \"auth\", \"presentationDuringIssuance\"])\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    @Validate(AuthConfigValidator)\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n\n    /**\n     * Description of the authentication configuration.\n     */\n    @IsOptional()\n    @IsString()\n    description?: string;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: \"none\" } // Pre-authorized code flow\n    | { method: \"auth\"; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: \"presentationDuringIssuance\"; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationConfigHelper.html":{"url":"classes/AuthenticationConfigHelper.html","title":"class - AuthenticationConfigHelper","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationConfigHelper\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.helper.ts\n        \n\n\n            \n                Description\n            \n            \n                Utility functions for working with OpenID4VC authentication configurations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getPresentationConfig\n                            \n                            \n                                    Static\n                                isAuthUrlAuth\n                            \n                            \n                                    Static\n                                isNoneAuth\n                            \n                            \n                                    Static\n                                isPresentationDuringIssuanceAuth\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPresentationConfig(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:44\n                        \n                    \n\n\n            \n                \n                        Get the presentation configuration if the method is 'presentationDuringIssuance'\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PresentationDuringIssuanceConfig | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isAuthUrlAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuthUrlAuth(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:23\n                        \n                    \n\n\n            \n                \n                        Type guard to check if the config uses OID4VCI authorized code flow\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isNoneAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isNoneAuth(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:14\n                        \n                    \n\n\n            \n                \n                        Type guard to check if the config uses pre-authorized code flow\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isPresentationDuringIssuanceAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isPresentationDuringIssuanceAuth(config: AuthenticationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/dto/authentication-config.helper.ts:32\n                        \n                    \n\n\n            \n                \n                        Type guard to check if the config uses OID4VP flow\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            AuthenticationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    AuthenticationConfig,\n    AuthenticationUrlConfig,\n    PresentationDuringIssuanceConfig,\n} from \"./authentication-config.dto\";\n\n/**\n * Utility functions for working with OpenID4VC authentication configurations\n */\nexport class AuthenticationConfigHelper {\n    /**\n     * Type guard to check if the config uses pre-authorized code flow\n     */\n    static isNoneAuth(\n        config: AuthenticationConfig,\n    ): config is { method: \"none\" } {\n        return config.method === \"none\";\n    }\n\n    /**\n     * Type guard to check if the config uses OID4VCI authorized code flow\n     */\n    static isAuthUrlAuth(\n        config: AuthenticationConfig,\n    ): config is { method: \"auth\"; config: AuthenticationUrlConfig } {\n        return config.method === \"auth\";\n    }\n\n    /**\n     * Type guard to check if the config uses OID4VP flow\n     */\n    static isPresentationDuringIssuanceAuth(\n        config: AuthenticationConfig,\n    ): config is {\n        method: \"presentationDuringIssuance\";\n        config: PresentationDuringIssuanceConfig;\n    } {\n        return config.method === \"presentationDuringIssuance\";\n    }\n\n    /**\n     * Get the presentation configuration if the method is 'presentationDuringIssuance'\n     */\n    static getPresentationConfig(\n        config: AuthenticationConfig,\n    ): PresentationDuringIssuanceConfig | null {\n        if (this.isPresentationDuringIssuanceAuth(config)) {\n            return config.config;\n        }\n        return null;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationUrlConfig.html":{"url":"classes/AuthenticationUrlConfig.html","title":"class - AuthenticationUrlConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationUrlConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'auth'\nUsed for OID4VCI authorized code flow where the user will be redirected for authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                url\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUrl()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:79\n                        \n                    \n\n            \n                \n                    The URL used in the OID4VCI authorized code flow.\nThis URL is where users will be redirected for authentication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:88\n                        \n                    \n\n            \n                \n                    Optional webhook configuration for authentication callbacks\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUrl,\n    Validate,\n    ValidateNested,\n    ValidationArguments,\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Custom validator to ensure config type matches the authentication method\n */\n@ValidatorConstraint({ name: \"authConfigValidator\", async: false })\nexport class AuthConfigValidator implements ValidatorConstraintInterface {\n    validate(config: any, args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === \"none\") {\n            // For 'none' method, config should be undefined\n            return config === undefined;\n        }\n\n        if (obj.method === \"auth\") {\n            // For 'auth' method, config must be present and have 'url' property\n            return (\n                config &&\n                typeof config === \"object\" &&\n                typeof config.url === \"string\"\n            );\n        }\n\n        if (obj.method === \"presentationDuringIssuance\") {\n            // For 'presentationDuringIssuance' method, config must be present and have 'presentation' property\n            return (\n                config &&\n                typeof config === \"object\" &&\n                typeof config.type === \"string\"\n            );\n        }\n\n        return false;\n    }\n\n    defaultMessage(args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === \"none\") {\n            return 'config must be undefined when method is \"none\"';\n        }\n\n        if (obj.method === \"auth\") {\n            return 'config must be of type AuthenticationUrlConfig when method is \"auth\"';\n        }\n\n        if (obj.method === \"presentationDuringIssuance\") {\n            return 'config must be of type PresentationDuringIssuanceConfig when method is \"presentationDuringIssuance\"';\n        }\n\n        return \"config type does not match the specified method\";\n    }\n}\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn([\"none\", \"auth\", \"presentationDuringIssuance\"])\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    @Validate(AuthConfigValidator)\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n\n    /**\n     * Description of the authentication configuration.\n     */\n    @IsOptional()\n    @IsString()\n    description?: string;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: \"none\" } // Pre-authorized code flow\n    | { method: \"auth\"; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: \"presentationDuringIssuance\"; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationResponse.html":{"url":"classes/AuthorizationResponse.html","title":"class - AuthorizationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/authorization-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the authorization response containing the VP token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                response\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The response string containing the authorization details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\n\n/**\n * DTO for the authorization response containing the VP token.\n */\nexport class AuthorizationResponse {\n    /**\n     * The response string containing the authorization details.\n     */\n    @IsString()\n    response: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizeController.html":{"url":"controllers/AuthorizeController.html","title":"controller - AuthorizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/authorize\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI authorization endpoints.\nThis controller handles the authorization requests, token requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                authorizationChallengeEndpoint\n                            \n                            \n                                    \n                                authorize\n                            \n                            \n                                    \n                                    \n                                    Async\n                                par\n                            \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response, body: AuthorizeQueries, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post('challenge')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Endpoint for the authorization challenge.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorize\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorize(queries: AuthorizeQueries, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:41\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Authorization Request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        par\n                        \n                    \n                \n            \n            \n                \n                        \n                    par(body: AuthorizeQueries)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'Pushed Authorization Request', type: AuthorizeQueries})@Post('par')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:55\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Pushed Authorization Request (PAR).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n            \n                \n                        \n                    token(body: any, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(SessionGuard)@Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:77\n                        \n                    \n\n\n            \n                \n                        Endpoint to validate the token request.\nThis endpoint is used to exchange the authorization code for an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport {\n    Body,\n    Controller,\n    Get,\n    Post,\n    Query,\n    Req,\n    Res,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiBody, ApiExcludeController } from \"@nestjs/swagger\";\nimport type { Request, Response } from \"express\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionGuard } from \"../../session/session.guard\";\nimport { SessionService } from \"../../session/session.service\";\nimport { AuthorizeService } from \"./authorize.service\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\nimport { ParResponseDto } from \"./dto/par-response.dto\";\n\n/**\n * Controller for the OpenID4VCI authorization endpoints.\n * This controller handles the authorization requests, token requests.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@UseGuards(SessionGuard)\n@Controller(\":session/authorize\")\nexport class AuthorizeController {\n    constructor(\n        private readonly authorizeService: AuthorizeService,\n        private sessionService: SessionService,\n    ) {}\n\n    /**\n     * Endpoint to handle the Authorization Request.\n     * @param queries\n     * @param res\n     */\n    @Get()\n    authorize(@Query() queries: AuthorizeQueries, @Res() res: Response) {\n        return this.authorizeService.sendAuthorizationResponse(queries, res);\n    }\n\n    /**\n     * Endpoint to handle the Pushed Authorization Request (PAR).\n     * @param body\n     * @returns\n     */\n    @ApiBody({\n        description: \"Pushed Authorization Request\",\n        type: AuthorizeQueries,\n    })\n    @Post(\"par\")\n    async par(@Body() body: AuthorizeQueries): Promise {\n        const request_uri = `urn:${randomUUID()}`;\n        // save both so we can retrieve the session also via the request_uri in the authorize step.\n        await this.sessionService.add(body.issuer_state!, {\n            request_uri,\n            auth_queries: body,\n        });\n        return {\n            expires_in: 500,\n            request_uri,\n        };\n    }\n\n    /**\n     * Endpoint to validate the token request.\n     * This endpoint is used to exchange the authorization code for an access token.\n     * @param body\n     * @param req\n     * @returns\n     */\n    @UseGuards(SessionGuard)\n    @Post(\"token\")\n    token(\n        @Body() body: any,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        //TODO: define body\n        return this.authorizeService.validateTokenRequest(body, req, session);\n    }\n\n    /**\n     * Endpoint for the authorization challenge.\n     * @param res\n     * @param body\n     * @returns\n     */\n    @UseGuards(SessionGuard)\n    @Post(\"challenge\")\n    authorizationChallengeEndpoint(\n        @Res() res: Response,\n        @Body() body: AuthorizeQueries,\n        @SessionEntity() session: Session,\n    ) {\n        return this.authorizeService.authorizationChallengeEndpoint(\n            res,\n            body,\n            session,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizeQueries.html":{"url":"classes/AuthorizeQueries.html","title":"class - AuthorizeQueries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizeQueries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/authorize-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                auth_session\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                client_id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge_method\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dpop_jkt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                issuer_state\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                redirect_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resource\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        auth_session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge_method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dpop_jkt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        issuer_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        redirect_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\nexport class AuthorizeQueries {\n    @IsOptional()\n    @IsString()\n    issuer_state?: string;\n    @IsOptional()\n    @IsString()\n    response_type?: string;\n    @IsOptional()\n    @IsString()\n    client_id?: string;\n    @IsOptional()\n    @IsString()\n    redirect_uri?: string;\n    @IsOptional()\n    @IsString()\n    resource?: string;\n    @IsOptional()\n    @IsString()\n    scope?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge_method?: string;\n    @IsOptional()\n    @IsString()\n    dpop_jkt?: string;\n    @IsOptional()\n    @IsString()\n    request_uri?: string;\n    @IsOptional()\n    @IsString()\n    auth_session?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizeService.html":{"url":"injectables/AuthorizeService.html","title":"injectable - AuthorizeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authorizationChallengeEndpoint\n                            \n                            \n                                authzMetadata\n                            \n                            \n                                getAuthorizationServer\n                            \n                            \n                                    Async\n                                parseChallengeRequest\n                            \n                            \n                                    Private\n                                    Async\n                                sendAuthorizationCode\n                            \n                            \n                                    Async\n                                sendAuthorizationResponse\n                            \n                            \n                                    Async\n                                setAuthCode\n                            \n                            \n                                    Async\n                                validateTokenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, oid4vpService: Oid4vpService, sessionService: SessionService, issuanceService: IssuanceService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/authorize/authorize.service.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vpService\n                                                  \n                                                        \n                                                                        Oid4vpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response>, body: AuthorizeQueries, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:227\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \nauthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     AuthorizationServerMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthorizationServer\n                        \n                    \n                \n            \n            \n                \ngetAuthorizationServer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:49\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Oauth2AuthorizationServer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        parseChallengeRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseChallengeRequest(body: AuthorizeQueries, tenantId: string, webhook?: WebhookConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:209\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                webhook\n                                            \n                                                            WebhookConfig\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendAuthorizationCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationCode(res: Response, issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:301\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendAuthorizationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationResponse(queries: AuthorizeQueries, res: Response>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setAuthCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAuthCode(issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:308\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateTokenRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateTokenRequest(body: any, req: Request, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:104\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { AuthenticationConfigHelper } from \"../issuance/dto/authentication-config.helper\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        /*         const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        } */\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        if (\n            AuthenticationConfigHelper.isPresentationDuringIssuanceAuth(\n                authConfig,\n            )\n        ) {\n            // OID4VP flow - credential presentation required\n            const webhook = issuanceConfig.claimsWebhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                session.tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else if (AuthenticationConfigHelper.isAuthUrlAuth(authConfig)) {\n            // OID4VCI authorized code flow - should not reach here typically in challenge endpoint\n            // But we'll handle it by sending authorization code\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else if (AuthenticationConfigHelper.isNoneAuth(authConfig)) {\n            // Pre-authorized code flow (method: 'none') - send authorization code directly\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else {\n            throw new Error(\n                `Unsupported authentication method: ${(authConfig as any).method}`,\n            );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CertEntity.html":{"url":"entities/CertEntity.html","title":"entity - CertEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CertEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/cert.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage certificates for keys.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                crt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:45\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:27\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:39\n                        \n                    \n\n            \n                \n                    Description of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:15\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:21\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertificateType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'signing', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:33\n                        \n                    \n\n            \n                \n                    Type of the certificate (access or signing).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:51\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsEmpty } from \"class-validator\";\nimport { Column, CreateDateColumn, Entity, UpdateDateColumn } from \"typeorm\";\n\nexport type CertificateType = \"access\" | \"signing\";\n\n/**\n * Entity to manage certificates for keys.\n */\n@Entity()\nexport class CertEntity {\n    /**\n     * Unique identifier for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * Certificate in PEM format.\n     */\n    @Column(\"varchar\")\n    crt: string;\n\n    /**\n     * Type of the certificate (access or signing).\n     */\n    @Column(\"varchar\", { default: \"signing\", primary: true })\n    type: CertificateType;\n\n    /**\n     * Description of the key.\n     */\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Client.html":{"url":"interfaces/Client.html","title":"interface - Client","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Client\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    BadRequestException,\n    Injectable,\n    OnApplicationBootstrap,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus\";\nimport { Gauge } from \"prom-client\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { EncryptionService } from \"../crypto/encryption/encryption.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { RegistrarService } from \"../registrar/registrar.service\";\nimport { ClientEntry } from \"./entitites/client.entity\";\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statutsListService: StatusListService,\n        private registrarService: RegistrarService,\n        private oid4vciService: Oid4vciService,\n        @InjectRepository(ClientEntry)\n        private clientRepository: Repository,\n        @InjectMetric(\"tenant_client_total\")\n        private tenantClientTotal: Gauge,\n    ) {}\n\n    async onApplicationBootstrap() {\n        // Initialize the client metrics\n        const count = await this.clientRepository.countBy({ status: \"set up\" });\n        this.tenantClientTotal.set({}, count);\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow(\"AUTH_CLIENT_ID\"),\n                secret: this.configService.getOrThrow(\n                    \"AUTH_CLIENT_SECRET\",\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Check if the client is set up, if not, set it up.\n     * @param id\n     * @returns\n     */\n    async isSetUp(id: string) {\n        void this.clientRepository\n            .countBy({ status: \"set up\" })\n            .then((count) => {\n                this.tenantClientTotal.set({}, count);\n            });\n\n        await this.clientRepository.findOneByOrFail({ id }).then(\n            (res) => {\n                if (res.status === \"set up\") {\n                    return true;\n                }\n                throw new BadRequestException(\n                    `Client ${id} is not set up. Please retry later.`,\n                );\n            },\n            async () => {\n                // create it to signl that the client getting set up\n                await this.clientRepository.save({ id });\n                await this.setUpClient(id).catch(async (err) => {\n                    console.error(err);\n                    // if there is an error, update the client status\"\n                    await this.clientRepository.update(\n                        { id },\n                        { status: \"error\", error: err.message },\n                    );\n                    throw new BadRequestException(\n                        `Error setting up client ${id}. Please retry later.`,\n                    );\n                });\n                // if everything is fine, update the client status\n                return this.clientRepository.update(\n                    { id },\n                    { status: \"set up\" },\n                );\n            },\n        );\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    async setUpClient(id: string) {\n        await this.cryptoService.onTenantInit(id);\n        await this.encryptionService.onTenantInit(id);\n        await this.statutsListService.onTenantInit(id);\n        await this.registrarService.onTenantInit(id);\n        await this.oid4vciService.onTenantInit(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientCredentialsDto.html":{"url":"classes/ClientCredentialsDto.html","title":"class - ClientCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                client_id\n                            \n                            \n                                    \n                                client_secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\n\nexport class ClientCredentialsDto {\n    @IsString()\n    client_id: string;\n    @IsString()\n    client_secret: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/ClientEntry.html":{"url":"entities/ClientEntry.html","title":"entity - ClientEntry","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  ClientEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entitites/client.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                error\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        error\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/client.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/client.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClientStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'init'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/client.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryColumn } from \"typeorm\";\n\nexport type ClientStatus = \"init\" | \"set up\" | \"error\";\n\n@Entity()\nexport class ClientEntry {\n    @PrimaryColumn()\n    id: string;\n\n    @Column(\"varchar\", { default: \"init\" })\n    status: ClientStatus;\n\n    @Column(\"varchar\", { nullable: true })\n    error?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ClientService.html":{"url":"injectables/ClientService.html","title":"injectable - ClientService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ClientService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/client.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                clients\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findClientById\n                            \n                            \n                                    Private\n                                getClients\n                            \n                            \n                                    Async\n                                isSetUp\n                            \n                            \n                                    Private\n                                loadClients\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                setUpClient\n                            \n                            \n                                validateClient\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, encryptionService: EncryptionService, statutsListService: StatusListService, registrarService: RegistrarService, oid4vciService: Oid4vciService, clientRepository: Repository, tenantClientTotal: Gauge)\n                    \n                \n                        \n                            \n                                Defined in src/auth/client.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statutsListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clientRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantClientTotal\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findClientById\n                        \n                    \n                \n            \n            \n                \nfindClientById(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Find client by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    getClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Get clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        isSetUp\n                        \n                    \n                \n            \n            \n                \n                        \n                    isSetUp(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Check if the client is set up, if not, set it up.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Load clients from configuration\n\n\n                        \n                            Returns :         Client[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setUpClient\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUpClient(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:142\n                        \n                    \n\n\n            \n                \n                        Sends an event to set up a client, allowing all other services to listen and react accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateClient\n                        \n                    \n                \n            \n            \n                \nvalidateClient(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/client.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Validate client credentials (OAuth2 Client Credentials flow)\nThis is the primary authentication method for service integration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Client | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Client[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/auth/client.service.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    BadRequestException,\n    Injectable,\n    OnApplicationBootstrap,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus\";\nimport { Gauge } from \"prom-client\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { EncryptionService } from \"../crypto/encryption/encryption.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { RegistrarService } from \"../registrar/registrar.service\";\nimport { ClientEntry } from \"./entitites/client.entity\";\n\n// Client interface for service integration\nexport interface Client {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class ClientService implements OnApplicationBootstrap {\n    private clients: Client[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statutsListService: StatusListService,\n        private registrarService: RegistrarService,\n        private oid4vciService: Oid4vciService,\n        @InjectRepository(ClientEntry)\n        private clientRepository: Repository,\n        @InjectMetric(\"tenant_client_total\")\n        private tenantClientTotal: Gauge,\n    ) {}\n\n    async onApplicationBootstrap() {\n        // Initialize the client metrics\n        const count = await this.clientRepository.countBy({ status: \"set up\" });\n        this.tenantClientTotal.set({}, count);\n    }\n\n    /**\n     * Get clients from configuration\n     * @returns\n     */\n    private getClients(): Client[] {\n        if (!this.clients) {\n            this.clients = this.loadClients();\n        }\n        return this.clients;\n    }\n\n    /**\n     * Load clients from configuration\n     */\n    private loadClients(): Client[] {\n        // Default clients for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow(\"AUTH_CLIENT_ID\"),\n                secret: this.configService.getOrThrow(\n                    \"AUTH_CLIENT_SECRET\",\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate client credentials (OAuth2 Client Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateClient(clientId: string, clientSecret: string): Client | null {\n        const client = this.getClients().find((c) => c.id === clientId);\n\n        if (!client || client.secret !== clientSecret) {\n            return null;\n        }\n\n        return client;\n    }\n\n    /**\n     * Find client by ID\n     */\n    findClientById(clientId: string): Client | null {\n        return this.getClients().find((c) => c.id === clientId) || null;\n    }\n\n    /**\n     * Check if the client is set up, if not, set it up.\n     * @param id\n     * @returns\n     */\n    async isSetUp(id: string) {\n        void this.clientRepository\n            .countBy({ status: \"set up\" })\n            .then((count) => {\n                this.tenantClientTotal.set({}, count);\n            });\n\n        await this.clientRepository.findOneByOrFail({ id }).then(\n            (res) => {\n                if (res.status === \"set up\") {\n                    return true;\n                }\n                throw new BadRequestException(\n                    `Client ${id} is not set up. Please retry later.`,\n                );\n            },\n            async () => {\n                // create it to signl that the client getting set up\n                await this.clientRepository.save({ id });\n                await this.setUpClient(id).catch(async (err) => {\n                    console.error(err);\n                    // if there is an error, update the client status\"\n                    await this.clientRepository.update(\n                        { id },\n                        { status: \"error\", error: err.message },\n                    );\n                    throw new BadRequestException(\n                        `Error setting up client ${id}. Please retry later.`,\n                    );\n                });\n                // if everything is fine, update the client status\n                return this.clientRepository.update(\n                    { id },\n                    { status: \"set up\" },\n                );\n            },\n        );\n    }\n\n    /**\n     * Sends an event to set up a client, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    async setUpClient(id: string) {\n        await this.cryptoService.onTenantInit(id);\n        await this.encryptionService.onTenantInit(id);\n        await this.statutsListService.onTenantInit(id);\n        await this.registrarService.onTenantInit(id);\n        await this.oid4vciService.onTenantInit(id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCredentialIssuanceBindingDto.html":{"url":"classes/CreateCredentialIssuanceBindingDto.html","title":"class - CreateCredentialIssuanceBindingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCredentialIssuanceBindingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for creating a new credential-issuance binding.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credentialConfigId\n                            \n                            \n                                    \n                                    \n                                issuanceConfigId\n                            \n                            \n                                    \n                                    \n                                keyID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentialConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the credential configuration', example: 'university-degree'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        issuanceConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the issuance configuration', example: '123e4567-e89b-12d3-a456-426614174000'})@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        keyID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The key ID to use for signing this credential in this issuance config', example: 'signing-key-2024-01'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsUUID } from \"class-validator\";\n\n/**\n * DTO for creating a new credential-issuance binding.\n */\nexport class CreateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: \"The ID of the credential configuration\",\n        example: \"university-degree\",\n    })\n    @IsString()\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: \"The ID of the issuance configuration\",\n        example: \"123e4567-e89b-12d3-a456-426614174000\",\n    })\n    @IsUUID()\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description:\n            \"The key ID to use for signing this credential in this issuance config\",\n        example: \"signing-key-2024-01\",\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for updating the key ID of an existing binding.\n */\nexport class UpdateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: \"The new key ID to use for signing this credential\",\n        example: \"signing-key-2024-02\",\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for the response of a credential-issuance binding.\n */\nexport class CredentialIssuanceBindingResponseDto {\n    @ApiProperty({\n        description: \"The unique identifier of the binding\",\n        example: \"123e4567-e89b-12d3-a456-426614174000\",\n    })\n    id: string;\n\n    @ApiProperty({\n        description: \"The ID of the credential configuration\",\n        example: \"university-degree\",\n    })\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: \"The ID of the issuance configuration\",\n        example: \"123e4567-e89b-12d3-a456-426614174000\",\n    })\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description: \"The key ID used for signing this credential\",\n        example: \"signing-key-2024-01\",\n    })\n    keyID: string;\n\n    @ApiProperty({\n        description: \"The timestamp when the binding was created\",\n        example: \"2024-08-03T10:30:00Z\",\n    })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CredentialConfig.html":{"url":"entities/CredentialConfig.html","title":"entity - CredentialConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CredentialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage a credential configuration\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                claims\n                            \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                credentialIssuanceBindings\n                            \n                            \n                                    \n                                    \n                                disclosureFrame\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                embeddedDisclosurePolicy\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                keyBinding\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                keyId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lifeTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusManagement\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:112\n                        \n                    \n\n            \n                \n                    Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfigurationSupported\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:106\n                        \n                    \n\n            \n                \n                    OID4VCI issuer metadata credential configuration element.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentialIssuanceBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialIssuanceBinding[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmpty()@OneToMany(undefined, binding => binding.credentialConfig, {cascade: undefined, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:180\n                        \n                    \n\n            \n                \n                    Link to all the issuance config bindings that are using this credential.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        disclosureFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:118\n                        \n                    \n\n            \n                \n                    Disclosure frame for the sd jwt vc.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        embeddedDisclosurePolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EmbeddedDisclosurePolicy\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()@ValidateNested()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:189\n                        \n                    \n\n            \n                \n                    Embedded disclosure policy for the credential.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:92\n                        \n                    \n\n            \n                \n                    Unique identifier for the configuration to reference it.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmpty()@ManyToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:146\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        keyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsBoolean()@IsOptional()@Column('boolean', {default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        keyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:142\n                        \n                    \n\n            \n                \n                    Optional key ID for the credential configuration.\nThis is used to identify the key used for signing the credential.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lifeTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Column('int', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:162\n                        \n                    \n\n            \n                \n                    Optional livetime for the credential configuration in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SchemaResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:170\n                        \n                    \n\n            \n                \n                    json schema that is used during issuance for the validation of the claims.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusManagement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@Column('boolean', {default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:155\n                        \n                    \n\n            \n                \n                    Optional status management flag for the credential configuration.\nIf true, a status management will be applied to the credential.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmpty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:98\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VCT\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:125\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { CredentialConfigurationSupported } from \"@openid4vc/openid4vci\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsEmpty,\n    IsEnum,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToOne, OneToMany } from \"typeorm\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { VCT } from \"../../credentials-metadata/dto/credential-config.dto\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { CredentialIssuanceBinding } from \"../../issuance/entities/credential-issuance-binding.entity\";\n\n/**\n * Enum for the policy types.\n */\nexport enum PolicyType {\n    NONE = \"none\",\n    ALLOW_LIST = \"allowList\",\n    ROOT_OF_TRUST = \"rootOfTrust\",\n    ATTESTATION_BASED = \"attestationBased\",\n}\n/**\n * Embedded disclosure policy for the credential.\n */\nexport class EmbeddedDisclosurePolicy {\n    @IsEnum(PolicyType)\n    policy: PolicyType;\n}\n\n/**\n * Allow list disclosure policy for the credential.\n */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ALLOW_LIST;\n\n    @IsString({ each: true })\n    values: string[];\n}\n\n/**\n * Root of trust disclosure policy for the credential.\n */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ROOT_OF_TRUST;\n\n    @IsString()\n    values: string;\n}\n\n/**\n * None trust disclosure policy for the credential.\n */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.NONE;\n}\n\nexport class PolicyCredential {\n    @IsString()\n    format: string;\n    @IsObject()\n    meta: any;\n    @IsString()\n    iss: string;\n}\n\n/**\n * Attestation based disclosure policy for the credential.\n */\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ATTESTATION_BASED;\n\n    @IsArray()\n    values: PolicyCredential[];\n}\n\n/**\n * Entity to manage a credential configuration\n */\n@Entity()\nexport class CredentialConfig {\n    /**\n     * Unique identifier for the configuration to reference it.\n     */\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id: string;\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @IsEmpty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    //TODO: only allow display config for now\n    /**\n     * OID4VCI issuer metadata credential configuration element.\n     */\n    @Column(\"json\")\n    @IsObject()\n    config: CredentialConfigurationSupported;\n    /**\n     * Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    claims: Record;\n    /**\n     * Disclosure frame for the sd jwt vc.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    disclosureFrame: Record;\n    @Column(\"json\", { nullable: true })\n    /**\n     * VCT values that are hosted by this service.\n     */\n    @IsObject()\n    @IsOptional()\n    vct?: VCT;\n    @Column(\"json\", { nullable: true })\n\n    /**\n     * If true, the credential will be key bound.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    keyBinding?: boolean;\n\n    /**\n     * Optional key ID for the credential configuration.\n     * This is used to identify the key used for signing the credential.\n     */\n    @IsString()\n    @IsOptional()\n    keyId?: string;\n\n    @IsEmpty()\n    @ManyToOne(() => CertEntity)\n    key: CertEntity;\n\n    /**\n     * Optional status management flag for the credential configuration.\n     * If true, a status management will be applied to the credential.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    statusManagement?: boolean;\n    /**\n     * Optional livetime for the credential configuration in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    lifeTime?: number;\n\n    /**\n     * json schema that is used during issuance for the validation of the claims.\n     */\n    @IsObject()\n    @IsOptional()\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n    /**\n     * Link to all the issuance config bindings that are using this credential.\n     */\n    @IsEmpty()\n    @OneToMany(\n        () => CredentialIssuanceBinding,\n        (binding) => binding.credentialConfig,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    credentialIssuanceBindings: CredentialIssuanceBinding[];\n\n    /**\n     * Embedded disclosure policy for the credential.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialConfigMapping.html":{"url":"classes/CredentialConfigMapping.html","title":"class - CredentialConfigMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialConfigMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for mapping credential configurations in issuance.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the credential configuration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { AuthenticationConfigDto } from \"./authentication-config.dto\";\n\n/**\n * DTO for mapping credential configurations in issuance.\n */\nexport class CredentialConfigMapping {\n    /**\n     * Unique identifier for the credential configuration.\n     */\n    @IsString()\n    id: string;\n}\n\n//TODO: check if this can be integrated into the entity\n/**\n * DTO for Issuance Configuration.\n */\nexport class IssuanceDto {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @IsString()\n    id: string;\n\n    /**\n     * Description of the issuance configuration.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialConfigMapping)\n    credentialConfigs: CredentialConfigMapping[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     * This includes details like the authentication method and any required parameters.\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationConfigDto)\n    authenticationConfig: AuthenticationConfigDto;\n\n    /**\n     * Optional webhook configuration to receive claims during the issuance process.\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Optional webhook configuration to send the results of the notification response.\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    notifyWebhook?: WebhookConfig;\n\n    /**\n     * Value to determine the amount of credentials that are issued in a batch.\n     * Default is 1.\n     */\n    @IsNumber()\n    @IsOptional()\n    batch_size?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialConfigService.html":{"url":"injectables/CredentialConfigService.html","title":"injectable - CredentialConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credential-config/credential-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credential configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                import\n                            \n                            \n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(credentialConfigRepository: Repository, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credential-config/credential-config.service.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialConfigService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        credentialConfigRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for CredentialConfig entity.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:172\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the CredentialConfig entity to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the result of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:132\n                        \n                    \n\n\n            \n                \n                        Retrieves all credential configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CredentialConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:145\n                        \n                    \n\n\n            \n                \n                        Retrieves a credential configuration by its ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:33\n                        \n                    \n\n\n            \n                \n                        Imports the configs\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore(tenantId: string, config: CredentialConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:159\n                        \n                    \n\n\n            \n                \n                        Stores a credential configuration for a given tenant.\nIf the configuration already exists, it will be overwritten.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                config\n                                            \n                                                            CredentialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CredentialConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored CredentialConfig entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../../crypto/crypto.service\";\nimport { CredentialConfig } from \"../entities/credential.entity\";\n\n/**\n * Service for managing credential configurations.\n */\n@Injectable()\nexport class CredentialConfigService {\n    /**\n     * Constructor for CredentialConfigService.\n     * @param credentialConfigRepository - Repository for CredentialConfig entity.\n     */\n    constructor(\n        @InjectRepository(CredentialConfig)\n        private readonly credentialConfigRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Imports the configs\n     */\n    public async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"issuance/credentials\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    const id = file.replace(\".json\", \"\");\n                    payload.id = id;\n                    const exists = await this.getById(tenant.name, id).catch(\n                        () => false,\n                    );\n                    if (exists && !force) {\n                        continue; // Skip if config already exists and force is not set\n                    }\n\n                    // Validate the payload against CredentialConfig\n                    const config = plainToClass(CredentialConfig, payload);\n                    const validationErrors = await validate(config, {\n                        whitelist: true,\n                        forbidNonWhitelisted: true,\n                    });\n\n                    // Check if keyId is provided and if the certificate exists\n                    if (config.keyId) {\n                        const cert = await this.cryptoService.getCertEntry(\n                            tenant.name,\n                            config.keyId,\n                        );\n                        if (!cert) {\n                            this.logger.error(\n                                {\n                                    event: \"ValidationError\",\n                                    file,\n                                    tenant: tenant.name,\n                                    errors: [\n                                        {\n                                            property: \"keyId\",\n                                            constraints: {\n                                                isDefined:\n                                                    \"Key ID must be defined in the crypto service.\",\n                                            },\n                                            value: config.keyId,\n                                        },\n                                    ],\n                                },\n                                `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                            );\n                            continue; // Skip this invalid config\n                        }\n                        config.key = cert;\n                    }\n\n                    if (validationErrors.length > 0) {\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n\n                    await this.store(tenant.name, config);\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} credential configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Retrieves all credential configurations for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @returns A promise that resolves to an array of CredentialConfig entities.\n     */\n    get(tenantId: string) {\n        return this.credentialConfigRepository.find({\n            where: { tenantId },\n            relations: [\"key\"],\n        });\n    }\n\n    /**\n     * Retrieves a credential configuration by its ID for a given tenant.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    getById(tenantId: string, id: string) {\n        return this.credentialConfigRepository.findOneByOrFail({\n            id,\n            tenantId,\n        });\n    }\n\n    /**\n     * Stores a credential configuration for a given tenant.\n     * If the configuration already exists, it will be overwritten.\n     * @param tenantId - The ID of the tenant.\n     * @param config - The CredentialConfig entity to store.\n     * @returns A promise that resolves to the stored CredentialConfig entity.\n     */\n    store(tenantId: string, config: CredentialConfig) {\n        return this.credentialConfigRepository.save({\n            ...config,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a credential configuration for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @param id - The ID of the CredentialConfig entity to delete.\n     * @returns A promise that resolves to the result of the delete operation.\n     */\n    delete(tenantId: string, id: string) {\n        return this.credentialConfigRepository.delete({\n            id,\n            tenantId,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CredentialIssuanceBinding.html":{"url":"entities/CredentialIssuanceBinding.html","title":"entity - CredentialIssuanceBinding","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CredentialIssuanceBinding\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/entities/credential-issuance-binding.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Junction entity for the many-to-many relationship between CredentialConfig and IssuanceConfig\nwith additional keyID attribute for specifying which key should be used for signing.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                credentialConfig\n                            \n                            \n                                    \n                                credentialConfigId\n                            \n                            \n                                    \n                                issuanceConfig\n                            \n                            \n                                    \n                                issuanceConfigId\n                            \n                            \n                                    \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmpty()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:51\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, credentialConfig => credentialConfig.credentialIssuanceBindings, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:34\n                        \n                    \n\n            \n                \n                    Reference to the credential configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IssuanceConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, issuanceConfig => issuanceConfig.credentialIssuanceBindings, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:44\n                        \n                    \n\n            \n                \n                    Reference to the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmpty()@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/credential-issuance-binding.entity.ts:58\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { IsEmpty } from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    PrimaryColumn,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { CredentialConfig } from \"../../credentials/entities/credential.entity\";\nimport { IssuanceConfig } from \"./issuance-config.entity\";\n\n//TODO: check if we really need this table and not just go with a many-to-many relationship\n/**\n * Junction entity for the many-to-many relationship between CredentialConfig and IssuanceConfig\n * with additional keyID attribute for specifying which key should be used for signing.\n */\n@Entity()\nexport class CredentialIssuanceBinding {\n    @PrimaryColumn()\n    credentialConfigId: string;\n\n    @PrimaryColumn()\n    issuanceConfigId: string;\n\n    /**\n     * Reference to the credential configuration.\n     */\n    @ManyToOne(\n        () => CredentialConfig,\n        (credentialConfig) => credentialConfig.credentialIssuanceBindings,\n        { onDelete: \"CASCADE\" },\n    )\n    credentialConfig: CredentialConfig;\n\n    /**\n     * Reference to the issuance configuration.\n     */\n    @ManyToOne(\n        () => IssuanceConfig,\n        (issuanceConfig) => issuanceConfig.credentialIssuanceBindings,\n        { onDelete: \"CASCADE\" },\n    )\n    issuanceConfig: IssuanceConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @IsEmpty()\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @IsEmpty()\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuanceBindingResponseDto.html":{"url":"classes/CredentialIssuanceBindingResponseDto.html","title":"class - CredentialIssuanceBindingResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuanceBindingResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the response of a credential-issuance binding.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                credentialConfigId\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                issuanceConfigId\n                            \n                            \n                                    \n                                keyID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The timestamp when the binding was created', example: '2024-08-03T10:30:00Z'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:75\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the credential configuration', example: 'university-degree'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The unique identifier of the binding', example: '123e4567-e89b-12d3-a456-426614174000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceConfigId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the issuance configuration', example: '123e4567-e89b-12d3-a456-426614174000'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        keyID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The key ID used for signing this credential', example: 'signing-key-2024-01'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:69\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsUUID } from \"class-validator\";\n\n/**\n * DTO for creating a new credential-issuance binding.\n */\nexport class CreateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: \"The ID of the credential configuration\",\n        example: \"university-degree\",\n    })\n    @IsString()\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: \"The ID of the issuance configuration\",\n        example: \"123e4567-e89b-12d3-a456-426614174000\",\n    })\n    @IsUUID()\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description:\n            \"The key ID to use for signing this credential in this issuance config\",\n        example: \"signing-key-2024-01\",\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for updating the key ID of an existing binding.\n */\nexport class UpdateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: \"The new key ID to use for signing this credential\",\n        example: \"signing-key-2024-02\",\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for the response of a credential-issuance binding.\n */\nexport class CredentialIssuanceBindingResponseDto {\n    @ApiProperty({\n        description: \"The unique identifier of the binding\",\n        example: \"123e4567-e89b-12d3-a456-426614174000\",\n    })\n    id: string;\n\n    @ApiProperty({\n        description: \"The ID of the credential configuration\",\n        example: \"university-degree\",\n    })\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: \"The ID of the issuance configuration\",\n        example: \"123e4567-e89b-12d3-a456-426614174000\",\n    })\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description: \"The key ID used for signing this credential\",\n        example: \"signing-key-2024-01\",\n    })\n    keyID: string;\n\n    @ApiProperty({\n        description: \"The timestamp when the binding was created\",\n        example: \"2024-08-03T10:30:00Z\",\n    })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuerMetadataDto.html":{"url":"classes/CredentialIssuerMetadataDto.html","title":"class - CredentialIssuerMetadataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuerMetadataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/credential-issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the metadata for a credential issuer.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_server\n                            \n                            \n                                authorization_servers\n                            \n                            \n                                batch_credential_issuance\n                            \n                            \n                                credential_configurations_supported\n                            \n                            \n                                credential_endpoint\n                            \n                            \n                                credential_issuer\n                            \n                            \n                                display\n                            \n                            \n                                notification_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:41\n                        \n                    \n\n            \n                \n                    The URL of the preferred authorization server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_servers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:12\n                        \n                    \n\n            \n                \n                    List of authorization servers that support the credential issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        batch_credential_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:24\n                        \n                    \n\n            \n                \n                    Information about batch credential issuance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_configurations_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:37\n                        \n                    \n\n            \n                \n                    Object of credentials configurations supported by the issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:16\n                        \n                    \n\n            \n                \n                    The URL of the credential issuance endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:8\n                        \n                    \n\n            \n                \n                    The issuer identifier, typically a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:33\n                        \n                    \n\n            \n                \n                    Display information for the credentials that are getting issued.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notification_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:20\n                        \n                    \n\n            \n                \n                    The URL of the notification endpoint for credential issuance.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialIssuerMetadataDto {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    credential_issuer: string;\n    /**\n     * List of authorization servers that support the credential issuer.\n     */\n    authorization_servers: string[];\n    /**\n     * The URL of the credential issuance endpoint.\n     */\n    credential_endpoint: string;\n    /**\n     * The URL of the notification endpoint for credential issuance.\n     */\n    notification_endpoint: string;\n    /**\n     * Information about batch credential issuance.\n     */\n    batch_credential_issuance: {\n        /**\n         * Amount of elements in a batch.\n         */\n        batch_size: number;\n    };\n    /**\n     * Display information for the credentials that are getting issued.\n     */\n    display: Array;\n    /**\n     * Object of credentials configurations supported by the issuer.\n     */\n    credential_configurations_supported: any;\n    /**\n     * The URL of the preferred authorization server.\n     */\n    authorization_server: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsController.html":{"url":"controllers/CredentialsController.html","title":"controller - CredentialsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/credentials\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing credential configurations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getConfigs\n                            \n                            \n                                    \n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Deletes an credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getConfigs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigs(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Returns the credential configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(config: CredentialConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Stores the credential configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            CredentialConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { CredentialConfigService } from \"./credential-config/credential-config.service\";\nimport { CredentialConfig } from \"./entities/credential.entity\";\n\n/**\n * Controller for managing credential configurations.\n */\n@ApiTags(\"Issuer management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"issuer-management/credentials\")\nexport class CredentialsController {\n    /**\n     * Initializes the CredentialsController with the CredentialConfigService.\n     * @param credentialsService\n     */\n    constructor(private readonly credentialsService: CredentialConfigService) {}\n\n    /**\n     * Returns the credential configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getConfigs(@Token() user: TokenPayload) {\n        return this.credentialsService.get(user.sub);\n    }\n\n    /**\n     * Stores the credential configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeCredentialConfiguration(\n        @Body() config: CredentialConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.store(user.sub, config);\n    }\n\n    /**\n     * Deletes an credential configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteIssuanceConfiguration(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.delete(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsMetadataController.html":{"url":"controllers/CredentialsMetadataController.html","title":"controller - CredentialsMetadataController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsMetadataController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/credentials-metadata.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/credentials-metadata\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n            \n                \n                        \n                    schema(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('schema/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n            \n                \n                        \n                    vct(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vct/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:15\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the credential configuration.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from \"@nestjs/common\";\nimport { ApiExcludeController } from \"@nestjs/swagger\";\nimport { CredentialsService } from \"../credentials/credentials.service\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":tenantId/credentials-metadata\")\nexport class CredentialsMetadataController {\n    constructor(private readonly credentialsService: CredentialsService) {}\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n     * @param id - The identifier of the credential configuration.\n     */\n    @Get(\"vct/:id\")\n    vct(@Param(\"id\") id: string, @Param(\"tenantId\") tenantId: string) {\n        return this.credentialsService.getVCT(id, tenantId);\n    }\n\n    /**\n     * Retrieves the schema for a specific credential\n     * @param id\n     * @returns\n     */\n    @Get(\"schema/:id\")\n    schema(@Param(\"id\") id: string, @Param(\"tenantId\") tenantId: string) {\n        return this.credentialsService.getSchema(id, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialsService.html":{"url":"injectables/CredentialsService.html","title":"injectable - CredentialsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credentials and their configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                getCredentialConfigurationSupported\n                            \n                            \n                                    Async\n                                getSchema\n                            \n                            \n                                    Async\n                                getVCT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, configService: ConfigService, statusListService: StatusListService, credentialConfigRepo: Repository, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credentials.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(credentialConfigurationId: string, holderCnf: Jwk, session: Session, issuanceConfig: IssuanceConfig, claims?: Record>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Issues a credential based on the provided configuration and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                holderCnf\n                                            \n                                                        Jwk\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuanceConfig\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                claims\n                                            \n                                                        Record>\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredentialConfigurationSupported\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredentialConfigurationSupported(session: Session, issuanceConfig: IssuanceConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration that is required for oid4vci\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuanceConfig\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSchema(credentialConfigurationId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:236\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVCT\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVCT(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:210\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport type { Jwk } from \"@openid4vc/oauth2\";\nimport { CredentialConfigurationSupported } from \"@openid4vc/openid4vci\";\nimport { digest, generateSalt } from \"@sd-jwt/crypto-nodejs\";\nimport { JWTwithStatusListPayload } from \"@sd-jwt/jwt-status-list\";\nimport { SDJwtVcInstance } from \"@sd-jwt/sd-jwt-vc\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { CryptoImplementationService } from \"../../crypto/key/crypto-implementation/crypto-implementation.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { VCT } from \"../credentials-metadata/dto/credential-config.dto\";\nimport { SchemaResponse } from \"../credentials-metadata/dto/schema-response.dto\";\nimport { IssuanceConfig } from \"../issuance/entities/issuance-config.entity\";\nimport { StatusListService } from \"../status-list/status-list.service\";\nimport { CredentialConfig } from \"./entities/credential.entity\";\n\n/**\n * Service for managing credentials and their configurations.\n */\n@Injectable()\nexport class CredentialsService {\n    /**\n     * Constructor for CredentialsService.\n     * @param cryptoService\n     * @param configService\n     * @param statusListService\n     * @param credentialConfigRepo\n     * @param cryptoImplementationService\n     */\n    constructor(\n        private cryptoService: CryptoService,\n        private configService: ConfigService,\n        private statusListService: StatusListService,\n        @InjectRepository(CredentialConfig)\n        private credentialConfigRepo: Repository,\n        private cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Returns the credential configuration that is required for oid4vci\n     * @param tenantId\n     * @returns\n     */\n    async getCredentialConfigurationSupported(\n        session: Session,\n        issuanceConfig: IssuanceConfig,\n    ): Promise> {\n        const credential_configurations_supported: Record = {};\n\n        const configs = await this.credentialConfigRepo.findBy({\n            tenantId: session.tenantId,\n        });\n\n        //add key binding when required:\n        const kb = {\n            proof_types_supported: {\n                jwt: {\n                    proof_signing_alg_values_supported: [\n                        this.cryptoImplementationService.getAlg(),\n                    ],\n                },\n            },\n            credential_signing_alg_values_supported: [\n                this.cryptoImplementationService.getAlg(),\n            ],\n            cryptographic_binding_methods_supported: [\"jwk\"],\n        };\n\n        for (const value of configs) {\n            const isUsed = issuanceConfig.credentialIssuanceBindings.find(\n                (binding) => binding.credentialConfigId === value.id,\n            );\n            value.config.vct = `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.tenantId}/credentials/vct/${value.id}`;\n\n            if (value.embeddedDisclosurePolicy) {\n                delete (value.embeddedDisclosurePolicy as any).$schema;\n                value.config.disclosure_policy = value.embeddedDisclosurePolicy;\n            }\n\n            if (isUsed?.credentialConfig)\n                value.config = {\n                    ...value.config,\n                    ...kb,\n                };\n            credential_configurations_supported[value.id] = value.config;\n        }\n        return credential_configurations_supported;\n    }\n\n    /**\n     * Issues a credential based on the provided configuration and session.\n     * @param credentialConfigurationId\n     * @param holderCnf\n     * @param session\n     * @returns\n     */\n    async getCredential(\n        credentialConfigurationId: string,\n        holderCnf: Jwk,\n        session: Session,\n        issuanceConfig: IssuanceConfig,\n        claims?: Record>,\n    ) {\n        const credentialConfiguration = await this.credentialConfigRepo\n            .findOneByOrFail({\n                id: credentialConfigurationId,\n                tenantId: session.tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialConfigurationId} not found`,\n                );\n            });\n        //use passed claims, if not provided try the ones stored in the session and the use default ones from the config is provided\n        claims =\n            claims ??\n            session.credentialPayload?.claims?.[credentialConfigurationId] ??\n            credentialConfiguration.claims;\n        const disclosureFrame = credentialConfiguration.disclosureFrame;\n\n        const binding = issuanceConfig.credentialIssuanceBindings.find(\n            (binding) =>\n                binding.credentialConfigId === credentialConfigurationId,\n        );\n\n        const keyId =\n            binding?.credentialConfig?.keyId ??\n            (await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"signing\",\n            ));\n\n        const sdjwt = new SDJwtVcInstance({\n            signer: await this.cryptoService.keyService.signer(\n                session.tenantId,\n                keyId,\n            ),\n            signAlg: this.cryptoImplementationService.getAlg(),\n            hasher: digest,\n            hashAlg: \"sha-256\",\n            saltGenerator: generateSalt,\n            loadTypeMetadataFormat: true,\n        });\n\n        const credentialConfig =\n            await this.credentialConfigRepo.findOneByOrFail({\n                id: credentialConfigurationId,\n                tenantId: session.tenantId,\n            });\n\n        // If status management is enabled, create a status entry\n        let status: JWTwithStatusListPayload | undefined;\n        if (credentialConfig.statusManagement) {\n            status = await this.statusListService.createEntry(\n                session,\n                credentialConfigurationId,\n            );\n        }\n\n        const iat = Math.round(new Date().getTime() / 1000);\n        // Set expiration time if lifeTime is defined\n        let exp: number | undefined;\n        if (credentialConfig.lifeTime) {\n            exp = iat + credentialConfig.lifeTime;\n        }\n\n        // If key binding is enabled, include the JWK in the cnf\n        let cnf: { jwk: Jwk } | undefined;\n\n        if (credentialConfig.keyBinding) {\n            cnf = {\n                jwk: holderCnf,\n            };\n        }\n\n        return sdjwt.issue(\n            {\n                iss: this.configService.getOrThrow(\"PUBLIC_URL\"),\n                iat,\n                exp,\n                vct: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.tenantId}/credentials/vct/${credentialConfigurationId}`,\n                cnf,\n                ...claims,\n                ...status,\n            },\n            disclosureFrame,\n            {\n                header: {\n                    x5c: await this.cryptoService.getCertChain(\n                        \"signing\",\n                        session.tenantId,\n                    ),\n                    alg: this.cryptoImplementationService.getAlg(),\n                },\n            },\n        );\n    }\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n     * @param credentialId\n     * @param tenantId\n     * @returns\n     */\n    async getVCT(credentialId: string, tenantId: string): Promise {\n        const credentialConfig = await this.credentialConfigRepo\n            .findOneByOrFail({\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialId} not found`,\n                );\n            });\n        if (!credentialConfig.vct) {\n            throw new ConflictException(\n                `VCT for credential configuration with id ${credentialId} not found`,\n            );\n        }\n        const host = this.configService.getOrThrow(\"PUBLIC_URL\");\n        credentialConfig.vct.vct = `${host}/${tenantId}/credentials-metadata/vct/${credentialConfig.id}`;\n        return credentialConfig.vct;\n    }\n\n    /**\n     * Retrieves the schema for a specific credential configuration.\n     * @param id\n     * @param tenantId\n     * @returns\n     */\n    async getSchema(\n        credentialConfigurationId: string,\n        tenantId: string,\n    ): Promise {\n        const credentialConfig =\n            await this.credentialConfigRepo.findOneByOrFail({\n                tenantId,\n            });\n        if (!credentialConfig) {\n            throw new ConflictException(\n                `Credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        if (!credentialConfig.schema) {\n            throw new ConflictException(\n                `Schema for credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        return credentialConfig.schema;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoImplementatationModule.html":{"url":"modules/CryptoImplementatationModule.html","title":"module - CryptoImplementatationModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoImplementatationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoImplementatationModule\n\n\n\ncluster_CryptoImplementatationModule_providers\n\n\n\ncluster_CryptoImplementatationModule_exports\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\n\n\nCryptoImplementatationModule\n\nCryptoImplementatationModule\n\nCryptoImplementationService  -->\n\nCryptoImplementatationModule->CryptoImplementationService \n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoImplementatationModule -->\n\nCryptoImplementationService->CryptoImplementatationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoImplementationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoImplementationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport * as Joi from \"joi\";\nimport { CryptoImplementationService } from \"./crypto-implementation.service\";\n\nexport const CRYPTO_VALIDATION_SCHEMA = {\n    CRYPTO_ALG: Joi.string().valid(\"ES256\").default(\"ES256\"),\n};\n\n@Global()\n@Module({\n    imports: [ConfigModule],\n    providers: [CryptoImplementationService],\n    exports: [CryptoImplementationService],\n})\nexport class CryptoImplementatationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoImplementation.html":{"url":"interfaces/CryptoImplementation.html","title":"interface - CryptoImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface to imeplement different algorithms.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alg\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        generateKeyPair\n                                    \n                                \n                                \n                                    \n                                        getSigner\n                                    \n                                \n                                \n                                    \n                                        getVerifier\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyPair\n                        \n                    \n                \n            \n            \n                \ngenerateKeyPair()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a new keypair\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSigner\n                        \n                    \n                \n            \n            \n                \ngetSigner(privateKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:24\n                        \n                    \n\n\n            \n                \n                        creates a signer based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVerifier\n                        \n                    \n                \n            \n            \n                \ngetVerifier(publicKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:29\n                        \n                    \n\n\n            \n                \n                        creates a verifier based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                publicKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type KeyPair = {\n    publicKey: JsonWebKey;\n    privateKey: JsonWebKey;\n};\n\ntype Signer = (data: string) => Promise;\n\ntype Verifier = (data: string, signature: string) => Promise;\n\n/**\n * Generic interface to imeplement different algorithms.\n */\nexport interface CryptoImplementation {\n    //name of the algorithm\n    alg: string;\n    /**\n     * Generates a new keypair\n     */\n    generateKeyPair(): Promise;\n    /**\n     * creates a signer based on the passed key.\n     * @param privateKeyJWK\n     */\n    getSigner(privateKeyJWK: JsonWebKey): Promise;\n    /**\n     * creates a verifier based on the passed key.\n     * @param publicKeyJWK\n     */\n    getVerifier(publicKeyJWK: JsonWebKey): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoImplementationService.html":{"url":"injectables/CryptoImplementationService.html","title":"injectable - CryptoImplementationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoImplementationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlg\n                            \n                            \n                                getCrypto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configServie: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configServie\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlg\n                        \n                    \n                \n            \n            \n                \ngetAlg()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Return the algorithm that is used for the crypto operations like signing.\n\n\n                        \n                            Returns :         CryptoType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCrypto\n                        \n                    \n                \n            \n            \n                \ngetCrypto(alg)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Returns the crypto implementation based on the configured algorithm.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                alg\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.configServie.get(\"CRYPTO_ALG\")\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CryptoImplementation\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ES256 } from \"@sd-jwt/crypto-nodejs\";\nimport { CryptoImplementation } from \"./crypto-implementation\";\nimport { ED25519 } from \"./ed25519\";\n\nexport type CryptoType = \"ES256\" | \"Ed25519\";\n\n@Injectable()\nexport class CryptoImplementationService {\n    constructor(private configServie: ConfigService) {}\n\n    /**\n     * Return the algorithm that is used for the crypto operations like signing.\n     * @returns\n     */\n    getAlg(): CryptoType {\n        return this.configServie.get(\"CRYPTO_ALG\") as CryptoType;\n    }\n\n    /**\n     * Returns the crypto implementation based on the configured algorithm.\n     * @param alg\n     * @returns\n     */\n    getCrypto(\n        alg = this.configServie.get(\"CRYPTO_ALG\"),\n    ): CryptoImplementation {\n        switch (alg) {\n            case \"Ed25519\":\n                return ED25519;\n            case \"ES256\":\n                return ES256;\n            default:\n                throw new Error(`Unsupported algorithm ${alg}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoModule.html":{"url":"modules/CryptoModule.html","title":"module - CryptoModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\n\nCryptoService \n\nCryptoService \n\n\n\nEncryptionService \n\nEncryptionService \n\n\n\nCryptoModule\n\nCryptoModule\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/crypto.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            KeyController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoService } from \"./crypto.service\";\nimport { EncryptionService } from \"./encryption/encryption.service\";\nimport { CertEntity } from \"./key/entities/cert.entity\";\nimport { KeyEntity } from \"./key/entities/keys.entity\";\nimport { KeyController } from \"./key/key.controller\";\n\n@Module({\n    imports: [TypeOrmModule.forFeature([CertEntity, KeyEntity])],\n    controllers: [KeyController],\n    providers: [CryptoService, EncryptionService],\n    exports: [CryptoService, EncryptionService],\n})\nexport class CryptoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBKeyService.html":{"url":"classes/DBKeyService.html","title":"class - DBKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/adapters/db-key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The key service is responsible for managing the keys of the issuer.\n\n            \n\n            \n                Extends\n            \n            \n                            KeyService\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                crypto\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                getKid\n                            \n                            \n                                    Private\n                                    Async\n                                getPrivateKey\n                            \n                            \n                                    Private\n                                getPubFromPrivateKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                import\n                            \n                            \n                                init\n                            \n                            \n                                    Async\n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoImplementationService, certRepository: Repository, keyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/adapters/db-key.service.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/adapters/db-key.service.ts:28\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:86\n\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair and wrtites the private key to the file system.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string, type: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:136\n\n                        \n                    \n\n\n            \n                \n                        Gets one key id for the tenant.\nIf no key exists, it will throw an error.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    \"signing\"\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPrivateKey(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Get the keys from the file system or generate them if they do not exist\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getPubFromPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPubFromPrivateKey(privateKey: JWK_EC_Private)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Get the public key from the private key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKey\n                                            \n                                                        JWK_EC_Private\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         EC_Public\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:152\n\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        import\n                        \n                    \n                \n            \n            \n                \nimport(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:46\n\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit(tenant: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:77\n\n                        \n                    \n\n\n            \n                \n                        Initialize the key service for a specific tenant.\nThis will create the keys if they do not exist.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:109\n\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JWTHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:195\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:86\n\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { Signer } from \"@sd-jwt/types\";\nimport {\n    CryptoKey,\n    exportJWK,\n    exportSPKI,\n    importJWK,\n    JWK,\n    JWK_EC_Private,\n    JWTHeaderParameters,\n    JWTPayload,\n    SignJWT,\n} from \"jose\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\nimport { CryptoImplementation } from \"../crypto-implementation/crypto-implementation\";\nimport { CryptoImplementationService } from \"../crypto-implementation/crypto-implementation.service\";\nimport { KeyImportDto } from \"../dto/key-import.dto\";\nimport { CertEntity, CertificateType } from \"../entities/cert.entity\";\nimport { KeyEntity } from \"../entities/keys.entity\";\nimport { KeyService } from \"../key.service\";\n\n/**\n * The key service is responsible for managing the keys of the issuer.\n */\nexport class DBKeyService extends KeyService {\n    private crypto: CryptoImplementation;\n\n    constructor(\n        configService: ConfigService,\n        private cryptoService: CryptoImplementationService,\n        certRepository: Repository,\n        private keyRepository: Repository,\n    ) {\n        super(configService, certRepository);\n        this.crypto = cryptoService.getCrypto();\n    }\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     * @returns\n     */\n    import(tenantId: string, body: KeyImportDto): Promise {\n        const privateKey = body.privateKey;\n        return this.keyRepository\n            .save({\n                id: privateKey.kid,\n                tenantId,\n                key: privateKey,\n            })\n            .then(() => privateKey.kid);\n    }\n\n    /**\n     * Get the public key from the private key.\n     * @param privateKey\n     * @returns\n     */\n    private getPubFromPrivateKey(privateKey: JWK_EC_Private): EC_Public {\n        const {\n            d: _d,\n            key_ops: _key_ops,\n            ext: _ext,\n            ...publicKey\n        } = privateKey;\n        return publicKey as EC_Public;\n    }\n\n    /**\n     * Initialize the key service for a specific tenant.\n     * This will create the keys if they do not exist.\n     * @param tenant\n     */\n    init(tenant: string): Promise {\n        return this.getKid(tenant).catch(async () => this.create(tenant));\n    }\n\n    /**\n     * Creates a new keypair and wrtites the private key to the file system.\n     * @param tenantId\n     * @returns key id of the generated key.\n     */\n    async create(tenantId: string): Promise {\n        const keys = await this.crypto.generateKeyPair();\n        const privateKey = keys.privateKey as JWK;\n        //add a random key id for reference\n        privateKey.kid = v4();\n        privateKey.alg = this.crypto.alg;\n\n        //remove exportable and key_ops from the private key\n        delete privateKey.ext;\n        delete privateKey.key_ops;\n\n        return this.keyRepository\n            .save({\n                id: privateKey.kid,\n                tenantId,\n                key: privateKey,\n            })\n            .then(() => privateKey.kid!);\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    async signer(tenantId: string, keyId?: string): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n        return this.crypto.getSigner(privateKey);\n    }\n\n    /**\n     * Get the keys from the file system or generate them if they do not exist\n     * @returns\n     */\n    private async getPrivateKey(tenantId: string, keyId?: string) {\n        keyId =\n            keyId ||\n            (await this.getKid(tenantId).catch(() => this.create(tenantId)));\n\n        return this.keyRepository\n            .findOneByOrFail({\n                id: keyId,\n                tenantId,\n            })\n            .then((key) => key.key);\n    }\n\n    /**\n     * Gets one key id for the tenant.\n     * If no key exists, it will throw an error.\n     * @returns\n     */\n    getKid(\n        tenantId: string,\n        type: CertificateType = \"signing\",\n    ): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                type,\n            })\n            .then((cert) => cert.id);\n    }\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    getPublicKey(type: \"jwk\", tenantId: string, keyId?: string): Promise;\n    getPublicKey(\n        type: \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    async getPublicKey(\n        type: \"pem\" | \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n\n        // Convert the private key to a public key\n        // First import the private key as a CryptoKey\n        const privateKeyInstance = await importJWK(\n            privateKey,\n            this.cryptoService.getAlg(),\n            { extractable: true },\n        );\n\n        // Export it as a JWK to get the public key components\n        const privateKeyJWK = (await exportJWK(\n            privateKeyInstance,\n        )) as JWK_EC_Private;\n\n        // Remove private key components to get only the public key\n\n        const publicKey = this.getPubFromPrivateKey(privateKeyJWK);\n\n        if (type === \"pem\") {\n            // Import the public key and export as PEM\n            const publicKeyInstance = await importJWK(\n                publicKey,\n                this.cryptoService.getAlg(),\n                { extractable: true },\n            );\n            return exportSPKI(publicKeyInstance as CryptoKey);\n        } else {\n            return publicKey;\n        }\n    }\n\n    async signJWT(\n        payload: JWTPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n        const privateKeyInstance = (await importJWK(privateKey)) as CryptoKey;\n        return new SignJWT(payload)\n            .setProtectedHeader(header)\n            .sign(privateKeyInstance);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule, TypeOrmModuleOptions } from \"@nestjs/typeorm\";\nimport * as Joi from \"joi\";\nimport { join } from \"path\";\n\nexport const DB_VALIDATION_SCHEMA = {\n    DB_TYPE: Joi.string().valid(\"sqlite\", \"postgres\").default(\"sqlite\"),\n    DB_HOST: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n};\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (\n                configService: ConfigService,\n            ): TypeOrmModuleOptions => {\n                const dbType = configService.get(\n                    \"DB_TYPE\",\n                );\n\n                const commonOptions = {\n                    synchronize: true,\n                    autoLoadEntities: true,\n                };\n\n                if (dbType === \"postgres\") {\n                    return {\n                        type: \"postgres\",\n                        host: configService.getOrThrow(\"DB_HOST\"),\n                        port: configService.getOrThrow(\"DB_PORT\"),\n                        username:\n                            configService.getOrThrow(\"DB_USERNAME\"),\n                        password:\n                            configService.getOrThrow(\"DB_PASSWORD\"),\n                        database:\n                            configService.getOrThrow(\"DB_DATABASE\"),\n                        ...commonOptions,\n                    };\n                }\n\n                return {\n                    type: \"sqlite\",\n                    database: join(\n                        configService.getOrThrow(\"FOLDER\"),\n                        \"service.db\",\n                    ),\n                    ...commonOptions,\n                };\n            },\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DisplayEntity.html":{"url":"entities/DisplayEntity.html","title":"entity - DisplayEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DisplayEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/entities/display.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/entities/display.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/entities/display.entity.ts:18\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\n\ntype DisplayInfo = {\n    name: string;\n    locale: string;\n    logo: {\n        uri: string;\n        url: string;\n    };\n};\n\n@Entity()\nexport class DisplayEntity {\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EC_Public.html":{"url":"classes/EC_Public.html","title":"class - EC_Public","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EC_Public\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\nThis class is used to define the structure of EC public keys in JWK format.\n\n            \n\n\n            \n                Implements\n            \n            \n                            JWK_EC_Public\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crv\n                            \n                            \n                                kty\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The algorithm intended for use with the key, such as 'ES256'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        kty\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The key type, which is always 'EC' for Elliptic Curve keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:19\n                        \n                    \n\n            \n                \n                    The x coordinate of the EC public key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    The y coordinate of the EC public key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from \"jose\";\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: \"EC\";\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmbeddedDisclosurePolicy.html":{"url":"classes/EmbeddedDisclosurePolicy.html","title":"class - EmbeddedDisclosurePolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmbeddedDisclosurePolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Embedded disclosure policy for the credential.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                policy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(PolicyType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CredentialConfigurationSupported } from \"@openid4vc/openid4vci\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsEmpty,\n    IsEnum,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToOne, OneToMany } from \"typeorm\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { VCT } from \"../../credentials-metadata/dto/credential-config.dto\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { CredentialIssuanceBinding } from \"../../issuance/entities/credential-issuance-binding.entity\";\n\n/**\n * Enum for the policy types.\n */\nexport enum PolicyType {\n    NONE = \"none\",\n    ALLOW_LIST = \"allowList\",\n    ROOT_OF_TRUST = \"rootOfTrust\",\n    ATTESTATION_BASED = \"attestationBased\",\n}\n/**\n * Embedded disclosure policy for the credential.\n */\nexport class EmbeddedDisclosurePolicy {\n    @IsEnum(PolicyType)\n    policy: PolicyType;\n}\n\n/**\n * Allow list disclosure policy for the credential.\n */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ALLOW_LIST;\n\n    @IsString({ each: true })\n    values: string[];\n}\n\n/**\n * Root of trust disclosure policy for the credential.\n */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ROOT_OF_TRUST;\n\n    @IsString()\n    values: string;\n}\n\n/**\n * None trust disclosure policy for the credential.\n */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.NONE;\n}\n\nexport class PolicyCredential {\n    @IsString()\n    format: string;\n    @IsObject()\n    meta: any;\n    @IsString()\n    iss: string;\n}\n\n/**\n * Attestation based disclosure policy for the credential.\n */\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ATTESTATION_BASED;\n\n    @IsArray()\n    values: PolicyCredential[];\n}\n\n/**\n * Entity to manage a credential configuration\n */\n@Entity()\nexport class CredentialConfig {\n    /**\n     * Unique identifier for the configuration to reference it.\n     */\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id: string;\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @IsEmpty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    //TODO: only allow display config for now\n    /**\n     * OID4VCI issuer metadata credential configuration element.\n     */\n    @Column(\"json\")\n    @IsObject()\n    config: CredentialConfigurationSupported;\n    /**\n     * Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    claims: Record;\n    /**\n     * Disclosure frame for the sd jwt vc.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    disclosureFrame: Record;\n    @Column(\"json\", { nullable: true })\n    /**\n     * VCT values that are hosted by this service.\n     */\n    @IsObject()\n    @IsOptional()\n    vct?: VCT;\n    @Column(\"json\", { nullable: true })\n\n    /**\n     * If true, the credential will be key bound.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    keyBinding?: boolean;\n\n    /**\n     * Optional key ID for the credential configuration.\n     * This is used to identify the key used for signing the credential.\n     */\n    @IsString()\n    @IsOptional()\n    keyId?: string;\n\n    @IsEmpty()\n    @ManyToOne(() => CertEntity)\n    key: CertEntity;\n\n    /**\n     * Optional status management flag for the credential configuration.\n     * If true, a status management will be applied to the credential.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    statusManagement?: boolean;\n    /**\n     * Optional livetime for the credential configuration in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    lifeTime?: number;\n\n    /**\n     * json schema that is used during issuance for the validation of the claims.\n     */\n    @IsObject()\n    @IsOptional()\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n    /**\n     * Link to all the issuance config bindings that are using this credential.\n     */\n    @IsEmpty()\n    @OneToMany(\n        () => CredentialIssuanceBinding,\n        (binding) => binding.credentialConfig,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    credentialIssuanceBindings: CredentialIssuanceBinding[];\n\n    /**\n     * Embedded disclosure policy for the credential.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/encryption/encryption.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling encryption and decryption operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decryptJwe\n                            \n                            \n                                getEncryptionPublicKey\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(keyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/encryption/encryption.service.ts:13\n                            \n                        \n\n                \n                    \n                            Constructor for the EncryptionService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        keyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decryptJwe\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptJwe(response: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:47\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Encrypts a response using JWE (JSON Web Encryption).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe response to encrypt.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to encrypt the response.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The encrypted response as a JWE string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEncryptionPublicKey\n                        \n                    \n                \n            \n            \n                \ngetEncryptionPublicKey(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Retrieves the public encryption key for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The public encryption key as a JWK.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Initializes the encryption keys for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to initialize the keys.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport e from \"express\";\nimport { exportJWK, generateKeyPair, importJWK, JWK, jwtDecrypt } from \"jose\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport { KeyEntity } from \"../key/entities/keys.entity\";\n\n/**\n * Service for handling encryption and decryption operations.\n */\n@Injectable()\nexport class EncryptionService {\n    /**\n     * Constructor for the EncryptionService.\n     * @param configService\n     */\n    constructor(\n        @InjectRepository(KeyEntity)\n        private keyRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the encryption keys for a given tenant.\n     * @param tenantId - The ID of the tenant for which to initialize the keys.\n     */\n    async onTenantInit(tenantId: string) {\n        const privateKey = await generateKeyPair(\"ECDH-ES\", {\n            crv: \"P-256\",\n            extractable: true,\n        }).then(async (secret) => exportJWK(secret.privateKey));\n\n        this.keyRepository.save({\n            id: v4(),\n            tenantId,\n            key: privateKey,\n            usage: \"encrypt\",\n        });\n    }\n\n    /**\n     * Encrypts a response using JWE (JSON Web Encryption).\n     * @param response - The response to encrypt.\n     * @param tenantId - The ID of the tenant for which to encrypt the response.\n     * @returns The encrypted response as a JWE string.\n     */\n    async decryptJwe(response: string, tenantId: string): Promise {\n        const privateEncryptionKey = await this.keyRepository\n            .findOneByOrFail({\n                tenantId,\n                usage: \"encrypt\",\n            })\n            .then(\n                (keyEntity) =>\n                    importJWK(keyEntity.key, \"ECDH-ES\") as Promise,\n            );\n\n        const res = await jwtDecrypt(response, privateEncryptionKey);\n        return res.payload;\n    }\n\n    /**\n     * Retrieves the public encryption key for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve the public key.\n     * @returns The public encryption key as a JWK.\n     */\n    getEncryptionPublicKey(tenantId: string): Promise {\n        return this.keyRepository\n            .findOneByOrFail({\n                tenantId,\n                usage: \"encrypt\",\n            })\n            .then((entry) => {\n                delete entry.key.d;\n                return entry.key;\n            });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileStorage.html":{"url":"interfaces/FileStorage.html","title":"interface - FileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        exists\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        getSignedUrl\n                                    \n                                \n                                \n                                    \n                                        getStream\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        getSignedUrl\n                        \n                    \n                \n            \n            \n                \ngetSignedUrl(key: string, expiresInSec: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresInSec\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Readable } from \"stream\";\n\nexport type PutOptions = {\n    contentType?: string;\n    metadata?: Record;\n    acl?: \"private\" | \"public\";\n    checksum?: string; // e.g., sha256 base64\n};\n\nexport type StoredObject = {\n    key: string; // canonical key (e.g. \"tenant/2025/08/14/uuid.ext\")\n    etag?: string;\n    size?: number;\n    url?: string; // public URL if ACL=public or a presigned URL\n    contentType?: string;\n    metadata?: Record;\n};\n\nexport interface FileStorage {\n    put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise;\n\n    getStream(\n        key: string,\n    ): Promise;\n\n    delete(key: string): Promise;\n\n    exists(key: string): Promise;\n\n    getSignedUrl?(key: string, expiresInSec: number): Promise; // optional for local\n}\n\nexport const FILE_STORAGE = Symbol(\"FILE_STORAGE\");\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                getDownloadUrl\n                            \n                            \n                                getStream\n                            \n                            \n                                saveUserUpload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storage: FileStorage)\n                    \n                \n                        \n                            \n                                Defined in src/storage/files.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storage\n                                                  \n                                                        \n                                                                        FileStorage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \ngetDownloadUrl(key: string, ttlSeconds: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                ttlSeconds\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    300\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        saveUserUpload\n                        \n                    \n                \n            \n            \n                \nsaveUserUpload(tenantId: string, fileName: string, body: Buffer | Readable, contentType?: string, isPublic)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                fileName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                isPublic\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@nestjs/common\";\nimport { randomUUID } from \"crypto\";\nimport { extname } from \"path\";\nimport { Readable } from \"stream\";\nimport {\n    FILE_STORAGE,\n    FileStorage,\n    StoredObject,\n} from \"../storage/storage.types\";\n\n@Injectable()\nexport class FilesService {\n    constructor(@Inject(FILE_STORAGE) private storage: FileStorage) {}\n\n    saveUserUpload(\n        tenantId: string,\n        fileName: string,\n        body: Buffer | Readable,\n        contentType?: string,\n        isPublic = false,\n    ): Promise {\n        const safeExt = extname(fileName || \"\")\n            .toLowerCase()\n            .slice(1);\n        const key = `${tenantId}/${new Date().toISOString().slice(0, 10)}/${randomUUID()}${safeExt ? \".\" + safeExt : \"\"}`;\n\n        // TODO: add checksum if you want tamper detection:\n        // const checksum = createHash('sha256').update(bufferOrStreamToBuffer(body)).digest('base64');\n\n        return this.storage.put(key, body, {\n            contentType,\n            acl: isPublic ? \"public\" : \"private\",\n            metadata: { originalName: fileName },\n        });\n    }\n\n    getStream(key: string) {\n        return Promise.resolve(this.storage.getStream(key));\n    }\n\n    delete(key: string) {\n        return Promise.resolve(this.storage.delete(key));\n    }\n\n    getDownloadUrl(key: string, ttlSeconds = 300) {\n        if (this.storage.getSignedUrl)\n            return this.storage.getSignedUrl(key, ttlSeconds);\n        // For local, expose via your HTTP controller at /files/:key\n        return Promise.resolve(undefined);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GenerateTokenOptions.html":{"url":"interfaces/GenerateTokenOptions.html","title":"interface - GenerateTokenOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GenerateTokenOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            audience\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { decodeJwt, jwtVerify, SignJWT } from \"jose\";\nimport { TokenPayload } from \"./token.decorator\";\nimport { DEFAULT_JWT_SECRET } from \"./auth.module\";\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {\n        if (\n            this.configService.get(\"JWT_SECRET\") === DEFAULT_JWT_SECRET\n        ) {\n            console.warn(\n                \"Using default JWT secret. This is not secure for production environments.\",\n            );\n        }\n    }\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow(\"JWT_EXPIRES_IN\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: \"HS256\" })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token verification is handled by external OIDC provider.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: [\"HS256\"],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get(\"OIDC\") !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                HealthController is responsible for providing health check endpoints.\nIt uses the HealthCheckService to perform checks on the database connection.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Endpoint to check the health of the service.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n    HealthCheck,\n    HealthCheckService,\n    TypeOrmHealthIndicator,\n} from \"@nestjs/terminus\";\n\n/**\n * HealthController is responsible for providing health check endpoints.\n * It uses the HealthCheckService to perform checks on the database connection.\n */\n@Controller(\"health\")\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private db: TypeOrmHealthIndicator,\n    ) {}\n\n    /**\n     * Endpoint to check the health of the service.\n     * @returns\n     */\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([() => this.db.pingCheck(\"database\")]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n    imports: [TerminusModule],\n    controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/IssuanceConfig.html":{"url":"entities/IssuanceConfig.html","title":"entity - IssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  IssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/entities/issuance-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage issuance configs\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                authenticationConfig\n                            \n                            \n                                    \n                                    Optional\n                                batch_size\n                            \n                            \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                credentialIssuanceBindings\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        authenticationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:58\n                        \n                    \n\n            \n                \n                    Authentication configuration for the issuance process.\nThis determines which OpenID4VC flow to use:\n\n'none': Pre-authorized code flow (no user authentication required)\n'auth': OID4VCI authorized code flow (user will be redirected for authentication)\n'presentationDuringIssuance': OID4VP request is sent (credential presentation required)\n\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        batch_size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int', {default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:91\n                        \n                    \n\n            \n                \n                    Value to determine the amount of credentials that are issued in a batch.\nDefault is 1.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:78\n                        \n                    \n\n            \n                \n                    Webhook to receive claims for the issuance process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmpty()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:65\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialIssuanceBindings\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialIssuanceBinding[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, binding => binding.issuanceConfig, {cascade: undefined, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:47\n                        \n                    \n\n            \n                \n                    Links to all credential config bindings that are included in this issuance config.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:37\n                        \n                    \n\n            \n                \n                    Description of the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:24\n                        \n                    \n\n            \n                \n                    Unique identifier for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:84\n                        \n                    \n\n            \n                \n                    Webhook to send the result of the notification response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:31\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmpty()@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:72\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { IsEmpty, IsObject } from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    OneToMany,\n    PrimaryGeneratedColumn,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport type { AuthenticationConfig } from \"../dto/authentication-config.dto\";\nimport { CredentialIssuanceBinding } from \"./credential-issuance-binding.entity\";\n\n/**\n * Entity to manage issuance configs\n */\n@Entity()\nexport class IssuanceConfig {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @PrimaryGeneratedColumn(\"uuid\")\n    id: string;\n\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\")\n    tenantId: string;\n\n    /**\n     * Description of the issuance configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    /**\n     * Links to all credential config bindings that are included in this issuance config.\n     */\n    @OneToMany(\n        () => CredentialIssuanceBinding,\n        (binding) => binding.issuanceConfig,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    credentialIssuanceBindings: CredentialIssuanceBinding[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     * This determines which OpenID4VC flow to use:\n     * - 'none': Pre-authorized code flow (no user authentication required)\n     * - 'auth': OID4VCI authorized code flow (user will be redirected for authentication)\n     * - 'presentationDuringIssuance': OID4VP request is sent (credential presentation required)\n     */\n    @IsObject()\n    @Column(\"json\")\n    authenticationConfig: AuthenticationConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @IsEmpty()\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @IsEmpty()\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Webhook to receive claims for the issuance process.\n     */\n    @Column(\"json\", { nullable: true })\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Webhook to send the result of the notification response\n     */\n    @Column(\"json\", { nullable: true })\n    notifyWebhook?: WebhookConfig;\n\n    /**\n     * Value to determine the amount of credentials that are issued in a batch.\n     * Default is 1.\n     */\n    @Column(\"int\", { default: 1 })\n    batch_size?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuanceController.html":{"url":"controllers/IssuanceController.html","title":"controller - IssuanceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuanceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/issuance\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getIssuanceConfigurations\n                            \n                            \n                                    \n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Deletes an issuance configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIssuanceConfigurations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfigurations(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(config: IssuanceDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Stores the issuance configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { IssuanceDto } from \"./dto/issuance.dto\";\nimport { IssuanceService } from \"./issuance.service\";\n\n@ApiTags(\"Issuer management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"issuer-management/issuance\")\nexport class IssuanceController {\n    constructor(private readonly issuanceService: IssuanceService) {}\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getIssuanceConfigurations(@Token() user: TokenPayload) {\n        return this.issuanceService.getIssuanceConfiguration(user.sub);\n    }\n\n    /**\n     * Stores the issuance configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeIssuanceConfiguration(\n        @Body() config: IssuanceDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.storeIssuanceConfiguration(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes an issuance configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteIssuanceConfiguration(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.deleteIssuanceConfiguration(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IssuanceDto.html":{"url":"classes/IssuanceDto.html","title":"class - IssuanceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IssuanceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for Issuance Configuration.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                authenticationConfig\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                batch_size\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                    \n                                    \n                                credentialConfigs\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        authenticationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationConfigDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:57\n                        \n                    \n\n            \n                \n                    Authentication configuration for the issuance process.\nThis includes details like the authentication method and any required parameters.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        batch_size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:83\n                        \n                    \n\n            \n                \n                    Value to determine the amount of credentials that are issued in a batch.\nDefault is 1.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:66\n                        \n                    \n\n            \n                \n                    Optional webhook configuration to receive claims during the issuance process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        credentialConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfigMapping[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:48\n                        \n                    \n\n            \n                \n                    Ids of the credential configurations associated with this issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:40\n                        \n                    \n\n            \n                \n                    Description of the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:33\n                        \n                    \n\n            \n                \n                    Unique identifier for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:75\n                        \n                    \n\n            \n                \n                    Optional webhook configuration to send the results of the notification response.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { AuthenticationConfigDto } from \"./authentication-config.dto\";\n\n/**\n * DTO for mapping credential configurations in issuance.\n */\nexport class CredentialConfigMapping {\n    /**\n     * Unique identifier for the credential configuration.\n     */\n    @IsString()\n    id: string;\n}\n\n//TODO: check if this can be integrated into the entity\n/**\n * DTO for Issuance Configuration.\n */\nexport class IssuanceDto {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @IsString()\n    id: string;\n\n    /**\n     * Description of the issuance configuration.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialConfigMapping)\n    credentialConfigs: CredentialConfigMapping[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     * This includes details like the authentication method and any required parameters.\n     */\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationConfigDto)\n    authenticationConfig: AuthenticationConfigDto;\n\n    /**\n     * Optional webhook configuration to receive claims during the issuance process.\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Optional webhook configuration to send the results of the notification response.\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    notifyWebhook?: WebhookConfig;\n\n    /**\n     * Value to determine the amount of credentials that are issued in a batch.\n     * Default is 1.\n     */\n    @IsNumber()\n    @IsOptional()\n    batch_size?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssuanceService.html":{"url":"injectables/IssuanceService.html","title":"injectable - IssuanceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IssuanceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing issuance configurations.\nIt provides methods to get, store, and delete issuance configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    Public\n                                getIssuanceConfiguration\n                            \n                            \n                                getIssuanceConfigurationById\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(issuanceConfigRepo: Repository, credentialIssuanceBindingRepo: Repository, credentialsConfigService: CredentialConfigService, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/issuance/issuance.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for IssuanceService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        issuanceConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialIssuanceBindingRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsConfigService\n                                                  \n                                                        \n                                                                        CredentialConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \ndeleteIssuanceConfiguration(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:259\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:160\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getIssuanceConfigurationById\n                        \n                    \n                \n            \n            \n                \ngetIssuanceConfigurationById(issuanceConfigId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:173\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configuration by ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuanceConfigId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:52\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations and the credential configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(tenantId: string, value: IssuanceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:189\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable, OnModuleInit } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { CredentialConfigService } from \"../credentials/credential-config/credential-config.service\";\nimport { CredentialConfig } from \"../credentials/entities/credential.entity\";\nimport { AuthenticationConfig } from \"./dto/authentication-config.dto\";\nimport { IssuanceDto } from \"./dto/issuance.dto\";\nimport { CredentialIssuanceBinding } from \"./entities/credential-issuance-binding.entity\";\nimport { IssuanceConfig } from \"./entities/issuance-config.entity\";\n\n/**\n * Service for managing issuance configurations.\n * It provides methods to get, store, and delete issuance configurations.\n */\n@Injectable()\nexport class IssuanceService implements OnModuleInit {\n    /**\n     * Constructor for IssuanceService.\n     * @param issuanceConfigRepo\n     * @param credentialsConfigService\n     */\n    constructor(\n        @InjectRepository(IssuanceConfig)\n        private issuanceConfigRepo: Repository,\n        @InjectRepository(CredentialIssuanceBinding)\n        private credentialIssuanceBindingRepo: Repository,\n        private credentialsConfigService: CredentialConfigService,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Import issuance configurations and the credential configurations from the configured folder.\n     */\n    async onModuleInit() {\n        await this.cryptoService.import();\n        await this.credentialsConfigService.import();\n        await this.import();\n    }\n\n    /**\n     * Import issuance configurations from the configured folder.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"issuance/issuance\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    payload.id = file.replace(\".json\", \"\");\n                    const exists = await this.getIssuanceConfigurationById(\n                        payload.id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (exists && !force) {\n                        continue; // Skip if config already exists and force is not set.\n                    }\n\n                    // Validate the payload against IssuanceDto\n                    const issuanceDto = plainToClass(IssuanceDto, payload);\n                    //TOODO: it does not validate the different config options\n                    const validationErrors = await validate(issuanceDto, {\n                        whitelist: true,\n                        forbidNonWhitelisted: true,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        const extractErrorMessages = (error: any): string[] => {\n                            const messages: string[] = [];\n\n                            // Add constraints from the current level\n                            if (error.constraints) {\n                                messages.push(\n                                    ...Object.values(\n                                        error.constraints as Record,\n                                    ),\n                                );\n                            }\n\n                            // Recursively add constraints from children\n                            if (error.children && error.children.length > 0) {\n                                for (const child of error.children) {\n                                    messages.push(\n                                        ...extractErrorMessages(child),\n                                    );\n                                }\n                            }\n\n                            return messages;\n                        };\n\n                        const errorMessages = validationErrors\n                            .map((error) => {\n                                const messages = extractErrorMessages(error);\n                                return messages.length > 0\n                                    ? `${error.property}: ${messages.join(\", \")}`\n                                    : error.property;\n                            })\n                            .join(\"; \");\n\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for issuance config ${file} in tenant ${tenant.name}: ${errorMessages}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n                    await this.storeIssuanceConfiguration(\n                        tenant.name,\n                        issuanceDto,\n                    );\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} issuance configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @param tenantId\n     * @returns\n     */\n    public getIssuanceConfiguration(tenantId: string) {\n        return this.issuanceConfigRepo.find({\n            where: { tenantId },\n            relations: [\"credentialIssuanceBindings\"],\n        });\n    }\n\n    /**\n     * Returns the issuance configuration by ID for a given tenant.\n     * @param issuanceConfigId\n     * @param tenantId\n     * @returns\n     */\n    getIssuanceConfigurationById(\n        issuanceConfigId: string,\n        tenantId: string,\n    ): Promise {\n        return this.issuanceConfigRepo.findOneOrFail({\n            where: { id: issuanceConfigId, tenantId },\n            relations: [\"credentialIssuanceBindings.credentialConfig\"],\n        });\n    }\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeIssuanceConfiguration(tenantId: string, value: IssuanceDto) {\n        const credentials: { config: CredentialConfig; keyId?: string }[] = [];\n        //check if all credential configs exist\n        for (const credentialConfigId of value.credentialConfigs) {\n            const credential = await this.credentialsConfigService.getById(\n                tenantId,\n                credentialConfigId.id,\n            );\n            credentials.push({\n                config: credential,\n            });\n        }\n\n        // Convert AuthenticationConfigDto to AuthenticationConfig union type\n        let authenticationConfig: AuthenticationConfig;\n        if (value.authenticationConfig.method === \"none\") {\n            authenticationConfig = { method: \"none\" };\n        } else if (value.authenticationConfig.method === \"auth\") {\n            if (!value.authenticationConfig.config) {\n                throw new Error(\n                    \"AuthenticationConfig is required for auth method.\",\n                );\n            }\n            authenticationConfig = {\n                method: \"auth\",\n                config: value.authenticationConfig.config as any,\n            };\n        } else if (\n            value.authenticationConfig.method === \"presentationDuringIssuance\"\n        ) {\n            if (!value.authenticationConfig.config) {\n                throw new Error(\n                    \"AuthenticationConfig is required for presentationDuringIssuance method\",\n                );\n            }\n            authenticationConfig = {\n                method: \"presentationDuringIssuance\",\n                config: value.authenticationConfig.config as any,\n            };\n        } else {\n            throw new Error(\n                `Invalid authentication method: ${\n                    (value.authenticationConfig as any).method\n                }`,\n            );\n        }\n\n        const issuanceConfig = await this.issuanceConfigRepo.save({\n            ...value,\n            tenantId,\n            authenticationConfig,\n        });\n\n        //store the binding between credential and isuance\n        for (const credentialConfig of credentials) {\n            await this.credentialIssuanceBindingRepo.save({\n                credentialConfig: credentialConfig.config,\n                issuanceConfig,\n                keyID: credentialConfig.keyId,\n            });\n        }\n        return issuanceConfig;\n    }\n\n    /**\n     * Deletes a credential configuration.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    deleteIssuanceConfiguration(tenantId: string, id: string) {\n        return this.issuanceConfigRepo.delete({ tenantId, id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuerManagementController.html":{"url":"controllers/IssuerManagementController.html","title":"controller - IssuerManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuerManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuer-management/issuer-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: OfferRequestDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: OfferRequestDto, examples: undefined})@Post('offer')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:83\n                        \n                    \n\n\n            \n                \n                        Create an offer for a credential.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Res, UseGuards } from \"@nestjs/common\";\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { Response } from \"express\";\nimport * as QRCode from \"qrcode\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { ResponseType } from \"../../verifier/oid4vp/dto/presentation-request.dto\";\nimport {\n    OfferRequestDto,\n    OfferResponse,\n} from \"../oid4vci/dto/offer-request.dto\";\n\n@ApiTags(\"Issuer management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"issuer-management\")\nexport class IssuerManagementController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Create an offer for a credential.\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: \"JSON response\",\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            \"application/json\": { schema: { type: \"object\" } },\n            \"image/png\": { schema: { type: \"string\", format: \"binary\" } },\n        },\n    })\n    @ApiProduces(\"application/json\", \"image/png\")\n    @ApiBody({\n        type: OfferRequestDto,\n        examples: {\n            qrcode: {\n                summary: \"QR-Code Example\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid\",\n                } as OfferRequestDto,\n            },\n            uri: {\n                summary: \"URI\",\n                value: {\n                    response_type: ResponseType.URI,\n                    issuanceId: \"pid\",\n                } as OfferRequestDto,\n            },\n            authfixed: {\n                summary: \"Auth flow with fixed session\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid\",\n                    session: \"fd3ebf28-8ad6-4909-8a7a-a739c2c412c0\",\n                } as OfferRequestDto,\n            },\n            override: {\n                summary: \"Override\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid-none\",\n                    claims: {\n                        pid: {\n                            given_name: \"Max\",\n                        },\n                    },\n                } as OfferRequestDto,\n            },\n        },\n    })\n    @Post(\"offer\")\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: OfferRequestDto,\n        @Token() user: TokenPayload,\n    ) {\n        // For now, we'll just pass the body to the service as before\n        // You can modify the service later to accept user information if needed\n        const values = await this.oid4vciService.createOffer(\n            body,\n            user,\n            user.sub,\n        );\n\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader(\"Content-Type\", \"image/png\");\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IssuerMetadata.html":{"url":"interfaces/IssuerMetadata.html","title":"interface - IssuerMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IssuerMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/dto/issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the issuer metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            jwks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The issuer identifier, typically a URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { JWK } from \"jose\";\n\n/**\n * Interface representing the issuer metadata.\n */\nexport interface IssuerMetadata {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    issuer: string;\n    /**\n     * The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n     */\n    jwks: {\n        /**\n         * List of keys in the JWKS.\n         */\n        keys: JWK[];\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssuerModule.html":{"url":"modules/IssuerModule.html","title":"module - IssuerModule","body":"\n                   \n\n\n\n\n    Modules\n    IssuerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/issuer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            CredentialsService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vciController\n                        \n                        \n                            AuthorizeController\n                        \n                        \n                            CredentialsController\n                        \n                        \n                            IssuerManagementController\n                        \n                        \n                            IssuanceController\n                        \n                        \n                            CredentialsMetadataController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            Oid4vciService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { setGlobalConfig } from \"@openid4vc/openid4vci\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { SessionLoggerInterceptor } from \"../utils/logger/session-logger.interceptor\";\nimport { SessionLoggerService } from \"../utils/logger/session-logger.service\";\nimport { WebhookService } from \"../utils/webhook/webhook.service\";\nimport { Oid4vpModule } from \"../verifier/oid4vp/oid4vp.module\";\nimport { AuthorizeController } from \"./authorize/authorize.controller\";\nimport { AuthorizeService } from \"./authorize/authorize.service\";\nimport { CredentialConfigService } from \"./credentials/credential-config/credential-config.service\";\nimport { CredentialsController } from \"./credentials/credentials.controller\";\nimport { CredentialsService } from \"./credentials/credentials.service\";\nimport { CredentialConfig } from \"./credentials/entities/credential.entity\";\nimport { CredentialsMetadataController } from \"./credentials-metadata/credentials-metadata.controller\";\nimport { CredentialIssuanceBinding } from \"./issuance/entities/credential-issuance-binding.entity\";\nimport { IssuanceConfig } from \"./issuance/entities/issuance-config.entity\";\nimport { IssuanceController } from \"./issuance/issuance.controller\";\nimport { IssuanceService } from \"./issuance/issuance.service\";\nimport { IssuerManagementController } from \"./issuer-management/issuer-management.controller\";\nimport { DisplayEntity } from \"./oid4vci/entities/display.entity\";\nimport { Oid4vciController } from \"./oid4vci/oid4vci.controller\";\nimport { Oid4vciService } from \"./oid4vci/oid4vci.service\";\nimport { StatusListModule } from \"./status-list/status-list.module\";\n\nexport const ISSUER_VALIDATION_SCHEMA = {\n    PUBLIC_URL: Joi.string().default(\"http://localhost:3000\"),\n};\n\n@Module({\n    imports: [\n        CryptoModule,\n        StatusListModule,\n        Oid4vpModule,\n        SessionModule,\n        HttpModule,\n        TypeOrmModule.forFeature([\n            IssuanceConfig,\n            CredentialConfig,\n            CredentialIssuanceBinding,\n            DisplayEntity,\n        ]),\n    ],\n    controllers: [\n        Oid4vciController,\n        AuthorizeController,\n        CredentialsController,\n        IssuerManagementController,\n        IssuanceController,\n        CredentialsMetadataController,\n    ],\n    providers: [\n        AuthorizeService,\n        CredentialsService,\n        Oid4vciService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        IssuanceService,\n        CredentialConfigService,\n        WebhookService,\n    ],\n    exports: [AuthorizeService, Oid4vciService],\n})\nexport class IssuerModule {\n    constructor(configService: ConfigService) {\n        const unsecure = configService\n            .getOrThrow(\"PUBLIC_URL\")\n            .startsWith(\"http://\");\n        setGlobalConfig({ allowInsecureUrls: unsecure });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwksResponseDto.html":{"url":"classes/JwksResponseDto.html","title":"class - JwksResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwksResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    An array of EC public keys in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from \"jose\";\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: \"EC\";\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard(\"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { IS_PUBLIC_KEY } from \"./public.decorator\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard(\"jwt\") {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            IS_PUBLIC_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) {\n            return true;\n        }\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                decodeToken\n                            \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                isUsingExternalOIDC\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        decodeToken\n                        \n                    \n                \n            \n            \n                \ndecodeToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Decode token without verification (for debugging)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         TokenPayload | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(payload: TokenPayload, options: GenerateTokenOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Generate a JWT token for integrated OAuth2 server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            GenerateTokenOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsingExternalOIDC\n                        \n                    \n                \n            \n            \n                \nisUsingExternalOIDC()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Check if the service is using external OIDC provider\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Verify a JWT token (for additional validation if needed)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { decodeJwt, jwtVerify, SignJWT } from \"jose\";\nimport { TokenPayload } from \"./token.decorator\";\nimport { DEFAULT_JWT_SECRET } from \"./auth.module\";\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {\n        if (\n            this.configService.get(\"JWT_SECRET\") === DEFAULT_JWT_SECRET\n        ) {\n            console.warn(\n                \"Using default JWT secret. This is not secure for production environments.\",\n            );\n        }\n    }\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow(\"JWT_EXPIRES_IN\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: \"HS256\" })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token verification is handled by external OIDC provider.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: [\"HS256\"],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Decode token without verification (for debugging)\n     */\n    decodeToken(token: string): TokenPayload | null {\n        try {\n            return decodeJwt(token) as TokenPayload;\n        } catch {\n            return null;\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get(\"OIDC\") !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, \"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Private\n                                    Static\n                                getExternalOIDCConfig\n                            \n                            \n                                    Private\n                                    Static\n                                getIntegratedOAuth2Config\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, clientService: ClientService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        clientService\n                                                  \n                                                        \n                                                                        ClientService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: any, options?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getExternalOIDCConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExternalOIDCConfig(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { secretOrKeyProvider: any; jwtFromRequest: any; algorithms: {}; issuer: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getIntegratedOAuth2Config\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntegratedOAuth2Config(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:85\n                        \n                    \n\n\n            \n                \n                        Validate the JWT payload. It will also check if the client is set up.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The JWT payload\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise<>\n\n                        \n                            \n                                The validated payload or an error\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { passportJwtSecret } from \"jwks-rsa\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { ClientService } from \"./client.service\";\nimport { TokenPayload } from \"./token.decorator\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, \"jwt\") {\n    constructor(\n        private configService: ConfigService,\n        private clientService: ClientService,\n    ) {\n        const useExternalOIDC = configService.get(\"OIDC\");\n\n        const config = useExternalOIDC\n            ? JwtStrategy.getExternalOIDCConfig(configService)\n            : JwtStrategy.getIntegratedOAuth2Config(configService);\n        super(config);\n    }\n\n    // Override authenticate to add debugging\n    authenticate(req: any, options?: any) {\n        return super.authenticate(req, {\n            ...options,\n            failWithError: true, // This will throw errors instead of just returning 401\n        });\n    }\n\n    private static getExternalOIDCConfig(configService: ConfigService) {\n        const keycloakIssuerUrl = configService.get(\n            \"KEYCLOAK_INTERNAL_ISSUER_URL\",\n        );\n        const jwksUri = `${keycloakIssuerUrl}/protocol/openid-connect/certs`;\n\n        return {\n            secretOrKeyProvider: passportJwtSecret({\n                cache: true,\n                rateLimit: true,\n                jwksRequestsPerMinute: 5,\n                jwksUri: jwksUri,\n                handleSigningKeyError: (err, cb) => {\n                    console.error(\"❌ Keycloak JWKS error:\", err);\n                    if (err instanceof Error) {\n                        return cb(err);\n                    }\n                    return cb(\n                        new Error(\n                            \"Could not get the signing key from Keycloak\",\n                        ),\n                    );\n                },\n            }),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: [configService.get(\"KEYCLOAK_ALGORITHM\")],\n            issuer: keycloakIssuerUrl,\n        };\n    }\n\n    private static getIntegratedOAuth2Config(\n        configService: ConfigService,\n    ): any {\n        const config = {\n            secretOrKey: configService.get(\"JWT_SECRET\"),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: [\"HS256\"], // Using symmetric key for integrated OAuth2\n            ignoreExpiration: false, // Ensure tokens expire\n        };\n\n        // Add issuer validation only if JWT_ISSUER is configured\n        const issuer = configService.get(\"JWT_ISSUER\");\n        if (issuer) {\n            (config as any).issuer = issuer;\n        }\n\n        return config;\n    }\n\n    /**\n     * Validate the JWT payload. It will also check if the client is set up.\n     * @param payload The JWT payload\n     * @returns The validated payload or an error\n     */\n    async validate(payload: TokenPayload): Promise {\n        const useExternalOIDC =\n            this.configService.get(\"OIDC\") !== undefined;\n\n        const sub = useExternalOIDC ? (payload as any).azp : payload.sub;\n\n        await this.clientService.isSetUp(sub);\n\n        return { sub };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Key.html":{"url":"classes/Key.html","title":"class - Key","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Key\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        JWK\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                alg\n                            \n                            \n                                    \n                                crv\n                            \n                            \n                                    \n                                d\n                            \n                            \n                                    \n                                kid\n                            \n                            \n                                    \n                                kty\n                            \n                            \n                                    \n                                x\n                            \n                            \n                                    \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        alg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        d\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['EC'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsEnum, IsObject, IsOptional, IsString } from \"class-validator\";\nimport { JWK } from \"jose\";\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum([\"EC\"])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @IsObject()\n    @Type(() => Key)\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n\n    /**\n     * Description of the key.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/KeyController.html":{"url":"controllers/KeyController.html","title":"controller - KeyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  KeyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                key\n            \n\n\n            \n                Description\n            \n            \n                KeyController is responsible for managing keys in the system.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addKey\n                            \n                            \n                                    \n                                deleteKey\n                            \n                            \n                                    \n                                getKeys\n                            \n                            \n                                    \n                                    Async\n                                updateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    addKey(token: TokenPayload, body: KeyImportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Add a new key to the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteKey(token: TokenPayload, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Delete a key from the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeys(token: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Get all keys for the tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateKey(token: TokenPayload, id: string, body: UpdateKeyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:67\n                        \n                    \n\n\n            \n                \n                        Updates an existing key in the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateKeyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Inject,\n    Param,\n    Post,\n    Put,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { CryptoService } from \"../crypto.service\";\nimport { KeyImportDto } from \"./dto/key-import.dto\";\nimport { UpdateKeyDto } from \"./dto/key-update.dto\";\nimport { CertEntity } from \"./entities/cert.entity\";\nimport { KeyService } from \"./key.service\";\n\n/**\n * KeyController is responsible for managing keys in the system.\n */\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"key\")\nexport class KeyController {\n    constructor(\n        @Inject(\"KeyService\") public readonly keyService: KeyService,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Get all keys for the tenant.\n     * @param token\n     * @returns\n     */\n    @Get()\n    getKeys(@Token() token: TokenPayload): Promise {\n        const tenantId = token.sub;\n        return this.cryptoService.getCerts(tenantId);\n    }\n\n    /**\n     * Add a new key to the key service.\n     * @param token\n     * @param body\n     * @returns\n     */\n    @Post()\n    async addKey(\n        @Token() token: TokenPayload,\n        @Body() body: KeyImportDto,\n    ): Promise {\n        const tenantId = token.sub;\n        const id = await this.cryptoService.importKey(tenantId, body);\n        return { id };\n    }\n\n    /**\n     * Updates an existing key in the key service.\n     * @param token\n     * @param id\n     * @param body\n     */\n    @Put(\":id\")\n    async updateKey(\n        @Token() token: TokenPayload,\n        @Param(\"id\") id: string,\n        @Body() body: UpdateKeyDto,\n    ): Promise {\n        const tenantId = token.sub;\n        await this.cryptoService.updateCert(tenantId, id, body);\n    }\n\n    /**\n     * Delete a key from the key service.\n     * @param token\n     * @param id\n     */\n    @Delete(\":id\")\n    deleteKey(@Token() token: TokenPayload, @Param(\"id\") id: string) {\n        return this.cryptoService.deleteKey(token.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/KeyEntity.html":{"url":"entities/KeyEntity.html","title":"entity - KeyEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  KeyEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/keys.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                key\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                usage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:15\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JWK\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:27\n                        \n                    \n\n            \n                \n                    The key material.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:21\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        usage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KeyUsage\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'sign'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:33\n                        \n                    \n\n            \n                \n                    The usage type of the key.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { JWK } from \"jose\";\nimport { Column, Entity } from \"typeorm\";\n\n/**\n * Key usage types.\n */\nexport type KeyUsage = \"sign\" | \"encrypt\";\n\n@Entity()\nexport class KeyEntity {\n    /**\n     * Unique identifier for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The key material.\n     */\n    @Column(\"json\")\n    key: JWK;\n\n    /**\n     * The usage type of the key.\n     */\n    @Column(\"varchar\", { default: \"sign\" })\n    usage: KeyUsage;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyImportDto.html":{"url":"classes/KeyImportDto.html","title":"class - KeyImportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyImportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for importing a key.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                crt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                privateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:38\n                        \n                    \n\n            \n                \n                    Optional certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:45\n                        \n                    \n\n            \n                \n                    Description of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Key\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:31\n                        \n                    \n\n            \n                \n                    The private key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsEnum, IsObject, IsOptional, IsString } from \"class-validator\";\nimport { JWK } from \"jose\";\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum([\"EC\"])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @IsObject()\n    @Type(() => Key)\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n\n    /**\n     * Description of the key.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeyModule.html":{"url":"modules/KeyModule.html","title":"module - KeyModule","body":"\n                   \n\n\n\n\n    Modules\n    KeyModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/key.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.module.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { HttpModule, HttpService } from \"@nestjs/axios\";\nimport { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { getRepositoryToken, TypeOrmModule } from \"@nestjs/typeorm\";\nimport * as Joi from \"joi\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { DBKeyService } from \"./adapters/db-key.service\";\nimport { VaultKeyService } from \"./adapters/vault-key.service\";\nimport { CryptoImplementatationModule } from \"./crypto-implementation/crypto-implementation.module\";\nimport { CryptoImplementationService } from \"./crypto-implementation/crypto-implementation.service\";\nimport { CertEntity } from \"./entities/cert.entity\";\nimport { KeyEntity } from \"./entities/keys.entity\";\n\nexport const KEY_VALIDATION_SCHEMA = {\n    KM_TYPE: Joi.string().valid(\"db\", \"vault\").default(\"db\"),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class KeyModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: KeyModule,\n            imports: [\n                HttpModule,\n                ConfigModule,\n                CryptoImplementatationModule,\n                TypeOrmModule.forFeature([CertEntity, KeyEntity]),\n            ],\n            providers: [\n                {\n                    provide: \"KeyService\",\n                    useFactory: (\n                        configService: ConfigService,\n                        httpService: HttpService,\n                        cryptoService: CryptoImplementationService,\n                        certRepository: Repository,\n                        keyRepository: Repository,\n                    ) => {\n                        const kmType = configService.get(\n                            \"KM_TYPE\",\n                        );\n                        if (kmType === \"vault\") {\n                            return new VaultKeyService(\n                                httpService,\n                                configService,\n                                cryptoService,\n                                certRepository,\n                            );\n                        }\n\n                        return new DBKeyService(\n                            configService,\n                            cryptoService,\n                            certRepository,\n                            keyRepository,\n                        );\n                    },\n                    inject: [\n                        ConfigService,\n                        HttpService,\n                        CryptoImplementationService,\n                        getRepositoryToken(CertEntity),\n                        getRepositoryToken(KeyEntity),\n                    ],\n                },\n            ],\n            exports: [\"KeyService\"],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyObj.html":{"url":"classes/KeyObj.html","title":"class - KeyObj","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyObj\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-object.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a key entity with its unique identifier, public key, and certificate.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crt\n                            \n                            \n                                id\n                            \n                            \n                                publicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:19\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:11\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publicKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EC_Public\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:15\n                        \n                    \n\n            \n                \n                    Public key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\n\n/**\n * Represents a key entity with its unique identifier, public key, and certificate.\n */\n\nexport class KeyObj {\n    /**\n     * Unique identifier for the key.\n     */\n    id: string;\n    /**\n     * Public key in JWK format.\n     */\n    publicKey: EC_Public;\n    /**\n     * Certificate in PEM format.\n     */\n    crt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyResponseDto.html":{"url":"classes/KeyResponseDto.html","title":"class - KeyResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EC_Public[]\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\n\nexport class KeyResponseDto {\n    keys: EC_Public[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyService.html":{"url":"classes/KeyService.html","title":"class - KeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface for a key service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                create\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                            \n                                    Abstract\n                                getKid\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                import\n                            \n                            \n                                    Abstract\n                                init\n                            \n                            \n                                    Abstract\n                                signer\n                            \n                            \n                                    Abstract\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, certRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/key.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKid(tenantId: string, type?: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:50\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:24\n                        \n                    \n\n\n            \n                \n                        Initialize the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the initialized key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Get the callback for the signer function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JoseHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:73\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JoseHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConflictException } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Signer } from \"@sd-jwt/types\";\nimport { JoseHeaderParameters, JWK, JWTPayload } from \"jose\";\nimport { Repository } from \"typeorm\";\nimport { KeyImportDto } from \"./dto/key-import.dto\";\nimport { KeyObj } from \"./dto/key-object.dto\";\nimport { CertEntity, CertificateType } from \"./entities/cert.entity\";\n\n/**\n * Generic interface for a key service\n */\nexport abstract class KeyService {\n    constructor(\n        protected configService: ConfigService,\n        protected certRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the key service\n     * @param tenantId\n     * @returns key id of the initialized key.\n     */\n    abstract init(tenantId): Promise;\n\n    /**\n     * Creates a new keypair\n     * @param tenantId\n     * @return key id of the generated key.\n     */\n    abstract create(tenantId): Promise;\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     */\n    abstract import(tenantId: string, body: KeyImportDto): Promise;\n\n    /**\n     * Get the callback for the signer function\n     * @param tenantId\n     */\n    abstract signer(tenantId: string, keyId?: string): Promise;\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    abstract getKid(tenantId: string, type?: CertificateType): Promise;\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    abstract getPublicKey(\n        type: \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: \"pem\" | \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    //TODO: this can be handled via the signer callback\n    abstract signJWT(\n        payload: JWTPayload,\n        header: JoseHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    /**\n     * Get the certificate for the given key id.\n     * @param tenantId\n     * @param keyId\n     * @returns\n     */\n    protected getCertificate(tenantId: string, keyId: string): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                id: keyId,\n            })\n            .then(\n                (cert) => cert.crt,\n                () => {\n                    throw new ConflictException(\"Certificate not found\");\n                },\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalFileStorage.html":{"url":"classes/LocalFileStorage.html","title":"class - LocalFileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalFileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/adapters/local.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            FileStorage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                exists\n                            \n                            \n                                getStream\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseDir: string)\n                    \n                \n                        \n                            \n                                Defined in src/storage/adapters/local.storage.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        baseDir\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:39\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    createReadStream,\n    createWriteStream,\n    existsSync,\n    mkdirSync,\n    rmdirSync,\n    statSync,\n} from \"fs\";\nimport { dirname, join } from \"path\";\nimport { Readable } from \"stream\";\nimport { FileStorage, PutOptions, StoredObject } from \"../storage.types\";\n\nexport class LocalFileStorage implements FileStorage {\n    constructor(private baseDir: string) {}\n\n    async put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise {\n        const fullPath = join(this.baseDir, key);\n        mkdirSync(dirname(fullPath), { recursive: true });\n\n        await new Promise((resolve, reject) => {\n            const write = createWriteStream(fullPath);\n            const src = body instanceof Readable ? body : Readable.from(body);\n            src.pipe(write)\n                .on(\"finish\", () => resolve())\n                .on(\"error\", reject);\n        });\n\n        const st = statSync(fullPath);\n\n        return { key, size: st.size, contentType: opts?.contentType };\n    }\n\n    getStream(key: string) {\n        const fullPath = join(this.baseDir, key);\n        return Promise.resolve({ stream: createReadStream(fullPath) });\n    }\n\n    delete(key: string) {\n        return Promise.resolve(\n            rmdirSync(join(this.baseDir, key), { recursive: true }),\n        );\n    }\n\n    exists(key: string) {\n        return Promise.resolve(existsSync(join(this.baseDir, key)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerConfigService.html":{"url":"injectables/LoggerConfigService.html","title":"injectable - LoggerConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing logger configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConfiguration\n                            \n                            \n                                getLogFormat\n                            \n                            \n                                getLogLevel\n                            \n                            \n                                isDebugModeEnabled\n                            \n                            \n                                isHttpLoggerEnabled\n                            \n                            \n                                isSessionLoggerEnabled\n                            \n                            \n                                    Private\n                                loadConfiguration\n                            \n                            \n                                    Private\n                                parseLogLevel\n                            \n                            \n                                reloadConfiguration\n                            \n                            \n                                shouldEnableAutoLogging\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConfiguration\n                        \n                    \n                \n            \n            \n                \ngetConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         LoggerConfiguration\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogFormat\n                        \n                    \n                \n            \n            \n                \ngetLogFormat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     \"json\" | \"pretty\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogLevel\n                        \n                    \n                \n            \n            \n                \ngetLogLevel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     LogLevel\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDebugModeEnabled\n                        \n                    \n                \n            \n            \n                \nisDebugModeEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHttpLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisHttpLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSessionLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisSessionLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseLogLevel\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLogLevel(level: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     LogLevel\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reloadConfiguration\n                        \n                    \n                \n            \n            \n                \nreloadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Hot reload configuration from environment\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shouldEnableAutoLogging\n                        \n                    \n                \n            \n            \n                \nshouldEnableAutoLogging()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if automatic HTTP request/response logging should be enabled\nThis is used by the LoggerModule configuration\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoggerConfiguration\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LogLevel } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: \"json\" | \"pretty\";\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get(\"LOG_LEVEL\", \"info\"),\n            ),\n            enableSessionLogger: this.configService.get(\n                \"LOG_ENABLE_SESSION_LOGGER\",\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                \"LOG_ENABLE_HTTP_LOGGER\",\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                \"LOG_DEBUG_MODE\",\n                false,\n            ),\n            logFormat: this.configService.get(\n                \"LOG_FORMAT\",\n                \"pretty\",\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: \"verbose\",\n            debug: \"debug\",\n            log: \"log\",\n            warn: \"warn\",\n            error: \"error\",\n            fatal: \"fatal\",\n        };\n        return levels[level.toLowerCase()] || \"log\";\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): \"json\" | \"pretty\" {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerConfiguration.html":{"url":"interfaces/LoggerConfiguration.html","title":"interface - LoggerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoggerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            enableDebugMode\n                                        \n                                \n                                \n                                        \n                                            enableHttpLogger\n                                        \n                                \n                                \n                                        \n                                            enableSessionLogger\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            logFormat\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableDebugMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDebugMode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableHttpLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableHttpLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableSessionLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableSessionLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:     LogLevel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LogLevel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logFormat:     \"json\" | \"pretty\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"json\" | \"pretty\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, LogLevel } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: \"json\" | \"pretty\";\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get(\"LOG_LEVEL\", \"info\"),\n            ),\n            enableSessionLogger: this.configService.get(\n                \"LOG_ENABLE_SESSION_LOGGER\",\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                \"LOG_ENABLE_HTTP_LOGGER\",\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                \"LOG_DEBUG_MODE\",\n                false,\n            ),\n            logFormat: this.configService.get(\n                \"LOG_FORMAT\",\n                \"pretty\",\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: \"verbose\",\n            debug: \"debug\",\n            log: \"log\",\n            warn: \"warn\",\n            error: \"error\",\n            fatal: \"fatal\",\n        };\n        return levels[level.toLowerCase()] || \"log\";\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): \"json\" | \"pretty\" {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetricModule.html":{"url":"modules/MetricModule.html","title":"module - MetricModule","body":"\n                   \n\n\n\n\n    Modules\n    MetricModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/metric/metric.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PrometheusModule } from \"@willsoto/nestjs-prometheus\";\n\n@Module({\n    imports: [\n        //TODO: add a guard to protect the metrics endpoint\n        PrometheusModule.register({\n            defaultMetrics: {\n                enabled: false,\n            },\n        }),\n    ],\n})\nexport class MetricModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoneTrustPolicy.html":{"url":"classes/NoneTrustPolicy.html","title":"class - NoneTrustPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoneTrustPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                None trust disclosure policy for the credential.\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                policy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyType.NONE\n\n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:60\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CredentialConfigurationSupported } from \"@openid4vc/openid4vci\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsEmpty,\n    IsEnum,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToOne, OneToMany } from \"typeorm\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { VCT } from \"../../credentials-metadata/dto/credential-config.dto\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { CredentialIssuanceBinding } from \"../../issuance/entities/credential-issuance-binding.entity\";\n\n/**\n * Enum for the policy types.\n */\nexport enum PolicyType {\n    NONE = \"none\",\n    ALLOW_LIST = \"allowList\",\n    ROOT_OF_TRUST = \"rootOfTrust\",\n    ATTESTATION_BASED = \"attestationBased\",\n}\n/**\n * Embedded disclosure policy for the credential.\n */\nexport class EmbeddedDisclosurePolicy {\n    @IsEnum(PolicyType)\n    policy: PolicyType;\n}\n\n/**\n * Allow list disclosure policy for the credential.\n */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ALLOW_LIST;\n\n    @IsString({ each: true })\n    values: string[];\n}\n\n/**\n * Root of trust disclosure policy for the credential.\n */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ROOT_OF_TRUST;\n\n    @IsString()\n    values: string;\n}\n\n/**\n * None trust disclosure policy for the credential.\n */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.NONE;\n}\n\nexport class PolicyCredential {\n    @IsString()\n    format: string;\n    @IsObject()\n    meta: any;\n    @IsString()\n    iss: string;\n}\n\n/**\n * Attestation based disclosure policy for the credential.\n */\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ATTESTATION_BASED;\n\n    @IsArray()\n    values: PolicyCredential[];\n}\n\n/**\n * Entity to manage a credential configuration\n */\n@Entity()\nexport class CredentialConfig {\n    /**\n     * Unique identifier for the configuration to reference it.\n     */\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id: string;\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @IsEmpty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    //TODO: only allow display config for now\n    /**\n     * OID4VCI issuer metadata credential configuration element.\n     */\n    @Column(\"json\")\n    @IsObject()\n    config: CredentialConfigurationSupported;\n    /**\n     * Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    claims: Record;\n    /**\n     * Disclosure frame for the sd jwt vc.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    disclosureFrame: Record;\n    @Column(\"json\", { nullable: true })\n    /**\n     * VCT values that are hosted by this service.\n     */\n    @IsObject()\n    @IsOptional()\n    vct?: VCT;\n    @Column(\"json\", { nullable: true })\n\n    /**\n     * If true, the credential will be key bound.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    keyBinding?: boolean;\n\n    /**\n     * Optional key ID for the credential configuration.\n     * This is used to identify the key used for signing the credential.\n     */\n    @IsString()\n    @IsOptional()\n    keyId?: string;\n\n    @IsEmpty()\n    @ManyToOne(() => CertEntity)\n    key: CertEntity;\n\n    /**\n     * Optional status management flag for the credential configuration.\n     * If true, a status management will be applied to the credential.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    statusManagement?: boolean;\n    /**\n     * Optional livetime for the credential configuration in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    lifeTime?: number;\n\n    /**\n     * json schema that is used during issuance for the validation of the claims.\n     */\n    @IsObject()\n    @IsOptional()\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n    /**\n     * Link to all the issuance config bindings that are using this credential.\n     */\n    @IsEmpty()\n    @OneToMany(\n        () => CredentialIssuanceBinding,\n        (binding) => binding.credentialConfig,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    credentialIssuanceBindings: CredentialIssuanceBinding[];\n\n    /**\n     * Embedded disclosure policy for the credential.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationRequestDto.html":{"url":"classes/NotificationRequestDto.html","title":"class - NotificationRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/notification-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                event\n                            \n                            \n                                    \n                                notification_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEvent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['credential_accepted', 'credential_revoked'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notification_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotificationEvent } from \"@openid4vc/openid4vci\";\nimport { IsEnum, IsString } from \"class-validator\";\n\nexport class NotificationRequestDto {\n    @IsString()\n    notification_id: string;\n\n    @IsEnum([\"credential_accepted\", \"credential_revoked\"])\n    event: NotificationEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OAuthController.html":{"url":"controllers/OAuthController.html","title":"controller - OAuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/oauth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                oauth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getToken(tokenRequest: TokenRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'OAuth 2.0 Token Endpoint', description: 'Obtain an access token using client credentials grant type.'})@Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/oauth/oauth.controller.ts:22\n                        \n                    \n\n\n            \n                \n                        OAuth 2.0 token endpoint for client credentials flow.\nThis endpoint allows clients to obtain access tokens using their client credentials.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tokenRequest\n                                            \n                                                            TokenRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from \"@nestjs/common\";\nimport { ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { TokenRequestDto } from \"./dto/token-request.dto\";\nimport { TokenResponseDto } from \"./dto/token-response.dto\";\nimport { OAuthService } from \"./oauth.service\";\n\n@ApiTags(\"OAuth 2.0\")\n@Controller(\"oauth\")\nexport class OAuthController {\n    constructor(private readonly oauthService: OAuthService) {}\n\n    /**\n     * OAuth 2.0 token endpoint for client credentials flow.\n     * This endpoint allows clients to obtain access tokens using their client credentials.\n     */\n    @ApiOperation({\n        summary: \"OAuth 2.0 Token Endpoint\",\n        description:\n            \"Obtain an access token using client credentials grant type.\",\n    })\n    @Post(\"token\")\n    async getToken(\n        @Body() tokenRequest: TokenRequestDto,\n    ): Promise {\n        return await this.oauthService.handleClientCredentialsGrant(\n            tokenRequest,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OAuthModule.html":{"url":"modules/OAuthModule.html","title":"module - OAuthModule","body":"\n                   \n\n\n\n\n    Modules\n    OAuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OAuthModule\n\n\n\ncluster_OAuthModule_imports\n\n\n\ncluster_OAuthModule_exports\n\n\n\ncluster_OAuthModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOAuthModule\n\nOAuthModule\n\nOAuthModule -->\n\nCryptoModule->OAuthModule\n\n\n\n\n\nOAuthService \n\nOAuthService \n\nOAuthService  -->\n\nOAuthModule->OAuthService \n\n\n\n\n\nOAuthService\n\nOAuthService\n\nOAuthModule -->\n\nOAuthService->OAuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/oauth/oauth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OAuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OAuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OAuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { OAuthController } from \"./oauth.controller\";\nimport { OAuthService } from \"./oauth.service\";\n\nexport const OAUTH_VALIDATION_SCHEMA = {\n    OAUTH_CLIENT_ID: Joi.string().optional(),\n    OAUTH_CLIENT_SECRET: Joi.string().optional(),\n};\n\n@Module({\n    imports: [CryptoModule],\n    controllers: [OAuthController],\n    providers: [OAuthService],\n    exports: [OAuthService],\n})\nexport class OAuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OAuthService.html":{"url":"injectables/OAuthService.html","title":"injectable - OAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/oauth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                clients\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addClient\n                            \n                            \n                                    Private\n                                    Async\n                                generateAccessToken\n                            \n                            \n                                    Async\n                                handleClientCredentialsGrant\n                            \n                            \n                                hasClient\n                            \n                            \n                                    Private\n                                initializeClients\n                            \n                            \n                                removeClient\n                            \n                            \n                                    Private\n                                validateClientCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/oauth/oauth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addClient\n                        \n                    \n                \n            \n            \n                \naddClient(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAccessToken(clientId: string, scope?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                scope\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleClientCredentialsGrant\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleClientCredentialsGrant(request: TokenRequestDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            TokenRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasClient\n                        \n                    \n                \n            \n            \n                \nhasClient(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeClient\n                        \n                    \n                \n            \n            \n                \nremoveClient(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validateClientCredentials\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateClientCredentials(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/oauth/oauth.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { TokenRequestDto } from \"./dto/token-request.dto\";\nimport { TokenResponseDto } from \"./dto/token-response.dto\";\n\n@Injectable()\nexport class OAuthService {\n    // In a real implementation, you'd store these securely in a database\n    private readonly clients = new Map();\n\n    constructor(\n        private readonly configService: ConfigService,\n        private readonly cryptoService: CryptoService,\n    ) {\n        // Initialize with some default clients - you can move this to configuration\n        this.initializeClients();\n    }\n\n    private initializeClients() {\n        // Add default client from environment variables if available\n        const defaultClientId =\n            this.configService.get(\"OAUTH_CLIENT_ID\");\n        const defaultClientSecret = this.configService.get(\n            \"OAUTH_CLIENT_SECRET\",\n        );\n\n        if (defaultClientId && defaultClientSecret) {\n            this.clients.set(defaultClientId, defaultClientSecret);\n        }\n    }\n\n    async handleClientCredentialsGrant(\n        request: TokenRequestDto,\n    ): Promise {\n        // Validate client credentials\n        if (\n            !this.validateClientCredentials(\n                request.client_id,\n                request.client_secret,\n            )\n        ) {\n            throw new UnauthorizedException(\"Invalid client credentials\");\n        }\n\n        // Generate access token\n        const accessToken = await this.generateAccessToken(\n            request.client_id,\n            request.scope,\n        );\n\n        return {\n            access_token: accessToken,\n            token_type: \"Bearer\",\n            expires_in: 3600, // 1 hour\n            scope: request.scope || \"openid\",\n        };\n    }\n\n    private validateClientCredentials(\n        clientId: string,\n        clientSecret: string,\n    ): boolean {\n        const storedSecret = this.clients.get(clientId);\n        return storedSecret === clientSecret;\n    }\n\n    private async generateAccessToken(\n        clientId: string,\n        scope?: string,\n    ): Promise {\n        const payload = {\n            sub: clientId,\n            aud: this.configService.getOrThrow(\"PUBLIC_URL\"),\n            iss: this.configService.getOrThrow(\"PUBLIC_URL\"),\n            scope: scope || \"openid\",\n            exp: Math.floor(Date.now() / 1000) + 3600, // 1 hour from now\n            iat: Math.floor(Date.now() / 1000),\n        };\n\n        // For now, we'll use the root tenant for signing\n        // In a real implementation, you might want to use a dedicated OAuth signing key\n        const tenantId = \"root\";\n        return await this.cryptoService.signJwt(\n            payload,\n            { alg: \"RS256\" },\n            tenantId,\n        );\n    }\n\n    // Methods to manage clients dynamically\n    addClient(clientId: string, clientSecret: string): void {\n        this.clients.set(clientId, clientSecret);\n    }\n\n    removeClient(clientId: string): void {\n        this.clients.delete(clientId);\n    }\n\n    hasClient(clientId: string): boolean {\n        return this.clients.has(clientId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Oauth2AuthorizationServerResponse.html":{"url":"classes/Oauth2AuthorizationServerResponse.html","title":"class - Oauth2AuthorizationServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Oauth2AuthorizationServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/oauth-authorization-server-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response from an OAuth2 authorization server.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_challenge_endpoint\n                            \n                            \n                                authorization_endpoint\n                            \n                            \n                                code_challenge_methods_supported\n                            \n                            \n                                dpop_signing_alg_values_supported\n                            \n                            \n                                issuer\n                            \n                            \n                                jwks_uri\n                            \n                            \n                                pushed_authorization_request_endpoint\n                            \n                            \n                                require_pushed_authorization_requests\n                            \n                            \n                                token_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_challenge_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:37\n                        \n                    \n\n            \n                \n                    The URL of the authorization challenge endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's authorization endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code_challenge_methods_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    List of supported algorithms to sign the challenge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dpop_signing_alg_values_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    List of supported algorithms for DPoP signing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwks_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:17\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushed_authorization_request_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The URL of the pushed authorization request endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require_pushed_authorization_requests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:29\n                        \n                    \n\n            \n                \n                    Indicates whether the server requires pushed authorization requests.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's token endpoint.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Oauth2AuthorizationServerResponse {\n    issuer: string;\n    /**\n     * The URL of the OAuth2 authorization server's token endpoint.\n     */\n    token_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's authorization endpoint.\n     */\n    authorization_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n     */\n    jwks_uri: string;\n    /**\n     * List of supported algorithms to sign the challenge\n     */\n    code_challenge_methods_supported: string[];\n    /**\n     * List of supported algorithms for DPoP signing.\n     */\n    dpop_signing_alg_values_supported: string[];\n    /**\n     * Indicates whether the server requires pushed authorization requests.\n     */\n    require_pushed_authorization_requests: boolean;\n    /**\n     * The URL of the pushed authorization request endpoint.\n     */\n    pushed_authorization_request_endpoint: string;\n    /**\n     * The URL of the authorization challenge endpoint.\n     */\n    authorization_challenge_endpoint: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferRequestDto.html":{"url":"classes/OfferRequestDto.html","title":"class - OfferRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationIds\n                            \n                            \n                                    \n                                issuanceId\n                            \n                            \n                                    \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                session\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record>\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'object', description: 'Override the default values for the credential claims.', properties: undefined, examples: undefined})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:54\n                        \n                    \n\n            \n                \n                    Override the default values for the credential claims.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:61\n                        \n                    \n\n            \n                \n                    Webhook configuration for claims\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:36\n                        \n                    \n\n            \n                \n                    Overrides the default values for the credential ids.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:29\n                        \n                    \n\n            \n                \n                    Issuance config id to reference the issuance configuration.\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'qrcode', description: 'The type of response expected for the offer request.'})@IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:22\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:68\n                        \n                    \n\n            \n                \n                    Pre defined session id\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUUID,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { ResponseType } from \"../../../verifier/oid4vp/dto/presentation-request.dto\";\n\nexport class OfferRequestDto {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: \"qrcode\",\n        description: \"The type of response expected for the offer request.\",\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Issuance config id to reference the issuance configuration.\n     * @example \"pid\"\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * Overrides the default values for the credential ids.\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    /**\n     * Override the default values for the credential claims.\n     */\n    @ApiProperty({\n        type: \"object\",\n        description: \"Override the default values for the credential claims.\",\n        properties: {},\n        examples: {\n            pid: {\n                given_name: \"ERIKA\",\n                family_name: \"MUSTERMANN\",\n            },\n        },\n    })\n    @IsObject()\n    @IsOptional()\n    claims?: Record>;\n\n    /**\n     * Webhook configuration for claims\n     */\n    @IsObject()\n    @IsOptional()\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Pre defined session id\n     */\n    @IsUUID()\n    @IsOptional()\n    session?: string;\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferResponse.html":{"url":"classes/OfferResponse.html","title":"class - OfferResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                session\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:72\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUUID,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { ResponseType } from \"../../../verifier/oid4vp/dto/presentation-request.dto\";\n\nexport class OfferRequestDto {\n    /**\n     * @example \"qrcode\"\n     */\n    @ApiProperty({\n        example: \"qrcode\",\n        description: \"The type of response expected for the offer request.\",\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Issuance config id to reference the issuance configuration.\n     * @example \"pid\"\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * Overrides the default values for the credential ids.\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    /**\n     * Override the default values for the credential claims.\n     */\n    @ApiProperty({\n        type: \"object\",\n        description: \"Override the default values for the credential claims.\",\n        properties: {},\n        examples: {\n            pid: {\n                given_name: \"ERIKA\",\n                family_name: \"MUSTERMANN\",\n            },\n        },\n    })\n    @IsObject()\n    @IsOptional()\n    claims?: Record>;\n\n    /**\n     * Webhook configuration for claims\n     */\n    @IsObject()\n    @IsOptional()\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Pre defined session id\n     */\n    @IsUUID()\n    @IsOptional()\n    session?: string;\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vciController.html":{"url":"controllers/Oid4vciController.html","title":"controller - Oid4vciController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vciController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/vci\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credential\n                            \n                            \n                                    \n                                    \n                                nonce\n                            \n                            \n                                    \n                                    \n                                notifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credential\n                        \n                    \n                \n            \n            \n                \n                        \n                    credential(req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('credential')@SessionLogger('session', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Endpoint to issue credentials\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nonce\n                        \n                    \n                \n            \n            \n                \n                        \n                    nonce(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('nonce')@SessionLogger('nonce', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        notifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    notifications(body: NotificationRequestDto, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notification')@SessionLogger('notification_id', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Notification endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Post,\n    Req,\n    UseGuards,\n    UseInterceptors,\n} from \"@nestjs/common\";\nimport { ApiExcludeController, ApiParam } from \"@nestjs/swagger\";\nimport type { CredentialResponse } from \"@openid4vc/openid4vci\";\nimport type { Request } from \"express\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionGuard } from \"../../session/session.guard\";\nimport { SessionLogger } from \"../../utils/logger//session-logger.decorator\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { NotificationRequestDto } from \"./dto/notification-request.dto\";\n\n/**\n * Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n */\n@ApiParam({ name: \"session\", required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@UseGuards(SessionGuard)\n@Controller(\":session/vci\")\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vciController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Endpoint to issue credentials\n     * @param req\n     * @returns\n     */\n    @Post(\"credential\")\n    @SessionLogger(\"session\", \"OID4VCI\")\n    credential(\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        return this.oid4vciService.getCredential(req, session);\n    }\n\n    /**\n     * Notification endpoint\n     * @param body\n     * @returns\n     */\n    @Post(\"notification\")\n    @SessionLogger(\"notification_id\", \"OID4VCI\")\n    notifications(\n        @Body() body: NotificationRequestDto,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vciService.handleNotification(req, body, session);\n    }\n\n    @Post(\"nonce\")\n    @SessionLogger(\"nonce\", \"OID4VCI\")\n    nonce(@SessionEntity() session: Session) {\n        return this.oid4vciService.nonceRequest(session);\n    }\n\n    //TODO: this endpoint may be relevant for the wallet attestation.\n    /* @Get('session')\n  session() {\n    console.log('Session requested');\n    //TODO store session and created at\n    const session = randomUUID();\n    return {\n      session_id: session,\n    };\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vpController.html":{"url":"controllers/Oid4vpController.html","title":"controller - Oid4vpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/oid4vp\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getRequestWithSession\n                            \n                            \n                                    \n                                    \n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getRequestWithSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRequestWithSession(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:41\n                        \n                    \n\n\n            \n                \n                        Returns the authorization request for a given requestId and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:52\n                        \n                    \n\n\n            \n                \n                        Endpoint to receive the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Post,\n    UseGuards,\n    UseInterceptors,\n} from \"@nestjs/common\";\nimport { ApiExcludeController, ApiParam } from \"@nestjs/swagger\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionGuard } from \"../../session/session.guard\";\nimport { SessionLogger } from \"../../utils/logger/session-logger.decorator\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { AuthorizationResponse } from \"./dto/authorization-response.dto\";\nimport { Oid4vpService } from \"./oid4vp.service\";\n\n/**\n * Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n */\n@Controller(\":session/oid4vp\")\n@UseGuards(SessionGuard)\n@UseInterceptors(SessionLoggerInterceptor)\n@ApiParam({ name: \"session\", required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\nexport class Oid4vpController {\n    /**\n     * Constructor for the Oid4vpController.\n     * @param oid4vpService - Instance of Oid4vpService for handling OID4VP operations.\n     */\n    constructor(private readonly oid4vpService: Oid4vpService) {}\n\n    /**\n     * Returns the authorization request for a given requestId and session.\n     * @param requestId\n     * @param session\n     * @returns\n     */\n    @Get()\n    @SessionLogger(\"session\", \"OID4VP\")\n    getRequestWithSession(@SessionEntity() session: Session) {\n        return this.oid4vpService.createAuthorizationRequest(session);\n    }\n\n    /**\n     * Endpoint to receive the response from the wallet.\n     * @param body\n     * @returns\n     */\n    @Post()\n    @SessionLogger(\"session\", \"OID4VP\")\n    getResponse(\n        @Body() body: AuthorizationResponse,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vpService.getResponse(body, session);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Oid4vpModule.html":{"url":"modules/Oid4vpModule.html","title":"module - Oid4vpModule","body":"\n                   \n\n\n\n\n    Modules\n    Oid4vpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Oid4vpService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Oid4vpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { forwardRef, Module } from \"@nestjs/common\";\nimport { CryptoModule } from \"../../crypto/crypto.module\";\nimport { RegistrarModule } from \"../../registrar/registrar.module\";\nimport { SessionModule } from \"../../session/session.module\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { SessionLoggerService } from \"../../utils/logger/session-logger.service\";\nimport { WebhookService } from \"../../utils/webhook/webhook.service\";\nimport { PresentationsModule } from \"../presentations/presentations.module\";\nimport { Oid4vpController } from \"./oid4vp.controller\";\nimport { Oid4vpService } from \"./oid4vp.service\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        forwardRef(() => RegistrarModule),\n        forwardRef(() => PresentationsModule),\n        SessionModule,\n        HttpModule,\n    ],\n    controllers: [Oid4vpController],\n    providers: [\n        Oid4vpService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        WebhookService,\n    ],\n    exports: [Oid4vpService],\n})\nexport class Oid4vpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vpService.html":{"url":"injectables/Oid4vpService.html","title":"injectable - Oid4vpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuthorizationRequest\n                            \n                            \n                                    Async\n                                createRequest\n                            \n                            \n                                    Async\n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, encryptionService: EncryptionService, configService: ConfigService, registrarService: RegistrarService, presentationsService: PresentationsService, sessionService: SessionService, sessionLogger: SessionLoggerService, webhookService: WebhookService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/oid4vp/oid4vp.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webhookService\n                                                  \n                                                        \n                                                                        WebhookService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAuthorizationRequest(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Creates an authorization request for the OID4VP flow.\nThis method generates a JWT that includes the necessary parameters for the authorization request.\nIt initializes the session logging context and logs the start of the flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRequest(requestId: string, values: PresentationRequestOptions, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:205\n                        \n                    \n\n\n            \n                \n                        Creates a request for the OID4VP flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            PresentationRequestOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:264\n                        \n                    \n\n\n            \n                \n                        Processes the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { v4 } from \"uuid\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { EncryptionService } from \"../../crypto/encryption/encryption.service\";\nimport { OfferResponse } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport { RegistrarService } from \"../../registrar/registrar.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../../utils/logger/session-logger.service\";\nimport { SessionLogContext } from \"../../utils/logger/session-logger-context\";\nimport { WebhookService } from \"../../utils/webhook/webhook.service\";\nimport { AuthResponse } from \"../presentations/dto/auth-response.dto\";\nimport { PresentationsService } from \"../presentations/presentations.service\";\nimport { AuthorizationResponse } from \"./dto/authorization-response.dto\";\nimport { PresentationRequestOptions } from \"./dto/presentation-request-options.dto\";\n\n@Injectable()\nexport class Oid4vpService {\n    constructor(\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private configService: ConfigService,\n        private registrarService: RegistrarService,\n        private presentationsService: PresentationsService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n        private webhookService: WebhookService,\n    ) {}\n\n    /**\n     * Creates an authorization request for the OID4VP flow.\n     * This method generates a JWT that includes the necessary parameters for the authorization request.\n     * It initializes the session logging context and logs the start of the flow.\n     * @param requestId\n     * @param tenantId\n     * @param auth_session\n     * @returns\n     */\n    async createAuthorizationRequest(session: Session): Promise {\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId: session.tenantId,\n            flowType: \"OID4VP\",\n            stage: \"authorization_request\",\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            requestId: session.requestId,\n            action: \"create_authorization_request\",\n        });\n\n        try {\n            const host = this.configService.getOrThrow(\"PUBLIC_URL\");\n            const tenantHost = `${host}/${session.tenantId}`;\n\n            const presentationConfig =\n                await this.presentationsService.getPresentationConfig(\n                    session.requestId!,\n                    session.tenantId,\n                );\n            let regCert: string | undefined = undefined;\n\n            const dcql_query = JSON.parse(\n                JSON.stringify(presentationConfig.dcql_query).replace(\n                    //g,\n                    tenantHost,\n                ),\n            );\n\n            if (this.registrarService.isEnabled()) {\n                const registrationCert = JSON.parse(\n                    JSON.stringify(presentationConfig.registrationCert).replace(\n                        //g,\n                        tenantHost,\n                    ),\n                );\n                regCert =\n                    await this.registrarService.addRegistrationCertificate(\n                        registrationCert,\n                        dcql_query,\n                        session.requestId!,\n                        session.tenantId,\n                    );\n            }\n            const nonce = randomUUID();\n            await this.sessionService.add(session.id, {\n                vp_nonce: nonce,\n            });\n\n            this.sessionLogger.logAuthorizationRequest(logContext, {\n                requestId: session.requestId,\n                nonce,\n                regCert,\n                dcqlQueryCount: Array.isArray(dcql_query)\n                    ? dcql_query.length\n                    : 1,\n            });\n\n            const hostname = new URL(\n                this.configService.getOrThrow(\"PUBLIC_URL\"),\n            ).hostname;\n\n            const lifeTime = 60 * 60;\n\n            const request = {\n                payload: {\n                    response_type: \"vp_token\",\n                    client_id: \"x509_san_dns:\" + hostname,\n                    response_uri: `${host}/${session.id}/oid4vp`,\n                    response_mode: \"direct_post.jwt\",\n                    nonce,\n                    dcql_query,\n                    client_metadata: {\n                        jwks: {\n                            keys: [\n                                await this.encryptionService.getEncryptionPublicKey(\n                                    session.tenantId,\n                                ),\n                            ],\n                        },\n                        vp_formats: {\n                            mso_mdoc: {\n                                alg: [\"ES256\"],\n                            },\n                            \"dc+sd-jwt\": {\n                                \"kb-jwt_alg_values\": [\"ES256\"],\n                                \"sd-jwt_alg_values\": [\"ES256\"],\n                            },\n                        },\n                        authorization_encrypted_response_alg: \"ECDH-ES\",\n                        authorization_encrypted_response_enc: \"A128GCM\",\n                        client_name:\n                            this.configService.getOrThrow(\"RP_NAME\"),\n                        response_types_supported: [\"vp_token\"],\n                    },\n                    state: session.id,\n                    aud: host,\n                    exp: Math.floor(Date.now() / 1000) + lifeTime,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    verifier_attestations: regCert\n                        ? [\n                              {\n                                  format: \"jwt\",\n                                  data: regCert,\n                              },\n                          ]\n                        : undefined,\n                },\n                header: {\n                    typ: \"oauth-authz-req+jwt\",\n                },\n            };\n\n            const accessCert = await this.cryptoService.getCertChain(\n                \"access\",\n                session.tenantId,\n            );\n\n            const header = {\n                ...request.header,\n                alg: \"ES256\",\n                x5c: accessCert,\n            };\n\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"access\",\n            );\n            const signedJwt = await this.cryptoService.signJwt(\n                header,\n                request.payload,\n                session.tenantId,\n                keyId,\n            );\n\n            this.sessionLogger.logSession(\n                logContext,\n                \"Authorization request created successfully\",\n                {\n                    signedJwtLength: signedJwt.length,\n                    certificateChainLength: accessCert?.length || 0,\n                },\n            );\n\n            return signedJwt;\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                requestId: session.requestId,\n                action: \"create_authorization_request\",\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Creates a request for the OID4VP flow.\n     * @param requestId\n     * @param values\n     * @param tenantId\n     * @returns\n     */\n    async createRequest(\n        requestId: string,\n        values: PresentationRequestOptions,\n        tenantId: string,\n    ): Promise {\n        const presentationConfig =\n            await this.presentationsService.getPresentationConfig(\n                requestId,\n                tenantId,\n            );\n        const fresh = values.session === undefined;\n        values.session = values.session || v4();\n\n        const hostname = new URL(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n        ).hostname;\n        const params = {\n            client_id: `x509_san_dns:${hostname}`,\n            request_uri: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${values.session}/oid4vp`,\n        };\n        const queryString = Object.entries(params)\n            .map(\n                ([key, value]) =>\n                    `${encodeURIComponent(key)}=${encodeURIComponent(value)}`,\n            )\n            .join(\"&\");\n\n        const expiresAt = new Date(\n            Date.now() + presentationConfig.lifeTime * 1000,\n        );\n\n        if (fresh) {\n            await this.sessionService.create({\n                id: values.session,\n                claimsWebhook: values.webhook ?? presentationConfig.webhook,\n                tenantId,\n                requestId,\n                requestUrl: `openid4vp://?${queryString}`,\n                expiresAt,\n            });\n        } else {\n            await this.sessionService.add(values.session, {\n                claimsWebhook: values.webhook ?? presentationConfig.webhook,\n                requestUrl: `openid4vp://?${queryString}`,\n                expiresAt,\n            });\n        }\n\n        return {\n            uri: queryString,\n            session: values.session,\n        };\n    }\n\n    /**\n     * Processes the response from the wallet.\n     * @param body\n     * @param tenantId\n     */\n    async getResponse(body: AuthorizationResponse, session: Session) {\n        const res = await this.encryptionService.decryptJwe(\n            body.response,\n            session.tenantId,\n        );\n        if (!res.state) {\n            throw new ConflictException(\"No state found in the response\");\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: res.state,\n            tenantId: session.tenantId,\n            flowType: \"OID4VP\",\n            stage: \"response_processing\",\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            action: \"process_presentation_response\",\n            hasWebhook: !!session.claimsWebhook,\n        });\n\n        try {\n            //TODO: load required fields from the config\n            const credentials = await this.presentationsService.parseResponse(\n                res,\n                [],\n                session.vp_nonce as string,\n            );\n\n            this.sessionLogger.logCredentialVerification(\n                logContext,\n                !!credentials && credentials.length > 0,\n                {\n                    credentialCount: credentials?.length || 0,\n                    nonce: session.vp_nonce,\n                },\n            );\n\n            //tell the auth server the result of the session.\n            await this.sessionService.add(res.state, {\n                //TODO: not clear why it has to be any\n                credentials: credentials as any,\n            });\n            // if there a a webook URL, send the response there\n            //TODO: move to dedicated service to reuse it also in the oid4vci flow.\n            if (session.claimsWebhook) {\n                await this.webhookService.sendWebhook(\n                    session,\n                    logContext,\n                    credentials,\n                    false,\n                );\n            }\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialCount: credentials?.length || 0,\n                webhookSent: !!session.claimsWebhook,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                action: \"process_presentation_response\",\n            });\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParResponseDto.html":{"url":"classes/ParResponseDto.html","title":"class - ParResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/par-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expires_in\n                            \n                            \n                                request_uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The expiration time for the request URI in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:5\n                        \n                    \n\n            \n                \n                    The request URI for the Pushed Authorization Request.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParResponseDto {\n    /**\n     * The request URI for the Pushed Authorization Request.\n     */\n    request_uri: string;\n    /**\n     * The expiration time for the request URI in seconds.\n     */\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html","title":"interface - ParsedAccessTokenAuthorizationCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenAuthorizationCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            grantType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     AuthorizationCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AuthorizationCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { AuthenticationConfigHelper } from \"../issuance/dto/authentication-config.helper\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        /*         const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        } */\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        if (\n            AuthenticationConfigHelper.isPresentationDuringIssuanceAuth(\n                authConfig,\n            )\n        ) {\n            // OID4VP flow - credential presentation required\n            const webhook = issuanceConfig.claimsWebhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                session.tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else if (AuthenticationConfigHelper.isAuthUrlAuth(authConfig)) {\n            // OID4VCI authorized code flow - should not reach here typically in challenge endpoint\n            // But we'll handle it by sending authorization code\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else if (AuthenticationConfigHelper.isNoneAuth(authConfig)) {\n            // Pre-authorized code flow (method: 'none') - send authorization code directly\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else {\n            throw new Error(\n                `Unsupported authentication method: ${(authConfig as any).method}`,\n            );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html","title":"interface - ParsedAccessTokenPreAuthorizedCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenPreAuthorizedCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            grantType\n                                        \n                                \n                                \n                                        \n                                            preAuthorizedCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            txCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     PreAuthorizedCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PreAuthorizedCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        preAuthorizedCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        preAuthorizedCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        txCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        txCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { AuthenticationConfigHelper } from \"../issuance/dto/authentication-config.helper\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        /*         const session = await this.sessionService.getBy({\n            authorization_code: body.code ?? body['pre-authorized_code'],\n            tenantId,\n        });\n\n        if (!session) {\n            throw new ConflictException('Authorization code not found');\n        } */\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: true,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        if (\n            AuthenticationConfigHelper.isPresentationDuringIssuanceAuth(\n                authConfig,\n            )\n        ) {\n            // OID4VP flow - credential presentation required\n            const webhook = issuanceConfig.claimsWebhook;\n            const response = await this.parseChallengeRequest(\n                body,\n                session.tenantId,\n                webhook,\n            );\n            res.status(400).send(response);\n        } else if (AuthenticationConfigHelper.isAuthUrlAuth(authConfig)) {\n            // OID4VCI authorized code flow - should not reach here typically in challenge endpoint\n            // But we'll handle it by sending authorization code\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else if (AuthenticationConfigHelper.isNoneAuth(authConfig)) {\n            // Pre-authorized code flow (method: 'none') - send authorization code directly\n            await this.sendAuthorizationCode(res, body.issuer_state!);\n        } else {\n            throw new Error(\n                `Unsupported authentication method: ${(authConfig as any).method}`,\n            );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PolicyCredential.html":{"url":"classes/PolicyCredential.html","title":"class - PolicyCredential","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PolicyCredential\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                format\n                            \n                            \n                                    \n                                iss\n                            \n                            \n                                    \n                                meta\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        iss\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:67\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CredentialConfigurationSupported } from \"@openid4vc/openid4vci\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsEmpty,\n    IsEnum,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToOne, OneToMany } from \"typeorm\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { VCT } from \"../../credentials-metadata/dto/credential-config.dto\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { CredentialIssuanceBinding } from \"../../issuance/entities/credential-issuance-binding.entity\";\n\n/**\n * Enum for the policy types.\n */\nexport enum PolicyType {\n    NONE = \"none\",\n    ALLOW_LIST = \"allowList\",\n    ROOT_OF_TRUST = \"rootOfTrust\",\n    ATTESTATION_BASED = \"attestationBased\",\n}\n/**\n * Embedded disclosure policy for the credential.\n */\nexport class EmbeddedDisclosurePolicy {\n    @IsEnum(PolicyType)\n    policy: PolicyType;\n}\n\n/**\n * Allow list disclosure policy for the credential.\n */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ALLOW_LIST;\n\n    @IsString({ each: true })\n    values: string[];\n}\n\n/**\n * Root of trust disclosure policy for the credential.\n */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ROOT_OF_TRUST;\n\n    @IsString()\n    values: string;\n}\n\n/**\n * None trust disclosure policy for the credential.\n */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.NONE;\n}\n\nexport class PolicyCredential {\n    @IsString()\n    format: string;\n    @IsObject()\n    meta: any;\n    @IsString()\n    iss: string;\n}\n\n/**\n * Attestation based disclosure policy for the credential.\n */\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ATTESTATION_BASED;\n\n    @IsArray()\n    values: PolicyCredential[];\n}\n\n/**\n * Entity to manage a credential configuration\n */\n@Entity()\nexport class CredentialConfig {\n    /**\n     * Unique identifier for the configuration to reference it.\n     */\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id: string;\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @IsEmpty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    //TODO: only allow display config for now\n    /**\n     * OID4VCI issuer metadata credential configuration element.\n     */\n    @Column(\"json\")\n    @IsObject()\n    config: CredentialConfigurationSupported;\n    /**\n     * Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    claims: Record;\n    /**\n     * Disclosure frame for the sd jwt vc.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    disclosureFrame: Record;\n    @Column(\"json\", { nullable: true })\n    /**\n     * VCT values that are hosted by this service.\n     */\n    @IsObject()\n    @IsOptional()\n    vct?: VCT;\n    @Column(\"json\", { nullable: true })\n\n    /**\n     * If true, the credential will be key bound.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    keyBinding?: boolean;\n\n    /**\n     * Optional key ID for the credential configuration.\n     * This is used to identify the key used for signing the credential.\n     */\n    @IsString()\n    @IsOptional()\n    keyId?: string;\n\n    @IsEmpty()\n    @ManyToOne(() => CertEntity)\n    key: CertEntity;\n\n    /**\n     * Optional status management flag for the credential configuration.\n     * If true, a status management will be applied to the credential.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    statusManagement?: boolean;\n    /**\n     * Optional livetime for the credential configuration in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    lifeTime?: number;\n\n    /**\n     * json schema that is used during issuance for the validation of the claims.\n     */\n    @IsObject()\n    @IsOptional()\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n    /**\n     * Link to all the issuance config bindings that are using this credential.\n     */\n    @IsEmpty()\n    @OneToMany(\n        () => CredentialIssuanceBinding,\n        (binding) => binding.credentialConfig,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    credentialIssuanceBindings: CredentialIssuanceBinding[];\n\n    /**\n     * Embedded disclosure policy for the credential.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationAttachment.html":{"url":"classes/PresentationAttachment.html","title":"class - PresentationAttachment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationAttachment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Attached attestations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credential_ids\n                            \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credential_ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n    IsArray,\n    IsEmpty,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, CreateDateColumn, Entity, UpdateDateColumn } from \"typeorm\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsNotEmpty()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    @IsEmpty()\n    tenantId: string;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @IsObject()\n    //TODO: define the structure of the DCQL query\n    dcql_query: any;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @IsObject()\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @IsEmpty()\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @IsEmpty()\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Column(\"json\", { nullable: true })\n    attached: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PresentationConfig.html":{"url":"entities/PresentationConfig.html","title":"entity - PresentationConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PresentationConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a configuration for a Verifiable Presentation (VP) request.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                attached\n                            \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                dcql_query\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                lifeTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                registrationCert\n                            \n                            \n                                    \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        attached\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationAttachment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested()@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:111\n                        \n                    \n\n            \n                \n                    Attestation that should be attached\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmpty()@CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:95\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        dcql_query\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:74\n                        \n                    \n\n            \n                \n                    The DCQL query to be used for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:58\n                        \n                    \n\n            \n                \n                    Description of the presentation configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:42\n                        \n                    \n\n            \n                \n                    Unique identifier for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        lifeTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Column('int', {default: 300})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:66\n                        \n                    \n\n            \n                \n                    Lifetime how long the presentation request is valid after creation, in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        registrationCert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsObject()@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:81\n                        \n                    \n\n            \n                \n                    The registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})@IsEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:50\n                        \n                    \n\n            \n                \n                    The tenant ID for which the VP request is made.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmpty()@UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:102\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:88\n                        \n                    \n\n            \n                \n                    Optional webhook URL to receive the response.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport {\n    IsArray,\n    IsEmpty,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, CreateDateColumn, Entity, UpdateDateColumn } from \"typeorm\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsNotEmpty()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    @IsEmpty()\n    tenantId: string;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @IsObject()\n    //TODO: define the structure of the DCQL query\n    dcql_query: any;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @IsObject()\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @IsEmpty()\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @IsEmpty()\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Column(\"json\", { nullable: true })\n    attached: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuanceConfig.html":{"url":"classes/PresentationDuringIssuanceConfig.html","title":"class - PresentationDuringIssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'presentationDuringIssuance'\nUsed for OID4VP flow where a credential presentation request is sent\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:100\n                        \n                    \n\n            \n                \n                    Link to the presentation configuration that is relevant for the issuance process\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUrl,\n    Validate,\n    ValidateNested,\n    ValidationArguments,\n    ValidatorConstraint,\n    ValidatorConstraintInterface,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Custom validator to ensure config type matches the authentication method\n */\n@ValidatorConstraint({ name: \"authConfigValidator\", async: false })\nexport class AuthConfigValidator implements ValidatorConstraintInterface {\n    validate(config: any, args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === \"none\") {\n            // For 'none' method, config should be undefined\n            return config === undefined;\n        }\n\n        if (obj.method === \"auth\") {\n            // For 'auth' method, config must be present and have 'url' property\n            return (\n                config &&\n                typeof config === \"object\" &&\n                typeof config.url === \"string\"\n            );\n        }\n\n        if (obj.method === \"presentationDuringIssuance\") {\n            // For 'presentationDuringIssuance' method, config must be present and have 'presentation' property\n            return (\n                config &&\n                typeof config === \"object\" &&\n                typeof config.type === \"string\"\n            );\n        }\n\n        return false;\n    }\n\n    defaultMessage(args: ValidationArguments) {\n        const obj = args.object as AuthenticationConfigDto;\n\n        if (obj.method === \"none\") {\n            return 'config must be undefined when method is \"none\"';\n        }\n\n        if (obj.method === \"auth\") {\n            return 'config must be of type AuthenticationUrlConfig when method is \"auth\"';\n        }\n\n        if (obj.method === \"presentationDuringIssuance\") {\n            return 'config must be of type PresentationDuringIssuanceConfig when method is \"presentationDuringIssuance\"';\n        }\n\n        return \"config type does not match the specified method\";\n    }\n}\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsUrl()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\n/**\n * Base class for authentication configurations\n * Determines which OpenID4VC flow to use for the issuance process\n */\nexport class AuthenticationConfigDto {\n    /**\n     * The authentication method to use:\n     * - 'none': Pre-authorized code flow (no user authentication)\n     * - 'auth': OID4VCI authorized code flow (user redirect for authentication)\n     * - 'presentationDuringIssuance': OID4VP flow (credential presentation required)\n     */\n    @IsIn([\"none\", \"auth\", \"presentationDuringIssuance\"])\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n\n    /**\n     * Configuration specific to the selected authentication method\n     * - For 'none': no config needed (undefined) - uses pre-authorized code flow\n     * - For 'auth': AuthenticationUrlConfig - for OID4VCI authorized code flow\n     * - For 'presentationDuringIssuance': PresentationDuringIssuanceConfig - for OID4VP flow\n     */\n    @IsOptional()\n    @Validate(AuthConfigValidator)\n    config?: AuthenticationUrlConfig | PresentationDuringIssuanceConfig;\n\n    /**\n     * Description of the authentication configuration.\n     */\n    @IsOptional()\n    @IsString()\n    description?: string;\n}\n\n/**\n * Union type for authentication configurations\n * Each method corresponds to a specific OpenID4VC flow\n */\nexport type AuthenticationConfig =\n    | { method: \"none\" } // Pre-authorized code flow\n    | { method: \"auth\"; config: AuthenticationUrlConfig } // OID4VCI authorized code flow\n    | {\n          method: \"presentationDuringIssuance\"; // OID4VP flow\n          config: PresentationDuringIssuanceConfig;\n      };\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PresentationManagementController.html":{"url":"controllers/PresentationManagementController.html","title":"controller - PresentationManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PresentationManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                presentation-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storePresentationConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Returns the presentation request configurations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:137\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation request configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: PresentationRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@UseGuards(JwtAuthGuard)@ApiSecurity('oauth2')@ApiBody({type: PresentationRequest, examples: undefined})@Post('request')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Create an presentation request that can be sent to the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PresentationRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storePresentationConfig(config: PresentationConfig, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:121\n                        \n                    \n\n\n            \n                \n                        Store a presentation request configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n    UseGuards,\n} from \"@nestjs/common\";\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { Response } from \"express\";\nimport * as QRCode from \"qrcode\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { OfferResponse } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport {\n    PresentationRequest,\n    ResponseType,\n} from \"../oid4vp/dto/presentation-request.dto\";\nimport { Oid4vpService } from \"../oid4vp/oid4vp.service\";\nimport { PresentationConfig } from \"./entities/presentation-config.entity\";\nimport { PresentationsService } from \"./presentations.service\";\n\n@ApiTags(\"Presentation management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\", [\"api:read\", \"api:write\"])\n@Controller(\"presentation-management\")\nexport class PresentationManagementController {\n    constructor(\n        private readonly presentationsService: PresentationsService,\n        private readonly oid4vpService: Oid4vpService,\n    ) {}\n\n    /**\n     * Create an presentation request that can be sent to the user\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: \"JSON response\",\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            \"application/json\": { schema: { type: \"object\" } },\n            \"image/png\": { schema: { type: \"string\", format: \"binary\" } },\n        },\n    })\n    @ApiProduces(\"application/json\", \"image/png\")\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity(\"oauth2\")\n    @ApiBody({\n        type: PresentationRequest,\n        examples: {\n            qrcode: {\n                summary: \"QR-Code Example\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    requestId: \"pid\",\n                },\n            },\n            uri: {\n                summary: \"URI\",\n                value: {\n                    response_type: ResponseType.URI,\n                    requestId: \"pid\",\n                },\n            },\n        },\n    })\n    @Post(\"request\")\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: PresentationRequest,\n        @Token() user: TokenPayload,\n    ) {\n        const values = await this.oid4vpService.createRequest(\n            body.requestId,\n            {\n                webhook: body.webhook,\n            },\n            user.sub,\n        );\n        values.uri = `openid4vp://?${values.uri}`;\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader(\"Content-Type\", \"image/png\");\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the presentation request configurations.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.presentationsService.getPresentationConfigs(user.sub);\n    }\n\n    /**\n     * Store a presentation request configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storePresentationConfig(\n        @Body() config: PresentationConfig,\n        @Token() user: TokenPayload,\n    ) {\n        return this.presentationsService.storePresentationConfig(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes a presentation request configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteConfiguration(@Param(\"id\") id: string, @Token() user: TokenPayload) {\n        return this.presentationsService.deletePresentationConfig(id, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationRequest.html":{"url":"classes/PresentationRequest.html","title":"class - PresentationRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the presentation request containing the response type and request ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                requestId\n                            \n                            \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:33\n                        \n                    \n\n            \n                \n                    Identifier of the presentation configuration\nExample :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    Example :\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:41\n                        \n                    \n\n            \n                \n                    Webhook configuration to receive the response.\nIf not provided, the configured webhook from the configuration will be used.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Enum for the type of response expected from the presentation request.\n */\nexport enum ResponseType {\n    /**\n     * Response type indicating a QR code will be returned.\n     */\n    QRCode = \"qrcode\",\n    /**\n     * Response type indicating a URI will be returned.\n     */\n    URI = \"uri\",\n}\n\n/**\n * DTO for the presentation request containing the response type and request ID.\n */\nexport class PresentationRequest {\n    /**\n     * @example qrcode\n     */\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Identifier of the presentation configuration\n     * @example pid\n     */\n    @IsString()\n    requestId: string;\n\n    /**\n     * Webhook configuration to receive the response.\n     * If not provided, the configured webhook from the configuration will be used.\n     */\n    @IsObject()\n    @IsOptional()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentationRequestOptions.html":{"url":"interfaces/PresentationRequestOptions.html","title":"interface - PresentationRequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentationRequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PresentationRequestOptions DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            session\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhook\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional session identifier for tracking the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhook\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhook:         WebhookConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WebhookConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional webhook configuration to receive the response.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * PresentationRequestOptions DTO\n */\nexport interface PresentationRequestOptions {\n    /**\n     * Optional session identifier for tracking the request.\n     */\n    session?: string;\n    /**\n     * Optional webhook configuration to receive the response.\n     */\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PresentationsModule.html":{"url":"modules/PresentationsModule.html","title":"module - PresentationsModule","body":"\n                   \n\n\n\n\n    Modules\n    PresentationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_imports\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/presentations/presentations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PresentationManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ResolverModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { forwardRef, Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Oid4vpModule } from \"../oid4vp/oid4vp.module\";\nimport { ResolverModule } from \"../resolver/resolver.module\";\nimport { PresentationConfig } from \"./entities/presentation-config.entity\";\nimport { PresentationManagementController } from \"./presentations.controller\";\nimport { PresentationsService } from \"./presentations.service\";\n\n@Module({\n    imports: [\n        ResolverModule,\n        HttpModule,\n        forwardRef(() => Oid4vpModule),\n        TypeOrmModule.forFeature([PresentationConfig]),\n    ],\n    controllers: [PresentationManagementController],\n    providers: [PresentationsService],\n    exports: [PresentationsService],\n})\nexport class PresentationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PresentationsService.html":{"url":"injectables/PresentationsService.html","title":"injectable - PresentationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PresentationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kbVerifier\n                            \n                            \n                                sdjwtInstance\n                            \n                            \n                                    Private\n                                statusListFetcher\n                            \n                            \n                                verifier\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deletePresentationConfig\n                            \n                            \n                                getPresentationConfig\n                            \n                            \n                                getPresentationConfigs\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                parseResponse\n                            \n                            \n                                storePresentationConfig\n                            \n                            \n                                    Public\n                                storeRCID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, resolverService: ResolverService, vpRequestRepository: Repository, configService: ConfigService, logger: PinoLogger)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/presentations/presentations.service.ts:28\n                            \n                        \n\n                \n                    \n                            Constructor for the PresentationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of HttpService for making HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        resolverService\n                                                  \n                                                        \n                                                                        ResolverService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ResolverService for resolving DID documents.\n\n\n                                                        \n                                                \n                                                \n                                                        vpRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for managing VP request configurations.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deletePresentationConfig\n                        \n                    \n                \n            \n            \n                \ndeletePresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:161\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to delete.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the deletion is complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:171\n                        \n                    \n\n\n            \n                \n                        Retrieves a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the requested PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfigs\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfigs(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:137\n                        \n                    \n\n\n            \n                \n                        Retrieves all presentation configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve configurations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of PresentationConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:67\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Initializes the SDJwtVcInstance with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseResponse\n                        \n                    \n                \n            \n            \n                \nparseResponse(res: AuthResponse, requiredFields: string[], keyBindingNonce: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:260\n                        \n                    \n\n\n            \n                \n                        Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            AuthResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requiredFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyBindingNonce\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \nstorePresentationConfig(tenantId: string, vprequest: PresentationConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:150\n                        \n                    \n\n\n            \n                \n                        Stores a new presentation configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the configuration.\n\n\n                                            \n                                        \n                                        \n                                                vprequest\n                                            \n                                                            PresentationConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe PresentationConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        storeRCID\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRCID(registrationCertId: string, id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:192\n                        \n                    \n\n\n            \n                \n                        Stores the new registration certificate.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registrationCertId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the registration certificate to store.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to update.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the registration certificate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kbVerifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KbVerifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:243\n                        \n                    \n\n            \n                \n                    Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                            \n                                            \n                                                    signature\n                                            \n                                            \n                                                    payload\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sdjwtInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SDJwtVcInstance\n\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:28\n                        \n                    \n\n            \n                \n                    Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusListFetcher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:228\n                        \n                    \n\n            \n                \n                    Fetch the status list from the uri.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    uri\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Verifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:205\n                        \n                    \n\n            \n                \n                    Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                                    \n                                                            \nThe data part of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                            \n                                                    signature\n                                                    \n                                                            \nThe signature of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { ConflictException, Injectable, OnModuleInit } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { digest, ES256 } from \"@sd-jwt/crypto-nodejs\";\nimport { SDJwtVcInstance } from \"@sd-jwt/sd-jwt-vc\";\nimport { KbVerifier, Verifier } from \"@sd-jwt/types\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { importJWK, JWK, JWTPayload, jwtVerify } from \"jose\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { ResolverService } from \"../resolver/resolver.service\";\nimport { AuthResponse } from \"./dto/auth-response.dto\";\nimport { PresentationConfig } from \"./entities/presentation-config.entity\";\n\n/**\n * Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n */\n@Injectable()\nexport class PresentationsService implements OnModuleInit {\n    /**\n     * Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n     */\n    sdjwtInstance: SDJwtVcInstance;\n\n    /**\n     * Constructor for the PresentationsService.\n     * @param httpService - Instance of HttpService for making HTTP requests.\n     * @param resolverService - Instance of ResolverService for resolving DID documents.\n     * @param vpRequestRepository - Repository for managing VP request configurations.\n     */\n    constructor(\n        private httpService: HttpService,\n        private resolverService: ResolverService,\n        @InjectRepository(PresentationConfig)\n        private vpRequestRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n    ) {}\n\n    /**\n     * Initializes the SDJwtVcInstance with the necessary configurations.\n     */\n    onModuleInit() {\n        this.sdjwtInstance = new SDJwtVcInstance({\n            hasher: digest,\n            verifier: this.verifier.bind(this),\n            kbVerifier: this.kbVerifier.bind(this),\n            statusListFetcher: this.statusListFetcher.bind(this),\n        });\n    }\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    async onApplicationBootstrap() {\n        await this.import();\n    }\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"presentation\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    const id = file.replace(\".json\", \"\");\n                    payload.id = id;\n                    const presentationExists = await this.getPresentationConfig(\n                        id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (presentationExists && !force) {\n                        continue; // Skip if config already exists and force is not set\n                    }\n\n                    // Validate the payload against PresentationConfig\n                    const config = plainToClass(PresentationConfig, payload);\n                    const validationErrors = await validate(config, {\n                        whitelist: true,\n                        forbidNonWhitelisted: true,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for presentation config ${file} in tenant ${tenant.name}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n\n                    await this.storePresentationConfig(tenant.name, config);\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} presentation configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Retrieves all presentation configurations for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve configurations.\n     * @returns A promise that resolves to an array of PresentationConfig entities.\n     */\n    getPresentationConfigs(tenantId: string): Promise {\n        return this.vpRequestRepository.find({\n            where: { tenantId },\n            order: { createdAt: \"DESC\" },\n        });\n    }\n\n    /**\n     * Stores a new presentation configuration.\n     * @param tenantId - The ID of the tenant for which to store the configuration.\n     * @param vprequest - The PresentationConfig entity to store.\n     * @returns A promise that resolves to the stored PresentationConfig entity.\n     */\n    storePresentationConfig(tenantId: string, vprequest: PresentationConfig) {\n        vprequest.tenantId = tenantId;\n        return this.vpRequestRepository.save(vprequest);\n    }\n\n    /**\n     * Deletes a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to delete.\n     * @param tenantId - The ID of the tenant for which to delete the configuration.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    deletePresentationConfig(id: string, tenantId: string) {\n        return this.vpRequestRepository.delete({ id, tenantId });\n    }\n\n    /**\n     * Retrieves a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to retrieve.\n     * @param tenantId - The ID of the tenant for which to retrieve the configuration.\n     * @returns A promise that resolves to the requested PresentationConfig entity.\n     */\n    getPresentationConfig(\n        id: string,\n        tenantId: string,\n    ): Promise {\n        return this.vpRequestRepository\n            .findOneByOrFail({\n                id,\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(`Request ID ${id} not found`);\n            });\n    }\n\n    /**\n     * Stores the new registration certificate.\n     * @param registrationCertId - The ID of the registration certificate to store.\n     * @param id - The ID of the presentation configuration to update.\n     * @param tenantId - The ID of the tenant for which to store the registration certificate.\n     * @returns\n     */\n    public storeRCID(registrationCertId: string, id: string, tenantId: string) {\n        return this.vpRequestRepository.update(\n            { id, tenantId },\n            { registrationCert: { id: registrationCertId } },\n        );\n    }\n\n    /**\n     * Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n     * @param data - The data part of the SD-JWT-VC.\n     * @param signature - The signature of the SD-JWT-VC.\n     * @returns\n     */\n    verifier: Verifier = async (data, signature) => {\n        const instance = new SDJwtVcInstance({\n            hasher: digest,\n        });\n        const decodedVC = await instance.decode(`${data}.${signature}`);\n        const payload = decodedVC.jwt?.payload as JWTPayload;\n        const header = decodedVC.jwt?.header as JWK;\n        const publicKey = await this.resolverService.resolvePublicKey(\n            payload,\n            header,\n        );\n        const verify = await ES256.getVerifier(publicKey);\n        return verify(data, signature).catch((err) => {\n            console.log(err);\n            return false;\n        });\n    };\n\n    /**\n     * Fetch the status list from the uri.\n     * @param uri\n     * @returns\n     */\n    private statusListFetcher: (uri: string) => Promise = (\n        uri: string,\n    ) => {\n        return firstValueFrom(this.httpService.get(uri)).then(\n            (res) => res.data,\n        );\n    };\n\n    /**\n     * Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n     * @param data\n     * @param signature\n     * @param payload\n     * @returns\n     */\n    private kbVerifier: KbVerifier = async (data, signature, payload) => {\n        if (!payload.cnf) {\n            throw new Error(\"No cnf found in the payload\");\n        }\n        const key = await importJWK(payload.cnf.jwk as JWK, \"ES256\");\n        return jwtVerify(`${data}.${signature}`, key).then(\n            () => true,\n            () => false,\n        );\n    };\n\n    /**\n     * Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n     * @param res\n     * @param requiredFields\n     * @returns\n     */\n    parseResponse(\n        res: AuthResponse,\n        requiredFields: string[],\n        keyBindingNonce: string,\n    ) {\n        const attestations = Object.keys(res.vp_token);\n        const att = attestations.map((att) =>\n            this.sdjwtInstance\n                .verify(res.vp_token[att], {\n                    requiredClaimKeys: requiredFields,\n                    keyBindingNonce,\n                })\n                .then(\n                    (result) => {\n                        return {\n                            id: att,\n                            values: {\n                                ...result.payload,\n                                cnf: undefined, // remove cnf for simplicity\n                                status: undefined, // remove status for simplicity\n                            },\n                        };\n                    },\n                    /* (err) => {\n                        throw new Error\n                        //(console.log(err);\n                        return {\n                            id: att,\n                            error: err.message,\n                        };\n                    }, */\n                ),\n        );\n        return Promise.all(att);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RegistrarEntity.html":{"url":"entities/RegistrarEntity.html","title":"entity - RegistrarEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RegistrarEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/entities/registrar.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessCertificateId\n                            \n                            \n                                    \n                                relyingPartyId\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessCertificateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        relyingPartyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\n\n@Entity()\nexport class RegistrarEntity {\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    @Column(\"varchar\")\n    relyingPartyId: string;\n\n    @Column(\"varchar\")\n    accessCertificateId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegistrarModule.html":{"url":"modules/RegistrarModule.html","title":"module - RegistrarModule","body":"\n                   \n\n\n\n\n    Modules\n    RegistrarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_imports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_RegistrarModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/registrar/registrar.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            RegistrarModule is responsible for managing the registrar service.\nIt provides the RegistrarService and imports necessary modules.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { PresentationsModule } from \"../verifier/presentations/presentations.module\";\nimport { RegistrarEntity } from \"./entities/registrar.entity\";\nimport { RegistrarService } from \"./registrar.service\";\n\n/**\n * Validation schema for the registrar module.\n * Defines the required environment variables and their types.\n */\nexport const REGISTRAR_VALIDATION_SCHEMA = {\n    REGISTRAR_URL: Joi.string(),\n    REGISTRAR_OIDC_URL: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n};\n\n/**\n * RegistrarModule is responsible for managing the registrar service.\n * It provides the RegistrarService and imports necessary modules.\n */\n@Module({\n    imports: [\n        CryptoModule,\n        PresentationsModule,\n        TypeOrmModule.forFeature([RegistrarEntity]),\n    ],\n    providers: [RegistrarService],\n    exports: [RegistrarService],\n})\nexport class RegistrarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegistrarService.html":{"url":"injectables/RegistrarService.html","title":"injectable - RegistrarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegistrarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarService is responsible for managing the interaction with the registrar,\nincluding adding relying parties, access certificates, and registration certificates.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessToken\n                            \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                oauth2Client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addAccessCertificate\n                            \n                            \n                                    Async\n                                addRegistrationCertificate\n                            \n                            \n                                addRp\n                            \n                            \n                                    Private\n                                getExistingRp\n                            \n                            \n                                isEnabled\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, presentationsService: PresentationsService, registrarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/registrar/registrar.service.ts:40\n                            \n                        \n\n                \n                    \n                            Constructor for the RegistrarService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ConfigService for accessing configuration values.\n\n\n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of CryptoService for cryptographic operations.\n\n\n                                                        \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of PresentationsService for handling presentations.\n\n\n                                                        \n                                                \n                                                \n                                                        registrarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addAccessCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAccessCertificate(tenantId: string, relyingPartyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:190\n                        \n                    \n\n\n            \n                \n                        Add a new access certificate to the registrar.\nThis is only needed once, when the access certificate is created.\nIf the access certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                relyingPartyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addRegistrationCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRegistrationCertificate(req: RegistrationCertificateRequest, dcql_query: any, requestId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:232\n                        \n                    \n\n\n            \n                \n                        Add a new registration certificate to the registrar.\nThis is only needed once, when the registration certificate is created.\nIf the registration certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RegistrationCertificateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dcql_query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRp\n                        \n                    \n                \n            \n            \n                \naddRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:150\n                        \n                    \n\n\n            \n                \n                        Adds a new relying party to the registrar.\nThis is only needed once, when the relying party is created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getExistingRp\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExistingRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:173\n                        \n                    \n\n\n            \n                \n                        Stores the existing relying party ID based on the name.\nThis is used when the relying party already exists in the registrar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the relying party.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The ID of the existing relying party.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnabled\n                        \n                    \n                \n            \n            \n                \nisEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Checks if the registrar service is enabled based on the configuration.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the registrar service is enabled, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:100\n                        \n                    \n\n\n            \n                \n                        This function is called when the application starts.\nIt will refresh the access token for the registrar.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Initializes the OAuth2 client and registrar client with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:111\n                        \n                    \n\n\n            \n                \n                        This function is called when a tenant is initialized.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshAccessToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:133\n                        \n                    \n\n\n            \n                \n                        Refreshes the access token for the registrar using client credentials.\nThis method is called periodically to ensure the access token is valid.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:40\n                        \n                    \n\n            \n                \n                    Access token for authenticating requests to the registrar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:36\n                        \n                    \n\n            \n                \n                    Client for interacting with the registrar API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauth2Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:32\n                        \n                    \n\n            \n                \n                    OAuth2 client for interacting with the OIDC provider.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { OAuth2Client } from \"@badgateway/oauth2-client\";\nimport {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { RegistrationCertificateRequest } from \"../verifier/presentations/dto/vp-request.dto\";\nimport { PresentationsService } from \"../verifier/presentations/presentations.service\";\nimport { RegistrarEntity } from \"./entities/registrar.entity\";\nimport {\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from \"./generated\";\nimport { client } from \"./generated/client.gen\";\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n        @InjectRepository(RegistrarEntity)\n        private registrarRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow(\"REGISTRAR_OIDC_URL\");\n        const clientId = this.configService.getOrThrow(\n            \"REGISTRAR_OIDC_CLIENT_ID\",\n        );\n        const clientSecret = this.configService.getOrThrow(\n            \"REGISTRAR_OIDC_CLIENT_SECRET\",\n        );\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow(\"REGISTRAR_URL\"),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get(\"REGISTRAR_URL\");\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get(\"REGISTRAR_URL\")) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        //TODO: pass name by call\n        const name = this.configService.getOrThrow(\"RP_NAME\");\n        const relyingPartyId = await this.addRp(name);\n        const accessCertificateId = await this.addAccessCertificate(\n            tenantId,\n            relyingPartyId,\n        );\n        await this.registrarRepository.save({\n            tenantId,\n            relyingPartyId,\n            accessCertificateId,\n        });\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(name: string): Promise {\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            let rpId: string;\n            if (response.error) {\n                rpId = await this.getExistingRp(name);\n            } else {\n                rpId = response.data![\"id\"];\n            }\n            return rpId;\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private getExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id!;\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        tenantId: string,\n        relyingPartyId: string,\n    ): Promise {\n        const keyId = await this.cryptoService.keyService.getKid(tenantId);\n        const host = this.configService\n            .getOrThrow(\"PUBLIC_URL\")\n            .replace(\"https://\", \"\");\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    \"pem\",\n                    tenantId,\n                    keyId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: relyingPartyId,\n            },\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\"Error adding access certificate:\", res.error);\n                throw new Error(\"Error adding access certificate\");\n            }\n            //store the cert\n            await this.cryptoService.storeAccessCertificate(\n                res.data![\"crt\"],\n                tenantId,\n                keyId,\n            );\n            return res.data![\"id\"];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const entry = await this.registrarRepository.findOneByOrFail({\n            tenantId,\n        });\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp: entry.relyingPartyId,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp: entry.relyingPartyId,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    \"Error adding registration certificate:\",\n                    res.error,\n                );\n                throw new Error(\"Error adding registration certificate\");\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data![\"id\"],\n                requestId,\n                tenantId,\n            );\n            return res.data![\"jwt\"];\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationCertificateRequest.html":{"url":"classes/RegistrationCertificateRequest.html","title":"class - RegistrationCertificateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationCertificateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/vp-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrationCertificateRequest DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RegistrationCertificateCreation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:17\n                        \n                    \n\n            \n                \n                    The body of the registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:12\n                        \n                    \n\n            \n                \n                    Identifier of the registration certificate that got issued.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsString } from \"class-validator\";\nimport { RegistrationCertificateCreation } from \"../../../registrar/generated\";\n\n/**\n * RegistrationCertificateRequest DTO\n */\nexport class RegistrationCertificateRequest {\n    /**\n     * Identifier of the registration certificate that got issued.\n     */\n    @IsString()\n    id?: string;\n    /**\n     * The body of the registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    body: RegistrationCertificateCreation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResolverModule.html":{"url":"modules/ResolverModule.html","title":"module - ResolverModule","body":"\n                   \n\n\n\n\n    Modules\n    ResolverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\n\nResolverService \n\nResolverService \n\n\n\nResolverModule\n\nResolverModule\n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/resolver/resolver.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ResolverService } from \"./resolver.service\";\n\n@Module({\n    imports: [HttpModule],\n    providers: [ResolverService],\n    exports: [ResolverService],\n})\nexport class ResolverModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolverService.html":{"url":"injectables/ResolverService.html","title":"injectable - ResolverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/resolver.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for resolving public keys from JWT payloads and headers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolvePublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/resolver/resolver.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resolvePublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolvePublicKey(payload: JWTPayload, header: JWK)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/resolver/resolver.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWK\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { X509Certificate } from \"node:crypto\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { JWK, JWTPayload } from \"jose\";\nimport { firstValueFrom } from \"rxjs\";\nimport { IssuerMetadata } from \"./dto/issuer-metadata.dto\";\n\n/**\n * Service for resolving public keys from JWT payloads and headers.\n */\n@Injectable()\nexport class ResolverService {\n    constructor(private httpService: HttpService) {}\n\n    /**\n     * Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n     * @param payload\n     * @param header\n     * @returns\n     */\n    async resolvePublicKey(payload: JWTPayload, header: JWK): Promise {\n        if (!payload.iss) {\n            throw new Error(\"Issuer not found\");\n        }\n\n        if (header.x5c) {\n            //TODO: validate the certificate and the chain of trust!\n            const certs = header.x5c.map(\n                (cert) => new X509Certificate(Buffer.from(cert, \"base64\")),\n            );\n            const cert = certs[0];\n            if (!cert.subjectAltName?.includes(new URL(payload.iss).hostname)) {\n                throw new Error(\"Subject and issuer do not match\");\n            }\n            return cert.publicKey.export({ format: \"jwk\" }) as JWK;\n        }\n        //checl if the key is in the header as jwk\n        if (header[\"jwk\"]) {\n            return header[\"jwk\"] as JWK;\n        }\n\n        const response = await firstValueFrom(\n            this.httpService.get(\n                `${payload.iss}/.well-known/jwt-vc-issuer`,\n            ),\n        ).then(\n            (r) => r.data,\n            () => {\n                throw new ConflictException(\"Issuer not reachable\");\n            },\n        );\n        const key = response.jwks.keys.find((key) => key.kid === header.kid);\n        if (!key) {\n            throw new Error(\"Key not found\");\n        }\n        return key;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RootOfTrustPolicy.html":{"url":"classes/RootOfTrustPolicy.html","title":"class - RootOfTrustPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RootOfTrustPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Root of trust disclosure policy for the credential.\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                policy\n                            \n                            \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyType.ROOT_OF_TRUST\n\n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:50\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:53\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CredentialConfigurationSupported } from \"@openid4vc/openid4vci\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsEmpty,\n    IsEnum,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToOne, OneToMany } from \"typeorm\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { VCT } from \"../../credentials-metadata/dto/credential-config.dto\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { CredentialIssuanceBinding } from \"../../issuance/entities/credential-issuance-binding.entity\";\n\n/**\n * Enum for the policy types.\n */\nexport enum PolicyType {\n    NONE = \"none\",\n    ALLOW_LIST = \"allowList\",\n    ROOT_OF_TRUST = \"rootOfTrust\",\n    ATTESTATION_BASED = \"attestationBased\",\n}\n/**\n * Embedded disclosure policy for the credential.\n */\nexport class EmbeddedDisclosurePolicy {\n    @IsEnum(PolicyType)\n    policy: PolicyType;\n}\n\n/**\n * Allow list disclosure policy for the credential.\n */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ALLOW_LIST;\n\n    @IsString({ each: true })\n    values: string[];\n}\n\n/**\n * Root of trust disclosure policy for the credential.\n */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ROOT_OF_TRUST;\n\n    @IsString()\n    values: string;\n}\n\n/**\n * None trust disclosure policy for the credential.\n */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.NONE;\n}\n\nexport class PolicyCredential {\n    @IsString()\n    format: string;\n    @IsObject()\n    meta: any;\n    @IsString()\n    iss: string;\n}\n\n/**\n * Attestation based disclosure policy for the credential.\n */\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    declare policy: PolicyType.ATTESTATION_BASED;\n\n    @IsArray()\n    values: PolicyCredential[];\n}\n\n/**\n * Entity to manage a credential configuration\n */\n@Entity()\nexport class CredentialConfig {\n    /**\n     * Unique identifier for the configuration to reference it.\n     */\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id: string;\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @IsEmpty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    //TODO: only allow display config for now\n    /**\n     * OID4VCI issuer metadata credential configuration element.\n     */\n    @Column(\"json\")\n    @IsObject()\n    config: CredentialConfigurationSupported;\n    /**\n     * Claims that should be set by default when this credential is being issued. Will be overwritten when passed during a credential offer request.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    claims: Record;\n    /**\n     * Disclosure frame for the sd jwt vc.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    disclosureFrame: Record;\n    @Column(\"json\", { nullable: true })\n    /**\n     * VCT values that are hosted by this service.\n     */\n    @IsObject()\n    @IsOptional()\n    vct?: VCT;\n    @Column(\"json\", { nullable: true })\n\n    /**\n     * If true, the credential will be key bound.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    keyBinding?: boolean;\n\n    /**\n     * Optional key ID for the credential configuration.\n     * This is used to identify the key used for signing the credential.\n     */\n    @IsString()\n    @IsOptional()\n    keyId?: string;\n\n    @IsEmpty()\n    @ManyToOne(() => CertEntity)\n    key: CertEntity;\n\n    /**\n     * Optional status management flag for the credential configuration.\n     * If true, a status management will be applied to the credential.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    statusManagement?: boolean;\n    /**\n     * Optional livetime for the credential configuration in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    lifeTime?: number;\n\n    /**\n     * json schema that is used during issuance for the validation of the claims.\n     */\n    @IsObject()\n    @IsOptional()\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n    /**\n     * Link to all the issuance config bindings that are using this credential.\n     */\n    @IsEmpty()\n    @OneToMany(\n        () => CredentialIssuanceBinding,\n        (binding) => binding.credentialConfig,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    credentialIssuanceBindings: CredentialIssuanceBinding[];\n\n    /**\n     * Embedded disclosure policy for the credential.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsObject()\n    @IsOptional()\n    @ValidateNested()\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/S3FileStorage.html":{"url":"classes/S3FileStorage.html","title":"class - S3FileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  S3FileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/adapters/s3.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            FileStorage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                getSignedUrl\n                            \n                            \n                                    Async\n                                getStream\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(s3: S3Client, bucket: string, publicBaseUrl?: string)\n                    \n                \n                        \n                            \n                                Defined in src/storage/adapters/s3.storage.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        s3\n                                                  \n                                                        \n                                                                        S3Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bucket\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publicBaseUrl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSignedUrl\n                        \n                    \n                \n            \n            \n                \ngetSignedUrl(key: string, expiresInSec: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiresInSec\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStream\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    DeleteObjectCommand,\n    GetObjectCommand,\n    HeadObjectCommand,\n    PutObjectCommand,\n    S3Client,\n} from \"@aws-sdk/client-s3\";\nimport { getSignedUrl as sign } from \"@aws-sdk/s3-request-presigner\";\nimport { Readable } from \"stream\";\nimport { FileStorage, PutOptions, StoredObject } from \"../storage.types\";\n\nexport class S3FileStorage implements FileStorage {\n    constructor(\n        private s3: S3Client,\n        private bucket: string,\n        private publicBaseUrl?: string, // e.g. CloudFront URL (optional)\n    ) {}\n\n    async put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise {\n        await this.s3.send(\n            new PutObjectCommand({\n                Bucket: this.bucket,\n                Key: key,\n                Body: body,\n                ContentType: opts?.contentType,\n                Metadata: opts?.metadata,\n                ACL: opts?.acl === \"public\" ? \"public-read\" : undefined,\n                ChecksumSHA256: opts?.checksum, // optional if you computed it\n            }),\n        );\n\n        const head = await this.s3.send(\n            new HeadObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n        const url =\n            opts?.acl === \"public\"\n                ? this.publicBaseUrl\n                    ? `${this.publicBaseUrl.replace(/\\/+$/, \"\")}/${encodeURI(key)}`\n                    : `https://${this.bucket}.s3.amazonaws.com/${encodeURI(key)}`\n                : undefined;\n\n        return {\n            key,\n            etag: head.ETag,\n            size: head.ContentLength,\n            url,\n            contentType: head.ContentType || opts?.contentType,\n        };\n    }\n\n    async getStream(key: string) {\n        const obj = await this.s3.send(\n            new GetObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n        const stream = obj.Body as Readable;\n        return {\n            stream,\n            contentType: obj.ContentType,\n            size: obj.ContentLength,\n        };\n    }\n\n    async delete(key: string) {\n        await this.s3.send(\n            new DeleteObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n    }\n\n    async exists(key: string) {\n        try {\n            await this.s3.send(\n                new HeadObjectCommand({ Bucket: this.bucket, Key: key }),\n            );\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    getSignedUrl(key: string, expiresInSec: number) {\n        return Promise.resolve(\n            sign(\n                this.s3,\n                new GetObjectCommand({ Bucket: this.bucket, Key: key }),\n                { expiresIn: expiresInSec },\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SchemaResponse.html":{"url":"classes/SchemaResponse.html","title":"class - SchemaResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/schema-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                $schema\n                            \n                            \n                                    \n                                properties\n                            \n                            \n                                    \n                                required\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        $schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"https://json-schema.org/draft/2020-12/schema\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"object\"\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsArray, IsObject, IsString } from \"class-validator\";\n\nexport class SchemaResponse {\n    @IsString()\n    $schema = \"https://json-schema.org/draft/2020-12/schema\";\n    @IsString()\n    type = \"object\";\n    @IsObject()\n    properties: Record;\n    @IsArray()\n    required: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user session in the application.\nIt includes various properties such as credentials, authorization code,\nrequest URI, authorization queries, and more.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                auth_queries\n                            \n                            \n                                    \n                                    Optional\n                                authorization_code\n                            \n                            \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                credentialPayload\n                            \n                            \n                                    \n                                    Optional\n                                credentials\n                            \n                            \n                                    \n                                    Optional\n                                expiresAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                issuanceId\n                            \n                            \n                                    \n                                    Optional\n                                nonce\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                    Optional\n                                offer\n                            \n                            \n                                    \n                                    Optional\n                                offerUrl\n                            \n                            \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    Optional\n                                requestId\n                            \n                            \n                                    \n                                    Optional\n                                requestUrl\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                vp_nonce\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        auth_queries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthorizeQueries\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:92\n                        \n                    \n\n            \n                \n                    Authorization queries associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        authorization_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:82\n                        \n                    \n\n            \n                \n                    Authorization code for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:141\n                        \n                    \n\n            \n                \n                    Webhook configuration to send result and may receive further information.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:109\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentialPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OfferRequestDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:136\n                        \n                    \n\n            \n                \n                    Credential payload containing the offer request details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VerificationResult[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:77\n                        \n                    \n\n            \n                \n                    Verified credentials from the verification process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('date', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:118\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:56\n                        \n                    \n\n            \n                \n                    Unique identifier for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:103\n                        \n                    \n\n            \n                \n                    Nonce used for the OID4VCI flow.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:151\n                        \n                    \n\n            \n                \n                    Notifications associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:146\n                        \n                    \n\n            \n                \n                    Webhook configuration to send the result of the notification response.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CredentialOfferObject\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:124\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offerUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:130\n                        \n                    \n\n            \n                \n                    Offer URL for the credential offer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:87\n                        \n                    \n\n            \n                \n                    Request URI from the authorization request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:65\n                        \n                    \n\n            \n                \n                    The ID of the presentation configuration associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:71\n                        \n                    \n\n            \n                \n                    The URL of the presentation auth request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SessionStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SessionStatus})@Column('varchar', {nullable: true, default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:163\n                        \n                    \n\n            \n                \n                    Status of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:156\n                        \n                    \n\n            \n                \n                    Tenant ID for multi-tenancy support.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:115\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        vp_nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:97\n                        \n                    \n\n            \n                \n                    Noncce from the Verifiable Presentation request.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n    CredentialOfferObject,\n    NotificationEvent,\n} from \"@openid4vc/openid4vci\";\nimport { VerificationResult } from \"@sd-jwt/sd-jwt-vc\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    PrimaryColumn,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { AuthorizeQueries } from \"../../issuer/authorize/dto/authorize-request.dto\";\nimport { OfferRequestDto } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\n\nexport enum SessionStatus {\n    Active = \"active\",\n    Fetched = \"fetched\",\n    Completed = \"completed\",\n    Expired = \"expired\",\n    Failed = \"failed\",\n}\n\n/**\n * Represents a session entity for managing user sessions in the application.\n */\nexport type Notification = {\n    /**\n     * Unique identifier for the notification.\n     */\n    id: string;\n    /**\n     * The type of notification.\n     */\n    event?: NotificationEvent;\n\n    /**\n     * The credential ID associated with the notification.\n     */\n    credentialConfigurationId: string;\n};\n\n/**\n * Entity representing a user session in the application.\n * It includes various properties such as credentials, authorization code,\n * request URI, authorization queries, and more.\n */\n@Entity()\nexport class Session {\n    /**\n     * Unique identifier for the session.\n     */\n    @PrimaryColumn(\"uuid\")\n    id: string;\n\n    @Column(\"varchar\", { nullable: true })\n    issuanceId?: string;\n\n    /**\n     * The ID of the presentation configuration associated with the session.\n     */\n    @Column(\"varchar\", { nullable: true })\n    requestId?: string;\n\n    /**\n     * The URL of the presentation auth request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    requestUrl?: string;\n\n    /**\n     * Verified credentials from the verification process.\n     */\n    @Column(\"json\", { nullable: true })\n    credentials?: VerificationResult[];\n    /**\n     * Authorization code for the session.\n     */\n    @Column(\"varchar\", { nullable: true })\n    authorization_code?: string;\n    /**\n     * Request URI from the authorization request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    request_uri?: string;\n    /**\n     * Authorization queries associated with the session.\n     */\n    @Column(\"json\", { nullable: true })\n    auth_queries?: AuthorizeQueries;\n    /**\n     * Noncce from the Verifiable Presentation request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    vp_nonce?: string;\n\n    /**\n     * Nonce used for the OID4VCI flow.\n     */\n    @Column(\"varchar\", { nullable: true })\n    nonce?: string;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    @Column(\"date\", { nullable: true })\n    expiresAt?: Date;\n\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column(\"json\", { nullable: true })\n    offer?: CredentialOfferObject;\n\n    /**\n     * Offer URL for the credential offer.\n     */\n    @Column(\"varchar\", { nullable: true })\n    offerUrl?: string;\n\n    /**\n     * Credential payload containing the offer request details.\n     */\n    @Column(\"json\", { nullable: true })\n    credentialPayload?: OfferRequestDto;\n    /**\n     * Webhook configuration to send result and may receive further information.\n     */\n    @Column(\"json\", { nullable: true })\n    claimsWebhook?: WebhookConfig;\n    /**\n     * Webhook configuration to send the result of the notification response.\n     */\n    @Column(\"json\", { nullable: true })\n    notifyWebhook?: WebhookConfig;\n    /**\n     * Notifications associated with the session.\n     */\n    @Column(\"json\", { default: JSON.stringify([]) })\n    notifications: Notification[];\n    /**\n     * Tenant ID for multi-tenancy support.\n     */\n    @Column(\"varchar\")\n    tenantId: string;\n\n    /**\n     * Status of the session.\n     */\n    @ApiProperty({ enum: SessionStatus })\n    @Column(\"varchar\", { nullable: true, default: \"active\" })\n    status: SessionStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteSession\n                            \n                            \n                                    \n                                getAllSessions\n                            \n                            \n                                    \n                                getSession\n                            \n                            \n                                    \n                                revokeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSession(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:52\n                        \n                    \n\n\n            \n                \n                        Deletes a session by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllSessions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Retrieves all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:41\n                        \n                    \n\n\n            \n                \n                        Retrieves the session information for a given session ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the session.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revokeAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAll(value: StatusUpdateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('revoke')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:65\n                        \n                    \n\n\n            \n                \n                        Update the status of the credentials of a specific session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../auth/token.decorator\";\nimport { StatusUpdateDto } from \"../issuer/status-list/dto/status-update.dto\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionService } from \"./session.service\";\n\n@ApiTags(\"Session management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"session\")\nexport class SessionController {\n    constructor(\n        private readonly sessionService: SessionService,\n        private readonly statusListService: StatusListService,\n    ) {}\n\n    /**\n     * Retrieves all sessions.\n     */\n    @Get()\n    getAllSessions(): Promise {\n        return this.sessionService.getAll();\n    }\n\n    /**\n     * Retrieves the session information for a given session ID.\n     * @param id - The identifier of the session.\n     */\n    @Get(\":id\")\n    getSession(@Param(\"id\") id: string): Promise {\n        return this.sessionService.get(id);\n    }\n\n    /**\n     * Deletes a session by its ID.\n     * @param id\n     * @param user\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteSession(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ): Promise {\n        return this.sessionService.delete(id, user.sub);\n    }\n\n    /**\n     * Update the status of the credentials of a specific session.\n     * @param value\n     * @returns\n     */\n    @Post(\"revoke\")\n    revokeAll(@Body() value: StatusUpdateDto, @Token() user: TokenPayload) {\n        return this.statusListService.updateStatus(value, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/SessionGuard.html":{"url":"guards/SessionGuard.html","title":"guard - SessionGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    SessionGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/session/session.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.guard.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        canActivate\n                        \n                    \n                \n            \n            \n                \n                        \n                    canActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.guard.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n    CanActivate,\n    ExecutionContext,\n    Injectable,\n    NotFoundException,\n} from \"@nestjs/common\";\nimport { SessionService } from \"./session.service\";\n\n@Injectable()\nexport class SessionGuard implements CanActivate {\n    constructor(private readonly sessionService: SessionService) {}\n\n    async canActivate(context: ExecutionContext): Promise {\n        const request = context.switchToHttp().getRequest();\n        const sessionId = request.params.session;\n        if (!sessionId) {\n            throw new NotFoundException(\n                \"Session ID not found in request parameters\",\n            );\n        }\n        const session = await this.sessionService.get(sessionId);\n        if (!session) {\n            throw new NotFoundException(\n                `Session with ID ${sessionId} not found`,\n            );\n        }\n        request.session = session;\n        return true;\n    }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionLogContext.html":{"url":"interfaces/SessionLogContext.html","title":"interface - SessionLogContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionLogContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Context for session logging, including session ID, tenant ID, flow type, and optional stage.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flowType\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stage\n                                        \n                                \n                                \n                                        \n                                            tenantId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger-context.ts:21\n                            \n                        \n                \n                    \n                        Additional context information for the session.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flowType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flowType:     \"OID4VCI\" | \"OID4VP\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"OID4VCI\" | \"OID4VP\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of flow being logged (e.g., OID4VCI, OID4VP).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for the session.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional stage of the flow, useful for tracking progress.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenantId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenantId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier for the tenant associated with the session.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SessionLogContext {\n    /**\n     * Unique identifier for the session.\n     */\n    sessionId: string;\n    /**\n     * Identifier for the tenant associated with the session.\n     */\n    tenantId: string;\n    /**\n     * Type of flow being logged (e.g., OID4VCI, OID4VP).\n     */\n    flowType: \"OID4VCI\" | \"OID4VP\";\n    /**\n     * Optional stage of the flow, useful for tracking progress.\n     */\n    stage?: string;\n    /**\n     * Additional context information for the session.\n     */\n    [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerInterceptor.html":{"url":"injectables/SessionLoggerInterceptor.html","title":"injectable - SessionLoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for logging session-related requests and responses.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerInterceptor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReflector instance for accessing metadata.\n\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:44\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and logs session-related information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCall handler to proceed with the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:136\n                        \n                    \n\n\n            \n                \n                        Sanitizes the request body to remove sensitive information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request body to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Sanitized body.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Reflector } from \"@nestjs/core\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { Observable } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { SESSION_LOGGER_KEY } from \"./session-logger.decorator\";\n\n/**\n * Interceptor for logging session-related requests and responses.\n */\n@Injectable()\nexport class SessionLoggerInterceptor implements NestInterceptor {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerInterceptor.\n     * @param reflector - Reflector instance for accessing metadata.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing configuration.\n     */\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.isEnabled = this.configService.get(\n            \"LOG_ENABLE_SESSION_LOGGER\",\n            false,\n        );\n    }\n\n    /**\n     * Intercepts the request and logs session-related information.\n     * @param context - Execution context of the request.\n     * @param next - Call handler to proceed with the request.\n     * @returns An observable that emits the response data.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const metadata = this.reflector.get(\n            SESSION_LOGGER_KEY,\n            context.getHandler(),\n        );\n\n        if (!metadata || !this.isEnabled) {\n            return next.handle();\n        }\n\n        const { sessionIdParam, flowType } = metadata;\n        const request = context.switchToHttp().getRequest();\n        const response = context.switchToHttp().getResponse();\n\n        const sessionId = request.params[sessionIdParam];\n\n        const tenantId = request.params?.tenantId;\n        const method = request.method;\n        const url = request.url;\n\n        // Set context for this logger instance\n        this.logger.setContext(\"SessionLogger\");\n\n        // Create log context\n        const logContext = {\n            sessionId,\n            tenantId,\n            flowType,\n            endpoint: `${method} ${url}`,\n        };\n\n        // Log the start of the request\n        this.logger.info(\n            {\n                ...logContext,\n                event: \"request_start\",\n                method,\n                url,\n                headers: {\n                    \"user-agent\": request.headers[\"user-agent\"],\n                    \"content-type\": request.headers[\"content-type\"],\n                },\n                body: this.sanitizeBody(request.body),\n            },\n            `[${flowType}] Starting ${method} ${url} for session ${sessionId}`,\n        );\n\n        const startTime = Date.now();\n\n        return next.handle().pipe(\n            tap((data) => {\n                const duration = Date.now() - startTime;\n                this.logger.info(\n                    {\n                        ...logContext,\n                        event: \"request_success\",\n                        method,\n                        url,\n                        statusCode: response.statusCode,\n                        duration,\n                        responseSize: JSON.stringify(data || {}).length,\n                    },\n                    `[${flowType}] Completed ${method} ${url} for session ${sessionId} in ${duration}ms`,\n                );\n            }),\n            catchError((error) => {\n                const duration = Date.now() - startTime;\n                this.logger.error(\n                    {\n                        ...logContext,\n                        event: \"request_error\",\n                        method,\n                        url,\n                        error: {\n                            name: error.name,\n                            message: error.message,\n                            stack: error.stack,\n                        },\n                        duration,\n                    },\n                    `[${flowType}] Error in ${method} ${url} for session ${sessionId}: ${error.message}`,\n                );\n                throw error;\n            }),\n        );\n    }\n\n    /**\n     * Sanitizes the request body to remove sensitive information.\n     * @param body - The request body to sanitize.\n     * @returns Sanitized body.\n     */\n    private sanitizeBody(body: any): any {\n        if (!body) return body;\n\n        // Create a copy to avoid modifying the original\n        const sanitized = { ...body };\n\n        // Remove sensitive fields\n        const sensitiveFields = [\n            \"password\",\n            \"token\",\n            \"secret\",\n            \"key\",\n            \"private_key\",\n            \"access_token\",\n            \"refresh_token\",\n        ];\n\n        sensitiveFields.forEach((field) => {\n            if (sanitized[field]) {\n                sanitized[field] = \"[REDACTED]\";\n            }\n        });\n\n        return sanitized;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerService.html":{"url":"injectables/SessionLoggerService.html","title":"injectable - SessionLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for logging session-related events and errors.\nUses PinoLogger for structured logging.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logAuthorizationRequest\n                            \n                            \n                                logCredentialIssuance\n                            \n                            \n                                logCredentialVerification\n                            \n                            \n                                logFlowComplete\n                            \n                            \n                                logFlowError\n                            \n                            \n                                logFlowStart\n                            \n                            \n                                logNotification\n                            \n                            \n                                logSession\n                            \n                            \n                                logSessionError\n                            \n                            \n                                logTokenExchange\n                            \n                            \n                                    Private\n                                shouldLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing environment configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \nlogAuthorizationRequest(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Log authorization request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialIssuance\n                        \n                    \n                \n            \n            \n                \nlogCredentialIssuance(context: SessionLogContext, credentialType: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Log credential issuance step\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialVerification\n                        \n                    \n                \n            \n            \n                \nlogCredentialVerification(context: SessionLogContext, verificationResult: boolean, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Log credential presentation verification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                verificationResult\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowComplete\n                        \n                    \n                \n            \n            \n                \nlogFlowComplete(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Log session flow completion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowError\n                        \n                    \n                \n            \n            \n                \nlogFlowError(context: SessionLogContext, error: Error, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Log session flow error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowStart\n                        \n                    \n                \n            \n            \n                \nlogFlowStart(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Log session flow start\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logNotification\n                        \n                    \n                \n            \n            \n                \nlogNotification(context: SessionLogContext, notificationEvent: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Log notification events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notificationEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSession\n                        \n                    \n                \n            \n            \n                \nlogSession(context: SessionLogContext, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Generic session log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSessionError\n                        \n                    \n                \n            \n            \n                \nlogSessionError(context: SessionLogContext, error: Error, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Generic session error log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logTokenExchange\n                        \n                    \n                \n            \n            \n                \nlogTokenExchange(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Log token exchange\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    shouldLog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { SessionLogContext } from \"./session-logger-context\";\n\n/**\n * Service for logging session-related events and errors.\n * Uses PinoLogger for structured logging.\n */\n@Injectable()\nexport class SessionLoggerService {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerService.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing environment configuration.\n     */\n    constructor(\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.logger.setContext(\"SessionLoggerService\");\n        this.isEnabled = this.configService.get(\n            \"LOG_ENABLE_SESSION_LOGGER\",\n            false,\n        );\n    }\n\n    private shouldLog(): boolean {\n        return this.isEnabled;\n    }\n\n    /**\n     * Log session flow start\n     */\n    logFlowStart(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow started for session ${context.sessionId} in tenant ${context.tenantId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"flow_start\",\n                stage: \"initialization\",\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow completion\n     */\n    logFlowComplete(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow completed for session ${context.sessionId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"flow_complete\",\n                stage: \"completion\",\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow error\n     */\n    logFlowError(\n        context: SessionLogContext,\n        error: Error,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow error for session ${context.sessionId}: ${error.message}`;\n\n        this.logger.error(\n            {\n                ...context,\n                event: \"flow_error\",\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log credential issuance step\n     */\n    logCredentialIssuance(\n        context: SessionLogContext,\n        credentialType: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"credential_issuance\",\n                stage: \"credential_creation\",\n                credentialType,\n                ...additionalData,\n            },\n            `[${context.flowType}] Issuing credential of type ${credentialType} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log credential presentation verification\n     */\n    logCredentialVerification(\n        context: SessionLogContext,\n        verificationResult: boolean,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"credential_verification\",\n                stage: \"verification\",\n                verificationResult,\n                ...additionalData,\n            },\n            `[${context.flowType}] Credential verification ${verificationResult ? \"succeeded\" : \"failed\"} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log authorization request\n     */\n    logAuthorizationRequest(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"authorization_request\",\n                stage: \"authorization\",\n                ...additionalData,\n            },\n            `[${context.flowType}] Authorization request created for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log token exchange\n     */\n    logTokenExchange(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"token_exchange\",\n                stage: \"token_exchange\",\n                ...additionalData,\n            },\n            `[${context.flowType}] Token exchange for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log notification events\n     */\n    logNotification(\n        context: SessionLogContext,\n        notificationEvent: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"notification\",\n                stage: \"notification\",\n                notificationEvent,\n                ...additionalData,\n            },\n            `[${context.flowType}] Notification ${notificationEvent} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Generic session log method\n     */\n    logSession(\n        context: SessionLogContext,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}`,\n        );\n    }\n\n    /**\n     * Generic session error log method\n     */\n    logSessionError(\n        context: SessionLogContext,\n        error: Error,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.error(\n            {\n                ...context,\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}: ${error.message}`,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_SessionModule_imports\n\n\n\n\nStatusListModule\n\nStatusListModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            SessionModule is responsible for managing user sessions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { makeGaugeProvider } from \"@willsoto/nestjs-prometheus\";\nimport * as Joi from \"joi\";\nimport { StatusListModule } from \"../issuer/status-list/status-list.module\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionController } from \"./session.controller\";\nimport { SessionService } from \"./session.service\";\n\n/**\n * Module for managing user sessions.\n */\nexport const SESSION_VALIDATION_SCHEMA = {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n};\n\n/**\n * SessionModule is responsible for managing user sessions.\n */\n@Module({\n    imports: [TypeOrmModule.forFeature([Session]), StatusListModule],\n    providers: [\n        SessionService,\n        makeGaugeProvider({\n            name: \"sessions\",\n            help: \"Total number of sessions by status\",\n            labelNames: [\"tenant_id\", \"session_type\", \"status\"],\n        }),\n    ],\n    exports: [SessionService],\n    controllers: [SessionController],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                getBy\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                setState\n                            \n                            \n                                tidyUpSessions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository, configService: ConfigService, schedulerRegistry: SchedulerRegistry, sessionsCounter: Gauge)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionsCounter\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(issuer_state: string, values: QueryDeepPartialEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:136\n                        \n                    \n\n\n            \n                \n                        Update an existing session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            QueryDeepPartialEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(session: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Create a new session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, sub: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:184\n                        \n                    \n\n\n            \n                \n                        Deletes a session by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:155\n                        \n                    \n\n\n            \n                \n                        Get a session by its state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:144\n                        \n                    \n\n\n            \n                \n                        Get all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBy\n                        \n                    \n                \n            \n            \n                \ngetBy(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:164\n                        \n                    \n\n\n            \n                \n                        Get a session by a specific condition.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Register the tidy up cron job on application bootstrap.\nThis will run every hour by default, but can be configured via the SESSION_TIDY_UP_INTERVAL config variable.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setState\n                        \n                    \n                \n            \n            \n                \n                        \n                    setState(session: Session, status: SessionStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Marks the session as successful or failed.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            SessionStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tidyUpSessions\n                        \n                    \n                \n            \n            \n                \ntidyUpSessions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:171\n                        \n                    \n\n\n            \n                \n                        Tidy up sessions that are older than 1 day.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { SchedulerRegistry } from \"@nestjs/schedule\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus/dist/injector\";\nimport { Gauge } from \"prom-client\";\nimport {\n    DeepPartial,\n    FindOptionsWhere,\n    IsNull,\n    LessThan,\n    Not,\n    Repository,\n} from \"typeorm\";\nimport { QueryDeepPartialEntity } from \"typeorm/query-builder/QueryPartialEntity\";\nimport { Session, SessionStatus } from \"./entities/session.entity\";\n\n@Injectable()\nexport class SessionService implements OnApplicationBootstrap {\n    constructor(\n        @InjectRepository(Session)\n        private sessionRepository: Repository,\n        private readonly configService: ConfigService,\n        private readonly schedulerRegistry: SchedulerRegistry,\n        @InjectMetric(\"sessions\")\n        private sessionsCounter: Gauge,\n    ) {}\n\n    /**\n     * Register the tidy up cron job on application bootstrap.\n     * This will run every hour by default, but can be configured via the `SESSION_TIDY_UP_INTERVAL` config variable.\n     * @returns\n     */\n    async onApplicationBootstrap() {\n        const callback = () => {\n            void this.tidyUpSessions();\n        };\n        const intervalTime =\n            this.configService.getOrThrow(\"SESSION_TIDY_UP_INTERVAL\") *\n            1000;\n        const interval = setInterval(callback, intervalTime);\n        this.schedulerRegistry.addInterval(\"tidyUpSessions\", interval);\n\n        //set default values for session metrics\n        const tenantId = \"root\";\n        const states: SessionStatus[] = [\n            SessionStatus.Active,\n            SessionStatus.Fetched,\n            SessionStatus.Completed,\n            SessionStatus.Expired,\n            SessionStatus.Failed,\n        ];\n        for (const state of states) {\n            const issuanceCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: Not(IsNull()),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: \"issuance\",\n                    status: state,\n                },\n                issuanceCounter,\n            );\n            const verificationCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: IsNull(),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: \"verification\",\n                    status: state,\n                },\n                verificationCounter,\n            );\n        }\n\n        return this.tidyUpSessions();\n    }\n\n    /**\n     * Create a new session.\n     * @param session\n     * @returns\n     */\n    async create(session: DeepPartial) {\n        const createdSession = await this.sessionRepository.save(session);\n\n        // Count total sessions created\n        this.sessionsCounter.inc({\n            tenant_id: createdSession.tenantId,\n            session_type: createdSession.issuanceId\n                ? \"issuance\"\n                : \"verification\",\n            status: \"active\",\n        });\n\n        return createdSession;\n    }\n\n    /**\n     * Marks the session as successful or failed.\n     * @param session\n     * @param status\n     */\n    async setState(session: Session, status: SessionStatus) {\n        const sessionType = session.issuanceId ? \"issuance\" : \"verification\";\n\n        await this.sessionRepository.update({ id: session.id }, { status });\n\n        // Count completed sessions (success or failure)\n        this.sessionsCounter.inc({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status,\n        });\n\n        // Decrease active sessions count\n        this.sessionsCounter.dec({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status: \"active\",\n        });\n    }\n\n    /**\n     * Update an existing session.\n     * @param issuer_state\n     * @param values\n     * @returns\n     */\n    add(issuer_state: string, values: QueryDeepPartialEntity) {\n        return this.sessionRepository.update({ id: issuer_state }, values);\n    }\n\n    /**\n     * Get all sessions.\n     * @returns\n     */\n    getAll(): Promise {\n        return this.sessionRepository.find({\n            order: { updatedAt: \"DESC\" },\n        });\n    }\n\n    /**\n     * Get a session by its state.\n     * @param state\n     * @returns\n     */\n    get(state: string) {\n        return this.sessionRepository.findOneByOrFail({ id: state });\n    }\n\n    /**\n     * Get a session by a specific condition.\n     * @param where\n     * @returns\n     */\n    getBy(where: FindOptionsWhere) {\n        return this.sessionRepository.findOneByOrFail(where);\n    }\n\n    /**\n     * Tidy up sessions that are older than 1 day.\n     */\n    tidyUpSessions() {\n        const ttl = this.configService.getOrThrow(\"SESSION_TTL\") * 1000;\n        return this.sessionRepository.delete({\n            createdAt: LessThan(new Date(Date.now() - ttl)),\n        });\n    }\n\n    /**\n     * Deletes a session by its ID and tenant ID.\n     * @param id\n     * @param sub\n     * @returns\n     */\n    delete(id: string, sub: string): Promise {\n        return this.sessionRepository.delete({ id, tenantId: sub });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatusListController.html":{"url":"controllers/StatusListController.html","title":"controller - StatusListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatusListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/status-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status-list')@Header('Content-Type', 'application/statuslist+jwt')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.controller.ts:17\n                        \n                    \n\n\n            \n                \n                        Get the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from \"@nestjs/common\";\nimport { ApiExcludeController, ApiTags } from \"@nestjs/swagger\";\nimport { StatusListService } from \"./status-list.service\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiTags(\"Status management\")\n@Controller(\":tenantId/status-management\")\nexport class StatusListController {\n    constructor(private statusListService: StatusListService) {}\n\n    /**\n     * Get the status list\n     * @returns\n     */\n    @Get(\"status-list\")\n    @Header(\"Content-Type\", \"application/statuslist+jwt\")\n    getList(@Param(\"tenantId\") tenantId: string) {\n        return this.statusListService.getList(tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusListEntity.html":{"url":"entities/StatusListEntity.html","title":"entity - StatusListEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusListEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-list.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing the status list for a tenant.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                bits\n                            \n                            \n                                    \n                                elements\n                            \n                            \n                                    \n                                    Optional\n                                jwt\n                            \n                            \n                                    \n                                stack\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bits\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BitsPerStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:31\n                        \n                    \n\n            \n                \n                    The number of bits used for each status in the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        elements\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:19\n                        \n                    \n\n            \n                \n                    The elements of the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        jwt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:37\n                        \n                    \n\n            \n                \n                    The JSON Web Token (JWT) for the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        stack\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:25\n                        \n                    \n\n            \n                \n                    The stack of available indexes for the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:13\n                        \n                    \n\n            \n                \n                    The ID of the tenant to which the status list belongs.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { BitsPerStatus } from \"@sd-jwt/jwt-status-list\";\nimport { Column, Entity } from \"typeorm\";\n\n/**\n * Entity representing the status list for a tenant.\n */\n@Entity()\nexport class StatusListEntity {\n    /**\n     * The ID of the tenant to which the status list belongs.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The elements of the status list.\n     */\n    @Column(\"json\")\n    elements: number[];\n\n    /**\n     * The stack of available indexes for the status list.\n     */\n    @Column(\"json\")\n    stack: number[];\n\n    /**\n     * The number of bits used for each status in the status list.\n     */\n    @Column(\"int\")\n    bits: BitsPerStatus;\n\n    /**\n     * The JSON Web Token (JWT) for the status list.\n     */\n    @Column(\"varchar\", { nullable: true })\n    jwt?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatusListModule.html":{"url":"modules/StatusListModule.html","title":"module - StatusListModule","body":"\n                   \n\n\n\n\n    Modules\n    StatusListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_providers\n\n\n\ncluster_StatusListModule_imports\n\n\n\ncluster_StatusListModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/status-list/status-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatusListController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoModule } from \"../../crypto/crypto.module\";\nimport { StatusListEntity } from \"./entities/status-list.entity\";\nimport { StatusMapping } from \"./entities/status-mapping.entity\";\nimport { StatusListController } from \"./status-list.controller\";\nimport { StatusListService } from \"./status-list.service\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        TypeOrmModule.forFeature([StatusMapping, StatusListEntity]),\n    ],\n    controllers: [StatusListController],\n    providers: [StatusListService],\n    exports: [StatusListService],\n})\nexport class StatusListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatusListService.html":{"url":"injectables/StatusListService.html","title":"injectable - StatusListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatusListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                createList\n                            \n                            \n                                getList\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Private\n                                    Async\n                                setEntry\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, statusMappingRepository: Repository, statusListRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/status-list/status-list.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusMappingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEntry(session: Session, credentialConfigurationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:115\n                        \n                    \n\n\n            \n                \n                        Get the next free entry in the status list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                        \n                    createList(entry: StatusListEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Create a new status list and stored it in the file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            StatusListEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getList\n                        \n                    \n                \n            \n            \n                \ngetList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:105\n                        \n                    \n\n\n            \n                \n                        Get the JWT for the status list of a tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The JWT for the status list.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Initialize the status list service by checking if the status list file exists.\nIf it does not exist, create a new status list with 10,000 entries and a stack\nof 10,000 indexes. The stack is shuffled to ensure randomness in the order of\nentries. The status list is stored in the file system as a JSON file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        setEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    setEntry(id: number, value: number, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:157\n                        \n                    \n\n\n            \n                \n                        Update the value of an entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(value: StatusUpdateDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:173\n                        \n                    \n\n\n            \n                \n                        Update the status of a session and its credential configuration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport {\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from \"@sd-jwt/jwt-status-list\";\nimport { JwtPayload } from \"@sd-jwt/types\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { StatusUpdateDto } from \"./dto/status-update.dto\";\nimport { StatusListEntity } from \"./entities/status-list.entity\";\nimport { StatusMapping } from \"./entities/status-mapping.entity\";\n\n@Injectable()\nexport class StatusListService {\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n        @InjectRepository(StatusListEntity)\n        private statusListRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    async onTenantInit(tenantId: string) {\n        const size = 10000;\n        // create an empty array with the size of 1000\n        const elements = new Array(size).fill(0).map(() => 0);\n        // create a list of 1000 indexes and shuffel them\n        const stack = new Array(size)\n            .fill(0)\n            .map((_, i) => i)\n            .sort(() => 0.5 - Math.random());\n\n        const entry = await this.statusListRepository.save({\n            tenantId,\n            elements,\n            stack,\n            bits: 1,\n        });\n\n        await this.createList(entry);\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(entry: StatusListEntity) {\n        const list = new StatusList(entry.elements, entry.bits);\n        const iss = `${this.configService.getOrThrow(\"PUBLIC_URL\")}`;\n\n        const sub = join(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n            entry.tenantId,\n            \"status-management\",\n            \"status-list\",\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: \"ES256\",\n            typ: \"statuslist+jwt\",\n            x5c: await this.cryptoService.getCertChain(\n                \"signing\",\n                entry.tenantId,\n            ),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(\n            header,\n            payload,\n            entry.tenantId,\n        );\n        await this.statusListRepository.update(\n            { tenantId: entry.tenantId },\n            { jwt },\n        );\n    }\n\n    /**\n     * Get the JWT for the status list of a tenant.\n     * @param tenantId The ID of the tenant.\n     * @returns The JWT for the status list.\n     */\n    getList(tenantId: string) {\n        return this.statusListRepository\n            .findOneByOrFail({ tenantId })\n            .then((file) => file.jwt);\n    }\n\n    /**\n     * Get the next free entry in the status list.\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = await this.statusListRepository.findOneByOrFail({\n            tenantId: session.tenantId,\n        });\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error(\"Stack for status list is empty!!!\");\n        }\n        const sub = join(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n            session.tenantId,\n            \"status-management\",\n            \"status-list\",\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private async setEntry(id: number, value: number, tenantId: string) {\n        const entry = await this.statusListRepository.findOneByOrFail({\n            tenantId,\n        });\n        entry.elements[id] = value;\n        await this.statusListRepository.update(\n            { tenantId },\n            { elements: entry.elements },\n        );\n        return this.createList(entry);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusMapping.html":{"url":"entities/StatusMapping.html","title":"entity - StatusMapping","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-mapping.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigurationId\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                list\n                            \n                            \n                                    \n                                sessionId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:6\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from \"typeorm\";\n\n@Entity()\nexport class StatusMapping {\n    @Column({ type: \"varchar\", primary: true })\n    sessionId: string;\n\n    @Column({ type: \"varchar\", primary: true })\n    list: string;\n\n    @Column({ type: \"int\", primary: true })\n    index: number;\n\n    @Column({ type: \"varchar\", primary: true })\n    credentialConfigurationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusUpdateDto.html":{"url":"classes/StatusUpdateDto.html","title":"class - StatusUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/dto/status-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationId\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:16\n                        \n                    \n\n            \n                \n                    The ID of the credential configuration\nThis is optional, if not provided, all credentials will be revoked of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:8\n                        \n                    \n\n            \n                \n                    The session ID of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsIn(['0', '1'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:24\n                        \n                    \n\n            \n                \n                    The status of the credential\n0 = valid, 1 = revoked\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNumber, IsOptional, IsString } from \"class-validator\";\n\nexport class StatusUpdateDto {\n    /**\n     * The session ID of the user\n     */\n    @IsString()\n    sessionId: string;\n\n    /**\n     * The ID of the credential configuration\n     * This is optional, if not provided, all credentials will be revoked of the session.\n     */\n    @IsString()\n    @IsOptional()\n    credentialConfigurationId?: string;\n\n    /**\n     * The status of the credential\n     * 0 = valid, 1 = revoked\n     */\n    @IsNumber()\n    @IsIn([0, 1])\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StorageModule.html":{"url":"modules/StorageModule.html","title":"module - StorageModule","body":"\n                   \n\n\n\n\n    Modules\n    StorageModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/storage/storage.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.module.ts:51\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { S3Client } from \"@aws-sdk/client-s3\";\nimport { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport * as Joi from \"joi\";\nimport { LocalFileStorage } from \"./adapters/local.storage\";\nimport { S3FileStorage } from \"./adapters/s3.storage\";\nimport { FilesService } from \"./files.service\";\nimport { FILE_STORAGE, FileStorage } from \"./storage.types\";\n\ntype Driver = \"local\" | \"s3\";\n\nexport const CONFIG_STORAGE_SCHEMA = {\n    STORAGE_DRIVER: Joi.string().valid(\"local\", \"s3\").default(\"local\"),\n    LOCAL_STORAGE_DIR: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"local\",\n        then: Joi.string().default(\"uploads\"),\n    }),\n    S3_REGION: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_BUCKET: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ACCESS_KEY_ID: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_SECRET_ACCESS_KEY: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ENDPOINT: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.optional(),\n    }),\n    S3_FORCE_PATH_STYLE: Joi.boolean().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.boolean().default(false),\n    }),\n    S3_PUBLIC_BASE_URL: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class StorageModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: StorageModule,\n            imports: [ConfigModule.forRoot({ isGlobal: true })],\n            providers: [\n                {\n                    provide: FILE_STORAGE,\n                    inject: [ConfigService],\n                    useFactory: (cfg: ConfigService): FileStorage => {\n                        const driver = cfg.get(\"STORAGE_DRIVER\");\n                        if (driver === \"s3\") {\n                            return new S3FileStorage(\n                                new S3Client({\n                                    region: cfg.get(\"S3_REGION\"),\n                                    endpoint: cfg.get(\"S3_ENDPOINT\"),\n                                    forcePathStyle: cfg.get(\n                                        \"S3_FORCE_PATH_STYLE\",\n                                    ),\n                                    credentials: {\n                                        accessKeyId:\n                                            cfg.get(\n                                                \"S3_ACCESS_KEY_ID\",\n                                            )!,\n                                        secretAccessKey: cfg.get(\n                                            \"S3_SECRET_ACCESS_KEY\",\n                                        )!,\n                                    },\n                                }),\n                                cfg.get(\"S3_BUCKET\")!,\n                                cfg.get(\"S3_PUBLIC_BASE_URL\"),\n                            );\n                        }\n                        // local\n                        return new LocalFileStorage(\n                            cfg.getOrThrow(\"LOCAL_STORAGE_DIR\"),\n                        );\n                    },\n                },\n            ],\n            exports: [FILE_STORAGE],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Values of the user token\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from \"@nestjs/common\";\n\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    sub: string; // Subject (client_id for client credentials)\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenRequestDto.html":{"url":"classes/TokenRequestDto.html","title":"class - TokenRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/dto/token-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                client_id\n                            \n                            \n                                    \n                                    \n                                client_secret\n                            \n                            \n                                    \n                                    \n                                    \n                                grant_type\n                            \n                            \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The client identifier', example: 'my-client-id'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The client secret', example: 'my-client-secret'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        grant_type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The grant type', enum: undefined, example: 'client_credentials'})@IsString()@IsIn(['client_credentials'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The scope of the access request', example: 'openid', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsString } from \"class-validator\";\n\nexport class TokenRequestDto {\n    @ApiProperty({\n        description: \"The grant type\",\n        enum: [\"client_credentials\"],\n        example: \"client_credentials\",\n    })\n    @IsString()\n    @IsIn([\"client_credentials\"])\n    grant_type: \"client_credentials\";\n\n    @ApiProperty({\n        description: \"The client identifier\",\n        example: \"my-client-id\",\n    })\n    @IsString()\n    client_id: string;\n\n    @ApiProperty({\n        description: \"The client secret\",\n        example: \"my-client-secret\",\n    })\n    @IsString()\n    client_secret: string;\n\n    @ApiProperty({\n        description: \"The scope of the access request\",\n        example: \"openid\",\n        required: false,\n    })\n    scope?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponse.html":{"url":"classes/TokenResponse.html","title":"class - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                expires_in\n                            \n                            \n                                    Optional\n                                refresh_token\n                            \n                            \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenResponse {\n    access_token: string;\n    refresh_token?: string;\n    token_type: \"Bearer\";\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponseDto.html":{"url":"classes/TokenResponseDto.html","title":"class - TokenResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                access_token\n                            \n                            \n                                    \n                                expires_in\n                            \n                            \n                                    \n                                    Optional\n                                scope\n                            \n                            \n                                    \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The access token', example: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The lifetime in seconds of the access token', example: 3600})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The scope of the access token', example: 'openid', required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token_type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The type of the token', example: 'Bearer'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class TokenResponseDto {\n    @ApiProperty({\n        description: \"The access token\",\n        example: \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...\",\n    })\n    access_token: string;\n\n    @ApiProperty({\n        description: \"The type of the token\",\n        example: \"Bearer\",\n    })\n    token_type: \"Bearer\";\n\n    @ApiProperty({\n        description: \"The lifetime in seconds of the access token\",\n        example: 3600,\n    })\n    expires_in: number;\n\n    @ApiProperty({\n        description: \"The scope of the access token\",\n        example: \"openid\",\n        required: false,\n    })\n    scope?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCredentialIssuanceBindingDto.html":{"url":"classes/UpdateCredentialIssuanceBindingDto.html","title":"class - UpdateCredentialIssuanceBindingDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCredentialIssuanceBindingDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for updating the key ID of an existing binding.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                keyID\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        keyID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The new key ID to use for signing this credential', example: 'signing-key-2024-02'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/credential-issuance-binding.dto.ts:40\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsString, IsUUID } from \"class-validator\";\n\n/**\n * DTO for creating a new credential-issuance binding.\n */\nexport class CreateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: \"The ID of the credential configuration\",\n        example: \"university-degree\",\n    })\n    @IsString()\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: \"The ID of the issuance configuration\",\n        example: \"123e4567-e89b-12d3-a456-426614174000\",\n    })\n    @IsUUID()\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description:\n            \"The key ID to use for signing this credential in this issuance config\",\n        example: \"signing-key-2024-01\",\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for updating the key ID of an existing binding.\n */\nexport class UpdateCredentialIssuanceBindingDto {\n    @ApiProperty({\n        description: \"The new key ID to use for signing this credential\",\n        example: \"signing-key-2024-02\",\n    })\n    @IsString()\n    keyID: string;\n}\n\n/**\n * DTO for the response of a credential-issuance binding.\n */\nexport class CredentialIssuanceBindingResponseDto {\n    @ApiProperty({\n        description: \"The unique identifier of the binding\",\n        example: \"123e4567-e89b-12d3-a456-426614174000\",\n    })\n    id: string;\n\n    @ApiProperty({\n        description: \"The ID of the credential configuration\",\n        example: \"university-degree\",\n    })\n    credentialConfigId: string;\n\n    @ApiProperty({\n        description: \"The ID of the issuance configuration\",\n        example: \"123e4567-e89b-12d3-a456-426614174000\",\n    })\n    issuanceConfigId: string;\n\n    @ApiProperty({\n        description: \"The key ID used for signing this credential\",\n        example: \"signing-key-2024-01\",\n    })\n    keyID: string;\n\n    @ApiProperty({\n        description: \"The timestamp when the binding was created\",\n        example: \"2024-08-03T10:30:00Z\",\n    })\n    createdAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateKeyDto.html":{"url":"classes/UpdateKeyDto.html","title":"class - UpdateKeyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateKeyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-update.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        OmitType(KeyImportDto, [\n    \"privateKey\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { KeyImportDto } from \"./key-import.dto\";\n\nexport class UpdateKeyDto extends OmitType(KeyImportDto, [\n    \"privateKey\",\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VCT.html":{"url":"classes/VCT.html","title":"class - VCT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VCT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/credential-config.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    Optional\n                                extends\n                            \n                            \n                                    \n                                    Optional\n                                extends#integrity\n                            \n                            \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri\n                            \n                            \n                                    \n                                    Optional\n                                schema_uri#integrity\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        extends#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        schema_uri#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/credential-config.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\n\nexport class VCT {\n    @IsString()\n    vct: string;\n    @IsString()\n    name?: string;\n    @IsString()\n    description?: string;\n    @IsString()\n    extends?: string;\n    @IsString()\n    \"extends#integrity\"?: string;\n    @IsString()\n    schema_uri?: string;\n    @IsString()\n    \"schema_uri#integrity\"?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VerifierModule.html":{"url":"modules/VerifierModule.html","title":"module - VerifierModule","body":"\n                   \n\n\n\n\n    Modules\n    VerifierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VerifierModule\n\n\n\ncluster_VerifierModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/verifier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { RegistrarModule } from \"../registrar/registrar.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { Oid4vpModule } from \"./oid4vp/oid4vp.module\";\nimport { PresentationsModule } from \"./presentations/presentations.module\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        SessionModule,\n        HttpModule,\n        PresentationsModule,\n        Oid4vpModule,\n    ],\n})\nexport class VerifierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfig.html":{"url":"classes/WebHookAuthConfig.html","title":"class - WebHookAuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhook authentication.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApiKeyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:43\n                        \n                    \n\n            \n                \n                    Configuration for API key authentication.\nThis is required if the type is 'apiKey'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['apiKey'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:36\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\nCurrently, only 'apiKey' is supported.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsIn, IsObject, IsOptional, IsString } from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = \"apiKey\";\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn([\"apiKey\"])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookConfig.html":{"url":"classes/WebhookConfig.html","title":"class - WebhookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhooks used in various services.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                auth\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebHookAuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:62\n                        \n                    \n\n            \n                \n                    Optional authentication configuration for the webhook.\nIf not provided, no authentication will be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:54\n                        \n                    \n\n            \n                \n                    The URL to which the webhook will send notifications.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsIn, IsObject, IsOptional, IsString } from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     * @example Authorization\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     * @example Bearer your_api_key_here\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport type AuthConfig = \"apiKey\";\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     * Currently, only 'apiKey' is supported.\n     */\n    @IsIn([\"apiKey\"])\n    type: AuthConfig;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @Type(() => WebHookAuthConfig)\n    @IsOptional()\n    @IsObject()\n    auth?: WebHookAuthConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookResponse.html":{"url":"classes/WebhookResponse.html","title":"class - WebhookResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Response from a webhook to receive credentials.\n\n            \n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    Record\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:12\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { Injectable } from \"@nestjs/common\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Notification, Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../logger/session-logger.service\";\nimport { SessionLogContext } from \"../logger/session-logger-context\";\n\n/**\n * Response from a webhook to receive credentials.\n */\nexport class WebhookResponse {\n    [key: string]: Record;\n}\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the optional provided credentials, return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     * @param expectResponse Whether to expect a response from the webhook\n     */\n    sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials?: any[],\n        expectResponse = true,\n    ) {\n        const headers: Record = {};\n        if (\n            session.claimsWebhook!.auth &&\n            session.claimsWebhook!.auth.type === \"apiKey\"\n        ) {\n            headers[session.claimsWebhook!.auth.config.headerName] =\n                session.claimsWebhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, \"Sending webhook\", {\n            webhookUrl: session.claimsWebhook!.url,\n            authType: session.claimsWebhook!.auth?.type || \"none\",\n        });\n\n        return firstValueFrom(\n            this.httpService.post(\n                session.claimsWebhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data && expectResponse) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n                return webhookResponse.data;\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === \"apiKey\") {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            \"Sending webhook notification\",\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || \"none\",\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook notification sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebhookService.html":{"url":"injectables/WebhookService.html","title":"injectable - WebhookService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WebhookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling webhooks in the application.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendWebhook\n                            \n                            \n                                    Async\n                                sendWebhookNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, sessionService: SessionService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor for WebhookService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendWebhook\n                        \n                    \n                \n            \n            \n                \nsendWebhook(session: Session, logContext: SessionLogContext, credentials?: any[], expectResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Sends a webhook with the optional provided credentials, return the response data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                credentials\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                expectResponse\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    Whether to expect a response from the webhook\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendWebhookNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWebhookNotification(session: Session, logContext: SessionLogContext, notification: Notification)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:111\n                        \n                    \n\n\n            \n                \n                        Sends a webhook notification for a session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notification\n                                            \n                                                            Notification\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { Injectable } from \"@nestjs/common\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Notification, Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../logger/session-logger.service\";\nimport { SessionLogContext } from \"../logger/session-logger-context\";\n\n/**\n * Response from a webhook to receive credentials.\n */\nexport class WebhookResponse {\n    [key: string]: Record;\n}\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the optional provided credentials, return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     * @param expectResponse Whether to expect a response from the webhook\n     */\n    sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials?: any[],\n        expectResponse = true,\n    ) {\n        const headers: Record = {};\n        if (\n            session.claimsWebhook!.auth &&\n            session.claimsWebhook!.auth.type === \"apiKey\"\n        ) {\n            headers[session.claimsWebhook!.auth.config.headerName] =\n                session.claimsWebhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, \"Sending webhook\", {\n            webhookUrl: session.claimsWebhook!.url,\n            authType: session.claimsWebhook!.auth?.type || \"none\",\n        });\n\n        return firstValueFrom(\n            this.httpService.post(\n                session.claimsWebhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data && expectResponse) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n                return webhookResponse.data;\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === \"apiKey\") {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            \"Sending webhook notification\",\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || \"none\",\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook notification sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WellKnownController.html":{"url":"controllers/WellKnownController.html","title":"controller - WellKnownController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WellKnownController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/.well-known\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI well-known endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authzMetadata\n                            \n                            \n                                    \n                                    \n                                getJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                issuerMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    authzMetadata(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('oauth-authorization-server')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:59\n                        \n                    \n\n\n            \n                \n                        Authorization Server Metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJwks(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Header('Content-Type', 'application/jwk-set+json')@Get('jwks.json')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:71\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for the authorization server.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get OpenID4VCI issuer metadata', description: 'Returns the OpenID4VCI issuer metadata.'})@ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)@Get('openid-credential-issuer')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:47\n                        \n                    \n\n\n            \n                \n                        Retrieves the OpenID4VCI issuer metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, UseGuards } from \"@nestjs/common\";\nimport {\n    ApiExcludeController,\n    ApiOperation,\n    ApiParam,\n    ApiProduces,\n} from \"@nestjs/swagger\";\nimport { Session } from \"../session/entities/session.entity\";\nimport { SessionEntity } from \"../session/session.decorator\";\nimport { SessionGuard } from \"../session/session.guard\";\nimport { ContentType } from \"../utils/mediaType/media-type.decorator\";\nimport { MediaType } from \"../utils/mediaType/media-type.enum\";\nimport { JwksResponseDto } from \"./dto/jwks-response.dto\";\nimport { Oauth2AuthorizationServerResponse } from \"./dto/oauth-authorization-server-response.dto\";\nimport { WellKnownService } from \"./well-known.service\";\n\n/**\n * Controller for the OpenID4VCI well-known endpoints.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@UseGuards(SessionGuard)\n@ApiParam({\n    name: \"session\",\n    required: true,\n})\n@Controller(\":session/.well-known\")\nexport class WellKnownController {\n    /**\n     * Constructor for WellKnownController.\n     * @param wellKnownService\n     */\n    constructor(private readonly wellKnownService: WellKnownService) {}\n\n    /**\n     * Retrieves the OpenID4VCI issuer metadata for a given tenant.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    @ApiOperation({\n        summary: \"Get OpenID4VCI issuer metadata\",\n        description: \"Returns the OpenID4VCI issuer metadata.\",\n    })\n    //we can not set the accept in the apiheader via swagger.\n    @ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)\n    @Get(\"openid-credential-issuer\")\n    issuerMetadata(\n        @SessionEntity() session: Session,\n        @ContentType() contentType: MediaType,\n    ) {\n        return this.wellKnownService.getIssuerMetadata(session, contentType);\n    }\n\n    /**\n     * Authorization Server Metadata\n     * @returns\n     */\n    @Get(\"oauth-authorization-server\")\n    authzMetadata(\n        @SessionEntity() session: Session,\n    ): Oauth2AuthorizationServerResponse {\n        return this.wellKnownService.getAuthzMetadata(session);\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for the authorization server.\n     * @returns\n     */\n    @Header(\"Content-Type\", \"application/jwk-set+json\")\n    @Get(\"jwks.json\")\n    getJwks(@SessionEntity() session: Session): Promise {\n        return this.wellKnownService.getJwks(session.tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WellKnownService.html":{"url":"injectables/WellKnownService.html","title":"injectable - WellKnownService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WellKnownService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle well-known endpoints and metadata retrieval.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAuthzMetadata\n                            \n                            \n                                    Async\n                                getIssuerMetadata\n                            \n                            \n                                getJwks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(oid4vciService: Oid4vciService, cryptoService: CryptoService, authorizeService: AuthorizeService, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/well-known/well-known.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor for WellKnownService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authorizeService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthzMetadata\n                        \n                    \n                \n            \n            \n                \ngetAuthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIssuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Retrieves the issuer metadata for a given tenant for the specified content type.\nThe metadata can be returned in two formats:\n\nan unsigned JSON document using the media type application/json, or\na signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwks\n                        \n                    \n                \n            \n            \n                \ngetJwks(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { CryptoImplementationService } from \"../crypto/key/crypto-implementation/crypto-implementation.service\";\nimport { AuthorizeService } from \"../issuer/authorize/authorize.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { Session } from \"../session/entities/session.entity\";\nimport { MediaType } from \"../utils/mediaType/media-type.enum\";\nimport { CredentialIssuerMetadataDto } from \"./dto/credential-issuer-metadata.dto\";\nimport { JwksResponseDto } from \"./dto/jwks-response.dto\";\nimport { Oauth2AuthorizationServerResponse } from \"./dto/oauth-authorization-server-response.dto\";\n\n/**\n * Service to handle well-known endpoints and metadata retrieval.\n */\n@Injectable()\nexport class WellKnownService {\n    /**\n     * Constructor for WellKnownService.\n     * @param oid4vciService\n     * @param cryptoService\n     * @param authorizeService\n     */\n    constructor(\n        private readonly oid4vciService: Oid4vciService,\n        private readonly cryptoService: CryptoService,\n        private readonly authorizeService: AuthorizeService,\n        private readonly cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Retrieves the issuer metadata for a given tenant for the specified content type.\n     * The metadata can be returned in two formats:\n     * - an unsigned JSON document using the media type application/json, or\n     * - a signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    async getIssuerMetadata(session: Session, contentType: MediaType) {\n        const metadata = (await this.oid4vciService.issuerMetadata(session))\n            .credentialIssuer as unknown as CredentialIssuerMetadataDto;\n\n        if (contentType === MediaType.APPLICATION_JWT) {\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"access\",\n            );\n            return this.cryptoService.signJwt(\n                {\n                    typ: \"openidvci-issuer-metadata+jwt\",\n                    alg: this.cryptoImplementationService.getAlg(),\n                    x5c: await this.cryptoService.getCertChain(\n                        \"access\",\n                        session.tenantId,\n                    ),\n                },\n                {\n                    ...metadata,\n                    iss: metadata.credential_issuer,\n                    sub: metadata.credential_issuer,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    // [Review]: should we add `exp` value here?\n                    //MM: the value makes sense when we cache the issuer metadata so it must not be signed on every request. Like when it is issued every hour, its lifetime is 1 hour and the jwt is in the cache.\n                },\n                session.tenantId,\n                keyId,\n            );\n        }\n\n        return metadata;\n    }\n\n    /**\n     * Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n     * @returns\n     */\n    getAuthzMetadata(session: Session): Oauth2AuthorizationServerResponse {\n        return this.authorizeService.authzMetadata(\n            session,\n        ) as Oauth2AuthorizationServerResponse;\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for a given tenant.\n     * @returns\n     */\n    getJwks(tenantId: string): Promise {\n        return this.cryptoService.getJwks(tenantId).then((key) => ({\n            keys: [key],\n        }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/dto/oidc-discovery.dto.ts\n            \n            interface\n            OidcDiscoveryDto\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            AUTH_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_AUTH_CLIENT_ID\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_AUTH_CLIENT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_JWT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/client.service.ts\n            \n            injectable\n            ClientService\n            \n                60 %\n                (6/10)\n            \n        \n        \n            \n                \n                src/auth/client.service.ts\n            \n            interface\n            Client\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/client-credentials.dto.ts\n            \n            class\n            ClientCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/oidc-discovery.dto.ts\n            \n            interface\n            OidcDiscoveryDto\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/auth/dto/token-response.dto.ts\n            \n            class\n            TokenResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/entitites/client.entity.ts\n            \n            entity\n            ClientEntry\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/entitites/client.entity.ts\n            \n            type alias\n            ClientStatus\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            injectable\n            JwtService\n            \n                66 %\n                (4/6)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            interface\n            GenerateTokenOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/token.decorator.ts\n            \n            interface\n            TokenPayload\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/auth/token.decorator.ts\n            \n            variable\n            Token\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/crypto.service.ts\n            \n            injectable\n            CryptoService\n            \n                90 %\n                (19/21)\n            \n        \n        \n            \n                \n                        src/crypto/crypto.service.ts\n            \n            variable\n            ECDSA_P256\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/encryption/encryption.service.ts\n            \n            injectable\n            EncryptionService\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/crypto/key/adapters/db-key.service.ts\n            \n            class\n            DBKeyService\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                src/crypto/key/adapters/vault-key.service.ts\n            \n            class\n            VaultKeyService\n            \n                47 %\n                (9/19)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n            \n            variable\n            CRYPTO_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n            \n            injectable\n            CryptoImplementationService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n            \n            type alias\n            CryptoType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            interface\n            CryptoImplementation\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            KeyPair\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            Signer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            Verifier\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/ed25519.ts\n            \n            variable\n            ED25519\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            Key\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            KeyImportDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-object.dto.ts\n            \n            class\n            KeyObj\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-response.dto.ts\n            \n            class\n            KeyResponseDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-update.dto.ts\n            \n            class\n            UpdateKeyDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/entities/cert.entity.ts\n            \n            entity\n            CertEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/cert.entity.ts\n            \n            type alias\n            CertificateType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/entities/keys.entity.ts\n            \n            entity\n            KeyEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/keys.entity.ts\n            \n            type alias\n            KeyUsage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/crypto/key/key.controller.ts\n            \n            controller\n            KeyController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/crypto/key/key.module.ts\n            \n            variable\n            KEY_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/key.service.ts\n            \n            class\n            KeyService\n            \n                66 %\n                (8/12)\n            \n        \n        \n            \n                \n                        src/database/database.module.ts\n            \n            variable\n            DB_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.controller.ts\n            \n            controller\n            AuthorizeController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            injectable\n            AuthorizeService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenAuthorizationCodeRequestGrant\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenPreAuthorizedCodeRequestGrant\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/authorize-request.dto.ts\n            \n            class\n            AuthorizeQueries\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/par-response.dto.ts\n            \n            class\n            ParResponseDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/credentials-metadata.controller.ts\n            \n            controller\n            CredentialsMetadataController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/credential-config.dto.ts\n            \n            class\n            VCT\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/schema-response.dto.ts\n            \n            class\n            SchemaResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credential-config/credential-config.service.ts\n            \n            injectable\n            CredentialConfigService\n            \n                100 %\n                (7/7)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.controller.ts\n            \n            controller\n            CredentialsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.service.ts\n            \n            injectable\n            CredentialsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            entity\n            CredentialConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            AllowListPolicy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            AttestationBasedPolicy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            EmbeddedDisclosurePolicy\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            NoneTrustPolicy\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            PolicyCredential\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            RootOfTrustPolicy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthConfigValidator\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationConfigDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationUrlConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            PresentationDuringIssuanceConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            type alias\n            AuthenticationConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.helper.ts\n            \n            class\n            AuthenticationConfigHelper\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n            \n            class\n            CreateCredentialIssuanceBindingDto\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n            \n            class\n            CredentialIssuanceBindingResponseDto\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/credential-issuance-binding.dto.ts\n            \n            class\n            UpdateCredentialIssuanceBindingDto\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            CredentialConfigMapping\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            IssuanceDto\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/credential-issuance-binding.entity.ts\n            \n            entity\n            CredentialIssuanceBinding\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/issuance-config.entity.ts\n            \n            entity\n            IssuanceConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.controller.ts\n            \n            controller\n            IssuanceController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.service.ts\n            \n            injectable\n            IssuanceService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/issuer/issuer-management/issuer-management.controller.ts\n            \n            controller\n            IssuerManagementController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuer.module.ts\n            \n            variable\n            ISSUER_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/notification-request.dto.ts\n            \n            class\n            NotificationRequestDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferRequestDto\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/entities/display.entity.ts\n            \n            entity\n            DisplayEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/entities/display.entity.ts\n            \n            type alias\n            DisplayInfo\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.controller.ts\n            \n            controller\n            Oid4vciController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.service.ts\n            \n            injectable\n            Oid4vciService\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/util.ts\n            \n            function\n            getHeadersFromRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/dto/status-update.dto.ts\n            \n            class\n            StatusUpdateDto\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/status-list/entities/status-list.entity.ts\n            \n            entity\n            StatusListEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/entities/status-mapping.entity.ts\n            \n            entity\n            StatusMapping\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.controller.ts\n            \n            controller\n            StatusListController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.service.ts\n            \n            injectable\n            StatusListService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/oauth/dto/token-request.dto.ts\n            \n            class\n            TokenRequestDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/oauth/dto/token-response.dto.ts\n            \n            class\n            TokenResponseDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/oauth/oauth.controller.ts\n            \n            controller\n            OAuthController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/oauth/oauth.module.ts\n            \n            variable\n            OAUTH_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/oauth/oauth.service.ts\n            \n            injectable\n            OAuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/registrar/dto/access-certificate-response.ts\n            \n            interface\n            AccessCertificateResponse\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/registrar/entities/registrar.entity.ts\n            \n            entity\n            RegistrarEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/registrar/registrar.module.ts\n            \n            variable\n            REGISTRAR_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/registrar/registrar.service.ts\n            \n            injectable\n            RegistrarService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/session/entities/session.entity.ts\n            \n            entity\n            Session\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/session/entities/session.entity.ts\n            \n            type alias\n            Notification\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/session/session.controller.ts\n            \n            controller\n            SessionController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/session/session.decorator.ts\n            \n            variable\n            SessionEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/session/session.guard.ts\n            \n            guard\n            SessionGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/session/session.module.ts\n            \n            variable\n            SESSION_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/session/session.service.ts\n            \n            injectable\n            SessionService\n            \n                81 %\n                (9/11)\n            \n        \n        \n            \n                \n                src/storage/adapters/local.storage.ts\n            \n            class\n            LocalFileStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/storage/adapters/s3.storage.ts\n            \n            class\n            S3FileStorage\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/storage/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/storage/storage.module.ts\n            \n            variable\n            CONFIG_STORAGE_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.module.ts\n            \n            type alias\n            Driver\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/storage/storage.types.ts\n            \n            interface\n            FileStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            variable\n            FILE_STORAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            type alias\n            PutOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            type alias\n            StoredObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            injectable\n            LoggerConfigService\n            \n                23 %\n                (3/13)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            interface\n            LoggerConfiguration\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger-context.ts\n            \n            interface\n            SessionLogContext\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SESSION_LOGGER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SessionLogger\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.interceptor.ts\n            \n            injectable\n            SessionLoggerInterceptor\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.service.ts\n            \n            injectable\n            SessionLoggerService\n            \n                85 %\n                (12/14)\n            \n        \n        \n            \n                \n                        src/utils/mediaType/media-type.decorator.ts\n            \n            variable\n            ContentType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            ApiKeyConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebhookConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                        src/utils/webhook/webhook.dto.ts\n            \n            type alias\n            AuthConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.service.ts\n            \n            class\n            WebhookResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.service.ts\n            \n            injectable\n            WebhookService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/authorization-response.dto.ts\n            \n            class\n            AuthorizationResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n            \n            interface\n            PresentationRequestOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request.dto.ts\n            \n            class\n            PresentationRequest\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.controller.ts\n            \n            controller\n            Oid4vpController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.service.ts\n            \n            injectable\n            Oid4vpService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/auth-response.dto.ts\n            \n            interface\n            AuthResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/vp-request.dto.ts\n            \n            class\n            RegistrationCertificateRequest\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            entity\n            PresentationConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            PresentationAttachment\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.controller.ts\n            \n            controller\n            PresentationManagementController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.service.ts\n            \n            injectable\n            PresentationsService\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/verifier/resolver/dto/issuer-metadata.dto.ts\n            \n            interface\n            IssuerMetadata\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/resolver/resolver.service.ts\n            \n            injectable\n            ResolverService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/well-known/dto/credential-issuer-metadata.dto.ts\n            \n            class\n            CredentialIssuerMetadataDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            EC_Public\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            JwksResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/well-known/dto/oauth-authorization-server-response.dto.ts\n            \n            class\n            Oauth2AuthorizationServerResponse\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/well-known/well-known.controller.ts\n            \n            controller\n            WellKnownController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/well-known/well-known.service.ts\n            \n            injectable\n            WellKnownService\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.864.0\n        \n            @aws-sdk/s3-request-presigner : ^3.864.0\n        \n            @badgateway/oauth2-client : ^3.3.0\n        \n            @nestjs/axios : ^4.0.1\n        \n            @nestjs/common : ^11.1.6\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.6\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.6\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/serve-static : ^5.0.3\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @openid4vc/oauth2 : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/openid4vci : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/openid4vp : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/utils : 0.3.0-alpha-20250714110838\n        \n            @peculiar/x509 : ^1.13.0\n        \n            @sd-jwt/crypto-nodejs : ^0.14.0\n        \n            @sd-jwt/jwt-status-list : ^0.14.0\n        \n            @sd-jwt/sd-jwt-vc : ^0.14.1\n        \n            @sd-jwt/types : ^0.14.0\n        \n            @willsoto/nestjs-prometheus : ^6.0.2\n        \n            axios : ^1.11.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            joi : ^18.0.0\n        \n            jose : ^6.0.12\n        \n            jwks-rsa : ^3.2.0\n        \n            mysql2 : ^3.14.3\n        \n            nestjs-pino : ^4.4.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.16.3\n        \n            pino-http : ^10.5.0\n        \n            pino-pretty : ^13.1.1\n        \n            prom-client : ^15.1.3\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            sqlite3 : ^5.1.7\n        \n            typeorm : ^0.3.25\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MediaType   (src/.../media-type.enum.ts)\n                        \n                        \n                            PolicyType   (src/.../credential.entity.ts)\n                        \n                        \n                            ResponseType   (src/.../presentation-request.dto.ts)\n                        \n                        \n                            SessionStatus   (src/.../session.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/mediaType/media-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        MediaType\n                    \n                \n                    \n                        \n                            Represents the media types used in the application.\n\n                        \n                    \n                        \n                            \n                                 APPLICATION_JSON\n                            \n                        \n                        \n                            \n                                Value : application/json\n                            \n                        \n                        \n                            \n                                 APPLICATION_JWT\n                            \n                        \n                        \n                            \n                                Value : application/jwt\n                            \n                        \n            \n        \n\n    src/issuer/credentials/entities/credential.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        PolicyType\n                    \n                \n                    \n                        \n                            Enum for the policy types.\n\n                        \n                    \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n                        \n                            \n                                 ALLOW_LIST\n                            \n                        \n                        \n                            \n                                Value : allowList\n                            \n                        \n                        \n                            \n                                 ROOT_OF_TRUST\n                            \n                        \n                        \n                            \n                                Value : rootOfTrust\n                            \n                        \n                        \n                            \n                                 ATTESTATION_BASED\n                            \n                        \n                        \n                            \n                                Value : attestationBased\n                            \n                        \n            \n        \n\n    src/verifier/oid4vp/dto/presentation-request.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ResponseType\n                    \n                \n                    \n                        \n                            Enum for the type of response expected from the presentation request.\n\n                        \n                    \n                        \n                            \n                                 QRCode\n                            \n                        \n                        \n                            \n                                Value : qrcode\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n                        \n                            \n                                Value : uri\n                            \n                        \n            \n        \n\n    src/session/entities/session.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        SessionStatus\n                    \n                \n                        \n                            \n                                 Active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 Fetched\n                            \n                        \n                        \n                            \n                                Value : fetched\n                            \n                        \n                        \n                            \n                                 Completed\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 Expired\n                            \n                        \n                        \n                            \n                                Value : expired\n                            \n                        \n                        \n                            \n                                 Failed\n                            \n                        \n                        \n                            \n                                Value : failed\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getHeadersFromRequest   (src/.../util.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function to initialize the NestJS application.\n\n\n                \n            \n        \n    \n    src/issuer/oid4vci/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to extract headers from an Express request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CryptoImplementatationModule\n\n\n\ncluster_CryptoImplementatationModule_exports\n\n\n\ncluster_CryptoImplementatationModule_providers\n\n\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_OAuthModule\n\n\n\ncluster_OAuthModule_exports\n\n\n\ncluster_OAuthModule_providers\n\n\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAuthModule -->\n\nCryptoModule->AuthModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nCryptoService \n\nCryptoService \n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nOAuthModule\n\nOAuthModule\n\nOAuthModule -->\n\nCryptoModule->OAuthModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAuthModule -->\n\nIssuerModule->AuthModule\n\n\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\nAuthModule -->\n\nRegistrarModule->AuthModule\n\n\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\nAuthModule -->\n\nStatusListModule->AuthModule\n\n\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nClientService\n\nClientService\n\nAuthModule -->\n\nClientService->AuthModule\n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\n\n\nCryptoImplementatationModule\n\nCryptoImplementatationModule\n\nCryptoImplementationService  -->\n\nCryptoImplementatationModule->CryptoImplementationService \n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoImplementatationModule -->\n\nCryptoImplementationService->CryptoImplementatationModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\nOAuthService \n\nOAuthService \n\nOAuthService  -->\n\nOAuthModule->OAuthService \n\n\n\n\n\nOAuthService\n\nOAuthService\n\nOAuthModule -->\n\nOAuthService->OAuthModule\n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nResolverService \n\nResolverService \n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        18 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    16 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    25 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    50 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    15 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoImplementatationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssuerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeyModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetricModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OAuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Oid4vpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PresentationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegistrarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResolverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatusListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StorageModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VerifierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : a middleware to interact with the EUDI Wallet\n        \n            Bugs : https://github.com/openwallet-foundation-labs/eudiplo/issues\n        \n            License : Apache-2.0\n        \n            Repository : https://github.com/openwallet-foundation-labs/eudiplo.git\n        \n            Author : Mirko Mollik \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthConfig   (src/.../webhook.dto.ts)\n                        \n                        \n                            AuthenticationConfig   (src/.../authentication-config.dto.ts)\n                        \n                        \n                            CertificateType   (src/.../cert.entity.ts)\n                        \n                        \n                            ClientStatus   (src/.../client.entity.ts)\n                        \n                        \n                            CryptoType   (src/.../crypto-implementation.service.ts)\n                        \n                        \n                            DisplayInfo   (src/.../display.entity.ts)\n                        \n                        \n                            Driver   (src/.../storage.module.ts)\n                        \n                        \n                            KeyPair   (src/.../crypto-implementation.ts)\n                        \n                        \n                            KeyUsage   (src/.../keys.entity.ts)\n                        \n                        \n                            Notification   (src/.../session.entity.ts)\n                        \n                        \n                            PutOptions   (src/.../storage.types.ts)\n                        \n                        \n                            Signer   (src/.../crypto-implementation.ts)\n                        \n                        \n                            StoredObject   (src/.../storage.types.ts)\n                        \n                        \n                            Verifier   (src/.../crypto-implementation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/webhook/webhook.dto.ts\n    \n    \n        \n            \n                \n                    \n                    AuthConfig\n                \n            \n            \n                \n                    Enum for the type of authentication used in webhooks.\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/issuer/issuance/dto/authentication-config.dto.ts\n    \n    \n        \n            \n                \n                    \n                    AuthenticationConfig\n                \n            \n            \n                \n                    Union type for authentication configurations\nEach method corresponds to a specific OpenID4VC flow\n\n                \n            \n            \n                \n                        literal type | literal type | literal type\n\n                \n            \n        \n    \n    src/crypto/key/entities/cert.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CertificateType\n                \n            \n            \n                \n                        \"access\" | \"signing\"\n\n                \n            \n        \n    \n    src/auth/entitites/client.entity.ts\n    \n    \n        \n            \n                \n                    \n                    ClientStatus\n                \n            \n            \n                \n                        \"init\" | \"set up\" | \"error\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n    \n    \n        \n            \n                \n                    \n                    CryptoType\n                \n            \n            \n                \n                        \"ES256\" | \"Ed25519\"\n\n                \n            \n        \n    \n    src/issuer/oid4vci/entities/display.entity.ts\n    \n    \n        \n            \n                \n                    \n                    DisplayInfo\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/storage/storage.module.ts\n    \n    \n        \n            \n                \n                    \n                    Driver\n                \n            \n            \n                \n                        \"local\" | \"s3\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto-implementation/crypto-implementation.ts\n    \n    \n        \n            \n                \n                    \n                    KeyPair\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Signer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Verifier\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/crypto/key/entities/keys.entity.ts\n    \n    \n        \n            \n                \n                    \n                    KeyUsage\n                \n            \n            \n                \n                    Key usage types.\n\n                \n            \n            \n                \n                        \"sign\" | \"encrypt\"\n\n                \n            \n        \n    \n    src/session/entities/session.entity.ts\n    \n    \n        \n            \n                \n                    \n                    Notification\n                \n            \n            \n                \n                    Represents a session entity for managing user sessions in the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/storage/storage.types.ts\n    \n    \n        \n            \n                \n                    \n                    PutOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoredObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_VALIDATION_SCHEMA   (src/.../auth.module.ts)\n                        \n                        \n                            CONFIG_STORAGE_SCHEMA   (src/.../storage.module.ts)\n                        \n                        \n                            ContentType   (src/.../media-type.decorator.ts)\n                        \n                        \n                            CRYPTO_VALIDATION_SCHEMA   (src/.../crypto-implementation.module.ts)\n                        \n                        \n                            DB_VALIDATION_SCHEMA   (src/.../database.module.ts)\n                        \n                        \n                            DEFAULT_AUTH_CLIENT_ID   (src/.../auth.module.ts)\n                        \n                        \n                            DEFAULT_AUTH_CLIENT_SECRET   (src/.../auth.module.ts)\n                        \n                        \n                            DEFAULT_JWT_SECRET   (src/.../auth.module.ts)\n                        \n                        \n                            ECDSA_P256   (src/.../crypto.service.ts)\n                        \n                        \n                            ED25519   (src/.../ed25519.ts)\n                        \n                        \n                            FILE_STORAGE   (src/.../storage.types.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            ISSUER_VALIDATION_SCHEMA   (src/.../issuer.module.ts)\n                        \n                        \n                            KEY_VALIDATION_SCHEMA   (src/.../key.module.ts)\n                        \n                        \n                            OAUTH_VALIDATION_SCHEMA   (src/.../oauth.module.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            REGISTRAR_VALIDATION_SCHEMA   (src/.../registrar.module.ts)\n                        \n                        \n                            SESSION_LOGGER_KEY   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            SESSION_VALIDATION_SCHEMA   (src/.../session.module.ts)\n                        \n                        \n                            SessionEntity   (src/.../session.decorator.ts)\n                        \n                        \n                            SessionLogger   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            Token   (src/.../token.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    OIDC: Joi.string().optional(),\n    KEYCLOAK_INTERNAL_ISSUER_URL: Joi.when(\"OIDC\", {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    KEYCLOAK_ALGORITHM: Joi.when(\"OIDC\", {\n        then: Joi.string().default(\"RS256\"),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_JWT_SECRET),\n    }),\n    JWT_ISSUER: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default(\"eudiplo-service\"),\n    }),\n    JWT_EXPIRES_IN: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(\"24h\"),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_SECRET),\n    }),\n    AUTH_CLIENT_ID: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_ID),\n    }),\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_AUTH_CLIENT_ID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"root\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_AUTH_CLIENT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"root\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"supersecret\"\n                    \n                \n\n\n        \n    \n\n    src/storage/storage.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CONFIG_STORAGE_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    STORAGE_DRIVER: Joi.string().valid(\"local\", \"s3\").default(\"local\"),\n    LOCAL_STORAGE_DIR: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"local\",\n        then: Joi.string().default(\"uploads\"),\n    }),\n    S3_REGION: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_BUCKET: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ACCESS_KEY_ID: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_SECRET_ACCESS_KEY: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ENDPOINT: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.optional(),\n    }),\n    S3_FORCE_PATH_STYLE: Joi.boolean().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.boolean().default(false),\n    }),\n    S3_PUBLIC_BASE_URL: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mediaType/media-type.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ContentType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.headers[\"accept\"] as string | undefined;\n    },\n)\n                    \n                \n\n            \n                \n                    Decorator to extract the content type from the request headers.\nThis decorator can be used to determine the media type of the request.\n\n                \n            \n\n        \n    \n\n    src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CRYPTO_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    CRYPTO_ALG: Joi.string().valid(\"ES256\").default(\"ES256\"),\n}\n                    \n                \n\n\n        \n    \n\n    src/database/database.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DB_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    DB_TYPE: Joi.string().valid(\"sqlite\", \"postgres\").default(\"sqlite\"),\n    DB_HOST: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/crypto.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ECDSA_P256\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    name: \"ECDSA\",\n    namedCurve: \"P-256\",\n    hash: \"SHA-256\" as const,\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/crypto-implementation/ed25519.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ED25519\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                \n                    \n                        Default value : {\n    alg: \"EdDSA\",\n    async generateKeyPair() {\n        const keyPair = await crypto.webcrypto.subtle.generateKey(\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            true,\n            [\"sign\", \"verify\"],\n        );\n\n        const publicKey = await crypto.webcrypto.subtle.exportKey(\n            \"jwk\",\n            keyPair.publicKey,\n        );\n        const privateKey = await crypto.webcrypto.subtle.exportKey(\n            \"jwk\",\n            keyPair.privateKey,\n        );\n\n        return { publicKey, privateKey };\n    },\n    async getSigner(privateKeyJWK: object) {\n        const privateKey = await crypto.webcrypto.subtle.importKey(\n            \"jwk\",\n            privateKeyJWK,\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            false,\n            [\"sign\"],\n        );\n\n        return async (data: string) => {\n            const signature = await crypto.webcrypto.subtle.sign(\n                \"EdDSA\",\n                privateKey,\n                new TextEncoder().encode(data),\n            );\n\n            return Buffer.from(signature).toString(\"base64url\");\n        };\n    },\n    async getVerifier(publicKeyJWK: object) {\n        const publicKey = await crypto.webcrypto.subtle.importKey(\n            \"jwk\",\n            publicKeyJWK,\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            false,\n            [\"verify\"],\n        );\n\n        return async (data: string, signatureBase64url: string) => {\n            const signature = Buffer.from(signatureBase64url, \"base64url\");\n            const isVerified = await crypto.webcrypto.subtle.verify(\n                \"EdDSA\",\n                publicKey,\n                signature,\n                new TextEncoder().encode(data),\n            );\n\n            return isVerified;\n        };\n    },\n}\n                    \n                \n\n\n        \n    \n\n    src/storage/storage.types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FILE_STORAGE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol(\"FILE_STORAGE\")\n                    \n                \n\n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"isPublic\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/issuer/issuer.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ISSUER_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    PUBLIC_URL: Joi.string().default(\"http://localhost:3000\"),\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/key.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        KEY_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    KM_TYPE: Joi.string().valid(\"db\", \"vault\").default(\"db\"),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/oauth/oauth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OAUTH_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    OAUTH_CLIENT_ID: Joi.string().optional(),\n    OAUTH_CLIENT_SECRET: Joi.string().optional(),\n}\n                    \n                \n\n\n        \n    \n\n    src/registrar/registrar.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REGISTRAR_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    REGISTRAR_URL: Joi.string(),\n    REGISTRAR_OIDC_URL: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n}\n                    \n                \n\n            \n                \n                    Validation schema for the registrar module.\nDefines the required environment variables and their types.\n\n                \n            \n\n        \n    \n\n    src/utils/logger/session-logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_LOGGER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"session-logger\"\n                    \n                \n\n            \n                \n                    Key for session logger metadata.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SessionLogger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n    sessionIdParam: string,\n    flowType: \"OID4VCI\" | \"OID4VP\",\n) => SetMetadata(SESSION_LOGGER_KEY, { sessionIdParam, flowType })\n                    \n                \n\n            \n                \n                    Decorator to mark methods that should have session-based logging\n\n                \n            \n\n        \n    \n\n    src/session/session.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n}\n                    \n                \n\n            \n                \n                    Module for managing user sessions.\n\n                \n            \n\n        \n    \n\n    src/session/session.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SessionEntity\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.session as Session;\n    },\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/token.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Token\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
