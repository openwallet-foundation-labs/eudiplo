var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessCertificateResponse.html",[0,1.403,1,3.845]],["body/interfaces/AccessCertificateResponse.html",[0,1.945,1,6.519,2,3.251,3,0.086,4,0.086,5,0.077,6,5.798,7,4.112,8,5.798,9,0.866,10,6.512,11,4.725,12,1.658,13,0.265,14,1.02,15,6.47,16,2.095,17,0.907,18,8.336,19,0.642,20,0.337,21,0.007,22,3.266,23,2.028,24,5.003,25,3.5,26,3.675,27,2.998,28,3.781,29,6.519,30,0.086,31,0.005,32,0.005]],["title/injectables/AdminAuthGuard.html",[33,0.99,34,3.592]],["body/injectables/AdminAuthGuard.html",[3,0.092,4,0.092,5,0.082,13,0.283,17,0.791,20,0.272,21,0.007,30,0.092,31,0.006,32,0.006,33,1.746,34,6.334,35,2.615,36,6.187,37,3.921,38,7.378,39,1.902,40,7.378,41,7.378,42,6.613,43,0.438,44,6.949,45,1.709,46,1.299,47,4.364,48,1.568,49,0.207,50,1.17,51,6.187,52,5.013,53,0.295,54,1.44,55,6.187]],["title/classes/AllowListPolicy.html",[53,0.199,56,2.839]],["body/classes/AllowListPolicy.html",[3,0.069,4,0.069,5,0.062,9,0.7,13,0.214,14,0.891,19,0.568,20,0.353,21,0.007,30,0.119,31,0.005,32,0.005,37,4.079,43,0.438,49,0.195,53,0.389,56,4.202,57,1.072,58,3.304,59,5.207,60,5.458,61,5.916,62,3.312,63,1.151,64,5.261,65,3.795,66,5.261,67,5.261,68,1.867,69,5.261,70,1.63,71,3.977,72,5.646,73,2.021,74,2.653,75,2.418,76,2.879,77,1.294,78,3.89,79,3.89,80,3.89,81,3.607,82,2.626,83,3.304,84,2.994,85,4.893,86,4.893,87,3.607,88,5.683,89,4.427,90,3.178,91,3.607,92,3.607,93,2.869,94,3.304,95,2.367,96,3.445,97,3.178,98,2.869,99,4.893,100,2.782,101,1.571,102,3.607,103,3.178,104,3.607]],["title/classes/ApiKeyConfig.html",[53,0.199,105,3.077]],["body/classes/ApiKeyConfig.html",[3,0.063,4,0.063,5,0.056,9,0.633,13,0.194,14,0.833,17,0.542,19,0.571,20,0.368,21,0.007,23,2.242,30,0.114,31,0.004,32,0.004,43,0.41,46,1.488,49,0.185,53,0.373,57,0.97,63,1.076,68,1.004,70,1.475,73,1.83,75,2.364,76,2.172,77,1.171,84,2.499,105,5.214,106,3.118,107,2.191,108,6.038,109,4.092,110,5,111,5.344,112,2.678,113,4.762,114,3.974,115,4.088,116,4.762,117,3.118,118,2.791,119,3.118,120,1.192,121,2.682,122,2.609,123,3.247,124,2.838,125,3.93,126,3.264,127,4.085,128,2.951,129,5.214,130,2.553,131,5.214,132,3.435,133,4.692,134,1.755,135,1.503,136,4.852,137,3.435,138,4.692,139,3.435,140,3.264,141,3.118,142,3.435,143,1.72,144,2.131,145,2.775,146,3.118,147,2.377,148,3.118,149,4.26,150,3.435,151,3.435,152,3.118,153,2.775,154,3.118,155,3.118,156,2.092]],["title/controllers/AppController.html",[157,1.378,158,3.592]],["body/controllers/AppController.html",[3,0.092,4,0.092,5,0.082,13,0.284,19,0.569,21,0.007,30,0.092,31,0.006,32,0.006,39,1.907,43,0.44,48,1.575,49,0.208,50,1.175,53,0.296,54,1.446,63,1.155,120,1.746,157,2.436,158,6.35,159,2.422,160,6.214,161,9.18,162,6.978,163,5.217,164,6.214,165,5.034,166,6.978,167,6.214,168,3.805,169,6.214,170,5.71,171,6.214]],["title/modules/AppModule.html",[172,1.429,173,3.592]],["body/modules/AppModule.html",[3,0.085,4,0.048,5,0.064,20,0.211,21,0.007,22,2.211,30,0.048,31,0.004,32,0.004,49,0.239,50,0.616,53,0.155,54,1.117,68,1.35,93,1.995,144,1.198,158,4.897,159,1.872,172,1.948,173,7.398,174,1.569,175,1.777,176,1.878,177,1.878,178,1.731,179,3.112,180,1.777,181,3.257,182,3.257,183,3.257,184,5.69,185,4.301,186,6.165,187,5.69,188,5.407,189,5.438,190,5.69,191,4.953,192,4.765,193,5.438,194,5.69,195,5.407,196,2.769,197,1.878,198,1.878,199,3.658,200,4.897,201,3.105,202,4.621,203,2.777,204,1.198,205,3.658,206,2.993,207,2.06,208,3.658,209,2.993,210,3.658,211,3.257,212,2.639,213,3.037,214,5.393,215,3.257,216,2.993,217,2.297,218,3.532,219,3.658,220,2.21,221,1.731,222,3.658,223,4.122,224,3.658,225,2.297,226,4.122,227,2.993,228,2.06,229,3.257,230,4.122,231,3.658,232,3.658,233,3.658,234,4.122,235,3.257,236,3.658,237,4.122,238,2.796,239,4.122,240,2.639,241,4.122,242,3.658,243,3.658,244,3.697,245,4.122,246,3.658,247,3.257,248,3.658,249,3.658,250,3.658,251,4.897,252,3.658,253,3.658,254,3.658,255,3.658,256,4.413,257,3.658,258,4.413,259,4.413,260,1.646,261,2.993,262,1.836,263,5.393,264,4.413,265,3.658,266,6.169,267,3.658,268,3.658,269,3.658,270,4.413,271,2.639,272,2.993,273,2.993,274,3.658,275,4.897,276,1.777,277,3.658,278,3.658,279,3.658,280,3.697,281,4.122,282,1.397,283,4.413,284,2.993,285,2.427,286,1.436,287,1.826,288,3.387,289,3.658,290,3.658,291,3.658,292,3.658,293,3.658,294,2.796,295,3.658,296,3.658,297,3.658,298,3.658,299,1.995,300,3.658,301,3.658,302,3.658,303,3.658,304,3.257,305,3.658,306,3.658,307,3.658,308,3.658,309,3.658,310,3.87,311,3.387,312,5.393,313,3.658,314,1.731,315,2.796,316,3.658,317,2.06,318,1.405,319,4.802,320,3.658,321,2.508,322,3.658,323,0.9,324,3.658,325,3.037,326,3.257,327,3.658,328,3.658,329,3.658,330,2.993,331,3.658,332,3.658,333,3.257,334,5.393,335,3.658,336,3.658,337,3.658,338,3.658]],["title/classes/AttestationBasedPolicy.html",[53,0.199,103,2.839]],["body/classes/AttestationBasedPolicy.html",[3,0.07,4,0.07,5,0.062,13,0.215,14,0.893,19,0.535,20,0.353,21,0.007,30,0.119,31,0.005,32,0.005,37,4.084,43,0.439,49,0.195,53,0.389,56,3.189,57,1.075,58,3.314,59,4.901,60,5.462,61,5.92,62,3.316,63,1.153,65,3.807,68,1.819,70,1.635,71,3.981,72,5.652,73,2.028,74,2.657,75,2.419,76,2.882,77,1.298,78,3.896,79,3.896,80,3.896,81,3.618,82,2.635,83,3.314,84,2.998,85,4.901,86,4.901,87,3.618,88,5.691,89,4.432,90,3.189,91,3.618,92,3.618,93,2.878,94,3.314,95,2.375,96,3.456,97,3.189,98,2.878,99,5.213,100,2.791,101,1.576,102,3.618,103,4.211,104,3.618,339,5.277,340,5.277,341,4.699,342,4.034,343,5.277]],["title/controllers/AuthController.html",[157,1.378,344,3.592]],["body/controllers/AuthController.html",[3,0.039,4,0.039,5,0.034,9,1.128,11,1.498,12,1.603,13,0.119,16,1.303,17,0.332,19,0.311,20,0.267,21,0.007,22,1.196,23,2.041,25,1.281,30,0.039,31,0.003,32,0.003,39,1.043,43,0.352,45,0.717,46,0.545,48,1.761,49,0.205,50,0.491,53,0.124,54,1.305,63,0.923,68,0.957,93,1.591,100,1.543,101,2.705,107,1.987,109,2.044,112,1.381,114,3.407,120,0.73,134,1.075,147,1.456,156,2.766,157,1.332,159,1.013,163,1.832,164,4.045,169,2.598,170,2.387,171,2.598,203,1.899,204,0.956,276,3.791,282,1.749,286,1.783,287,1.456,317,4.071,344,3.472,345,2.598,346,6.297,347,1.863,348,5.579,349,6.297,350,4.543,351,2.917,352,4.715,353,3.08,354,3.017,355,2.917,356,7.228,357,2.917,358,4.265,359,2.647,360,4.516,361,4.622,362,3.6,363,5.153,364,4.543,365,3.717,366,4.025,367,2.95,368,4.265,369,2.917,370,2.917,371,4.265,372,4.124,373,4.543,374,4.286,375,1.794,376,4.265,377,4.045,378,4.265,379,2.917,380,4.543,381,4.543,382,3.991,383,6.297,384,3.147,385,1.517,386,4.543,387,2.917,388,5.35,389,7.804,390,4.678,391,6.297,392,2.917,393,2.917,394,4.543,395,4.968,396,4.045,397,3.142,398,3.825,399,4.565,400,4.968,401,1.498,402,6.077,403,3.277,404,4.565,405,5.584,406,1.832,407,2.917,408,2.333,409,2.598,410,2.917,411,2.917,412,2.917,413,2.387,414,3.653,415,2.598,416,2.853,417,2.387,418,2.044,419,1.91,420,1.91,421,2.917,422,0.825,423,1.76,424,2.917,425,1.332,426,2.917,427,6.077,428,4.543,429,2.598,430,3.277,431,3.059,432,2.598,433,2.598,434,4.025,435,2.917,436,3.472,437,3.472,438,3.114,439,4.543,440,2.917,441,2.737,442,2.153,443,2,444,3.717,445,3.472,446,1.543,447,2.23,448,2.917,449,2,450,2.387,451,4.678,452,5.584,453,2.975,454,2.387,455,4.543,456,2.917,457,2.917,458,4.543,459,2.917,460,2.917,461,2.387,462,2.917,463,2.853,464,2.917,465,1.591,466,2.917,467,2.917,468,2.917,469,2.917,470,2.917,471,2.598,472,4.045,473,1.013,474,2.23,475,2.917,476,2.917,477,1.346,478,2.975,479,2.917,480,2.23,481,2.917,482,4.565,483,2.917,484,1.517,485,4.543,486,2.917,487,3.114,488,1.577,489,3.717,490,2.917,491,2.387,492,2.387,493,1.7,494,4.543,495,4.543,496,1.832,497,1.313,498,2.104,499,2.917,500,2.104,501,2.917,502,3.472,503,2.598,504,2.917,505,2.23,506,2.917,507,2.917,508,2.917,509,2.917,510,1.643,511,2.917,512,2.917,513,2.104,514,2.387,515,2.104,516,2,517,2.917,518,2,519,2,520,2.598,521,2.917,522,2.865,523,0.769,524,1.762,525,2.917,526,2.598,527,1.7]],["title/modules/AuthModule.html",[172,1.429,184,3.39]],["body/modules/AuthModule.html",[3,0.058,4,0.058,5,0.052,21,0.007,30,0.107,31,0.004,32,0.004,46,0.825,49,0.239,50,0.743,52,3.183,53,0.187,159,2.142,172,2.164,174,1.893,175,2.144,176,2.266,177,2.266,178,2.088,179,3.457,180,3.457,184,7.029,185,4.583,188,5.761,191,5.278,192,5.078,196,3.169,197,2.266,198,2.266,201,2.711,202,4.452,204,1.446,213,3.476,223,3.373,225,2.771,235,3.929,238,3.373,240,3.183,282,1.681,344,5.44,388,3.025,414,6.051,415,3.929,416,5.278,417,3.611,430,4.452,488,1.532,528,3.929,529,3.929,530,3.929,531,3.929,532,5.504,533,4.886,534,6.665,535,3.611,536,5.44,537,7.117,538,2.572,539,1.809,540,5.495,541,2.89,542,3.025,543,3.183,544,2.485,545,3.611,546,4.413,547,4.413,548,1.732,549,3.611,550,4.413,551,4.413,552,3.183,553,3.929,554,3.611,555,3.611,556,7.318,557,3.929,558,7.838,559,3.929,560,6.35,561,3.929,562,3.929,563,3.929,564,3.929,565,3.929,566,3.929,567,3.611,568,3.929,569,3.929,570,3.929,571,3.373,572,3.929,573,3.929,574,3.929,575,4.413,576,4.413,577,3.929,578,3.611,579,1.85,580,3.183]],["title/interfaces/AuthResponse.html",[0,1.403,581,3.39]],["body/interfaces/AuthResponse.html",[0,1.948,2,3.257,3,0.086,4,0.086,5,0.077,9,0.868,12,2.031,13,0.266,14,1.022,19,0.631,20,0.351,21,0.007,23,2.031,30,0.086,31,0.005,32,0.005,112,1.984,354,3.242,581,6.215,582,5.81,583,3.675,584,3.802,585,6.564,586,7.344,587,7.103,588,7.976,589,7.976,590,6.527,591,6.097,592,4.556,593,3.875,594,3.065,595,3.877,596,6.524,597,3.675]],["title/classes/AuthenticationMethodAuth.html",[53,0.199,598,2.839]],["body/classes/AuthenticationMethodAuth.html",[0,1.559,3,0.069,4,0.069,5,0.061,12,1.329,13,0.213,14,0.886,17,0.594,19,0.474,20,0.345,21,0.007,30,0.119,31,0.005,32,0.005,43,0.436,49,0.194,53,0.382,57,1.063,63,1.145,70,1.617,73,2.005,74,2.355,75,2.33,76,2.76,77,1.284,84,3.175,98,2.846,107,2.104,109,3.869,115,2.68,122,3.113,123,2.606,124,2.642,128,2.45,130,3.243,135,2.608,143,2.803,144,2.543,156,3.777,314,4.332,318,2.005,362,3.58,594,2.658,598,4.18,599,4.874,600,3.278,601,5.4,602,5.19,603,4.648,604,5.219,605,5.219,606,5.219,607,2.188,608,3.773,609,4.743,610,3.553,611,4.743,612,3.418,613,3.153,614,4.816,615,2.76,616,1.647,617,4.874,618,3.578,619,3.418,620,2.14,621,3.278,622,3.153,623,3.578,624,3.578,625,3.153,626,3.278,627,3.418]],["title/interfaces/AuthenticationMethodInterface.html",[0,1.403,601,2.951]],["body/interfaces/AuthenticationMethodInterface.html",[0,1.573,2,2.63,3,0.07,4,0.07,5,0.062,12,1.342,13,0.215,14,0.892,17,0.6,19,0.477,20,0.346,21,0.007,30,0.119,31,0.005,32,0.005,49,0.195,53,0.383,70,1.632,73,2.024,74,2.37,75,2.336,76,2.77,77,1.296,84,3.404,98,2.873,107,2.112,109,3.881,115,2.706,122,3.127,123,2.63,124,2.655,128,2.465,130,3.06,135,2.197,143,2.817,144,2.555,156,3.97,314,4.392,318,2.024,362,3.597,594,2.675,598,3.183,599,3.309,600,3.309,601,5.417,602,4.897,607,2.209,608,3.797,609,4.773,610,3.575,611,4.773,612,3.451,613,3.183,614,5.163,615,2.786,616,1.663,617,4.897,618,3.612,619,3.451,620,2.16,621,3.309,622,3.183,623,3.612,624,3.612,625,3.183,626,3.309,627,3.451]],["title/classes/AuthenticationMethodNone.html",[53,0.199,625,2.839]],["body/classes/AuthenticationMethodNone.html",[0,1.586,3,0.07,4,0.07,5,0.063,12,1.352,13,0.216,14,0.896,17,0.605,19,0.48,20,0.338,21,0.007,30,0.12,31,0.005,32,0.005,43,0.335,49,0.196,53,0.384,57,1.082,63,0.879,70,1.645,73,2.041,74,2.383,75,2.341,76,2.779,77,1.306,84,3.197,98,2.896,107,2.119,109,3.892,115,2.727,122,3.14,123,2.651,124,2.665,128,2.478,130,3.266,135,2.209,143,2.828,144,2.565,156,3.799,314,4.348,318,2.041,362,3.611,594,2.689,598,3.209,599,4.396,600,3.336,601,5.431,602,4.917,607,2.227,608,3.817,609,4.798,610,3.594,611,4.798,612,3.478,613,3.209,614,4.849,615,2.809,616,1.676,617,4.917,618,3.641,619,3.478,620,2.177,621,3.336,622,3.209,623,3.641,624,3.641,625,4.229,626,3.336,627,3.478,628,4.729,629,5.311]],["title/classes/AuthenticationMethodPresentation.html",[53,0.199,622,2.839]],["body/classes/AuthenticationMethodPresentation.html",[0,1.559,3,0.069,4,0.069,5,0.061,12,1.329,13,0.213,14,0.886,17,0.594,19,0.474,20,0.345,21,0.007,30,0.119,31,0.005,32,0.005,43,0.436,49,0.194,53,0.382,57,1.063,63,1.145,70,1.617,73,2.005,74,2.355,75,2.33,76,2.76,77,1.284,84,3.175,98,2.846,107,2.104,109,3.869,115,2.68,122,3.113,123,2.606,124,2.642,128,2.45,130,3.243,135,2.608,143,2.803,144,2.543,156,3.777,314,4.332,318,2.005,362,3.58,594,2.658,598,3.153,599,4.874,600,3.278,601,5.4,602,4.874,603,4.648,607,2.188,608,3.773,609,4.743,610,3.553,611,4.743,612,3.418,613,3.153,614,4.816,615,2.76,616,1.647,617,5.19,618,3.578,619,3.418,620,2.14,621,3.278,622,4.18,623,3.578,624,3.578,625,3.153,626,3.278,627,3.418,630,5.219,631,5.219,632,5.219]],["title/classes/AuthenticationUrlConfig.html",[53,0.199,602,2.951]],["body/classes/AuthenticationUrlConfig.html",[0,1.486,3,0.066,4,0.066,5,0.059,9,0.662,12,1.267,13,0.203,14,0.858,17,0.923,19,0.519,20,0.348,21,0.007,30,0.118,31,0.005,32,0.005,43,0.422,49,0.189,53,0.378,57,1.014,63,1.109,70,1.541,73,1.912,74,2.282,75,2.349,76,2.708,77,1.224,84,3.115,98,2.714,107,2.219,109,4.13,115,2.555,122,3.039,123,2.484,124,2.881,128,2.996,130,2.974,135,2.115,143,2.929,144,2.919,156,3.829,314,4.215,318,2.575,362,3.904,594,2.575,598,3.007,599,4.759,600,3.125,601,5.092,602,5.092,607,2.087,608,4.421,609,5.558,610,4.163,611,5.558,612,4.389,613,4.049,614,4.725,615,2.632,616,1.57,617,4.759,618,3.412,619,3.259,620,2.04,621,3.125,622,3.007,623,3.412,624,3.412,625,3.007,626,3.125,627,3.259,633,4.976,634,4.976,635,4.976]],["title/classes/AuthorizationResponse.html",[53,0.199,636,3.39]],["body/classes/AuthorizationResponse.html",[3,0.089,4,0.089,5,0.08,9,0.9,13,0.275,14,1.044,19,0.623,20,0.264,21,0.007,30,0.089,31,0.006,32,0.006,43,0.426,49,0.169,53,0.346,57,1.378,63,1.119,75,2.307,77,1.664,354,3.068,375,3.072,382,4.805,583,3.81,584,4.751,592,4.312,593,4.414,636,5.882,637,7.26,638,6.023,639,4.751]],["title/controllers/AuthorizeController.html",[157,1.378,640,3.592]],["body/controllers/AuthorizeController.html",[3,0.053,4,0.053,5,0.048,9,0.771,11,2.975,12,2.315,13,0.164,17,0.843,20,0.329,21,0.007,30,0.053,31,0.004,32,0.004,39,1.33,43,0.467,45,1.821,46,1.384,48,1.898,49,0.222,50,0.68,53,0.171,54,1.534,63,1.225,68,0.851,120,1.01,124,1.972,157,2.3,159,1.401,163,2.535,207,2.273,282,0.88,286,1.584,310,5.08,325,5.121,347,2.263,354,3.296,360,5.007,375,2.703,382,4.887,384,3.673,385,2.473,401,2.073,403,4.179,408,2.073,420,2.643,422,1.142,423,1.828,425,2.466,438,2.767,473,3.249,484,1.348,610,2.975,640,4.429,641,3.594,642,1.91,643,4.037,644,5.159,645,4.429,646,5.794,647,4.85,648,5.18,649,6.777,650,7.405,651,3.594,652,5.651,653,4.037,654,4.037,655,5.159,656,4.037,657,4.037,658,5.342,659,4.889,660,4.037,661,4.037,662,6.06,663,4.037,664,4.037,665,4.037,666,4.037,667,4.037,668,2.742,669,5.159,670,2.643,671,2.767,672,2.439,673,2.135,674,4.646,675,3.086,676,3.48,677,2.643,678,4.095,679,4.037,680,3.086,681,1.732,682,3.086,683,4.037,684,4.037,685,1.619,686,4.037,687,4.037,688,4.037,689,4.037,690,4.651,691,4.037,692,3.594,693,3.303,694,3.303,695,3.086,696,3.594,697,4.037,698,3.594,699,4.037,700,3.594,701,3.086,702,4.037,703,4.037,704,4.037]],["title/classes/AuthorizeQueries.html",[53,0.199,652,2.951]],["body/classes/AuthorizeQueries.html",[3,0.069,4,0.069,5,0.061,13,0.213,14,0.886,17,1.119,19,0.674,20,0.369,21,0.007,30,0.069,31,0.005,32,0.005,43,0.595,49,0.131,53,0.293,57,1.063,63,1.561,74,3.233,75,2.503,77,1.284,398,5.321,652,4.345,690,4.874,705,8.455,706,3.153,707,5.599,708,7.761,709,7.761,710,7.761,711,5.599,712,7.761,713,7.761,714,5.083,715,5.933,716,6.804,717,5.219,718,4.648,719,5.219,720,5.219,721,5.219,722,4.648,723,5.219,724,4.648,725,4.648,726,4.648,727,5.219]],["title/injectables/AuthorizeService.html",[33,0.99,678,2.839]],["body/injectables/AuthorizeService.html",[0,1.205,3,0.033,4,0.033,5,0.03,12,1.996,13,0.102,17,0.87,19,0.589,20,0.324,21,0.007,22,1.029,30,0.053,31,0.003,32,0.003,33,0.85,35,0.945,39,0.926,43,0.482,45,1.879,46,1.428,48,1.671,49,0.207,50,0.423,53,0.106,54,1.404,62,1.55,68,0.529,84,0.965,101,0.75,107,1.027,109,2.275,112,0.763,125,3.055,128,2.399,134,2.135,135,0.792,143,2.092,144,1.897,147,2.524,156,2.544,203,2.306,204,0.823,207,1.414,260,2.275,262,0.855,282,1.973,286,1.985,287,1.253,310,3.055,314,3.002,315,3.865,317,2.848,323,1.879,325,4.17,347,2.925,361,1.289,362,1.158,367,1.328,375,2.666,384,2.998,385,1.347,397,1.414,422,1.141,423,2.336,441,2.855,442,2.411,446,1.328,449,2.765,451,1.721,465,1.369,473,3.208,484,2.841,487,1.721,496,1.577,497,2.275,498,1.811,500,1.811,502,1.919,505,1.919,510,2.272,519,1.721,585,2.765,594,2.437,607,1.053,610,3.257,613,2.437,614,1.463,615,1.328,616,1.273,620,2.073,648,3.865,651,2.235,652,4.924,658,1.811,659,3.648,670,3.312,671,1.721,673,1.328,676,3.656,677,1.644,678,2.437,680,1.919,681,1.077,690,3.176,707,4.177,711,4.177,728,1.919,729,3.592,730,4.034,731,4.138,732,4.034,733,4.138,734,4.034,735,4.138,736,1.414,737,3.204,738,4.149,739,4.302,740,2.51,741,2.51,742,3.084,743,2.51,744,5.544,745,3.301,746,2.51,747,5.191,748,2.51,749,2.51,750,1.414,751,2.2,752,3.301,753,2.51,754,2.51,755,2.51,756,3.301,757,2.51,758,2.51,759,2.51,760,3.697,761,4.739,762,4.739,763,2.74,764,2.054,765,4.739,766,1.811,767,1.328,768,2.054,769,1.919,770,1.811,771,2.054,772,2.91,773,3.301,774,2.91,775,2.054,776,2.054,777,3.301,778,2.054,779,3.301,780,2.533,781,4.739,782,3.984,783,2.054,784,2.054,785,1.919,786,2.054,787,2.054,788,1.919,789,1.644,790,1.919,791,1.919,792,2.054,793,1.919,794,2.054,795,1.919,796,2.054,797,2.054,798,3.301,799,2.054,800,1.919,801,2.054,802,2.054,803,3.948,804,2.054,805,2.054,806,2.054,807,2.054,808,2.054,809,4.138,810,3.865,811,2.2,812,3.301,813,3.084,814,2.054,815,4.739,816,3.301,817,5.136,818,2.054,819,3.301,820,3.301,821,3.301,822,3.301,823,3.301,824,2.014,825,3.301,826,2.054,827,2.054,828,2.054,829,2.054,830,2.054,831,2.054,832,2.054,833,3.301,834,2.054,835,2.054,836,1.517,837,1.253,838,2.054,839,1.919,840,1.644,841,2.054,842,1.414,843,2.054,844,2.054,845,1.919,846,1.577,847,3.301,848,1.414,849,2.054,850,4.138,851,2.054,852,2.054,853,2.054,854,2.054,855,2.054,856,1.919,857,3.301,858,2.054,859,3.301,860,2.133,861,2.054,862,4.138,863,1.919,864,2.054,865,2.054,866,2.054,867,2.054,868,1.644,869,2.533,870,1.721,871,2.054,872,1.919,873,2.054,874,3.865,875,2.054,876,2.054,877,2.054,878,4.138,879,2.054,880,2.054,881,3.865,882,2.054,883,2.054,884,2.054]],["title/entities/CertEntity.html",[885,1.429,886,2.839]],["body/entities/CertEntity.html",[3,0.063,4,0.063,5,0.056,7,3.493,9,1.144,11,3.799,12,2.025,13,0.193,14,0.831,15,5.336,16,1.945,17,0.739,19,0.614,20,0.37,21,0.007,23,2.189,24,4.077,25,2.852,26,2.994,27,2.443,30,0.086,31,0.004,32,0.004,43,0.565,49,0.162,53,0.201,63,1.482,68,1.938,262,2.21,323,1.819,522,3.334,523,2.32,527,4.852,548,3.121,592,4.205,885,2.418,886,3.922,887,2.247,888,3.885,889,5.312,890,5.781,891,3.693,892,3.799,893,4.337,894,4.311,895,4.748,896,4.634,897,3.072,898,5.453,899,4.748,900,3.54,901,4.748,902,3.776,903,4.748,904,2.674,905,3.578,906,2.921,907,4.748,908,2.921,909,2.443,910,4.748,911,5.336,912,4.748,913,4.311,914,4.748,915,3.656,916,3.656,917,2.137,918,2.921,919,1.681,920,2.137,921,3.841]],["title/classes/ClaimsQuery.html",[53,0.199,78,2.346]],["body/classes/ClaimsQuery.html",[3,0.049,4,0.049,5,0.044,7,1.643,9,0.729,12,2.145,13,0.152,14,0.702,16,1.857,17,0.739,19,0.63,20,0.359,21,0.007,25,2.408,26,1.725,27,1.407,28,2.408,30,0.109,31,0.004,32,0.004,43,0.409,49,0.205,53,0.364,57,0.762,62,2.746,63,1.074,68,1.888,70,1.159,71,4.03,73,1.437,74,3.015,75,2.335,76,2.743,77,0.92,78,2.737,79,3.24,80,3.24,89,3.907,95,2.467,101,1.117,107,1.396,118,2.352,120,0.936,122,2.199,124,1.273,128,1.941,134,1.379,143,2.344,144,1.226,221,3.071,262,1.273,286,2.804,299,2.04,323,0.92,353,1.437,375,1.203,493,2.18,523,1.711,548,2.547,579,1.568,592,4.204,593,1.817,594,2.493,595,1.683,597,2.107,607,1.568,616,1.73,639,2.18,668,1.77,672,4.317,681,1.605,842,2.107,848,2.107,860,1.978,885,1.974,891,1.867,892,1.921,893,2.99,894,3.195,896,3.195,897,1.77,900,3.897,902,2.408,905,2.467,906,1.683,908,1.683,909,1.407,913,3.195,915,2.107,916,2.107,917,1.683,918,2.467,919,1.324,920,1.683,921,2.993,922,4.488,923,2.18,924,3.74,925,3.331,926,3.331,927,3.74,928,2.99,929,3.921,930,4.25,931,3.195,932,3.655,933,2.449,934,4.25,935,2.349,936,3.921,937,2.449,938,4.68,939,4.68,940,4.68,941,4.023,942,4.164,943,4.25,944,2.449,945,2.449,946,3.921,947,2.449,948,2.449,949,2.449,950,2.449,951,2.449,952,2.449,953,2.449,954,3.59,955,4.317,956,2.449,957,1.978,958,2.449,959,2.99,960,2.449,961,2.449,962,2.18,963,3.567,964,2.26,965,2.18,966,2.107,967,2.26,968,1.921,969,2.449]],["title/classes/ClientCredentialsDto.html",[53,0.199,371,3.592]],["body/classes/ClientCredentialsDto.html",[3,0.092,4,0.092,5,0.082,13,0.284,14,1.064,19,0.629,20,0.325,21,0.007,30,0.092,31,0.006,32,0.006,43,0.524,49,0.174,53,0.352,57,1.421,63,1.374,75,2.472,77,1.716,371,6.35,398,6.08,399,7.258,970,7.258,971,6.214,972,6.978,973,6.978]],["title/classes/ClientInitDto.html",[53,0.199,974,3.592]],["body/classes/ClientInitDto.html",[3,0.094,4,0.094,5,0.084,13,0.29,14,1.077,16,2.09,17,0.958,19,0.577,20,0.279,21,0.007,30,0.094,31,0.006,32,0.006,43,0.449,49,0.178,53,0.357,57,1.452,63,1.179,74,2.864,75,2.218,77,1.753,970,6.883,974,6.43,975,6.347,976,5.833,977,7.128]],["title/entities/CredentialConfig.html",[885,1.429,978,2.839]],["body/entities/CredentialConfig.html",[3,0.044,4,0.044,5,0.039,9,0.803,13,0.135,14,0.642,16,1.411,17,1.057,19,0.557,20,0.363,21,0.007,23,1.538,28,2.957,30,0.044,31,0.003,32,0.003,43,0.572,46,1.258,49,0.215,53,0.335,56,3.649,59,2.081,60,4.594,61,4.979,63,1.501,68,1.937,70,1.871,74,2.888,75,1.775,76,2.248,77,1.485,82,1.654,84,1.273,85,2.081,86,2.081,90,3.649,97,3.649,100,3.194,101,1.496,103,4.067,112,2.047,117,3.281,118,2.149,119,2.17,120,0.829,122,2.7,135,1.906,148,2.17,149,4.409,152,4.409,153,1.931,154,2.17,155,3.281,262,2.292,285,2.254,323,1.485,408,1.702,523,1.906,548,2.642,579,2.101,616,1.046,620,2.054,716,2.391,811,3.671,885,1.524,886,4.067,887,1.568,900,4.866,902,2.957,904,2.822,905,3.658,906,3.029,908,2.254,909,1.885,917,1.491,918,2.718,919,1.173,920,1.491,921,2.786,923,1.931,928,2.732,929,3.649,931,2.919,959,3.294,962,1.931,963,3.796,978,3.027,979,2.951,980,5.378,981,5.378,982,5.378,983,3.793,984,3.793,985,6.04,986,5.413,987,3.792,988,3.614,989,5.01,990,3.314,991,5.378,992,3.314,993,3.314,994,4.461,995,3.314,996,3.314,997,3.314,998,2.712,999,2.434,1000,3.314,1001,3.314,1002,5.01,1003,5.01,1004,5.01,1005,5.01,1006,4.461,1007,5.01,1008,5.01,1009,5.01,1010,5.01,1011,5.01,1012,5.01,1013,3.314,1014,2.951,1015,5.01,1016,3.314,1017,3.314,1018,5.01,1019,5.01,1020,3.314,1021,3.314,1022,3.314,1023,3.314,1024,3.314,1025,4.856,1026,4.099,1027,3.314,1028,3.314,1029,3.314,1030,2.533,1031,3.314,1032,3.314,1033,2.17,1034,4.461,1035,3.314,1036,2.533,1037,2.951,1038,2.712,1039,3.314,1040,4.461,1041,3.314,1042,3.314,1043,3.314,1044,3.314,1045,3.314,1046,2.272,1047,2.533]],["title/classes/CredentialConfigCreate.html",[53,0.199,1048,3.39]],["body/classes/CredentialConfigCreate.html",[3,0.095,4,0.095,5,0.085,21,0.007,23,2.15,30,0.095,31,0.006,32,0.006,37,3.996,49,0.211,53,0.304,57,1.461,120,1.795,135,2.264,323,2.077,978,4.335,981,7.519,1048,6.091,1049,6.388,1050,5.484,1051,8.444,1052,4.918,1053,5.871]],["title/classes/CredentialConfigMapping.html",[53,0.199,1054,3.592]],["body/classes/CredentialConfigMapping.html",[3,0.083,4,0.083,5,0.074,9,0.832,13,0.255,14,0.995,16,1.975,19,0.579,20,0.244,21,0.007,26,3.584,27,2.924,30,0.103,31,0.005,32,0.005,37,2.959,43,0.394,49,0.211,53,0.359,57,1.274,63,1.035,71,3.584,75,2.229,77,1.538,82,3.122,107,2.153,120,1.565,282,1.364,323,1.538,523,1.649,584,4.927,616,2.87,620,3.626,811,3.41,891,3.122,892,3.211,1052,4.287,1054,5.94,1055,5.117,1056,6.918,1057,4.981,1058,6.254,1059,5.117,1060,4.287,1061,5.569,1062,4.78,1063,4.78,1064,4.095,1065,5.569]],["title/injectables/CredentialConfigService.html",[33,0.99,1066,3.077]],["body/injectables/CredentialConfigService.html",[3,0.037,4,0.037,5,0.094,7,1.241,9,0.894,13,0.115,16,2.16,17,0.812,19,0.625,20,0.279,21,0.007,22,2.241,23,1.128,30,0.037,31,0.003,32,0.003,33,0.934,35,1.063,39,1.017,43,0.487,45,1.754,46,1.333,48,1.833,49,0.225,50,0.476,53,0.232,54,1.282,68,0.934,70,0.875,72,1.85,77,0.695,95,1.994,101,1.632,107,1.966,112,1.347,135,2.754,147,1.41,153,2.582,201,1.946,203,2.539,204,0.926,217,1.774,218,1.85,220,1.707,221,2.096,251,2.16,260,1.271,282,1.884,285,3.025,287,1.41,323,2.124,347,2.382,353,1.085,378,3.387,385,2.382,422,1.751,423,1.953,425,2.264,453,1.85,465,2.416,477,2.521,484,2.245,488,1.897,523,2.404,539,1.158,616,2.612,668,2.096,685,1.133,737,3.355,767,1.494,885,2.348,887,2.096,919,1,978,5.084,983,2.782,1048,4.849,1053,2.312,1057,3.485,1066,4.053,1067,6.874,1068,5.569,1069,2.16,1070,2.212,1071,3.133,1072,4.43,1073,3.037,1074,3.606,1075,2.825,1076,3.465,1077,2.89,1078,4.464,1079,2.825,1080,5.465,1081,4.43,1082,2.825,1083,2.275,1084,3.964,1085,5.836,1086,3.196,1087,4.43,1088,3.945,1089,2.825,1090,3.739,1091,4.43,1092,2.825,1093,2.825,1094,3.943,1095,3.037,1096,2.825,1097,4.43,1098,2.825,1099,3.196,1100,3.943,1101,4.156,1102,4.43,1103,3.196,1104,1.541,1105,3.625,1106,2.038,1107,2.312,1108,1.937,1109,2.312,1110,1.937,1111,2.516,1112,2.038,1113,2.038,1114,3.625,1115,2.825,1116,4.472,1117,2.312,1118,2.038,1119,3.196,1120,2.038,1121,2.038,1122,2.038,1123,2.038,1124,4.472,1125,2.782,1126,2.312,1127,2.312,1128,1.937,1129,2.312,1130,5.859,1131,2.901,1132,2.312,1133,2.16,1134,2.312,1135,2.312,1136,2.312,1137,2.312,1138,2.825,1139,4.472,1140,4.472,1141,2.312,1142,2.312,1143,2.516,1144,2.312,1145,2.312,1146,2.16,1147,2.312,1148,2.312,1149,2.16,1150,2.312,1151,2.312,1152,5.465,1153,4.178,1154,2.825,1155,3.943,1156,3.739,1157,3.625,1158,3.196,1159,3.625,1160,1.937,1161,2.782,1162,3.579,1163,2.825,1164,2.312,1165,2.312,1166,2.312,1167,2.312,1168,2.312,1169,2.825,1170,2.825,1171,2.825,1172,2.825,1173,2.038,1174,2.312,1175,4.43,1176,2.825,1177,2.516,1178,2.825,1179,2.825]],["title/classes/CredentialIssuerMetadataDto.html",[53,0.199,1180,3.592]],["body/classes/CredentialIssuerMetadataDto.html",[3,0.067,4,0.067,5,0.06,9,0.678,13,0.208,14,0.872,19,0.639,20,0.361,21,0.007,27,2.563,30,0.067,31,0.005,32,0.005,43,0.574,53,0.216,57,1.039,95,3.065,101,2.445,144,2.984,168,4.465,360,4.612,366,4.914,367,3.602,382,4.33,447,5.207,450,5.574,497,4.342,579,2.138,591,3.898,616,2.91,620,3.599,909,2.563,1057,3.837,1128,3.496,1180,5.207,1181,6.04,1182,8.212,1183,4.172,1184,3.081,1185,2.781,1186,7.671,1187,7.671,1188,7.671,1189,6.831,1190,7.671,1191,7.671,1192,5.849,1193,7.671,1194,5.099,1195,6.812,1196,5.099,1197,3.837,1198,6.812,1199,5.099,1200,6.831,1201,5.099,1202,5.099,1203,5.099,1204,6.066,1205,5.099,1206,6.812,1207,5.099,1208,4.116,1209,4.54,1210,4.54]],["title/classes/CredentialQuery.html",[53,0.199,79,2.346]],["body/classes/CredentialQuery.html",[3,0.048,4,0.048,5,0.043,7,1.601,9,0.716,12,2.129,13,0.148,14,0.689,16,1.84,17,0.728,19,0.627,20,0.362,21,0.007,25,3.1,26,1.682,27,1.372,28,2.808,30,0.108,31,0.004,32,0.004,43,0.475,49,0.204,53,0.362,57,0.743,62,2.067,63,1.246,68,1.878,70,1.129,71,3.939,73,1.401,74,2.998,75,2.35,76,2.721,77,0.897,78,1.82,79,3.524,80,3.192,89,3.866,95,2.421,101,1.089,107,1.37,118,2.308,120,0.912,122,2.564,124,1.241,128,1.905,134,1.344,143,2.309,144,1.194,221,1.725,262,1.241,286,2.77,299,1.988,323,0.897,342,2.787,353,1.401,375,1.172,493,2.124,523,1.686,548,2.509,579,1.529,592,4.166,593,1.771,594,2.456,595,1.641,597,2.053,607,1.529,616,1.698,639,2.124,668,1.725,672,4.265,681,1.564,842,2.053,848,2.053,860,1.928,885,1.944,891,1.82,892,1.872,893,2.934,894,3.135,896,3.135,897,1.725,900,3.849,902,2.363,905,2.421,906,1.641,908,1.641,909,1.372,913,3.135,915,2.053,916,2.053,917,1.641,918,2.421,919,1.291,920,1.641,921,2.949,922,4.948,923,2.124,928,2.934,929,3.863,930,4.187,931,3.135,932,3.601,933,2.388,934,4.187,935,2.29,936,3.863,937,2.388,938,4.622,939,4.622,940,4.622,941,3.981,942,4.113,943,4.187,944,2.388,945,2.388,946,4.265,947,2.388,948,2.388,949,2.388,950,4.187,951,4.187,952,4.187,953,2.388,954,3.523,955,4.265,956,2.388,957,1.928,958,2.388,959,2.934,960,2.388,961,2.388,962,2.124,963,3.524,964,2.203,965,2.124,966,2.053,967,2.203,968,1.872,969,2.388,1211,3.646,1212,3.646,1213,3.646,1214,3.646,1215,3.246,1216,3.246,1217,3.646]],["title/classes/CredentialSetQuery.html",[53,0.199,80,2.346]],["body/classes/CredentialSetQuery.html",[3,0.05,4,0.05,5,0.044,7,1.656,9,0.734,12,2.15,13,0.154,14,0.706,16,1.675,17,0.742,19,0.626,20,0.357,21,0.007,25,2.422,26,1.739,27,1.419,28,2.864,30,0.109,31,0.004,32,0.004,43,0.348,49,0.206,53,0.365,57,0.768,62,2.119,63,0.912,68,1.891,70,1.168,71,3.973,73,1.449,74,3.02,75,2.308,76,2.75,77,0.927,78,1.882,79,3.254,80,3.581,89,3.919,95,2.934,101,1.126,107,1.404,118,2.366,120,0.943,122,2.211,124,1.284,128,1.952,134,2.403,143,2.355,144,1.235,221,1.784,262,1.284,286,2.815,299,3.555,323,0.927,353,1.449,375,1.212,493,2.197,523,1.719,548,2.559,579,1.581,592,4.216,593,1.832,594,2.505,595,1.697,597,2.123,607,1.581,616,1.74,639,2.197,668,1.784,672,4.334,681,1.618,842,2.123,848,2.123,860,1.994,885,1.983,891,1.882,892,1.936,893,3.007,894,3.213,896,3.213,897,1.784,900,3.912,902,2.422,905,2.481,906,1.697,908,1.697,909,1.419,913,3.213,915,2.123,916,2.123,917,1.697,918,2.481,919,1.335,920,1.697,921,3.007,922,4.094,923,2.197,928,3.007,929,3.939,930,4.269,931,3.213,932,3.672,933,2.469,934,4.269,935,2.368,936,3.939,937,2.469,938,4.697,939,4.697,940,4.697,941,4.036,942,4.18,943,4.269,944,2.469,945,2.469,946,3.939,947,2.469,948,2.469,949,2.469,950,2.469,951,2.469,952,2.469,953,2.469,954,4.269,955,4.334,956,2.469,957,1.994,958,2.469,959,3.007,960,2.469,961,2.469,962,2.197,963,3.581,964,2.278,965,2.197,966,2.123,967,2.278,968,1.936,969,2.469,1218,3.085,1219,3.77,1220,3.77,1221,3.77,1222,3.77]],["title/controllers/CredentialsController.html",[157,1.378,1223,3.592]],["body/controllers/CredentialsController.html",[3,0.067,4,0.067,5,0.06,9,0.673,13,0.206,16,1.906,17,0.87,19,0.524,20,0.299,21,0.007,30,0.067,31,0.005,32,0.005,39,1.556,43,0.482,45,1.879,46,1.428,48,2.052,49,0.219,50,0.852,53,0.215,54,1.583,63,1.264,107,2.078,120,1.266,135,2.686,157,2.241,159,1.757,318,3.493,354,2.875,384,2.66,401,3.924,406,3.178,418,4.186,425,2.394,497,2.277,523,2.152,533,2.676,616,2.906,642,2.394,685,2.029,1048,5.888,1057,4.597,1066,5.004,1068,3.65,1070,3.383,1071,2.223,1083,3.48,1099,4.889,1109,4.14,1110,3.469,1223,5.842,1224,4.506,1225,6.777,1226,6.253,1227,6.777,1228,7.642,1229,4.506,1230,3.469,1231,5.06,1232,5.06,1233,5.06,1234,5.06,1235,5.06,1236,3.057,1237,3.057,1238,3.178,1239,3.178,1240,4.14,1241,4.14,1242,3.057,1243,3.178,1244,3.057,1245,4.14,1246,3.868,1247,4.438,1248,2.122,1249,5.06,1250,5.06,1251,5.06,1252,3.469,1253,3.868,1254,5.06]],["title/controllers/CredentialsMetadataController.html",[157,1.378,1255,3.592]],["body/controllers/CredentialsMetadataController.html",[3,0.075,4,0.075,5,0.067,9,0.752,13,0.23,16,2.11,17,0.83,19,0.659,20,0.333,21,0.007,27,2.744,30,0.075,31,0.005,32,0.005,39,1.674,43,0.46,45,1.793,46,1.363,48,1.821,49,0.202,50,0.952,53,0.24,54,1.511,63,1.207,68,1.192,101,2.177,107,1.857,120,1.415,157,1.659,159,1.963,163,3.552,323,2.29,420,3.704,425,2.367,488,2.531,524,4.406,616,2.851,642,2.676,685,2.268,941,3.856,984,5.354,986,5.844,1090,5.151,1185,3.977,1247,5.285,1248,2.371,1255,5.574,1256,6.169,1257,6.604,1258,5.036,1259,5.656,1260,5.656,1261,5.656,1262,5.656,1263,5.656,1264,5.656,1265,5.656,1266,5.036,1267,5.656,1268,5.656,1269,5.656,1270,7.292,1271,5.656,1272,5.656,1273,5.656,1274,5.656]],["title/injectables/CredentialsService.html",[33,0.99,1247,3.077]],["body/injectables/CredentialsService.html",[3,0.036,4,0.036,5,0.032,9,0.363,13,0.111,16,1.781,17,0.752,19,0.594,20,0.298,21,0.007,23,1.097,30,0.036,31,0.003,32,0.003,33,0.908,35,1.026,39,0.989,43,0.443,45,1.625,46,1.235,48,1.814,49,0.221,50,0.459,53,0.116,54,1.258,68,0.575,82,1.362,100,3.891,101,1.812,107,2.154,112,0.829,114,1.362,134,1.969,135,1.915,147,3.03,203,2.597,204,0.894,227,2.232,228,1.536,262,0.929,282,1.89,323,2.108,347,2.785,353,1.048,385,2.346,408,1.401,422,1.717,423,2.086,425,2.482,431,3.574,441,2.651,442,2.217,446,2.279,453,1.786,465,2.35,472,2.429,473,3.064,484,2.622,488,1.496,496,2.706,513,1.968,515,3.854,516,3.662,524,3.667,527,2.511,539,1.118,544,1.536,579,1.144,608,2.35,616,2.734,673,1.442,737,3.311,750,1.536,751,1.487,760,4.094,763,3.715,766,1.968,767,1.442,782,4.412,803,3.851,811,4.615,824,2.151,836,1.648,837,1.362,919,0.966,941,2.279,959,1.487,978,3.993,980,3.837,983,2.706,984,3.355,986,4.531,987,3.418,991,2.429,999,2.595,1025,1.968,1033,1.786,1036,2.085,1037,2.429,1038,2.232,1053,2.232,1057,2.427,1070,2.151,1071,1.198,1076,2.949,1090,3.667,1094,3.109,1103,1.968,1104,1.487,1111,2.429,1189,3.837,1197,1.536,1242,1.648,1247,3.975,1275,2.429,1276,5.342,1277,5.342,1278,5.342,1279,4.309,1280,2.429,1281,4.444,1282,6.069,1283,4.608,1284,2.727,1285,2.727,1286,6.609,1287,2.727,1288,4.309,1289,3.109,1290,6.017,1291,2.727,1292,2.727,1293,2.727,1294,2.727,1295,4.309,1296,2.727,1297,6.069,1298,3.837,1299,4.309,1300,3.113,1301,2.085,1302,2.085,1303,3.837,1304,2.085,1305,3.837,1306,2.085,1307,1.968,1308,1.968,1309,1.87,1310,2.727,1311,1.536,1312,4.309,1313,3.837,1314,2.727,1315,2.727,1316,5.404,1317,2.727,1318,2.727,1319,2.727,1320,4.309,1321,4.309,1322,2.727,1323,2.727,1324,2.727,1325,5.342,1326,2.727,1327,2.727,1328,2.727,1329,5.342,1330,2.727,1331,2.727,1332,4.309,1333,2.954,1334,2.429,1335,4.309,1336,2.727,1337,2.727,1338,2.727,1339,2.727,1340,2.232,1341,2.727,1342,2.727,1343,2.727,1344,2.429,1345,2.727,1346,2.429,1347,2.232,1348,2.727,1349,2.727,1350,4.309,1351,3.109,1352,1.487,1353,2.232,1354,2.727,1355,2.727,1356,2.727,1357,2.232,1358,1.786,1359,2.429,1360,2.429,1361,4.309,1362,5.404,1363,2.727,1364,2.727,1365,2.727,1366,1.968,1367,2.085,1368,4.309,1369,2.085,1370,2.727,1371,2.727,1372,2.727,1373,4.309]],["title/modules/CryptoImplementatationModule.html",[172,1.429,1374,3.39]],["body/modules/CryptoImplementatationModule.html",[3,0.086,4,0.086,5,0.077,21,0.007,30,0.105,31,0.005,32,0.005,49,0.224,50,1.099,53,0.277,172,2.62,174,2.799,175,3.17,176,3.35,177,3.35,178,3.087,179,4.185,180,4.185,196,4.096,197,3.35,198,3.35,201,2.866,202,5.754,204,2.138,213,4.492,226,4.987,228,3.675,282,1.423,358,6.097,1160,4.473,1283,5.916,1308,4.707,1374,6.842,1375,5.81,1376,5.81,1377,5.81,1378,4.473,1379,5.339,1380,5.81,1381,5.81]],["title/interfaces/CryptoImplementation.html",[0,1.403,1382,3.222]],["body/interfaces/CryptoImplementation.html",[0,2.404,2,2.809,3,0.074,4,0.074,5,0.066,9,0.749,13,0.229,14,0.931,17,0.827,19,0.618,20,0.353,21,0.007,23,2.166,30,0.074,31,0.005,32,0.005,39,1.669,43,0.508,45,1.787,46,1.505,48,1.817,228,4.792,385,3.106,425,2.131,442,2.293,595,3.27,836,4.864,837,4.248,1289,6.138,1334,7.576,1378,5.833,1382,4.983,1383,4.605,1384,5.947,1385,7.268,1386,5.947,1387,5.243,1388,6.962,1389,7.268,1390,7.268,1391,5.627,1392,6.472,1393,5.519,1394,6.472,1395,9.302,1396,5.627,1397,6.504,1398,5.947,1399,6.472,1400,5.627,1401,6.154,1402,6.472,1403,3.858,1404,3.685,1405,4.605,1406,3.685]],["title/injectables/CryptoImplementationService.html",[33,0.99,1283,2.839]],["body/injectables/CryptoImplementationService.html",[3,0.074,4,0.074,5,0.066,13,0.227,17,0.823,20,0.283,21,0.007,30,0.095,31,0.005,32,0.005,33,1.524,35,2.099,39,1.66,43,0.505,45,1.778,46,1.351,48,2.032,49,0.22,50,0.94,53,0.237,54,1.82,112,1.697,124,2.461,203,2.887,204,1.828,228,4.777,262,2.461,422,1.579,425,1.636,441,2.238,442,1.761,510,4.777,527,4.212,837,4.386,872,4.265,874,5.525,1160,6.023,1248,2.34,1283,4.367,1289,5.214,1300,3.251,1301,4.265,1302,4.265,1378,5.814,1382,5.497,1406,5.754,1407,4.566,1408,8.481,1409,8.018,1410,5.58,1411,5.58,1412,7.228,1413,5.58,1414,5.525,1415,6.94,1416,5.58,1417,5.58,1418,6.561,1419,5.214,1420,8.018,1421,6.716,1422,5.58]],["title/modules/CryptoModule.html",[172,1.429,185,2.563]],["body/modules/CryptoModule.html",[3,0.082,4,0.082,5,0.073,21,0.007,30,0.082,31,0.005,32,0.005,49,0.235,50,1.049,53,0.264,159,2.691,172,2.567,174,2.673,175,3.027,176,3.199,177,3.199,178,2.948,179,4.1,180,4.1,185,5.255,196,3.981,197,3.199,198,3.199,201,2.737,538,3.63,539,2.554,737,4.381,886,3.764,1423,5.548,1424,5.548,1425,5.548,1426,6.114,1427,6.23,1428,6.452,1429,5.548,1430,6.23,1431,6.23,1432,5.077,1433,5.548,1434,6.23,1435,5.548]],["title/classes/DBKeyService.html",[53,0.199,1436,3.592]],["body/classes/DBKeyService.html",[3,0.032,4,0.032,5,0.074,7,1.079,9,0.327,13,0.1,14,0.508,16,1.771,17,0.939,19,0.663,20,0.354,21,0.007,22,3.011,23,2.411,24,4.213,30,0.066,31,0.003,32,0.003,37,1.876,39,0.91,43,0.527,45,2.028,46,1.541,48,1.968,49,0.218,53,0.104,54,1.613,57,0.5,65,5.298,68,0.835,112,0.747,114,2.488,203,2.284,204,0.805,228,2.233,244,1.684,260,1.784,262,0.836,282,1.769,323,2.239,347,2.827,384,2.244,385,2.935,408,1.261,422,1.121,423,2.774,425,1.84,441,1.59,442,1.572,477,1.828,484,2.532,488,2.549,497,1.784,522,3.624,523,1.768,524,2.395,527,2.31,692,3.53,736,1.384,737,2.242,750,3.778,751,1.34,763,3.339,836,3.791,886,1.484,911,4.125,983,5.742,1047,3.03,1070,1.979,1071,1.741,1076,3.428,1084,1.261,1101,2.31,1160,4.301,1283,3.455,1300,1.431,1308,1.772,1311,1.384,1333,2.717,1352,3.118,1382,3.416,1393,2.717,1397,3.03,1398,2.01,1403,4.301,1404,5.213,1418,2.01,1432,1.609,1436,3.03,1437,6.284,1438,2.187,1439,2.717,1440,5.458,1441,4.437,1442,3.964,1443,3.964,1444,6.539,1445,3.244,1446,4.371,1447,3.53,1448,3.53,1449,4.679,1450,4.078,1451,3.964,1452,3.244,1453,2.456,1454,3.964,1455,4.371,1456,3.244,1457,2.187,1458,2.456,1459,3.964,1460,3.53,1461,3.964,1462,2.456,1463,2.717,1464,4.679,1465,3.964,1466,6.274,1467,2.456,1468,3.745,1469,5.092,1470,2.456,1471,2.456,1472,2.456,1473,3.53,1474,3.591,1475,2.456,1476,3.964,1477,2.456,1478,2.395,1479,3.53,1480,2.456,1481,3.53,1482,4.125,1483,5.718,1484,2.456,1485,2.187,1486,2.456,1487,1.772,1488,5.718,1489,3.53,1490,2.456,1491,4.078,1492,1.261,1493,1.684,1494,3.244,1495,1.878,1496,1.684,1497,2.01,1498,1.878,1499,1.878,1500,2.187,1501,2.01,1502,2.456,1503,2.456,1504,2.456,1505,2.456,1506,4.437,1507,6.274,1508,2.01,1509,2.456,1510,3.964,1511,2.456,1512,2.456,1513,2.456,1514,2.456,1515,2.456,1516,2.456,1517,2.456,1518,2.456,1519,2.01,1520,2.456,1521,2.456,1522,2.456,1523,2.456,1524,2.456,1525,4.983,1526,2.456,1527,2.456,1528,2.456,1529,2.456,1530,2.456,1531,2.187,1532,2.456,1533,2.187,1534,2.456,1535,2.187,1536,4.983,1537,3.964,1538,3.53,1539,3.964,1540,2.456,1541,2.456,1542,2.456,1543,2.456,1544,2.456,1545,2.456]],["title/classes/DCQL.html",[53,0.199,955,2.839]],["body/classes/DCQL.html",[3,0.05,4,0.05,5,0.044,7,1.658,9,0.734,12,2.15,13,0.154,14,0.707,16,1.676,17,0.743,19,0.621,20,0.357,21,0.007,25,2.424,26,1.741,27,1.42,28,2.424,30,0.109,31,0.004,32,0.004,43,0.348,49,0.206,53,0.365,57,0.769,62,2.12,63,0.913,68,1.892,70,1.169,71,3.974,73,1.45,74,3.021,75,2.308,76,2.751,77,0.928,78,1.884,79,3.583,80,3.583,89,3.921,95,2.483,101,1.948,107,1.405,118,2.368,120,0.944,122,2.213,124,1.285,128,1.954,134,1.391,143,2.356,144,1.237,221,1.786,262,1.285,286,2.817,299,2.058,323,0.928,342,4.219,353,1.45,375,1.214,493,2.199,523,1.72,548,2.56,579,1.583,592,4.218,593,1.834,594,2.506,595,1.698,597,2.126,607,1.583,616,1.741,639,2.199,668,1.786,672,4.336,681,1.619,842,2.126,848,2.126,860,1.996,885,1.984,891,1.884,892,1.938,893,3.01,894,3.216,896,3.216,897,1.786,900,3.914,902,2.424,905,2.483,906,1.698,908,1.698,909,1.42,913,3.216,915,2.126,916,2.126,917,1.698,918,2.483,919,1.336,920,1.698,921,3.009,922,4.097,923,2.199,928,3.01,929,3.941,930,4.272,931,3.216,932,3.674,933,2.472,934,4.272,935,2.371,936,3.941,937,2.472,938,4.7,939,4.7,940,4.7,941,4.038,942,4.182,943,4.272,944,2.472,945,2.472,946,3.941,947,2.472,948,2.472,949,2.472,950,2.472,951,2.472,952,2.472,953,2.472,954,3.614,955,4.613,956,4.272,957,1.996,958,2.472,959,3.01,960,2.472,961,2.472,962,2.199,963,3.583,964,2.28,965,2.199,966,2.126,967,2.28,968,1.938,969,2.472,1216,3.361,1546,3.774,1547,3.774,1548,3.774]],["title/modules/DatabaseModule.html",[172,1.429,186,3.39]],["body/modules/DatabaseModule.html",[3,0.076,4,0.076,5,0.068,20,0.288,21,0.007,30,0.097,31,0.005,32,0.005,49,0.222,50,0.966,53,0.243,54,1.524,68,1.551,172,2.237,174,2.46,186,5.307,201,3.231,202,5.307,203,2.917,204,1.879,213,4.143,220,4.445,221,2.713,280,3.931,281,4.383,282,1.772,284,4.692,333,5.106,538,3.341,539,2.351,560,6.392,1369,4.383,1549,4.692,1550,7.357,1551,4.692,1552,6.551,1553,5.106,1554,5.106,1555,5.106,1556,7.63,1557,8.074,1558,6.773,1559,6.392,1560,5.106,1561,5.106,1562,5.106,1563,5.106,1564,5.106,1565,5.734,1566,7.357,1567,8.123,1568,5.734,1569,5.734,1570,7.357,1571,5.734,1572,5.734,1573,5.734,1574,5.734,1575,5.734,1576,5.106,1577,5.734,1578,6.02,1579,5.734,1580,5.734]],["title/controllers/DisplayController.html",[157,1.378,1581,3.592]],["body/controllers/DisplayController.html",[3,0.07,4,0.07,5,0.063,9,1.041,13,0.216,17,0.797,20,0.274,21,0.007,30,0.07,31,0.005,32,0.005,39,1.607,43,0.441,45,1.721,46,1.308,48,1.878,49,0.222,50,0.894,53,0.225,54,1.45,63,1.158,120,1.329,157,2.44,159,1.844,168,4.843,318,3.696,354,3.342,384,2.747,401,4.02,418,4.074,425,2.44,442,2.209,477,3.838,533,2.809,595,3.15,642,2.513,685,2.13,897,3.312,1110,3.641,1192,6.595,1236,3.209,1237,3.209,1238,3.336,1239,3.336,1243,3.336,1244,3.209,1248,2.227,1352,4.538,1581,5.35,1582,4.729,1583,7.828,1584,6.999,1585,5.311,1586,7.701,1587,6.003,1588,5.311,1589,5.311,1590,5.311,1591,5.705,1592,5.311,1593,4.729,1594,5.311,1595,5.311,1596,5.311,1597,5.311]],["title/classes/DisplayCreateDto.html",[53,0.199,1587,3.39]],["body/classes/DisplayCreateDto.html",[3,0.095,4,0.095,5,0.085,21,0.007,30,0.095,31,0.006,32,0.006,37,4.011,49,0.212,53,0.306,57,1.471,120,1.807,282,1.849,523,2.235,1050,5.52,1052,4.951,1587,6.115,1598,6.43,1599,8.476,1600,4.535,1601,6.43]],["title/entities/DisplayEntity.html",[885,1.429,1600,2.951]],["body/entities/DisplayEntity.html",[3,0.076,4,0.076,5,0.068,13,0.236,14,0.947,19,0.609,20,0.355,21,0.007,30,0.098,31,0.005,32,0.005,43,0.514,46,1.081,49,0.222,53,0.377,63,1.35,68,1.812,70,1.792,75,2.266,76,2.724,77,1.423,112,2.48,120,1.447,144,1.895,168,4.034,323,2.006,523,2.342,548,3.374,885,2.25,887,2.737,902,3.25,904,3.258,905,3.868,906,3.329,908,3.329,909,2.784,917,2.603,918,3.329,919,2.048,920,2.603,921,2.668,928,4.034,963,2.888,1030,4.421,1192,5.072,1600,4.646,1602,4.421,1603,5.784,1604,5.784,1605,6.202,1606,5.784,1607,5.784,1608,5.884,1609,4.733,1610,4.733]],["title/classes/DisplayInfo.html",[53,0.199,1605,3.39]],["body/classes/DisplayInfo.html",[3,0.078,4,0.078,5,0.069,13,0.24,14,0.959,19,0.626,20,0.357,21,0.007,30,0.099,31,0.005,32,0.005,43,0.519,46,1.538,49,0.223,53,0.379,57,1.201,63,1.362,68,1.579,70,1.827,75,2.408,76,2.749,77,1.45,112,1.794,120,1.476,144,1.932,168,3.216,323,1.45,523,1.975,548,3.23,885,2.278,902,2.59,905,3.37,906,2.654,908,2.654,909,2.219,917,2.654,918,3.37,919,2.088,920,2.654,921,2.72,928,4.084,963,2.944,1192,4.043,1600,3.704,1602,4.508,1605,6.246,1608,6.246,1609,6.735,1610,6.735,1611,5.897,1612,5.251,1613,5.897,1614,5.897]],["title/classes/DisplayLogo.html",[53,0.199,1608,3.39]],["body/classes/DisplayLogo.html",[3,0.081,4,0.081,5,0.072,13,0.249,14,0.981,19,0.619,20,0.343,21,0.007,30,0.101,31,0.005,32,0.005,43,0.386,46,1.143,49,0.226,53,0.383,57,1.246,63,1.012,68,1.615,70,1.894,75,2.382,76,2.795,77,1.504,112,1.86,120,1.53,144,2.742,168,3.335,323,1.504,523,2.02,548,3.284,885,2.33,902,2.686,905,3.448,906,2.752,908,2.752,909,2.301,917,2.752,918,3.448,919,2.165,920,2.752,921,2.821,928,4.179,963,3.053,1192,4.192,1600,3.84,1602,4.674,1605,6.037,1608,6.329,1609,5.004,1610,5.004,1615,6.115]],["title/injectables/DisplayService.html",[33,0.99,1591,3.222]],["body/injectables/DisplayService.html",[3,0.07,4,0.07,5,0.062,9,1.037,13,0.215,16,1.938,17,0.888,19,0.607,20,0.305,21,0.007,30,0.07,31,0.005,32,0.005,33,1.467,35,1.983,39,1.599,43,0.492,45,1.918,46,1.458,48,1.872,49,0.216,50,0.887,53,0.223,54,1.443,168,4.832,282,1.149,318,3.187,323,2.223,385,2.77,422,1.97,423,1.663,425,2.433,442,2.197,488,2.88,523,2.336,539,2.16,595,3.133,685,2.113,897,3.295,919,1.866,1076,4.03,1088,6.2,1104,2.873,1110,3.612,1192,6.588,1352,4.928,1452,4.312,1586,7.681,1587,5.984,1591,4.773,1593,4.692,1600,4.373,1601,4.692,1616,4.692,1617,5.269,1618,5.269,1619,7.798,1620,5.269,1621,5.269,1622,5.269,1623,5.269,1624,5.269,1625,5.269]],["title/classes/EC_Public.html",[53,0.199,1468,3.077]],["body/classes/EC_Public.html",[3,0.07,4,0.07,5,0.063,9,0.707,13,0.216,14,0.896,19,0.609,20,0.338,21,0.007,22,3.848,23,2.437,25,3.439,30,0.092,31,0.005,32,0.005,43,0.525,49,0.133,53,0.353,57,1.082,95,3.523,124,2.383,130,2.747,276,3.803,352,4.73,353,2.041,359,3.095,375,1.708,446,3.701,510,3.942,522,4.65,583,2.991,593,2.58,638,4.729,701,5.35,763,4.092,870,4.798,1181,5.664,1184,4.73,1406,4.584,1468,4.584,1492,2.727,1496,5.929,1626,7.41,1627,6.361,1628,7.318,1629,6.971,1630,5.647,1631,5.984,1632,6.611,1633,6.611,1634,5.311,1635,6.232,1636,5.727,1637,6.232,1638,5.311,1639,6.361,1640,4.729,1641,3.641]],["title/classes/EmbeddedDisclosurePolicy.html",[53,0.199,60,2.839]],["body/classes/EmbeddedDisclosurePolicy.html",[3,0.071,4,0.071,5,0.063,13,0.219,14,0.904,19,0.573,20,0.355,21,0.007,30,0.12,31,0.005,32,0.005,37,3.957,43,0.339,49,0.197,53,0.391,56,3.251,57,1.096,58,3.379,59,4.948,60,5.385,61,5.948,62,3.027,63,0.89,68,1.83,70,1.667,71,4.006,72,5.687,73,2.067,74,2.682,75,2.457,76,2.9,77,1.323,78,3.933,79,3.933,80,3.933,81,3.689,82,2.686,83,3.379,84,3.027,85,4.948,86,4.948,87,3.689,88,5.734,89,4.46,90,3.251,91,3.689,92,3.689,93,2.934,94,3.379,95,2.421,96,3.523,97,3.251,98,2.934,99,4.948,100,2.845,101,1.607,102,3.689,103,3.251,104,3.689,1642,5.38]],["title/injectables/EncryptionService.html",[33,0.99,1426,2.951]],["body/injectables/EncryptionService.html",[3,0.053,4,0.053,5,0.048,9,1.043,13,0.164,16,2.046,17,0.893,19,0.645,20,0.319,21,0.007,22,3.346,23,2.141,30,0.053,31,0.004,32,0.004,33,1.221,35,1.519,39,1.33,43,0.494,45,2.007,46,1.466,48,1.842,49,0.204,50,0.68,53,0.171,54,1.404,68,0.851,203,1.374,276,2.815,282,1.478,323,2.273,325,2.273,347,2.925,352,3.5,375,2.858,385,2.619,397,3.263,422,2.095,423,1.274,425,2.394,463,2.535,484,2.473,488,2.011,522,4.417,523,2.436,539,1.655,694,4.741,763,3.207,1071,2.977,1073,3.972,1076,3.598,1083,2.975,1084,4.191,1090,3.5,1095,3.972,1104,2.201,1246,4.429,1333,3.972,1347,3.303,1388,3.303,1404,3.794,1414,4.429,1426,4.651,1432,3.794,1433,3.594,1450,4.741,1478,3.5,1489,3.594,1491,3.303,1492,2.073,1493,2.767,1494,4.741,1495,3.086,1506,5.159,1538,3.594,1630,2.912,1643,3.594,1644,3.794,1645,9.092,1646,5.794,1647,5.794,1648,5.794,1649,4.741,1650,4.037,1651,4.037,1652,5.794,1653,4.037,1654,4.037,1655,5.794,1656,7.405,1657,6.88,1658,5.794,1659,5.794,1660,4.037,1661,4.037,1662,4.741,1663,4.037,1664,4.037,1665,4.037,1666,4.037,1667,5.159,1668,3.594,1669,3.594,1670,4.037,1671,4.037,1672,5.546,1673,4.037,1674,5.794,1675,4.037,1676,3.594,1677,4.037,1678,4.037,1679,4.037,1680,4.037,1681,4.037]],["title/entities/FileEntity.html",[885,1.429,1682,3.39]],["body/entities/FileEntity.html",[3,0.083,4,0.083,5,0.074,13,0.255,14,0.996,16,2.125,19,0.607,20,0.331,21,0.007,23,1.981,30,0.083,31,0.005,32,0.005,43,0.533,49,0.195,53,0.266,63,1.4,68,1.865,323,2.081,523,2.479,548,3.473,885,2.366,887,2.965,898,4.103,902,3.417,904,3.529,905,3.982,906,3.501,908,3.501,909,2.927,917,2.819,918,3.501,919,2.218,920,2.819,921,2.89,1682,5.612,1683,5.579,1684,6.924,1685,6.265,1686,6.265,1687,6.265]],["title/interfaces/FileStorage.html",[0,1.403,1688,3.077]],["body/interfaces/FileStorage.html",[0,1.591,2,2.66,3,0.07,4,0.07,5,0.063,13,0.217,17,1.047,19,0.674,20,0.354,21,0.007,22,2.876,23,2.369,30,0.11,31,0.005,32,0.005,39,1.61,43,0.546,45,2.129,46,1.618,48,1.954,49,0.133,144,2.569,282,1.162,384,3.077,385,3.136,423,1.681,461,4.36,474,5.362,579,2.234,750,3.001,987,3.95,1071,3.081,1101,4.087,1185,3.825,1688,4.593,1689,4.073,1690,6.246,1691,5.994,1692,5.994,1693,5.362,1694,5.328,1695,5.74,1696,5.328,1697,4.745,1698,5.328,1699,4.073,1700,5.328,1701,4.36,1702,5.656,1703,6.369,1704,6.416,1705,6.01,1706,5.328,1707,3.844,1708,4.405,1709,4.36,1710,4.745,1711,5.328,1712,3.653,1713,5.328,1714,5.328,1715,4.745,1716,4.073,1717,5.328,1718,5.328,1719,5.328,1720,4.073,1721,3.844,1722,4.745]],["title/classes/FileUploadDto.html",[53,0.199,1723,3.592]],["body/classes/FileUploadDto.html",[3,0.094,4,0.094,5,0.109,13,0.29,14,1.076,19,0.576,20,0.328,21,0.007,25,3.69,30,0.094,31,0.006,32,0.006,43,0.448,49,0.178,53,0.302,57,1.449,63,1.177,118,3.604,120,1.78,1218,5.82,1723,6.422,1724,7.481,1725,6.334,1726,6.875,1727,7.113]],["title/injectables/FilesService.html",[33,0.99,1728,3.077]],["body/injectables/FilesService.html",[3,0.05,4,0.05,5,0.114,9,0.953,13,0.153,16,1.78,17,0.907,19,0.63,20,0.311,21,0.007,22,1.54,23,2.227,26,3.303,27,2.695,30,0.05,31,0.004,32,0.004,33,1.159,35,1.414,39,1.263,43,0.502,45,1.958,46,1.488,48,1.904,49,0.211,50,0.633,53,0.159,54,1.579,94,2.36,112,1.143,144,1.802,203,2.801,204,1.231,221,1.778,262,1.279,280,2.576,282,1.737,285,2.475,286,1.475,318,2.113,323,2.074,330,6.516,347,2.659,375,1.208,385,2.659,422,1.556,423,2.26,425,2.335,442,1.186,484,2.659,523,2.099,524,3.323,539,1.54,670,2.461,919,1.33,1064,4.69,1071,2.416,1076,3.479,1083,3.677,1084,2.824,1085,5.86,1090,3.323,1103,3.968,1104,2.049,1131,4.991,1160,2.576,1185,3.548,1311,2.116,1682,2.71,1688,4.69,1691,4.205,1693,4.205,1699,4.205,1703,5.474,1707,5.166,1708,2.36,1709,3.075,1710,4.898,1712,2.576,1721,2.71,1728,3.602,1729,3.346,1730,5.5,1731,5.5,1732,6.506,1733,3.757,1734,6.506,1735,3.757,1736,3.757,1737,5.86,1738,5.5,1739,3.757,1740,5.5,1741,5.5,1742,3.757,1743,3.757,1744,3.757,1745,5.794,1746,6.237,1747,3.757,1748,5.5,1749,5.5,1750,5.5,1751,4.898,1752,3.968,1753,5.5,1754,5.5,1755,3.757,1756,3.757,1757,3.346,1758,3.757,1759,3.757,1760,5.5,1761,3.757,1762,3.757,1763,3.757,1764,3.757,1765,3.757,1766,3.757,1767,3.757,1768,3.757,1769,3.757,1770,3.757,1771,3.757,1772,3.757,1773,3.757,1774,3.757,1775,3.757,1776,3.757,1777,3.757,1778,3.757,1779,3.757,1780,3.757,1781,3.757,1782,3.075,1783,3.757,1784,3.757,1785,3.757,1786,3.757,1787,3.757]],["title/interfaces/GenerateTokenOptions.html",[0,1.403,1788,3.592]],["body/interfaces/GenerateTokenOptions.html",[0,1.416,2,2.367,3,0.063,4,0.063,5,0.056,13,0.193,14,0.831,17,0.978,19,0.63,20,0.289,21,0.007,28,2.083,30,0.086,31,0.004,32,0.004,33,1.367,49,0.208,50,0.798,53,0.201,54,1.532,93,2.586,203,2.517,204,1.553,260,3.326,262,1.614,264,3.88,282,1.981,287,2.367,299,2.586,347,2.166,354,3.233,367,2.507,374,2.978,385,2.166,388,5.448,397,4.163,414,3.105,418,3.326,419,3.105,441,2.964,442,2.712,443,3.25,444,6.503,445,6.075,446,2.507,453,3.105,463,4.642,465,2.586,477,3.839,482,6.81,484,2.166,487,5.448,488,1.646,497,3.326,518,3.25,552,4.678,789,3.105,824,3.967,837,2.367,840,5.204,999,2.303,1161,2.978,1248,1.988,1387,3.42,1446,4.958,1463,3.25,1492,2.435,1788,5.65,1789,3.88,1790,3.88,1791,4.222,1792,4.222,1793,4.222,1794,4.222,1795,4.222,1796,3.88,1797,4.222,1798,5.775,1799,5.775,1800,5.775,1801,5.775,1802,4.222,1803,4.222,1804,6.582,1805,5.775,1806,4.222,1807,5.307,1808,4.222,1809,4.222,1810,4.222,1811,3.88,1812,4.222,1813,4.222,1814,4.222,1815,4.222,1816,3.88,1817,4.222,1818,3.88,1819,4.222,1820,4.222,1821,3.624,1822,4.222,1823,3.88]],["title/controllers/HealthController.html",[157,1.378,1824,3.592]],["body/controllers/HealthController.html",[3,0.084,4,0.084,5,0.075,9,0.841,13,0.258,21,0.007,30,0.084,31,0.005,32,0.005,39,1.797,43,0.399,48,1.766,49,0.196,50,1.065,53,0.268,54,1.311,63,1.047,157,1.855,159,2.196,287,4.752,360,4.408,422,1.79,423,2.469,488,2.717,642,2.993,645,5.982,1439,5.365,1578,6.404,1824,6.787,1825,5.632,1826,9.296,1827,7.826,1828,6.968,1829,8.879,1830,7.826,1831,6.968,1832,7.826,1833,6.325,1834,6.325,1835,7.826,1836,7.826,1837,5.176,1838,6.325,1839,6.325,1840,6.325,1841,6.325]],["title/modules/HealthModule.html",[172,1.429,187,3.39]],["body/modules/HealthModule.html",[3,0.095,4,0.095,5,0.085,21,0.007,30,0.095,31,0.006,32,0.006,49,0.225,50,1.216,53,0.306,159,2.943,172,2.578,174,3.098,187,6.115,201,3.172,1824,6.878,1837,5.909,1842,7.221,1843,8.476,1844,7.221]],["title/entities/IssuanceConfig.html",[811,2.563,885,1.429]],["body/entities/IssuanceConfig.html",[3,0.044,4,0.044,5,0.039,9,1.01,12,1.711,13,0.135,14,0.64,16,1.686,17,0.965,19,0.521,20,0.354,21,0.007,26,2.306,27,1.881,28,2.196,29,4.09,30,0.044,31,0.003,32,0.003,43,0.55,46,1.127,49,0.203,53,0.256,63,1.444,68,1.936,70,1.023,74,2.586,75,1.589,76,2.245,77,0.813,100,2.643,101,1.493,107,2.068,109,2.249,112,2.399,117,3.273,118,2.145,119,2.164,120,0.827,128,2.38,134,1.842,135,2.121,143,2.849,145,2.913,148,2.164,149,3.948,152,3.273,153,1.925,154,2.164,155,3.273,262,2.765,314,1.563,323,1.483,366,3.606,375,1.607,523,2.079,548,2.638,579,2.096,592,3.555,598,4.362,607,1.385,616,2.121,620,3.717,621,4.77,622,4.362,625,4.589,626,2.075,811,2.726,817,3.606,885,2.044,887,1.563,889,4.09,891,3.01,892,3.096,893,3.666,894,3.513,896,3.917,897,2.365,900,4.142,902,2.953,904,1.861,905,3.025,906,2.249,908,2.249,909,1.881,913,3.513,915,2.815,916,2.815,917,1.487,918,2.249,919,1.17,920,1.487,921,2.781,923,1.925,925,2.942,928,2.726,929,3.02,931,2.913,962,1.925,963,3.01,968,2.567,978,4.061,994,2.942,998,2.704,999,1.605,1014,2.942,1026,4.09,1030,2.526,1034,4.451,1040,2.942,1062,4.609,1086,3.606,1094,3.606,1200,4.451,1208,3.02,1209,4.451,1210,5.368,1215,2.942,1752,3.606,1845,7.863,1846,6.029,1847,4.349,1848,6.029,1849,5.368,1850,3.304,1851,3.304,1852,2.942,1853,4.402,1854,3.304,1855,4.451,1856,3.304,1857,3.304,1858,3.304,1859,4.998,1860,4.998,1861,4.998,1862,3.304,1863,3.304,1864,3.304,1865,3.304,1866,3.304,1867,3.304,1868,3.304,1869,3.304,1870,4.998,1871,2.704,1872,3.304,1873,3.304,1874,3.304,1875,3.304,1876,3.304,1877,3.304,1878,3.304,1879,3.304,1880,3.304]],["title/controllers/IssuanceController.html",[157,1.378,1881,3.592]],["body/controllers/IssuanceController.html",[3,0.069,4,0.069,5,0.062,13,0.214,16,1.934,17,0.886,19,0.533,20,0.304,21,0.007,30,0.069,31,0.005,32,0.005,39,1.594,43,0.49,45,1.913,46,1.454,48,2.068,49,0.221,50,0.883,53,0.222,54,1.612,63,1.287,107,2.108,120,1.312,135,2.613,157,1.538,159,1.82,318,3.521,354,2.927,384,2.724,401,3.995,406,3.293,418,4.214,425,2.281,497,2.36,523,2.183,533,2.773,620,3.628,642,2.481,685,2.103,739,4.7,1057,3.909,1060,5.676,1071,2.303,1083,3.564,1099,5.007,1226,6.366,1229,4.67,1230,3.595,1236,3.168,1237,3.168,1238,3.293,1239,3.293,1241,4.291,1242,3.168,1243,3.293,1244,3.168,1245,4.291,1248,2.199,1252,3.595,1253,4.009,1881,5.305,1882,4.67,1883,6.94,1884,6.94,1885,6.927,1886,5.244,1887,5.244,1888,5.244,1889,5.244,1890,5.244,1891,4.67,1892,5.244,1893,5.244,1894,5.244,1895,5.244,1896,3.434,1897,5.244]],["title/classes/IssuanceDto.html",[53,0.199,1060,3.222]],["body/classes/IssuanceDto.html",[3,0.081,4,0.081,5,0.072,9,0.815,13,0.249,14,0.983,16,1.431,19,0.574,20,0.24,21,0.007,26,2.826,27,2.305,30,0.101,31,0.005,32,0.005,37,3.63,43,0.386,49,0.209,53,0.355,57,1.248,63,1.014,71,3.864,75,2.023,77,1.507,82,3.058,107,2.133,120,1.533,282,1.673,323,1.887,523,2.023,584,4.881,616,2.77,620,3.706,811,3.341,891,3.83,892,3.94,1052,4.2,1054,4.683,1055,5.013,1056,6.854,1057,5.091,1059,5.013,1060,5.259,1061,6.831,1062,5.864,1063,5.864,1064,5.024,1065,7.458,1898,6.126]],["title/injectables/IssuanceService.html",[33,0.99,739,2.839]],["body/injectables/IssuanceService.html",[3,0.037,4,0.037,5,0.079,9,0.371,13,0.113,16,1.795,17,0.807,19,0.63,20,0.277,21,0.007,22,2.221,30,0.037,31,0.003,32,0.003,33,0.924,35,1.049,39,1.41,43,0.484,45,1.744,46,1.325,48,1.964,49,0.231,50,0.469,53,0.23,54,1.469,68,0.924,70,0.863,77,0.685,82,1.391,101,1.309,107,1.564,112,2.156,130,1.094,135,2.238,153,1.624,203,2.526,204,0.913,217,1.75,218,1.825,220,2.648,221,2.074,251,5.105,260,1.254,282,1.984,285,3.005,287,1.391,294,2.13,299,1.52,323,2.18,347,2.8,353,1.071,363,3.587,378,2.13,385,1.464,422,1.738,423,2.425,425,2.318,465,1.52,477,2.499,484,2.64,488,1.522,523,1.956,539,1.143,616,2.238,620,3.53,668,2.564,737,3.338,739,3.711,751,1.52,767,1.474,811,2.955,919,0.987,978,2.648,987,1.57,1057,4.723,1059,2.281,1060,5.086,1062,4.141,1066,4.023,1068,2.011,1070,2.188,1071,1.925,1073,3.005,1074,3.579,1076,2.984,1077,2.865,1078,4.431,1083,2.251,1084,2.251,1094,3.162,1095,3.005,1100,3.908,1101,3.157,1104,1.52,1105,2.281,1106,2.011,1107,2.281,1108,1.911,1112,2.011,1113,2.011,1114,3.587,1116,4.433,1117,2.281,1118,2.011,1119,3.162,1120,2.011,1121,2.011,1122,2.011,1123,2.011,1124,4.433,1125,3.858,1126,2.281,1127,2.281,1128,1.911,1129,2.281,1130,5.115,1131,2.871,1132,2.281,1133,2.13,1134,2.281,1135,2.281,1136,2.281,1137,3.587,1139,3.587,1140,3.587,1141,2.281,1142,3.587,1144,2.281,1145,2.281,1146,2.13,1147,2.281,1148,2.281,1149,2.13,1150,2.281,1151,2.281,1155,2.011,1156,2.648,1157,2.281,1158,2.011,1159,4.433,1161,1.75,1162,1.825,1164,2.281,1165,2.281,1166,4.433,1167,4.433,1168,2.281,1173,2.011,1174,2.281,1177,3.903,1226,3.587,1240,2.281,1311,2.469,1386,2.281,1419,4.431,1464,4.433,1871,2.281,1885,3.903,1891,2.482,1899,2.482,1900,4.383,1901,5.418,1902,4.861,1903,2.787,1904,6.142,1905,2.787,1906,5.418,1907,4.383,1908,2.787,1909,4.383,1910,2.787,1911,2.787,1912,2.787,1913,6.142,1914,2.787,1915,2.787,1916,2.787,1917,4.383,1918,2.787,1919,4.383,1920,2.482,1921,2.787,1922,2.787,1923,2.787,1924,2.482,1925,2.787,1926,2.787,1927,2.787,1928,2.787,1929,2.787,1930,2.787,1931,5.418,1932,2.787,1933,4.383,1934,2.787,1935,2.787,1936,2.787,1937,4.383,1938,2.787,1939,2.787,1940,2.787,1941,4.383,1942,2.787,1943,2.787,1944,2.787,1945,2.787,1946,2.787,1947,4.383,1948,2.787,1949,2.787,1950,4.383,1951,2.787,1952,2.787,1953,2.787,1954,2.787]],["title/controllers/IssuerManagementController.html",[157,1.378,1955,3.592]],["body/controllers/IssuerManagementController.html",[3,0.057,4,0.057,5,0.051,9,0.578,13,0.177,17,0.495,19,0.298,20,0.348,21,0.007,25,1.908,30,0.057,31,0.004,32,0.004,39,1.401,43,0.274,45,1.068,46,0.812,48,0.98,49,0.223,50,0.731,53,0.184,62,1.669,63,0.719,84,1.669,93,2.369,100,2.297,112,2.328,120,1.087,145,2.531,156,1.908,157,1.274,159,1.508,168,2.369,207,2.446,276,3.428,282,1.331,286,1.705,318,3.098,321,4.837,325,4.541,347,2.356,353,1.669,354,2.296,362,2.004,372,3.997,375,2.865,384,3.441,401,2.23,403,4.403,405,4.994,406,2.728,418,3.444,425,1.79,428,5.521,431,2.965,446,2.297,473,2.119,484,2.038,488,2.119,497,1.955,519,2.978,526,3.868,533,2.297,610,3.623,616,1.926,642,2.055,681,2.619,685,1.742,693,3.554,714,5.012,856,3.32,868,3.997,869,4.807,909,1.634,984,3.833,1236,2.624,1237,2.624,1238,2.728,1239,2.728,1241,3.554,1242,4.263,1243,2.728,1244,2.624,1245,3.554,1248,1.821,1352,3.328,1463,2.978,1702,3.133,1726,3.554,1896,2.844,1955,4.665,1956,5.435,1957,4.994,1958,3.868,1959,6.283,1960,3.868,1961,6.19,1962,3.868,1963,5.435,1964,4.621,1965,3.868,1966,4.343,1967,4.343,1968,4.343,1969,3.554,1970,4.621,1971,4.431,1972,3.133,1973,2.978,1974,3.554,1975,4.343,1976,3.868,1977,3.868,1978,5.435,1979,3.32,1980,6.815,1981,3.868,1982,5.774,1983,3.868,1984,6.815,1985,6.164,1986,3.437,1987,3.868,1988,4.343,1989,4.343,1990,4.343,1991,4.343,1992,4.343,1993,4.343,1994,4.343,1995,4.665,1996,3.554,1997,4.343,1998,4.343,1999,3.868,2000,3.868,2001,4.343,2002,3.868,2003,4.343,2004,3.868,2005,3.868,2006,3.868,2007,3.868,2008,3.868,2009,3.868,2010,3.868]],["title/interfaces/IssuerMetadata.html",[0,1.403,2011,3.39]],["body/interfaces/IssuerMetadata.html",[0,2.548,2,3.188,3,0.084,4,0.084,5,0.075,9,0.85,13,0.26,14,1.008,19,0.585,20,0.348,21,0.007,22,3.227,23,2.004,27,2.962,30,0.084,31,0.005,32,0.005,49,0.16,144,2.579,276,3.824,352,4.756,353,3.025,359,5.502,497,4.353,522,4.575,591,6.018,593,3.824,597,4.434,763,3.725,1183,5.226,1185,4.293,1197,3.597,1204,7.01,1492,3.279,2011,5.679,2012,5.687]],["title/modules/IssuerModule.html",[172,1.429,188,3.222]],["body/modules/IssuerModule.html",[3,0.054,4,0.054,5,0.049,21,0.007,30,0.078,31,0.004,32,0.004,49,0.244,50,0.693,53,0.175,82,2.055,101,1.229,159,2.04,172,2.084,174,1.766,175,2,176,2.114,177,2.114,178,1.948,179,3.329,180,3.329,185,4.481,188,6.738,192,4.964,196,3.017,197,2.114,198,2.114,201,2.581,203,2.333,204,1.349,213,3.309,225,2.586,234,3.147,240,2.97,282,1.282,431,2,497,1.853,532,5.381,538,2.399,539,1.688,544,2.319,545,3.369,640,5.238,678,5.513,736,2.319,739,5.513,769,3.147,811,3.204,978,3.55,1033,2.696,1038,3.369,1066,5.976,1068,2.97,1223,5.238,1240,3.369,1247,5.381,1255,5.238,1257,3.369,1266,3.666,1581,5.238,1591,5.633,1600,3.69,1871,3.369,1881,5.238,1920,3.666,1955,5.238,1957,3.369,1971,5.731,2013,3.666,2014,3.666,2015,3.666,2016,3.666,2017,5.381,2018,5.16,2019,4.964,2020,5.16,2021,3.369,2022,5.238,2023,4.028,2024,2.319,2025,5.876,2026,4.239,2027,3.147,2028,2.97,2029,3.369,2030,4.117,2031,4.117,2032,4.117,2033,4.117,2034,4.117,2035,4.117,2036,4.117,2037,4.117,2038,4.117,2039,4.117,2040,4.117,2041,4.117,2042,3.666,2043,3.666,2044,4.117,2045,5.876,2046,3.666,2047,4.117,2048,4.117]],["title/classes/JwksResponseDto.html",[53,0.199,1641,3.222]],["body/classes/JwksResponseDto.html",[3,0.076,4,0.076,5,0.068,9,0.768,13,0.235,14,0.946,19,0.559,20,0.289,21,0.007,22,3.834,23,2.381,25,3.58,30,0.098,31,0.005,32,0.005,43,0.364,49,0.144,53,0.346,57,1.176,95,4.087,124,1.966,130,2.266,276,3.959,352,4.924,353,2.839,359,4.306,375,2.376,446,3.054,510,3.252,522,4.85,583,3.252,593,3.59,701,4.414,763,4.065,870,3.958,1181,4.839,1184,4.924,1406,3.781,1468,3.781,1492,2.965,1496,5.066,1626,6.58,1627,5.649,1628,7.277,1629,6.58,1630,4.165,1631,4.414,1632,5.649,1633,5.649,1635,5.142,1636,4.725,1637,5.142,1639,5.649,1641,5.066,2049,5.142]],["title/injectables/JwtAuthGuard.html",[33,0.99,533,2.485]],["body/injectables/JwtAuthGuard.html",[3,0.085,4,0.085,5,0.075,13,0.261,17,0.897,20,0.308,21,0.007,30,0.085,31,0.005,32,0.005,33,1.661,35,2.408,37,3.729,38,7.018,39,1.81,40,7.018,41,7.018,42,6.431,43,0.497,45,1.938,46,1.473,47,4.018,48,1.444,49,0.223,50,1.077,51,5.698,52,4.616,53,0.271,54,1.633,55,5.698,68,1.349,282,1.396,422,1.81,533,4.168,1248,2.683,1746,6.45,2050,5.698,2051,5.698,2052,8.301,2053,6.398,2054,6.398,2055,5.236,2056,6.45,2057,6.398,2058,6.398,2059,6.398,2060,5.698,2061,6.398]],["title/injectables/JwtService.html",[33,0.99,414,3.077]],["body/injectables/JwtService.html",[0,1.314,3,0.058,4,0.058,5,0.052,13,0.179,17,0.809,19,0.576,20,0.278,21,0.007,28,2.706,30,0.081,31,0.004,32,0.004,33,1.298,35,1.656,39,1.414,43,0.485,45,1.748,46,1.328,48,1.604,49,0.203,50,0.741,53,0.187,54,1.472,93,3.359,112,1.338,203,2.859,204,1.442,260,3.198,262,2.097,264,3.602,282,1.949,287,3.075,299,3.875,347,2.804,354,3.363,367,3.258,374,3.869,385,2.571,388,5.555,397,4.336,414,4.034,418,3.646,419,2.882,422,1.245,441,2.85,442,2.65,443,3.017,444,6.63,445,6.194,446,2.328,453,2.882,463,4.463,465,2.4,477,3.873,482,5.041,484,2.057,487,3.017,488,2.138,497,3.198,518,3.017,552,4.444,736,2.479,789,4.034,824,4.192,837,2.197,840,2.882,999,2.138,1161,3.869,1248,1.845,1387,3.175,1446,4.709,1463,4.223,1492,2.26,1788,5.884,1789,3.602,1790,3.602,1791,3.919,1792,3.919,1793,3.919,1794,3.919,1795,3.919,1796,5.041,1797,6.328,1798,5.485,1799,5.485,1800,5.485,1801,5.485,1802,3.919,1803,3.919,1804,6.328,1805,5.485,1806,3.919,1807,5.041,1808,3.919,1809,3.919,1810,3.919,1811,3.602,1812,3.919,1813,3.919,1814,3.919,1815,3.919,1816,5.041,1817,5.485,1818,3.602,1819,3.919,1820,3.919,1821,3.364,1822,6.855,1823,3.602,2062,6.16,2063,4.401,2064,4.401,2065,4.401,2066,4.401,2067,4.401]],["title/injectables/JwtStrategy.html",[33,0.99,534,3.39]],["body/injectables/JwtStrategy.html",[3,0.056,4,0.056,5,0.05,9,0.561,13,0.172,17,0.908,19,0.289,20,0.312,21,0.007,23,1.768,30,0.056,31,0.004,32,0.004,33,1.26,35,1.586,37,2.828,39,1.372,43,0.503,45,1.961,46,1.49,48,1.8,49,0.207,50,0.71,52,3.042,53,0.179,54,1.716,68,1.463,96,2.761,135,2.383,165,4.311,203,3.188,204,1.381,212,5.974,260,3.588,282,1.898,285,2.689,287,2.984,299,4.119,310,2.547,353,2.296,359,3.483,361,3.069,365,3.45,374,2.648,377,3.754,396,6.182,397,2.375,418,3.399,419,2.761,422,1.193,423,2.613,425,1.236,441,1.691,442,1.331,477,4.082,478,4.547,480,3.223,497,3.726,527,2.457,534,4.311,567,3.45,668,3.574,736,2.375,750,2.375,824,4.251,999,2.048,1158,3.042,1161,2.648,1248,1.768,1311,3.366,1387,5.008,1419,3.042,1796,3.45,1807,3.45,1811,3.45,1823,3.45,1995,3.223,2068,3.754,2069,5.977,2070,5.977,2071,6.943,2072,4.216,2073,5.977,2074,4.216,2075,5.977,2076,4.216,2077,5.977,2078,6.943,2079,4.216,2080,4.216,2081,5.977,2082,4.216,2083,5.977,2084,4.216,2085,5.977,2086,3.754,2087,4.216,2088,4.216,2089,3.754,2090,7.553,2091,4.216,2092,4.216,2093,4.216,2094,4.216,2095,4.216,2096,4.216,2097,4.216,2098,4.216,2099,5.977,2100,4.216,2101,6.943,2102,4.216,2103,4.216,2104,3.754,2105,4.216,2106,4.216,2107,4.216,2108,4.216,2109,5.307,2110,5.977,2111,3.754,2112,5.977,2113,3.754,2114,4.216,2115,5.977,2116,4.216,2117,4.216,2118,4.216,2119,4.216,2120,4.216,2121,3.45,2122,4.216,2123,4.216,2124,4.216,2125,4.216,2126,4.216,2127,4.216]],["title/classes/Key.html",[23,1.196,53,0.199]],["body/classes/Key.html",[3,0.069,4,0.069,5,0.061,7,2.285,9,0.918,13,0.212,14,0.884,15,3.753,16,1.215,17,0.592,19,0.663,20,0.366,21,0.007,23,2.4,24,3.268,25,3.033,30,0.069,31,0.005,32,0.005,43,0.568,46,0.973,49,0.194,53,0.35,57,1.06,63,1.491,70,1.612,74,2.638,75,2.54,76,2.306,77,1.28,112,1.582,121,2.93,124,1.771,130,2.71,423,2.179,522,4.239,584,3.032,763,3.906,837,3.868,1404,3.407,1406,3.407,1474,3.268,1492,2.672,1508,6.341,1627,3.977,1628,6.31,1630,5.59,1631,5.924,1632,6.31,1633,6.31,1639,5.278,2128,6.272,2129,4.258,2130,6.9,2131,5.203,2132,5.203,2133,5.203,2134,5.203,2135,5.203,2136,5.203,2137,5.203,2138,5.203,2139,4.633,2140,4.633]],["title/controllers/KeyController.html",[157,1.378,1428,3.592]],["body/controllers/KeyController.html",[3,0.057,4,0.057,5,0.051,9,0.576,13,0.176,16,2.151,17,0.87,19,0.572,20,0.299,21,0.007,22,1.774,23,2.363,30,0.057,31,0.004,32,0.004,39,1.397,43,0.482,45,1.879,46,1.428,48,1.885,49,0.223,50,0.729,53,0.183,54,1.459,63,1.264,120,1.083,157,1.269,159,1.502,280,2.966,282,1.666,323,1.732,347,2.789,354,3.537,384,3.642,385,2.789,401,3.616,418,4.176,422,1.224,423,1.365,425,2.611,442,1.921,484,2.033,488,2.899,522,3.923,523,1.605,533,2.288,642,2.047,685,1.735,737,3.168,886,2.614,1070,3.038,1071,3.093,1230,2.966,1236,2.614,1237,2.614,1238,2.717,1239,2.717,1243,2.717,1244,2.614,1252,2.966,1253,4.652,1311,3.428,1428,5.84,1429,3.853,1439,4.173,1440,4.827,1455,4.652,1474,4.798,1497,4.98,1498,3.307,1499,3.307,1501,3.54,1692,3.307,2141,3.853,2142,7.041,2143,6.086,2144,6.086,2145,7.041,2146,4.326,2147,4.326,2148,4.326,2149,4.326,2150,4.326,2151,4.326,2152,4.326,2153,5.84,2154,4.326,2155,4.326,2156,6.086,2157,4.98,2158,3.54,2159,4.326,2160,4.326,2161,4.326,2162,7.041,2163,4.326,2164,4.326,2165,4.326,2166,4.326,2167,4.326,2168,4.326]],["title/entities/KeyEntity.html",[885,1.429,1432,3.077]],["body/entities/KeyEntity.html",[3,0.072,4,0.072,5,0.064,13,0.222,14,0.911,16,2.036,19,0.576,20,0.361,21,0.007,23,2.433,26,3.281,27,2.676,30,0.094,31,0.005,32,0.005,43,0.549,49,0.198,53,0.231,63,1.442,68,1.884,262,2.421,323,1.948,523,2.401,548,3.297,763,3.749,885,2.163,887,2.575,898,5.188,902,3.69,904,3.065,905,3.78,906,3.2,908,3.2,909,2.676,917,2.449,918,3.2,919,1.927,920,2.449,921,3.654,963,2.717,988,3.926,1432,4.657,1492,2.795,1657,4.453,1672,7.316,2169,4.453,2170,5.442,2171,5.442,2172,7.112,2173,5.442,2174,5.442,2175,6.483,2176,5.715,2177,5.442,2178,3.926]],["title/classes/KeyImportDto.html",[53,0.199,1474,2.951]],["body/classes/KeyImportDto.html",[3,0.072,4,0.072,5,0.064,7,3.124,9,1.189,13,0.222,14,0.911,15,5.715,16,1.271,17,1.018,19,0.651,20,0.35,21,0.007,23,2.457,24,4.467,25,3.69,30,0.072,31,0.005,32,0.005,43,0.499,46,1.017,49,0.198,53,0.356,57,1.108,63,1.311,70,1.686,74,2.697,75,2.463,76,2.375,77,1.338,112,1.655,121,3.065,124,1.853,130,2.136,423,2.5,522,4.314,584,4.144,763,3.975,837,2.717,976,5.82,1404,5.188,1406,3.564,1474,4.467,1492,2.795,1508,4.453,1612,4.846,1627,4.16,1628,6.422,1630,3.926,1631,4.16,1632,5.436,1633,5.436,1639,5.436,2128,5.759,2129,4.453,2130,4.846,2139,4.846,2140,6.333,2179,5.442,2180,5.442,2181,5.442]],["title/modules/KeyModule.html",[172,1.429,189,3.39]],["body/modules/KeyModule.html",[3,0.07,4,0.07,5,0.062,21,0.007,30,0.092,31,0.005,32,0.005,39,1.217,43,0.334,48,1.197,49,0.238,50,0.893,53,0.225,54,1.621,135,1.673,172,2.379,174,2.275,179,2.576,180,2.576,189,5.643,201,2.329,202,5.044,203,3.022,204,1.737,212,5.044,213,3.938,228,3.938,229,4.722,230,4.054,280,3.635,281,4.054,282,1.525,284,4.339,358,5.345,442,2.206,538,3.09,539,2.174,560,5.044,737,3.52,886,3.204,1076,3.8,1160,4.793,1283,4.726,1308,3.825,1374,5.044,1432,4.579,1435,4.722,1436,5.345,1440,4.793,1449,6.401,1450,5.721,1493,3.635,1499,4.054,1500,4.722,1501,5.721,1558,5.345,1559,5.044,2023,4.793,2024,2.987,2182,4.339,2183,6.965,2184,5.303,2185,6.965,2186,6.235,2187,5.303,2188,5.303,2189,6.226,2190,5.303,2191,6.226,2192,4.722,2193,4.722,2194,7.405,2195,3.635,2196,4.722,2197,4.722,2198,4.722,2199,4.722,2200,4.722,2201,6.992,2202,5.303,2203,5.303]],["title/classes/KeyObj.html",[53,0.199,2204,3.845]],["body/classes/KeyObj.html",[3,0.083,4,0.083,5,0.074,7,3.892,9,0.837,13,0.256,14,0.999,15,6.114,16,1.98,19,0.607,20,0.331,21,0.007,22,3.633,23,2.421,24,4.898,25,3.892,26,4.087,27,3.334,30,0.083,31,0.005,32,0.005,43,0.534,49,0.157,53,0.267,57,1.281,244,4.312,408,3.23,763,3.69,885,2.372,1184,4.712,1403,5.811,1468,5.551,1496,4.312,2128,6.075,2204,6.381,2205,5.6,2206,6.289,2207,6.289,2208,6.289]],["title/classes/KeyResponseDto.html",[53,0.199,368,3.592]],["body/classes/KeyResponseDto.html",[3,0.096,4,0.096,5,0.085,13,0.295,14,1.087,20,0.283,21,0.007,30,0.096,31,0.006,32,0.006,43,0.456,49,0.181,53,0.307,57,1.474,244,4.961,368,6.488,408,3.716,522,4.625,583,4.076,1468,5.898,1496,4.961,2128,5.819,2209,6.444]],["title/classes/KeyService.html",[53,0.199,1440,3.222]],["body/classes/KeyService.html",[0,1.543,3,0.046,4,0.046,5,0.041,7,2.269,9,0.459,13,0.141,16,1.966,17,0.99,19,0.672,20,0.362,21,0.007,22,2.118,23,2.397,24,4.316,30,0.046,31,0.003,32,0.003,39,1.186,43,0.548,45,2.14,46,1.626,48,2.03,49,0.218,50,0.581,53,0.146,54,1.07,57,0.703,114,3.09,203,2.629,204,1.131,286,1.355,323,2.332,384,2.697,385,3.119,422,1.462,425,2.347,441,1.384,442,1.953,477,2.383,488,2.681,590,5.066,695,2.639,736,1.944,750,4.349,760,2.012,763,3.482,803,2.012,836,4.665,886,2.086,911,4.957,919,1.222,983,5.865,1076,3.338,1084,2.653,1153,2.639,1300,2.012,1333,2.367,1352,2.817,1384,4.227,1393,3.542,1397,3.949,1440,3.542,1441,4.6,1444,7.494,1445,4.227,1446,4.732,1447,6.552,1448,4.6,1449,5.066,1452,4.227,1456,4.227,1457,4.6,1469,5.512,1473,4.6,1474,4.316,1478,3.121,1479,4.6,1481,3.074,1482,4.957,1485,4.6,1487,2.49,1492,1.773,1497,2.825,1498,2.639,1499,2.639,1531,3.074,1818,2.825,2210,3.074,2211,9.585,2212,3.452,2213,3.452,2214,3.452,2215,3.452,2216,3.452,2217,3.452,2218,3.452,2219,3.452,2220,5.166,2221,3.452,2222,4.6,2223,3.452,2224,3.383,2225,6.872,2226,3.452,2227,3.452,2228,3.452]],["title/classes/LocalFileStorage.html",[53,0.199,2229,3.592]],["body/classes/LocalFileStorage.html",[3,0.067,4,0.067,5,0.06,13,0.206,17,0.968,19,0.658,20,0.333,21,0.007,23,2.368,30,0.067,31,0.005,32,0.005,39,1.554,43,0.536,45,2.092,46,1.59,48,1.841,49,0.204,53,0.214,54,1.69,57,1.029,68,1.065,130,2.657,220,3.052,221,2.391,282,1.855,347,2.55,384,3.338,385,2.261,422,1.429,442,1.594,484,1.687,750,2.845,1071,2.974,1101,3.945,1108,3.464,1248,2.118,1688,5.001,1691,5.175,1692,5.837,1693,5.175,1695,5.54,1699,5.175,1701,4.134,1702,5.509,1703,6.502,1704,6.249,1705,5.885,1707,4.884,1708,3.173,1712,3.464,1716,3.862,1782,4.134,2113,4.499,2229,5.175,2230,4.499,2231,5.052,2232,5.052,2233,6.77,2234,5.052,2235,5.052,2236,5.052,2237,5.052,2238,5.052,2239,5.052,2240,5.052,2241,5.052,2242,5.052,2243,5.052,2244,5.052,2245,4.134,2246,6.77,2247,6.77,2248,5.052,2249,5.052,2250,5.052,2251,6.77,2252,4.499,2253,5.052,2254,5.052,2255,5.052,2256,5.052,2257,5.052,2258,4.499,2259,5.052,2260,5.052,2261,5.052,2262,5.052,2263,4.499,2264,5.052,2265,5.052,2266,5.052]],["title/injectables/LoggerConfigService.html",[33,0.99,2267,3.592]],["body/injectables/LoggerConfigService.html",[0,1.29,3,0.08,4,0.057,5,0.051,9,0.575,13,0.176,14,0.779,17,0.692,19,0.482,20,0.275,21,0.007,28,4.006,30,0.08,31,0.004,32,0.004,33,1.282,35,1.626,39,1.396,43,0.58,45,1.495,46,1.137,48,2.036,49,0.152,50,0.728,53,0.183,54,1.814,107,2.125,124,2.07,135,2.22,203,2.842,204,1.416,216,4.976,258,4.976,259,4.976,260,2.736,261,4.976,270,3.536,271,3.117,272,3.536,273,3.536,275,5.837,276,3.418,282,0.942,283,4.976,285,3.166,287,3.036,288,3.819,294,5.378,422,1.222,423,2.809,488,2.111,685,1.733,736,2.434,987,2.434,1069,3.303,1070,3.036,1077,3.216,1248,1.812,1351,4.387,2267,4.648,2268,7.593,2269,6.799,2270,6.799,2271,6.799,2272,6.799,2273,6.799,2274,6.799,2275,6.799,2276,6.081,2277,6.799,2278,6.799,2279,6.081,2280,4.321,2281,6.152,2282,4.321,2283,4.321,2284,7.433,2285,4.321,2286,4.321,2287,4.321,2288,4.321,2289,5.001,2290,5.415,2291,4.321,2292,4.321,2293,5.415,2294,5.415,2295,4.169,2296,4.321,2297,5.415,2298,4.648,2299,5.415,2300,5.415,2301,5.415,2302,5.415,2303,5.415,2304,5.415,2305,3.848,2306,3.848,2307,5.508,2308,3.848,2309,5.415,2310,5.378,2311,3.848,2312,3.848,2313,3.848,2314,3.848,2315,3.848,2316,3.848,2317,3.848]],["title/interfaces/LoggerConfiguration.html",[0,1.403,2281,3.592]],["body/interfaces/LoggerConfiguration.html",[0,1.502,2,2.511,3,0.089,4,0.066,5,0.059,13,0.205,14,0.864,19,0.345,20,0.332,21,0.007,28,4.173,30,0.089,31,0.005,32,0.005,33,1.423,49,0.169,50,0.847,53,0.213,54,1.881,107,1.94,124,1.712,135,1.587,203,2.594,204,1.648,216,4.115,258,5.523,259,5.523,260,3.037,261,5.523,270,4.115,271,3.628,272,4.115,273,4.115,275,6.492,276,3.956,282,1.097,283,6.95,285,3.428,287,2.511,288,3.158,294,6.492,423,2.404,488,1.746,685,2.017,987,2.832,1069,3.844,1070,2.511,1077,2.66,1248,2.109,1351,3.628,2267,3.844,2268,4.115,2269,4.478,2270,4.478,2271,4.478,2272,4.478,2273,4.478,2274,4.478,2275,4.478,2277,4.478,2278,4.478,2281,6.224,2284,7.786,2289,4.42,2290,4.478,2293,4.478,2294,4.478,2295,3.448,2297,4.478,2298,3.844,2299,4.478,2300,7.563,2301,7.563,2302,7.563,2303,6.01,2304,6.01,2305,4.478,2306,4.478,2307,5.874,2308,4.478,2309,6.01,2310,5.824,2311,4.478,2312,4.478,2313,4.478,2314,4.478,2315,4.478,2316,4.478,2317,4.478]],["title/modules/MetricModule.html",[172,1.429,190,3.39]],["body/modules/MetricModule.html",[3,0.094,4,0.094,5,0.084,21,0.007,30,0.094,31,0.006,32,0.006,49,0.21,50,1.2,53,0.302,172,2.558,174,3.058,190,6.068,201,3.131,285,3.207,286,2.797,360,4.015,541,4.668,542,4.887,1311,4.015,1351,5.142,2318,7.128,2319,7.128,2320,7.128,2321,7.128,2322,5.449,2323,7.128,2324,7.128]],["title/classes/NoneTrustPolicy.html",[53,0.199,97,2.839]],["body/classes/NoneTrustPolicy.html",[3,0.071,4,0.071,5,0.063,9,0.712,13,0.218,14,0.901,19,0.539,20,0.348,21,0.007,30,0.12,31,0.005,32,0.005,37,4.103,43,0.338,49,0.197,53,0.39,56,3.235,57,1.091,58,3.363,59,4.936,60,5.481,61,5.941,62,3.02,63,0.886,65,3.862,68,1.828,70,1.659,71,4,72,5.678,73,2.057,74,2.676,75,2.427,76,2.896,77,1.317,78,3.924,79,3.924,80,3.924,81,3.671,82,2.673,83,3.363,84,3.207,85,4.936,86,4.936,87,3.671,88,5.723,89,4.453,90,3.235,91,3.671,92,3.671,93,2.92,94,3.363,95,2.409,96,3.506,97,4.251,98,2.92,99,4.936,100,2.831,101,1.599,102,3.671,103,3.235,104,3.671,628,4.768,2325,5.354]],["title/classes/NotificationRequestDto.html",[53,0.199,2326,3.592]],["body/classes/NotificationRequestDto.html",[3,0.091,4,0.091,5,0.081,13,0.279,14,1.053,19,0.564,20,0.322,21,0.007,30,0.091,31,0.006,32,0.006,43,0.518,49,0.206,53,0.349,57,1.398,63,1.361,75,2.322,77,1.688,121,3.865,706,4.146,722,6.111,726,6.111,1033,4.494,1156,5.321,2326,6.286,2327,7.842,2328,8.806,2329,7.206,2330,6.862,2331,8.224,2332,6.862]],["title/controllers/OAuthController.html",[157,1.378,2333,3.592]],["body/controllers/OAuthController.html",[3,0.075,4,0.075,5,0.067,9,0.975,11,4.392,13,0.232,17,0.649,20,0.287,21,0.007,30,0.075,31,0.005,32,0.005,39,1.683,43,0.36,45,1.403,46,1.066,48,1.287,49,0.221,50,0.961,53,0.242,54,1.182,63,0.944,101,2.704,120,1.427,157,1.673,159,1.98,347,2.706,354,3.407,360,5.1,361,4.65,362,3.382,365,6,384,2.878,385,2.449,397,4.817,401,2.929,404,6,406,3.583,408,2.929,413,6,428,4.115,449,5.027,484,1.905,642,2.699,681,2.447,685,2.288,700,5.08,1248,2.392,2333,5.605,2334,5.08,2335,6.763,2336,8.103,2337,5.704,2338,6.17,2339,5.08,2340,7.239,2341,8.552,2342,5.704,2343,5.704,2344,7.332,2345,6.529,2346,8.103,2347,4.115,2348,5.555,2349,5.08,2350,5.704,2351,5.704,2352,5.704]],["title/modules/OAuthModule.html",[172,1.429,2353,3.592]],["body/modules/OAuthModule.html",[3,0.084,4,0.084,5,0.075,21,0.007,30,0.104,31,0.005,32,0.005,49,0.228,50,1.067,53,0.269,159,2.72,172,2.587,174,2.719,175,3.079,176,3.254,177,3.254,178,2.999,179,4.132,180,4.132,185,5.072,196,4.023,197,3.254,198,3.254,201,3.442,213,4.413,225,3.98,282,1.382,556,6.411,2333,6.501,2348,6.689,2349,5.643,2353,7.338,2354,5.643,2355,6.337,2356,5.643,2357,5.643,2358,5.186,2359,6.337,2360,5.186,2361,5.643,2362,5.186]],["title/injectables/OAuthService.html",[33,0.99,2348,3.222]],["body/injectables/OAuthService.html",[3,0.051,4,0.051,5,0.046,11,1.99,12,1.433,13,0.158,14,0.721,17,0.946,19,0.658,20,0.325,21,0.007,23,0.987,28,3.192,30,0.051,31,0.004,32,0.004,33,1.186,35,1.458,39,1.521,43,0.547,45,2.043,46,1.552,48,1.875,49,0.193,50,0.653,53,0.164,54,1.506,94,2.434,101,1.68,107,0.987,112,1.179,203,2.741,204,1.27,262,2.255,282,1.756,323,1.384,347,2.688,354,1.458,361,3.401,385,2.427,390,3.857,402,3.451,408,1.99,413,4.604,422,1.592,423,2.897,430,4.059,434,2.796,436,2.963,437,2.963,438,2.657,441,1.554,442,2.09,443,2.657,446,2.975,451,5.833,452,6.962,471,3.451,477,2.595,478,2.538,484,1.879,496,3.534,513,2.796,514,3.172,515,2.796,516,2.657,519,3.857,523,1.022,527,3.279,668,1.834,681,1.663,685,3.095,715,6.154,736,2.183,737,3.737,750,2.183,767,2.05,837,1.935,889,3.172,1074,2.259,1311,2.183,1358,3.685,1418,4.604,1463,2.657,1478,2.342,1578,3.172,1853,3.685,1999,3.451,2289,5.054,2295,2.657,2307,2.796,2335,2.963,2338,5.243,2345,6.872,2347,2.796,2348,3.857,2362,3.172,2363,3.451,2364,5.626,2365,6.623,2366,6.623,2367,5.626,2368,7.267,2369,5.626,2370,6.623,2371,5.626,2372,5.626,2373,3.876,2374,3.876,2375,3.876,2376,3.876,2377,3.876,2378,5.626,2379,3.876,2380,3.876,2381,5.626,2382,3.876,2383,3.876,2384,3.876,2385,5.01,2386,5.626,2387,3.876,2388,3.876,2389,3.451,2390,3.876,2391,2.963,2392,5.626,2393,3.876,2394,6.623,2395,3.876,2396,3.876,2397,5.626,2398,3.876,2399,5.01,2400,3.876,2401,5.626,2402,5.01,2403,4.059,2404,5.626,2405,3.876,2406,4.604,2407,3.451,2408,2.963,2409,3.876,2410,3.876,2411,3.876,2412,3.876,2413,3.876]],["title/classes/Oauth2AuthorizationServerResponse.html",[53,0.199,2414,3.39]],["body/classes/Oauth2AuthorizationServerResponse.html",[3,0.064,4,0.064,5,0.057,9,0.642,12,1.671,13,0.196,14,0.84,19,0.657,20,0.356,21,0.007,23,1.671,28,2.883,29,5.37,30,0.064,31,0.004,32,0.004,43,0.575,53,0.205,57,0.983,144,3.021,276,3.188,352,3.965,353,2.521,354,2.469,359,3.824,360,5.193,367,4.993,374,5.55,375,1.551,382,5.192,450,6.55,497,3.356,498,5.38,500,5.38,527,3.824,583,2.717,647,4.298,655,7.128,662,6.55,785,5.701,788,5.701,790,5.701,791,5.701,793,5.701,795,5.701,817,4.734,1181,6.038,1184,2.915,1197,4.508,1387,5.775,1752,4.734,2049,4.296,2176,4.734,2414,4.734,2415,8.211,2416,4.824,2417,4.824,2418,8.638,2419,4.824,2420,4.824,2421,3.948,2422,4.824,2423,4.824,2424,6.562,2425,4.296]],["title/classes/OfferRequestDto.html",[53,0.199,1961,3.222]],["body/classes/OfferRequestDto.html",[3,0.062,4,0.062,5,0.056,9,1.056,12,1.204,13,0.193,14,1.017,16,1.854,17,1.019,19,0.613,20,0.363,21,0.007,30,0.086,31,0.004,32,0.004,43,0.564,49,0.208,53,0.337,57,0.963,62,3.299,63,1.421,70,1.464,71,2.986,74,2.83,75,1.946,76,2.162,77,1.163,100,4.801,107,2.021,112,1.438,118,3.167,120,1.183,121,2.663,122,2.596,128,2.292,135,2.043,143,2.867,262,2.923,372,4.834,375,2.081,473,2.98,607,1.982,616,2.709,620,3.254,681,2.028,706,2.856,714,4.834,868,4.239,869,4.635,909,2.435,926,4.21,987,3.646,999,3.145,1063,4.948,1218,3.869,1519,5.297,1847,5.324,1961,4.437,1964,3.096,1970,3.096,1973,5.06,1974,3.869,1985,3.614,1986,2.663,1995,6.068,1996,3.869,2426,7.193,2427,6.572,2428,4.728,2429,4.728,2430,4.728,2431,4.728,2432,4.728,2433,5.764,2434,4.728,2435,4.728,2436,4.948,2437,4.728,2438,4.728,2439,4.728,2440,4.728,2441,5.764,2442,5.764,2443,3.869,2444,4.21,2445,4.21,2446,4.21]],["title/classes/OfferResponse.html",[53,0.199,1964,3.077]],["body/classes/OfferResponse.html",[3,0.073,4,0.073,5,0.065,9,0.953,12,1.402,13,0.224,14,1.02,16,1.674,19,0.626,20,0.351,21,0.007,30,0.095,31,0.005,32,0.005,43,0.502,49,0.219,53,0.358,57,1.121,62,3.061,70,1.705,71,3.305,74,2.978,75,1.889,76,2.393,77,1.354,100,4.462,107,1.824,112,1.674,118,3.418,120,1.378,121,3.101,122,2.874,128,1.949,135,1.737,143,2.878,262,2.712,372,4.693,375,1.77,473,3.037,607,2.308,616,2.514,620,2.938,681,2.362,706,3.326,714,3.605,868,3.605,869,3.458,909,2.072,987,3.101,1063,4.208,1519,4.505,1847,3.972,1961,3.774,1964,4.693,1970,3.605,1973,4.913,1974,4.505,1985,4.208,1986,4.487,1995,5.478,1996,4.505,2426,6.519,2427,4.902,2433,4.902,2436,4.208,2441,4.902,2442,6.381,2443,4.505,2444,4.902,2445,4.902,2446,4.902,2447,5.505,2448,5.505]],["title/controllers/Oid4vciController.html",[157,1.378,2022,3.592]],["body/controllers/Oid4vciController.html",[3,0.062,4,0.062,5,0.055,9,0.624,12,2.233,13,0.191,17,0.837,20,0.324,21,0.007,30,0.062,31,0.004,32,0.004,39,1.477,43,0.463,45,1.807,46,1.478,48,1.871,49,0.229,50,0.789,53,0.199,54,1.639,63,1.216,68,1.356,101,1.922,120,1.173,134,1.728,146,4.812,157,2.155,159,1.627,163,2.944,207,2.64,282,1.022,286,2.526,310,5.476,360,4.669,384,3.361,385,2.149,390,4.412,401,2.407,420,3.07,425,1.887,473,3.4,608,4.871,616,2.616,619,3.07,620,2.638,642,2.218,647,4.214,670,3.07,673,2.479,674,5.038,675,3.583,681,2.011,685,1.88,846,2.944,848,2.64,897,2.218,941,3.403,1033,3.07,1074,2.732,1208,3.888,1248,1.966,1644,4.214,1971,4.615,1972,3.382,2018,2.944,2022,4.919,2026,3.382,2027,3.583,2326,6.046,2449,4.174,2450,4.688,2451,5.266,2452,4.688,2453,4.688,2454,4.688,2455,6.435,2456,4.688,2457,4.688,2458,4.688,2459,4.688,2460,4.688,2461,4.688,2462,3.836,2463,5.266,2464,4.688,2465,3.07,2466,4.688,2467,3.836,2468,4.688,2469,4.688,2470,4.174,2471,4.688,2472,4.174,2473,4.688,2474,4.688,2475,4.688,2476,4.688,2477,4.688,2478,4.688,2479,4.688,2480,4.688,2481,4.688,2482,4.688,2483,3.836,2484,4.688]],["title/controllers/Oid4vpController.html",[157,1.378,2485,3.592]],["body/controllers/Oid4vpController.html",[3,0.068,4,0.068,5,0.061,9,0.687,12,1.749,13,0.21,17,0.782,20,0.269,21,0.007,30,0.068,31,0.005,32,0.005,39,1.577,43,0.433,45,1.689,46,1.443,48,1.988,49,0.228,50,0.869,53,0.219,54,1.423,63,1.136,68,1.448,120,1.292,134,1.903,157,2.264,159,1.792,163,3.242,360,3.869,375,2.208,382,3.632,384,3.362,390,4.709,401,3.527,408,2.651,420,3.381,422,1.461,425,2.413,473,3.366,615,4.755,636,5.936,642,2.443,647,4.498,673,2.73,674,4.709,675,3.946,685,2.07,738,4.993,846,4.314,941,3.632,942,4.003,968,3.527,1046,3.539,1084,3.527,1248,2.165,1414,3.946,1644,5.055,2018,3.242,2026,4.955,2027,3.946,2462,4.224,2463,5.621,2465,3.381,2467,4.224,2470,4.597,2472,6.116,2485,5.901,2486,4.597,2487,5.162,2488,6.869,2489,6.873,2490,5.162,2491,5.162,2492,5.162,2493,5.292,2494,4.597,2495,5.162,2496,5.162,2497,4.597,2498,4.597,2499,5.162,2500,5.162,2501,5.162,2502,5.162]],["title/modules/Oid4vpModule.html",[172,1.429,2017,3.077]],["body/modules/Oid4vpModule.html",[3,0.074,4,0.074,5,0.066,21,0.007,30,0.074,31,0.005,32,0.005,49,0.239,50,0.946,53,0.238,159,2.52,172,2.446,174,2.41,175,2.729,176,2.885,177,2.885,178,2.658,179,3.908,180,3.908,185,4.918,191,4.559,192,5.448,196,3.728,197,2.885,198,2.885,201,3.189,225,3.528,238,4.294,240,4.052,738,5.593,2017,6.407,2018,5.663,2019,5.448,2020,5.663,2023,4.977,2024,3.164,2026,5.237,2027,4.294,2028,4.052,2029,4.597,2485,6.149,2498,5.002,2503,5.002,2504,5.002,2505,5.617,2506,5.002,2507,5.617,2508,7.163,2509,4.754,2510,5.002,2511,5.617]],["title/injectables/Oid4vpService.html",[33,0.99,738,2.738]],["body/injectables/Oid4vpService.html",[3,0.034,4,0.034,5,0.03,11,2.103,12,1.958,13,0.104,16,0.598,17,0.667,19,0.511,20,0.229,21,0.007,23,0.652,25,1.124,30,0.034,31,0.003,32,0.003,33,0.863,35,0.963,39,0.94,43,0.369,45,1.68,46,1.094,47,4.022,48,1.446,49,0.218,50,0.431,53,0.109,54,0.849,62,2.249,101,1.913,112,0.778,114,2.557,134,0.943,135,0.807,144,1.678,145,1.491,156,1.124,203,2.443,204,0.838,220,1.546,260,3.355,282,1.979,285,1.151,286,2.01,288,3.677,311,2.573,314,1.938,323,1.94,325,2.307,347,2.568,359,1.491,362,3.31,367,1.353,375,1.882,382,3.387,384,1.608,385,1.955,398,2.808,408,2.103,422,1.159,423,2.353,425,2.186,441,2.054,442,1.848,453,2.682,465,2.234,473,3.051,477,1.18,484,2.82,488,0.888,496,3.217,503,2.279,510,3.298,514,2.094,515,1.846,516,1.754,522,1.314,581,1.846,585,2.808,586,3.352,595,1.151,608,1.395,615,3.613,636,4.224,670,2.682,671,1.754,673,1.353,676,3.684,677,1.676,681,1.098,690,1.607,707,1.846,714,1.676,737,3.075,738,2.387,760,1.491,767,1.353,780,2.573,782,4.829,803,1.491,824,2.923,837,2.045,842,1.441,846,2.573,893,1.395,897,1.211,957,2.166,959,2.234,964,3.095,966,2.307,967,2.475,983,2.573,999,2.844,1077,1.353,1086,1.846,1125,3.677,1133,3.131,1246,3.131,1280,2.279,1300,1.491,1313,2.279,1340,2.094,1352,2.234,1357,2.094,1358,3.354,1366,1.846,1367,1.956,1369,3.131,1392,3.647,1397,4.476,1426,4.506,1494,3.352,1495,1.956,1667,2.279,1676,2.279,1847,2.955,1853,1.676,1964,1.676,1986,1.441,2019,3.537,2020,4.506,2026,2.955,2028,1.846,2029,2.094,2335,1.956,2385,2.279,2389,2.279,2406,2.094,2407,2.279,2408,1.956,2451,5.241,2465,3.354,2489,3.647,2493,5.271,2494,3.647,2497,2.279,2512,2.279,2513,4.096,2514,5.122,2515,4.506,2516,4.506,2517,2.559,2518,4.096,2519,2.559,2520,3.647,2521,3.647,2522,3.352,2523,2.559,2524,4.476,2525,2.559,2526,2.559,2527,4.096,2528,2.094,2529,2.094,2530,2.094,2531,3.354,2532,2.559,2533,2.559,2534,2.094,2535,2.559,2536,4.896,2537,3.131,2538,3.352,2539,2.279,2540,4.096,2541,6.405,2542,5.855,2543,4.096,2544,5.122,2545,2.559,2546,4.096,2547,6.405,2548,2.559,2549,4.096,2550,2.559,2551,2.559,2552,2.559,2553,2.094,2554,2.279,2555,2.559,2556,2.559,2557,2.559,2558,2.559,2559,6.405,2560,3.131,2561,2.559,2562,2.559,2563,2.559,2564,2.559,2565,2.559,2566,2.559,2567,2.559,2568,2.559,2569,2.559,2570,2.559,2571,4.096,2572,2.559,2573,2.559,2574,2.559,2575,2.559,2576,2.279,2577,2.279,2578,2.559,2579,2.094,2580,2.559,2581,2.559,2582,4.096,2583,2.559,2584,4.096,2585,2.559,2586,2.094,2587,2.094,2588,2.559,2589,2.559,2590,2.559,2591,2.559,2592,4.096,2593,4.096,2594,6.405,2595,2.559,2596,2.559,2597,2.559,2598,4.096,2599,2.559,2600,2.559,2601,4.561,2602,2.279,2603,2.559,2604,2.559,2605,4.096,2606,4.096,2607,3.647,2608,4.096,2609,2.559,2610,2.559,2611,2.559,2612,4.096,2613,2.559,2614,2.559,2615,4.096,2616,2.559,2617,5.122,2618,2.094,2619,2.094,2620,2.559,2621,4.096,2622,2.559,2623,2.559,2624,4.096,2625,4.096,2626,2.559,2627,2.559,2628,2.559,2629,2.559,2630,2.559,2631,2.559,2632,2.559,2633,2.559]],["title/classes/ParResponseDto.html",[53,0.199,682,3.592]],["body/classes/ParResponseDto.html",[3,0.09,4,0.09,5,0.08,12,2.408,13,0.277,14,1.048,19,0.561,20,0.32,21,0.007,30,0.09,31,0.006,32,0.006,43,0.516,53,0.289,57,1.386,382,4.328,438,6.016,493,4.769,579,3.431,583,3.833,662,6.696,682,6.255,690,5.511,1359,7.287,1360,7.287,1986,5.128,2421,5.569,2425,6.06,2634,7.814]],["title/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.403,772,3.39]],["body/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.357,2,1.456,3,0.039,4,0.039,5,0.034,12,1.987,13,0.119,14,0.582,19,0.562,20,0.283,21,0.007,22,1.196,30,0.06,31,0.003,32,0.003,33,0.957,49,0.215,50,0.491,53,0.124,54,1.498,62,1.745,68,0.615,84,1.121,101,0.871,107,1.157,109,2.51,112,0.887,125,3.371,128,2.23,134,2.321,135,0.921,143,1.641,144,2.063,147,2.785,156,2.766,203,1.899,204,0.956,207,1.643,260,2.51,262,0.993,282,2.017,286,2.189,287,1.456,310,1.762,314,3.229,315,4.265,317,3.142,323,1.778,325,3.547,347,2.414,361,1.498,362,1.346,367,1.543,375,2.426,384,2.678,385,0.974,397,1.643,422,0.825,423,2.281,441,3.026,442,2.53,446,1.543,449,3.114,451,2,465,1.591,473,3.102,484,2.934,487,2,496,1.832,497,2.51,498,2.104,500,2.104,502,2.23,505,2.23,510,2.559,519,2,585,3.114,594,2.622,607,1.223,610,4.008,613,2.745,614,1.7,615,1.543,616,1.433,620,2.287,648,2.23,652,3.955,658,2.104,659,3.277,670,3.653,671,2,673,1.543,676,2.865,677,1.91,678,1.762,680,2.23,681,1.252,690,3.504,707,4.543,711,2.104,728,2.23,731,2.387,733,2.387,735,2.387,737,2.51,738,3.251,739,3.371,742,2.23,744,5.584,745,2.387,747,5.153,752,2.387,756,2.387,760,3.977,761,5.914,762,5.153,763,2.98,764,2.387,765,5.153,766,2.104,767,1.543,768,2.387,769,2.23,770,2.104,771,2.387,772,4.025,773,5.584,774,3.277,775,2.387,776,2.387,777,3.717,778,2.387,779,3.717,780,2.853,781,5.153,782,4.286,783,2.387,784,2.387,785,2.23,786,2.387,787,2.387,788,2.23,789,1.91,790,2.23,791,2.23,792,2.387,793,2.23,794,2.387,795,2.23,796,2.387,797,2.387,798,3.717,799,2.387,800,2.23,801,2.387,802,2.387,803,4.212,804,2.387,805,2.387,806,2.387,807,2.387,808,2.387,809,4.565,810,4.265,811,2.477,812,3.717,813,3.472,814,2.387,815,5.153,816,3.717,817,5.444,818,2.387,819,3.717,820,3.717,821,3.717,822,3.717,823,3.717,824,2.268,825,3.717,826,2.387,827,2.387,828,2.387,829,2.387,830,2.387,831,2.387,832,2.387,833,3.717,834,2.387,835,2.387,836,1.762,837,1.456,838,2.387,839,2.23,840,1.91,841,2.387,842,1.643,843,2.387,844,2.387,845,2.23,846,1.832,847,3.717,848,1.643,849,2.387,850,4.565,851,2.387,852,2.387,853,2.387,854,2.387,855,2.387,856,2.23,857,3.717,858,2.387,859,3.717,860,2.402,861,2.387,862,4.565,863,2.23,864,2.387,865,2.387,866,2.387,867,2.387,868,1.91,869,2.853,870,2,871,2.387,872,2.23,873,2.387,874,4.265,875,2.387,876,2.387,877,2.387,878,4.565,879,2.387,880,2.387,881,4.265,882,2.387,883,2.387,884,2.387]],["title/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.403,774,3.39]],["body/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.348,2,1.445,3,0.038,4,0.038,5,0.034,12,1.982,13,0.118,14,0.578,17,0.514,19,0.58,20,0.294,21,0.007,22,1.187,30,0.06,31,0.003,32,0.003,33,0.952,49,0.215,50,0.487,53,0.123,54,1.493,62,1.735,68,0.61,84,1.112,101,0.864,107,1.149,109,2.498,112,0.88,125,3.354,128,2.22,134,2.311,135,0.913,143,1.631,144,2.054,147,2.771,156,2.754,203,1.89,204,0.948,207,1.63,260,2.498,262,0.985,282,2.015,286,2.178,287,1.445,310,1.749,314,3.217,315,4.243,317,3.126,323,1.772,325,3.532,347,2.406,361,1.486,362,1.335,367,1.531,375,2.419,384,2.668,385,0.967,397,1.63,422,0.819,423,2.273,441,3.017,442,2.524,446,1.531,449,3.095,451,1.984,465,1.578,473,3.098,484,2.929,487,1.984,496,1.818,497,2.498,498,2.088,500,2.088,502,2.212,505,2.212,510,2.543,519,1.984,585,3.095,594,2.612,607,1.214,610,3.491,613,2.728,614,1.687,615,1.531,616,1.425,620,2.276,648,2.212,652,3.938,658,2.088,659,3.257,670,3.635,671,1.984,673,1.531,676,2.85,677,1.895,678,1.749,680,2.212,681,1.242,690,3.486,707,4.523,711,2.088,728,2.212,731,2.368,733,2.368,735,2.368,737,2.498,738,3.235,739,3.354,742,2.212,744,5.564,745,2.368,747,5.131,752,2.368,756,2.368,760,3.962,761,5.131,762,5.131,763,2.967,764,2.368,765,5.895,766,2.088,767,1.531,768,2.368,769,2.212,770,2.088,771,2.368,772,3.257,773,5.564,774,4.004,775,5.131,776,5.131,777,3.694,778,2.368,779,3.694,780,2.835,781,5.131,782,4.27,783,2.368,784,2.368,785,2.212,786,2.368,787,2.368,788,2.212,789,1.895,790,2.212,791,2.212,792,2.368,793,2.212,794,2.368,795,2.212,796,2.368,797,2.368,798,3.694,799,2.368,800,2.212,801,2.368,802,2.368,803,4.198,804,2.368,805,2.368,806,2.368,807,2.368,808,2.368,809,4.542,810,4.243,811,2.462,812,3.694,813,3.451,814,2.368,815,5.131,816,3.694,817,5.428,818,2.368,819,3.694,820,3.694,821,3.694,822,3.694,823,3.694,824,2.254,825,3.694,826,2.368,827,2.368,828,2.368,829,2.368,830,2.368,831,2.368,832,2.368,833,3.694,834,2.368,835,2.368,836,1.749,837,1.445,838,2.368,839,2.212,840,1.895,841,2.368,842,1.63,843,2.368,844,2.368,845,2.212,846,1.818,847,3.694,848,1.63,849,2.368,850,4.542,851,2.368,852,2.368,853,2.368,854,2.368,855,2.368,856,2.212,857,3.694,858,2.368,859,3.694,860,2.388,861,2.368,862,4.542,863,2.212,864,2.368,865,2.368,866,2.368,867,2.368,868,1.895,869,2.835,870,1.984,871,2.368,872,2.212,873,2.368,874,4.243,875,2.368,876,2.368,877,2.368,878,4.542,879,2.368,880,2.368,881,4.243,882,2.368,883,2.368,884,2.368]],["title/classes/PolicyCredential.html",[53,0.199,99,2.951]],["body/classes/PolicyCredential.html",[3,0.068,4,0.068,5,0.061,9,0.684,13,0.209,14,0.877,17,0.935,19,0.528,20,0.361,21,0.007,30,0.119,31,0.005,32,0.005,37,3.886,43,0.485,49,0.193,53,0.387,56,3.105,57,1.047,58,3.227,59,4.837,60,5.168,61,5.602,62,2.959,63,1.274,68,1.803,70,1.592,71,3.946,72,5.602,73,1.974,74,2.622,75,2.405,76,2.857,77,1.264,78,4.1,79,4.1,80,4.1,81,3.523,82,2.565,83,3.227,84,2.959,85,4.837,86,5.158,87,3.523,88,5.631,89,4.393,90,3.105,91,3.523,92,3.523,93,2.802,94,3.227,95,2.312,96,3.365,97,3.105,98,2.802,99,5.158,100,4.073,101,2.3,102,5.28,103,3.105,104,3.523,341,4.575,342,5.887,2635,6.847,2636,5.138,2637,5.138,2638,5.138]],["title/classes/PresentationAttachment.html",[53,0.199,936,2.839]],["body/classes/PresentationAttachment.html",[3,0.049,4,0.049,5,0.044,7,1.636,9,0.861,12,2.142,13,0.152,14,0.7,16,1.665,17,0.737,19,0.63,20,0.359,21,0.007,25,3.132,26,1.718,27,1.401,28,2.4,30,0.108,31,0.004,32,0.004,43,0.408,49,0.205,53,0.364,57,0.758,62,2.099,63,1.071,68,1.905,70,1.153,71,3.96,73,1.431,74,3.012,75,2.333,76,2.739,77,0.916,78,1.859,79,3.231,80,3.231,89,3.899,95,2.459,101,1.112,107,1.391,118,2.344,120,0.932,122,2.191,124,1.268,128,1.935,134,1.373,143,2.338,144,1.22,221,1.762,262,1.268,286,2.798,299,2.031,323,0.916,353,1.431,375,1.197,493,2.17,523,1.706,548,2.54,579,1.561,592,4.198,593,1.809,594,2.487,595,2.913,597,2.097,607,1.561,616,1.724,639,2.17,668,1.762,672,4.308,681,1.598,842,2.097,848,2.097,860,1.969,885,1.968,891,1.859,892,1.912,893,2.98,894,3.184,896,3.184,897,1.762,900,3.889,902,2.4,905,2.459,906,1.676,908,1.676,909,1.401,913,3.184,915,2.097,916,2.097,917,1.676,918,2.459,919,1.318,920,1.676,921,2.986,922,4.478,923,2.17,928,2.98,929,3.911,930,4.67,931,3.184,932,3.645,933,2.438,934,4.67,935,3.432,936,4.308,937,4.239,938,4.67,939,4.67,940,4.67,941,4.016,942,4.155,943,4.239,944,2.438,945,2.438,946,3.911,947,2.438,948,2.438,949,2.438,950,2.438,951,2.438,952,2.438,953,2.438,954,3.578,955,4.308,956,2.438,957,1.969,958,2.438,959,2.98,960,2.438,961,2.438,962,2.17,963,3.56,964,2.25,965,2.17,966,2.097,967,2.25,968,1.912,969,2.438,2639,3.724,2640,3.724,2641,3.724,2642,3.724]],["title/entities/PresentationConfig.html",[885,1.429,957,2.485]],["body/entities/PresentationConfig.html",[3,0.041,4,0.041,5,0.037,7,2.108,9,0.99,12,2.287,13,0.128,14,0.615,16,1.808,17,0.982,19,0.616,20,0.365,21,0.007,25,2.108,26,2.214,27,1.806,28,2.108,30,0.102,31,0.003,32,0.003,43,0.536,49,0.194,53,0.347,62,1.844,63,1.407,68,1.893,70,0.97,71,3.777,73,1.203,74,2.894,75,2.203,76,2.586,77,0.77,78,1.564,79,2.913,80,2.913,89,3.621,95,2.16,101,0.935,107,1.665,118,2.059,120,0.784,122,1.925,124,1.634,128,2.496,134,1.155,143,2.362,144,1.572,221,1.482,262,1.634,286,2.566,299,1.708,323,1.435,353,1.203,375,1.543,493,2.797,523,2.041,548,2.566,579,2.012,592,4.561,593,2.332,594,2.858,595,1.409,597,2.703,607,1.313,616,1.514,639,2.797,668,1.482,672,4.26,681,1.344,842,2.703,848,2.703,860,2.538,885,1.989,887,1.482,891,2.913,892,2.996,893,3.566,894,3.4,896,3.811,897,2.271,898,3.143,900,4.356,902,2.873,904,1.764,905,2.943,906,2.16,908,2.16,909,1.806,913,3.4,915,2.703,916,2.703,917,1.409,918,2.16,919,1.109,920,1.409,921,2.691,922,5.416,923,1.825,928,2.617,929,3.525,930,3.821,931,2.797,932,3.683,933,2.051,934,4.871,935,1.967,936,3.951,937,2.051,938,4.283,939,4.283,940,4.283,941,3.934,942,3.811,943,3.821,944,2.051,945,2.051,946,3.525,947,2.051,948,2.051,949,2.051,950,2.051,951,2.051,952,2.051,953,2.051,954,3.143,955,4.494,956,2.051,957,2.538,958,3.143,959,3.845,960,3.143,961,3.143,962,1.825,963,3.265,964,3.525,965,2.797,966,2.703,967,3.525,968,2.464,969,2.051,988,2.26,1026,2.563,1030,2.394,1852,2.789,2643,3.132,2644,3.132,2645,3.132,2646,3.132,2647,3.132,2648,3.132,2649,3.132,2650,3.132,2651,3.132,2652,3.132,2653,3.132,2654,3.132,2655,3.132,2656,3.132,2657,3.132,2658,3.132]],["title/classes/PresentationConfigCreateDto.html",[53,0.199,2659,3.39]],["body/classes/PresentationConfigCreateDto.html",[3,0.093,4,0.093,5,0.083,14,0.897,21,0.007,30,0.093,31,0.006,32,0.006,37,3.94,49,0.208,53,0.297,57,1.427,82,3.498,120,1.753,135,2.628,282,1.816,323,2.048,584,4.083,594,2.692,701,5.357,891,4.157,892,4.276,957,3.706,1050,5.357,1052,4.804,1352,3.821,2659,6.007,2660,6.24,2661,8.327,2662,5.734]],["title/classes/PresentationDuringIssuanceConfig.html",[53,0.199,617,2.951]],["body/classes/PresentationDuringIssuanceConfig.html",[0,1.539,3,0.068,4,0.068,5,0.061,9,0.686,12,1.747,13,0.21,14,0.879,17,0.587,19,0.529,20,0.357,21,0.007,30,0.119,31,0.005,32,0.005,43,0.325,49,0.193,53,0.381,57,1.05,63,0.853,70,1.597,73,1.98,74,2.336,75,2.37,76,2.746,77,1.268,84,3.159,98,2.811,107,2.242,109,3.963,115,3.523,122,3.093,123,2.573,124,2.8,128,2.429,130,3.027,135,2.165,143,2.786,144,2.527,156,3.762,314,4.253,318,1.98,362,3.793,594,3.159,598,3.114,599,4.309,600,3.237,601,5.165,602,4.844,607,2.161,608,3.742,609,4.704,610,3.523,611,4.704,612,3.375,613,3.114,614,4.99,615,3.629,616,2.165,617,5.165,618,4.704,619,4.493,620,2.813,621,4.309,622,3.114,623,3.534,624,3.534,625,3.114,626,3.237,627,3.375,2663,5.154]],["title/controllers/PresentationManagementController.html",[157,1.378,2664,3.592]],["body/controllers/PresentationManagementController.html",[3,0.05,4,0.05,5,0.044,9,0.5,12,2.148,13,0.153,16,1.781,17,0.816,19,0.491,20,0.351,21,0.007,25,1.652,30,0.05,31,0.004,32,0.004,39,1.264,43,0.452,45,1.762,46,1.339,48,1.943,49,0.222,50,0.633,53,0.16,54,1.349,62,1.445,63,1.186,107,2.028,112,1.674,115,2.827,120,0.941,128,1.332,135,2.406,145,2.192,157,1.103,159,1.306,207,2.119,276,3.163,282,1.201,286,1.476,318,3.48,321,4.463,325,4.295,347,2.174,353,1.445,354,2.696,372,3.605,375,2.767,384,3.23,401,3.343,403,3.971,405,4.505,406,2.362,418,4.075,422,1.064,423,1.737,425,2.236,428,3.971,431,2.674,446,1.989,484,1.838,533,1.989,594,3.307,610,3.343,642,1.78,681,2.362,685,2.208,693,3.078,714,3.605,738,3.794,909,1.415,916,3.1,984,3.457,1057,3.1,1071,1.652,1074,3.208,1083,2.827,1100,3.971,1101,3.208,1110,2.579,1230,2.579,1236,2.273,1237,2.273,1238,2.362,1239,2.362,1242,3.934,1243,3.457,1244,3.326,1252,2.579,1352,3.002,1463,2.579,1702,2.714,1726,3.078,1896,4.264,1959,5.797,1960,3.35,1962,3.35,1963,4.902,1964,4.264,1965,3.35,1969,3.078,1970,4.264,1973,2.579,1976,3.35,1977,3.35,1978,4.902,1979,2.875,1980,6.38,1981,3.35,1982,5.328,1983,3.35,1984,4.902,1985,4.208,1986,3.1,1987,3.35,2004,3.35,2005,3.35,2006,3.35,2007,3.35,2008,3.35,2009,3.35,2010,3.35,2493,3.774,2516,4.089,2529,3.078,2534,3.078,2659,5.169,2664,4.208,2665,3.35,2666,5.505,2667,5.797,2668,3.762,2669,3.762,2670,3.762,2671,3.762,2672,6.089,2673,3.762,2674,3.762,2675,3.762,2676,3.762,2677,3.762,2678,3.762,2679,3.762,2680,3.35,2681,3.762,2682,3.762,2683,3.762,2684,3.762,2685,3.762,2686,3.762,2687,3.762,2688,3.762,2689,3.762,2690,3.762,2691,3.762,2692,3.762,2693,3.762,2694,3.762,2695,3.762]],["title/classes/PresentationRequest.html",[53,0.199,2672,3.592]],["body/classes/PresentationRequest.html",[3,0.073,4,0.073,5,0.065,9,0.734,12,2.326,13,0.225,14,0.919,16,1.675,17,0.817,19,0.492,20,0.369,21,0.007,27,2.699,30,0.095,31,0.005,32,0.005,43,0.503,49,0.179,53,0.304,57,1.123,63,1.319,74,2.442,75,2.102,77,1.356,107,2.285,121,3.106,122,2.877,123,3.581,124,2.442,128,3.235,143,2.88,147,3.581,375,3.011,584,4.18,593,3.485,594,3.51,607,2.312,610,2.832,706,3.332,714,5.221,968,3.684,1419,5.175,1970,4.698,1973,5.466,1982,4.513,1986,4.49,2436,6.095,2443,5.87,2493,5.466,2672,5.483,2696,6.454,2697,5.515,2698,4.91,2699,5.515,2700,5.515,2701,7.173,2702,5.87]],["title/interfaces/PresentationRequestOptions.html",[0,1.403,2524,3.592]],["body/interfaces/PresentationRequestOptions.html",[0,1.968,2,3.289,3,0.087,4,0.087,5,0.078,9,0.877,12,2.203,13,0.268,14,1.028,17,1.092,19,0.593,20,0.314,21,0.007,27,3.019,30,0.087,31,0.005,32,0.005,49,0.165,107,2.043,128,3.324,143,3.253,375,2.58,473,3.259,584,4.676,607,2.763,968,4.121,2524,6.884,2696,5.037,2703,5.868,2704,7.146]],["title/modules/PresentationsModule.html",[172,1.429,2509,3.077]],["body/modules/PresentationsModule.html",[3,0.081,4,0.081,5,0.073,21,0.007,30,0.081,31,0.005,32,0.005,49,0.237,50,1.037,53,0.261,82,3.075,159,2.673,172,2.554,174,2.643,175,2.993,176,3.164,177,3.164,178,2.915,179,4.079,180,4.079,196,3.953,197,3.164,198,3.164,201,3.382,538,3.59,539,2.526,957,3.258,2017,5.042,2023,5.278,2024,3.47,2508,6.855,2509,6.256,2516,6.105,2662,5.041,2664,6.419,2680,5.486,2705,5.486,2706,5.486,2707,5.486,2708,5.486,2709,6.662,2710,6.161,2711,5.486,2712,6.161,2713,6.161,2714,6.161]],["title/injectables/PresentationsService.html",[33,0.99,2516,2.951]],["body/injectables/PresentationsService.html",[3,0.025,4,0.025,5,0.064,7,2.586,9,0.877,12,0.809,13,0.077,14,0.407,16,2.185,17,0.714,19,0.624,20,0.285,21,0.007,22,1.693,23,0.479,30,0.025,31,0.002,32,0.002,33,0.67,35,0.708,39,0.73,43,0.482,45,1.746,46,1.327,48,1.835,49,0.218,50,0.317,53,0.175,54,1.704,62,0.723,68,1.321,70,0.583,77,0.463,82,0.939,95,1.43,107,2.094,112,1.476,114,1.587,130,0.738,135,1.858,153,1.096,201,2.132,203,2.134,204,0.616,217,1.181,218,1.232,220,1.136,221,1.504,251,1.438,260,1.43,262,1.406,282,1.861,285,2.821,323,2.098,325,2.734,347,2.201,353,0.723,375,1.022,378,1.438,385,2.552,408,0.966,422,1.373,423,2.456,425,2.482,431,2.358,441,1.656,442,2.165,465,1.733,477,3.165,484,2.201,488,1.103,510,1.79,523,2.191,539,0.771,581,3.501,586,2.601,592,1.681,594,3.252,595,2.965,647,2.082,668,1.504,694,4.818,760,1.096,763,1.954,789,4.106,803,1.852,824,3.949,846,1.996,860,2.567,870,3.327,885,1.791,887,1.504,891,0.939,935,2.593,941,1.681,942,1.852,957,3.753,965,3.431,967,1.136,982,2.83,999,1.544,1046,4.298,1047,2.43,1057,3.997,1070,2.423,1071,2.132,1074,3.84,1076,2.86,1077,2.183,1078,3.501,1083,1.632,1084,1.632,1085,5.392,1086,1.357,1090,2.932,1094,1.357,1099,3.501,1100,1.357,1101,1.096,1103,2.293,1104,1.026,1105,2.601,1106,1.357,1107,1.539,1108,1.289,1110,1.289,1112,1.357,1113,1.357,1114,2.601,1116,3.378,1117,1.539,1118,1.357,1119,2.293,1120,1.357,1121,1.357,1122,1.357,1123,1.357,1124,3.378,1125,1.996,1126,1.539,1127,1.539,1128,1.289,1129,1.539,1130,3.914,1131,2.082,1132,1.539,1133,1.438,1134,1.539,1135,1.539,1136,1.539,1137,1.539,1139,2.601,1140,2.601,1141,1.539,1142,1.539,1143,1.675,1144,1.539,1145,1.539,1146,1.438,1147,1.539,1148,1.539,1149,1.438,1150,1.539,1151,1.539,1155,1.357,1156,1.92,1157,1.539,1158,1.357,1159,1.539,1161,1.181,1162,1.232,1164,1.539,1165,1.539,1166,1.539,1167,1.539,1168,1.539,1173,1.357,1174,1.539,1197,1.79,1298,3.676,1300,4.737,1301,1.438,1302,1.438,1305,5.583,1306,1.438,1307,4.523,1333,1.289,1344,2.83,1362,3.676,1401,5.582,1403,1.289,1405,6.122,1482,2.293,1487,1.357,1491,1.539,1492,0.966,1493,1.289,1644,3.178,1790,1.539,1902,4.036,1924,1.675,1986,3.316,2024,1.059,2109,1.438,2186,4.95,2224,1.232,2298,2.43,2483,2.601,2516,3.048,2534,1.539,2659,3.914,2662,1.539,2667,3.676,2715,1.675,2716,3.179,2717,6.59,2718,6.269,2719,4.128,2720,4.854,2721,3.179,2722,4.128,2723,3.179,2724,4.128,2725,3.179,2726,1.539,2727,4.866,2728,4.854,2729,3.179,2730,3.179,2731,2.83,2732,3.179,2733,3.179,2734,1.881,2735,2.601,2736,3.179,2737,1.881,2738,1.881,2739,3.179,2740,1.881,2741,1.881,2742,4.854,2743,4.854,2744,1.881,2745,1.881,2746,5.425,2747,4.854,2748,1.881,2749,3.179,2750,3.179,2751,1.881,2752,5.425,2753,1.881,2754,3.179,2755,1.881,2756,4.128,2757,2.43,2758,1.881,2759,3.179,2760,1.881,2761,3.179,2762,1.881,2763,3.179,2764,1.438,2765,1.289,2766,1.881,2767,1.881,2768,1.881,2769,3.179,2770,1.881,2771,1.881,2772,1.881,2773,3.179,2774,1.881,2775,1.881,2776,1.881,2777,1.539,2778,1.675,2779,1.881,2780,1.881,2781,1.881,2782,1.881,2783,1.881,2784,1.881,2785,1.881,2786,1.881,2787,1.881,2788,1.881,2789,1.881,2790,1.881,2791,1.881,2792,3.179,2793,1.881,2794,1.881,2795,1.881,2796,1.881,2797,1.881,2798,1.881,2799,1.881,2800,1.881,2801,4.128,2802,1.881,2803,1.881,2804,1.881,2805,1.881,2806,3.179,2807,1.539,2808,1.881]],["title/entities/RegistrarEntity.html",[885,1.429,2809,3.39]],["body/entities/RegistrarEntity.html",[3,0.082,4,0.082,5,0.073,13,0.254,14,0.993,19,0.635,20,0.345,21,0.007,30,0.082,31,0.005,32,0.005,43,0.557,49,0.194,53,0.264,63,1.461,68,1.861,323,2.076,523,2.395,548,3.466,885,2.358,887,2.948,898,5.527,902,3.405,904,3.509,905,3.974,906,3.488,908,3.488,909,2.917,917,2.803,918,3.488,919,2.206,920,2.803,921,3.893,2809,5.593,2810,5.548,2811,7.515,2812,7.515,2813,6.23,2814,6.23,2815,6.23,2816,6.23]],["title/modules/RegistrarModule.html",[172,1.429,191,2.951]],["body/modules/RegistrarModule.html",[3,0.074,4,0.074,5,0.066,9,0.742,21,0.007,30,0.095,31,0.005,32,0.005,49,0.229,50,0.94,53,0.237,134,2.057,172,2.579,174,3.44,175,2.711,176,2.865,177,2.865,178,2.64,179,3.895,180,3.895,185,4.909,191,6.053,196,3.712,197,2.865,198,2.865,201,3.725,213,4.071,225,3.504,237,4.265,256,4.566,282,1.217,363,5.915,488,2.509,538,3.251,539,2.287,966,4.071,984,3.504,1070,3.608,1161,3.504,1439,4.955,1559,5.784,2178,4.025,2295,3.825,2391,4.265,2509,5.895,2515,6.079,2809,4.025,2817,4.968,2818,4.968,2819,4.968,2820,5.58,2821,4.566,2822,6.561,2823,5.58,2824,4.968,2825,5.58,2826,4.968,2827,4.968,2828,4.968,2829,7.14,2830,7.14,2831,4.566,2832,4.566,2833,5.58]],["title/injectables/RegistrarService.html",[33,0.99,2515,2.951]],["body/injectables/RegistrarService.html",[3,0.028,4,0.028,5,0.025,7,3.762,9,0.606,11,4.434,13,0.088,14,0.456,16,1.367,17,0.76,19,0.62,20,0.283,21,0.007,24,1.353,28,0.946,30,0.028,31,0.002,32,0.003,33,0.751,35,0.811,39,0.818,43,0.51,45,1.641,46,1.586,48,1.825,49,0.191,50,0.363,53,0.091,54,1.649,62,1.368,68,0.751,93,3.439,101,1.063,107,1.491,108,2.441,124,1.212,130,0.846,135,0.68,156,0.946,203,2.463,204,0.706,221,2.154,260,1.603,282,1.704,285,1.603,286,2.075,287,1.778,310,2.152,314,1.685,323,2.043,325,2.006,347,2.834,353,0.828,354,2.626,361,4.499,367,1.139,374,3.321,375,0.693,384,1.786,385,1.766,388,2.441,395,3.171,397,2.006,422,1.496,423,2.702,425,1.849,441,1.825,442,2.465,445,2.722,446,2.407,451,2.441,452,2.914,484,2.657,488,1.835,523,1.394,524,2.152,539,0.883,560,2.569,579,0.903,647,2.332,672,1.302,681,0.924,736,1.213,737,3.355,751,1.175,767,1.139,839,1.647,840,1.411,860,1.883,890,4.708,893,1.942,897,2.984,919,0.763,932,2.978,942,2.075,964,3.194,965,4.455,966,2.006,983,2.859,1046,4.323,1057,2.006,1070,1.778,1073,2.441,1074,1.256,1076,2.569,1083,1.829,1095,2.441,1099,2.569,1100,4.549,1101,3.675,1104,1.175,1125,1.353,1153,2.722,1246,2.722,1289,3.814,1311,2.978,1351,3.814,1353,1.763,1358,1.411,1369,2.722,1386,1.763,1403,1.477,1406,1.411,1414,2.722,1439,2.441,1456,1.763,1460,1.919,1533,1.919,1644,2.332,1649,2.914,1662,2.914,1669,4.053,1831,3.171,1902,4.323,2000,1.919,2046,1.919,2111,1.919,2121,2.914,2157,4.327,2222,3.171,2224,3.462,2252,1.919,2289,1.411,2399,4.053,2483,1.763,2493,3.625,2515,3.96,2516,4.682,2576,1.919,2619,1.763,2702,4.327,2809,1.554,2811,3.171,2812,5.942,2822,7.369,2824,1.919,2831,1.763,2832,1.763,2834,1.919,2835,3.561,2836,3.171,2837,6.306,2838,8.087,2839,3.561,2840,6.673,2841,4.552,2842,4.552,2843,3.561,2844,3.561,2845,4.327,2846,5.16,2847,5.287,2848,4.552,2849,3.561,2850,2.914,2851,3.561,2852,2.155,2853,2.155,2854,6.306,2855,2.155,2856,2.155,2857,3.561,2858,2.155,2859,3.561,2860,7.811,2861,3.561,2862,2.155,2863,2.155,2864,2.155,2865,6.306,2866,2.237,2867,3.561,2868,3.561,2869,2.155,2870,2.155,2871,3.171,2872,2.155,2873,2.155,2874,3.561,2875,3.561,2876,3.561,2877,2.155,2878,5.287,2879,2.155,2880,1.919,2881,2.155,2882,2.155,2883,3.561,2884,3.561,2885,3.561,2886,3.561,2887,3.561,2888,2.155,2889,2.155,2890,2.155,2891,2.914,2892,2.155,2893,2.155,2894,2.914,2895,2.155,2896,2.155,2897,2.155,2898,2.155,2899,2.155,2900,2.155,2901,6.306,2902,2.155,2903,2.155,2904,2.155,2905,3.561,2906,3.561,2907,3.561,2908,1.919,2909,2.155,2910,2.155,2911,2.155,2912,2.155,2913,2.155,2914,2.155,2915,2.155,2916,2.155,2917,2.155,2918,2.155,2919,2.155,2920,1.763,2921,2.155,2922,2.155,2923,2.155,2924,2.155,2925,2.155,2926,2.155,2927,2.155,2928,5.287,2929,2.155,2930,2.155,2931,2.155,2932,2.155,2933,2.155,2934,2.155,2935,2.155,2936,2.155,2937,2.155,2938,2.155,2939,2.155,2940,4.552,2941,5.287,2942,2.155,2943,3.561,2944,2.155,2945,2.155,2946,3.561,2947,2.155,2948,2.155,2949,2.155,2950,2.155,2951,2.155,2952,1.919,2953,3.561,2954,2.155,2955,2.155,2956,2.155,2957,1.763,2958,2.155,2959,2.155,2960,2.155,2961,2.155,2962,3.561,2963,2.155,2964,2.155,2965,2.155,2966,2.155,2967,2.155,2968,2.155]],["title/classes/RegistrationCertificateRequest.html",[53,0.199,932,2.647]],["body/classes/RegistrationCertificateRequest.html",[3,0.084,4,0.084,5,0.075,7,3.908,9,0.846,12,2,13,0.259,14,1.006,16,1.99,17,0.894,19,0.538,20,0.307,21,0.007,27,2.955,30,0.084,31,0.005,32,0.005,43,0.495,49,0.196,53,0.333,57,1.296,63,1.299,74,2.674,75,2.07,77,1.565,122,3.417,366,5.665,384,3.587,584,4.576,593,3.815,639,4.576,706,3.844,716,4.589,725,5.665,932,5.011,965,5.184,966,4.423,2969,7.586,2970,8.519,2971,6.362,2972,6.362]],["title/modules/ResolverModule.html",[172,1.429,2709,3.39]],["body/modules/ResolverModule.html",[3,0.089,4,0.089,5,0.08,21,0.007,30,0.089,31,0.005,32,0.005,49,0.219,50,1.137,53,0.286,172,2.659,174,2.896,175,3.279,176,3.466,177,3.466,178,3.194,179,4.248,180,4.248,196,4.182,197,3.466,198,3.466,201,2.965,2023,5.583,2024,3.802,2709,6.89,2727,6.742,2973,6.011,2974,6.011,2975,6.011,2976,6.75,2977,6.75]],["title/injectables/ResolverService.html",[33,0.99,2727,3.222]],["body/injectables/ResolverService.html",[3,0.065,4,0.065,5,0.058,7,2.176,9,0.659,13,0.202,17,0.761,20,0.261,21,0.007,22,3.318,23,2.217,25,2.176,30,0.065,31,0.005,32,0.005,33,1.408,35,1.864,39,1.534,43,0.421,45,1.643,46,1.249,48,1.508,49,0.218,50,0.834,53,0.21,54,1.567,114,4.442,282,1.765,286,1.944,287,3.336,317,3.763,347,2.525,375,1.593,385,2.231,422,1.402,425,1.959,441,3.246,442,2.666,461,4.054,477,3.082,484,1.654,488,2.32,497,3.917,522,3.431,668,2.344,671,3.396,760,2.887,763,4.282,803,3.894,824,3.336,1153,5.108,1185,3.644,1248,2.077,1307,3.574,1366,4.82,1482,5.838,1492,2.544,1535,5.95,2011,3.574,2024,2.79,2186,6.28,2224,4.376,2258,5.95,2726,4.054,2727,4.581,2731,5.95,2764,5.108,2765,3.396,2952,4.411,2978,4.411,2979,6.682,2980,6.682,2981,4.954,2982,6.682,2983,4.954,2984,5.95,2985,6.682,2986,4.954,2987,4.954,2988,4.411,2989,4.954,2990,4.954,2991,4.954,2992,4.954,2993,4.954,2994,4.954,2995,4.954,2996,4.954,2997,4.954,2998,4.954,2999,4.954,3000,4.954,3001,4.954,3002,4.954,3003,6.682,3004,4.954,3005,4.954,3006,4.954,3007,4.954,3008,4.954,3009,4.954,3010,4.954,3011,4.954,3012,4.954,3013,4.954,3014,4.954]],["title/classes/RootOfTrustPolicy.html",[53,0.199,90,2.839]],["body/classes/RootOfTrustPolicy.html",[3,0.07,4,0.07,5,0.062,9,0.701,13,0.215,14,0.892,19,0.569,20,0.353,21,0.007,30,0.119,31,0.005,32,0.005,37,4.082,43,0.439,49,0.195,53,0.389,56,3.183,57,1.073,58,3.309,59,4.897,60,5.46,61,5.918,62,3.314,63,1.152,65,3.801,68,1.818,70,1.632,71,3.979,72,5.649,73,2.024,74,2.655,75,2.418,76,2.881,77,1.296,78,3.893,79,3.893,80,3.893,81,3.612,82,2.63,83,3.309,84,2.996,85,5.21,86,4.897,87,3.612,88,5.687,89,4.429,90,4.207,91,3.612,92,3.612,93,2.873,94,3.309,95,2.371,96,3.451,97,3.183,98,2.873,99,4.897,100,2.786,101,1.573,102,3.612,103,3.183,104,3.612,3015,5.269,3016,5.269,3017,5.269,3018,5.269]],["title/classes/S3FileStorage.html",[53,0.199,3019,3.592]],["body/classes/S3FileStorage.html",[3,0.056,4,0.056,5,0.05,12,1.074,13,0.172,17,0.991,19,0.658,20,0.324,21,0.007,22,2.846,23,2.429,30,0.056,31,0.004,32,0.004,39,1.372,43,0.522,45,2.037,46,1.548,48,1.8,49,0.189,53,0.179,54,1.652,57,0.859,68,0.889,130,2.346,144,2.275,282,1.647,285,1.897,347,3.061,384,3.129,385,1.996,422,1.691,423,2.191,442,2.613,453,2.761,465,2.299,474,3.223,484,2.663,750,3.366,751,3.259,999,2.903,1071,2.625,1101,3.483,1185,2.299,1688,4.547,1690,6.182,1691,4.569,1692,5.307,1693,4.569,1695,4.891,1697,5.322,1699,4.569,1701,3.45,1702,5.008,1703,6.095,1704,5.681,1705,5.449,1707,5.008,1708,4.36,1709,3.45,1712,2.891,1715,3.754,1716,4.569,1782,3.45,2176,4.311,2245,3.45,2263,5.322,3019,4.569,3020,3.754,3021,4.216,3022,6.726,3023,8.85,3024,6.943,3025,4.216,3026,5.008,3027,4.216,3028,4.216,3029,4.216,3030,4.216,3031,4.216,3032,5.977,3033,6.943,3034,6.943,3035,5.977,3036,4.891,3037,3.45,3038,3.754,3039,3.754,3040,4.216,3041,7.974,3042,8.281,3043,4.216,3044,5.977,3045,4.216,3046,4.216,3047,4.216,3048,4.216,3049,4.216,3050,4.216,3051,4.216,3052,4.216,3053,4.216,3054,4.216,3055,4.216,3056,4.216,3057,4.216,3058,4.216,3059,4.216,3060,4.216,3061,4.216]],["title/classes/SchemaResponse.html",[53,0.199,1025,3.39]],["body/classes/SchemaResponse.html",[3,0.078,4,0.078,5,0.069,9,1.152,13,0.24,14,1.145,17,1.04,19,0.626,20,0.363,21,0.007,30,0.078,31,0.005,32,0.005,43,0.576,49,0.147,53,0.318,57,1.201,63,1.511,71,3.796,74,2.802,75,2.17,77,1.45,122,3.301,134,3.034,276,3.639,583,3.322,668,3.544,716,5.403,909,2.219,984,5.613,987,4.218,1025,5.403,1036,7.093,1149,5.725,1256,7.093,1640,5.251,3062,8.23,3063,5.897,3064,8.23,3065,8.23,3066,5.251,3067,5.897,3068,5.897,3069,5.251,3070,5.897,3071,5.897,3072,5.897,3073,5.897,3074,5.897,3075,5.897]],["title/entities/Session.html",[473,1.631,885,1.429]],["body/entities/Session.html",[3,0.034,4,0.034,5,0.031,9,0.347,12,2.247,13,0.106,14,0.759,16,1.808,17,1.064,19,0.621,20,0.357,21,0.007,26,2.395,27,1.953,30,0.069,31,0.003,32,0.003,43,0.571,49,0.188,53,0.111,63,1.498,68,1.991,101,2.16,107,1.755,118,1.786,120,0.653,123,2.078,124,1.417,128,2.097,140,2.854,143,2.337,144,1.941,145,3.451,146,4.237,156,1.829,167,3.707,168,2.27,262,2.016,318,1.995,323,1.277,362,1.92,375,1.338,382,4.197,431,3.143,447,3.182,473,3.038,477,1.92,518,2.854,523,1.907,548,2.324,592,3.132,593,2.877,594,2.885,597,2.345,607,1.095,608,2.27,610,3.041,616,2.443,621,2.615,639,3.451,652,3.26,659,4.273,681,1.786,690,3.26,698,4.623,824,1.304,868,5.483,869,3.26,881,3.968,885,1.968,887,1.236,891,2.592,892,2.666,893,3.76,894,3.025,896,3.451,897,1.97,898,5.069,900,5.126,904,1.471,905,2.665,906,1.873,908,1.873,909,2.229,913,3.025,915,2.345,916,2.345,917,1.175,918,1.873,919,0.925,920,1.175,921,3.66,941,2.202,963,3.611,968,2.138,988,5.218,999,1.269,1033,1.71,1064,4.737,1070,1.304,1086,4.273,1156,1.578,1162,2.726,1184,1.578,1208,4.538,1290,1.884,1300,1.522,1306,1.996,1307,1.884,1636,3.407,1684,2.137,1847,3.745,1849,4.623,1961,3.559,1986,3.336,2329,3.407,2451,5.294,2493,3.559,2520,3.707,2529,2.137,2554,4.623,2601,4.623,2607,4.623,2866,3.26,3076,1.996,3077,4.248,3078,5.191,3079,2.611,3080,2.611,3081,2.611,3082,4.163,3083,2.611,3084,2.611,3085,4.623,3086,2.611,3087,4.163,3088,2.611,3089,2.611,3090,2.611,3091,2.611,3092,2.611,3093,2.611,3094,2.611,3095,2.611,3096,5.191,3097,2.611,3098,2.611,3099,2.611,3100,2.611,3101,2.611,3102,4.847,3103,2.611,3104,2.611,3105,4.847,3106,2.611,3107,2.611,3108,2.611,3109,4.163,3110,4.163,3111,2.611,3112,2.611,3113,4.163,3114,2.611,3115,3.707,3116,3.003,3117,3.707,3118,1.79,3119,2.611,3120,2.611,3121,2.611]],["title/controllers/SessionController.html",[157,1.378,3122,3.592]],["body/controllers/SessionController.html",[3,0.063,4,0.063,5,0.056,13,0.195,16,2.096,17,0.845,19,0.509,20,0.29,21,0.007,27,1.799,30,0.063,31,0.004,32,0.004,39,1.498,43,0.503,45,1.826,46,1.388,48,1.944,49,0.228,50,0.805,53,0.203,54,1.653,63,1.32,101,1.948,112,2.258,120,1.197,157,1.402,159,1.66,168,3.558,318,3.388,354,2.794,384,1.877,385,2.664,401,2.456,406,3.003,418,3.968,422,1.353,423,2.059,425,2.448,431,3.169,473,3.359,524,3.942,533,2.529,543,4.706,544,2.693,642,2.263,676,3.813,685,2.616,1071,2.101,1083,3.35,1084,3.35,1090,4.819,1230,3.279,1236,2.889,1237,2.889,1238,3.003,1239,3.003,1242,2.889,1243,3.003,1244,2.889,1252,3.279,1253,3.656,1281,4.327,1309,3.279,1896,4.272,2158,3.913,2757,4.987,3118,4.472,3122,4.987,3123,4.258,3124,7.425,3125,7.976,3126,6.524,3127,6.524,3128,4.782,3129,4.782,3130,4.782,3131,4.782,3132,4.782,3133,4.782,3134,4.782,3135,5.754,3136,4.782,3137,4.782,3138,3.913,3139,3.656,3140,4.987,3141,4.782,3142,3.913,3143,4.782,3144,4.782,3145,4.782,3146,4.782,3147,4.782,3148,4.782,3149,4.782,3150,4.782,3151,4.782]],["title/interfaces/SessionLogContext.html",[0,1.403,2531,3.077]],["body/interfaces/SessionLogContext.html",[0,1.733,2,2.898,3,0.077,4,0.077,5,0.068,9,0.772,13,0.236,14,0.95,16,1.732,17,1.013,19,0.657,20,0.361,21,0.007,23,1.888,26,3.42,27,3.239,30,0.077,31,0.005,32,0.005,43,0.366,47,5.131,168,4.043,288,3.645,311,5.406,323,2.117,362,4.103,473,3.25,474,5.668,523,2.154,608,4.85,615,4.704,1064,4.855,1077,3.921,1816,6.067,2531,4.855,2537,6.58,2538,7.566,2704,6.602,2836,5.169,3152,5.348,3153,5.169,3154,5.169,3155,5.804,3156,7.414,3157,7.414,3158,7.414,3159,7.414]],["title/injectables/SessionLoggerInterceptor.html",[33,0.99,2018,2.951]],["body/injectables/SessionLoggerInterceptor.html",[3,0.047,4,0.047,5,0.041,9,0.923,12,2.253,13,0.143,14,0.672,17,0.713,20,0.304,21,0.007,23,0.897,28,2.303,30,0.047,31,0.004,32,0.004,33,1.105,35,1.325,39,1.204,42,5.006,43,0.438,45,1.541,46,1.297,47,4.886,48,1.566,49,0.201,50,0.593,53,0.149,54,1.438,107,1.335,130,1.382,144,2.713,168,3.785,203,2.932,204,1.154,217,2.212,218,2.306,260,2.819,271,2.541,282,1.969,285,1.585,288,4.359,311,4.66,314,3.918,317,1.984,318,1.353,319,4.669,321,2.414,323,1.29,326,3.136,353,1.353,354,1.325,360,1.984,375,2.014,384,3.473,422,1.964,423,2.67,425,2.281,434,2.541,441,1.412,463,2.212,473,2.874,489,2.882,595,2.36,647,3.434,685,3.12,1046,5.087,1047,4.789,1077,3.924,1078,5.612,1146,2.692,1155,2.541,1156,3.785,1173,3.783,1185,4.047,1352,2.86,1576,3.136,1821,4.008,2018,4.359,2051,3.136,2052,7.534,2055,2.882,2060,3.136,2195,4.758,2307,2.541,2310,4.008,2467,2.882,2521,4.669,2522,2.882,2536,5.305,2537,5.672,2602,5.578,2619,2.882,2765,2.414,2845,5.126,2850,5.679,2891,4.291,2908,4.669,2920,5.679,3116,2.541,3152,5.353,3160,3.136,3161,5.244,3162,5.244,3163,5.244,3164,5.244,3165,5.244,3166,5.244,3167,6.94,3168,3.522,3169,5.244,3170,5.244,3171,5.244,3172,5.244,3173,7.42,3174,5.244,3175,5.244,3176,3.522,3177,5.244,3178,6.264,3179,5.244,3180,6.94,3181,5.244,3182,3.522,3183,3.522,3184,3.522,3185,4.291,3186,3.522,3187,3.522,3188,3.136,3189,3.522,3190,3.522,3191,3.522,3192,3.522,3193,3.522,3194,3.522,3195,3.522,3196,3.522,3197,3.522,3198,3.522,3199,3.522,3200,3.522,3201,6.264,3202,3.522,3203,3.522,3204,6.94,3205,3.522,3206,3.522,3207,3.522,3208,3.522,3209,3.136,3210,3.522,3211,3.522,3212,3.522,3213,3.136,3214,3.136,3215,2.692,3216,3.136,3217,3.522,3218,3.522,3219,3.522,3220,3.522,3221,3.522,3222,3.522,3223,5.244,3224,3.522]],["title/injectables/SessionLoggerService.html",[33,0.99,2019,2.839]],["body/injectables/SessionLoggerService.html",[3,0.037,4,0.037,5,0.033,9,0.579,12,1.372,13,0.113,14,0.558,17,0.937,19,0.574,20,0.332,21,0.007,28,3.248,30,0.037,31,0.003,32,0.003,33,0.918,35,1.04,39,1,43,0.535,45,2.024,46,1.587,47,5.855,48,1.858,49,0.153,50,0.465,53,0.117,54,1.705,107,1.109,203,2.748,204,0.906,217,1.736,218,1.81,260,4.04,271,1.994,282,1.175,285,1.244,288,4.438,314,2.893,354,2.027,362,3.637,382,3.233,422,1.73,423,2.418,425,1.277,473,3.154,488,1.512,518,4.192,523,0.729,594,1.673,616,2.23,620,1.785,669,4.798,685,2.668,696,3.878,750,4.546,897,1.308,1046,2.985,1077,3.233,1078,5.527,1155,3.141,1156,4.629,1158,3.141,1162,1.81,1173,5.527,1208,4.019,1384,5.003,1821,4.674,1828,3.878,2019,3.694,2195,2.985,2289,5.285,2295,2.985,2307,1.994,2310,6.906,2329,5.443,2522,3.563,2531,6.178,2538,6.051,2539,2.461,2845,4.409,2850,3.563,2891,3.563,3085,5.923,3116,1.994,3152,6.2,3213,3.878,3214,7.812,3215,3.329,3216,3.878,3225,2.461,3226,6.114,3227,4.355,3228,4.355,3229,5.388,3230,5.388,3231,4.355,3232,5.388,3233,4.355,3234,5.388,3235,5.388,3236,5.388,3237,4.355,3238,6.114,3239,2.764,3240,4.355,3241,4.355,3242,9.608,3243,2.764,3244,2.764,3245,6.652,3246,2.764,3247,2.764,3248,2.764,3249,4.355,3250,2.764,3251,5.388,3252,2.764,3253,2.764,3254,4.355,3255,2.764,3256,2.764,3257,2.764,3258,2.764,3259,2.764,3260,2.764,3261,2.764,3262,4.355,3263,2.764,3264,2.764,3265,2.764,3266,8.071,3267,8.071,3268,2.764,3269,7.662,3270,2.764,3271,2.764,3272,2.764,3273,2.764,3274,2.764,3275,2.764,3276,2.764,3277,2.764,3278,2.764,3279,2.764,3280,4.355]],["title/modules/SessionModule.html",[172,1.429,192,2.839]],["body/modules/SessionModule.html",[3,0.074,4,0.074,5,0.066,9,0.746,21,0.007,30,0.096,31,0.005,32,0.005,46,1.048,49,0.232,50,0.944,53,0.238,159,2.517,172,2.584,174,2.406,175,2.724,176,2.88,177,2.88,178,2.654,179,3.905,180,3.905,192,5.764,196,3.724,197,2.88,198,2.88,201,3.185,213,4.084,239,4.287,262,2.469,282,1.223,318,3.088,431,3.523,473,1.947,491,4.589,492,4.589,532,5.903,538,3.268,539,2.299,540,6.458,541,3.673,542,3.845,543,4.045,544,3.158,545,4.589,577,4.994,578,4.589,579,2.351,676,4.928,1070,4.012,1439,4.972,2403,4.045,2560,6.144,3118,6.033,3122,6.144,3139,4.287,3142,4.589,3281,4.994,3282,4.994,3283,5.608,3284,4.994,3285,4.589,3286,5.608,3287,4.589,3288,4.994,3289,4.994,3290,4.994,3291,5.608,3292,5.608,3293,4.994,3294,4.994]],["title/injectables/SessionPipe.html",[33,0.99,3140,3.592]],["body/injectables/SessionPipe.html",[3,0.082,4,0.082,5,0.073,12,1.571,13,0.251,16,1.8,17,0.877,19,0.576,20,0.301,21,0.007,30,0.082,31,0.005,32,0.005,33,1.625,35,2.322,39,1.77,43,0.486,45,2.067,46,1.441,48,1.393,49,0.21,50,1.039,53,0.262,54,1.597,130,2.422,157,1.81,282,1.346,311,5.278,347,2.807,385,2.574,422,1.746,441,3.091,442,2.432,473,3.208,484,2.061,587,5.496,676,4.745,685,2.475,803,4.491,885,1.877,1248,2.588,3139,4.718,3140,5.892,3142,5.051,3295,5.496,3296,7.707,3297,6.172,3298,6.172,3299,7.707,3300,6.172,3301,8.404,3302,7.707,3303,6.172,3304,6.172]],["title/injectables/SessionService.html",[33,0.99,676,2.413]],["body/injectables/SessionService.html",[3,0.04,4,0.04,5,0.035,13,0.122,16,1.929,17,0.897,19,0.605,20,0.308,21,0.007,30,0.04,31,0.003,32,0.003,33,0.978,35,1.128,39,1.066,43,0.53,45,1.937,46,1.472,48,2.027,49,0.202,50,0.505,53,0.127,54,1.632,62,2.809,130,1.177,135,1.465,165,4.611,178,2.196,203,2.595,204,0.983,209,2.454,262,1.933,282,1.834,323,1.988,347,2.851,353,1.152,361,1.54,385,2.134,422,1.313,423,2.017,425,2.422,430,2.163,431,4.147,432,2.67,433,4.133,442,1.465,473,3.193,478,4.527,484,2.308,518,3.892,523,1.685,524,3.862,539,1.23,541,1.964,578,2.454,585,5.663,590,2.454,620,2.328,676,2.383,685,1.861,695,3.548,711,4.096,751,2.531,780,1.883,782,2.915,800,3.548,813,2.292,869,2.915,891,1.497,892,1.54,897,1.419,919,1.062,1071,2.039,1073,3.182,1076,3.105,1083,3.282,1095,3.182,1104,1.635,1162,3.039,1311,2.614,1352,3.485,1358,3.039,1419,3.348,1853,3.039,1902,5.011,2157,3.798,2289,1.964,2322,2.292,2403,3.348,2757,3.548,2777,2.454,2778,2.67,2866,2.915,3102,5.657,3105,4.646,3116,2.163,3118,5.543,3139,2.292,3287,3.798,3293,6.155,3294,6.155,3305,2.67,3306,6.391,3307,4.641,3308,6.391,3309,2.999,3310,7.623,3311,5.678,3312,5.23,3313,2.999,3314,4.641,3315,4.641,3316,6.391,3317,2.999,3318,4.641,3319,6.391,3320,2.999,3321,4.641,3322,2.999,3323,4.641,3324,2.999,3325,2.999,3326,4.641,3327,6.391,3328,2.999,3329,4.641,3330,2.999,3331,4.641,3332,6.391,3333,4.641,3334,4.641,3335,4.641,3336,4.133,3337,2.999,3338,4.641,3339,2.999,3340,4.641,3341,2.999,3342,4.641,3343,4.641,3344,2.454,3345,2.999,3346,2.292,3347,4.641,3348,2.999,3349,2.999,3350,2.999,3351,2.999,3352,2.999,3353,4.641,3354,4.641,3355,2.999,3356,4.641,3357,2.999,3358,2.999,3359,4.641,3360,2.999,3361,2.999,3362,2.999,3363,2.999,3364,2.999,3365,4.641,3366,4.641,3367,2.999,3368,4.641,3369,4.641,3370,5.678,3371,4.641,3372,2.999,3373,4.646,3374,4.641,3375,2.999,3376,2.999,3377,5.678,3378,4.641,3379,2.999,3380,2.999,3381,2.999,3382,2.999,3383,2.999,3384,2.999,3385,4.641,3386,2.999,3387,2.999,3388,2.999]],["title/controllers/StatusListController.html",[157,1.378,3389,3.592]],["body/controllers/StatusListController.html",[3,0.084,4,0.084,5,0.075,13,0.26,17,0.727,19,0.585,20,0.334,21,0.007,30,0.084,31,0.005,32,0.005,39,1.807,43,0.403,45,1.571,46,1.194,48,1.777,49,0.213,50,1.075,53,0.271,54,1.323,63,1.057,68,1.346,114,3.188,120,1.598,157,1.873,159,2.217,163,4.011,323,1.936,406,4.011,420,4.182,425,1.873,431,4.146,544,4.434,642,3.022,1197,4.807,1242,5.156,1248,2.678,1281,4.973,1309,4.378,3389,6.018,3390,5.155,3391,5.687,3392,6.386,3393,7.01,3394,5.687,3395,6.386,3396,6.386,3397,7.872,3398,6.386,3399,6.386,3400,6.386,3401,6.386,3402,5.687,3403,6.386,3404,6.386]],["title/entities/StatusListEntity.html",[885,1.429,3405,3.39]],["body/entities/StatusListEntity.html",[3,0.065,4,0.065,5,0.058,9,0.659,13,0.202,14,0.856,16,1.561,17,0.761,19,0.555,20,0.34,21,0.007,30,0.065,31,0.005,32,0.005,43,0.549,49,0.189,53,0.21,63,1.44,68,1.835,89,3.431,124,2.275,276,3.246,323,1.859,352,4.037,354,2.514,431,4.652,443,4.581,523,2.417,548,3.176,579,3.65,597,3.763,824,4.218,885,2.461,887,2.344,898,4.376,900,3.644,902,2.935,904,2.79,905,3.642,906,3.007,908,3.007,909,2.514,917,2.229,918,3.007,919,1.754,920,2.229,921,3.082,962,2.887,963,3.336,988,4.82,1128,5.793,1197,5.339,1300,2.887,1304,3.787,3215,6.459,3390,5.827,3405,4.82,3406,7.281,3407,4.411,3408,7.524,3409,7.56,3410,4.954,3411,4.954,3412,4.954,3413,4.954,3414,4.954,3415,5.95,3416,4.954,3417,4.954,3418,6.682]],["title/modules/StatusListModule.html",[172,1.429,532,3.077]],["body/modules/StatusListModule.html",[3,0.082,4,0.082,5,0.073,21,0.007,30,0.082,31,0.005,32,0.005,49,0.235,50,1.045,53,0.263,159,2.685,172,2.562,174,2.663,175,3.015,176,3.187,177,3.187,178,2.937,179,4.093,180,4.093,185,5.046,196,3.972,197,3.187,198,3.187,201,3.397,225,3.898,431,3.757,532,6.264,538,3.617,539,2.545,544,3.496,1281,5.67,1309,4.255,3389,6.441,3390,4.065,3405,5.579,3419,5.527,3420,5.527,3421,6.207,3422,5.527,3423,6.207,3424,6.887,3425,5.527,3426,4.477,3427,5.527,3428,6.207,3429,6.207]],["title/injectables/StatusListService.html",[33,0.99,1281,2.738]],["body/injectables/StatusListService.html",[3,0.036,4,0.036,5,0.095,9,0.577,13,0.219,16,1.647,17,0.871,19,0.611,20,0.299,21,0.007,30,0.036,31,0.003,32,0.003,33,0.914,35,1.035,39,0.996,43,0.482,45,1.881,46,1.43,48,1.777,49,0.209,50,0.463,53,0.117,54,1.113,95,1.237,107,1.367,112,2.394,114,2.165,203,2.4,204,0.901,220,3.245,221,1.301,276,2.107,282,1.928,286,1.079,311,2.724,323,2.233,347,2.899,385,1.448,422,1.227,423,2.329,425,1.946,431,4.581,441,1.739,442,2.484,473,2.733,477,2.001,478,4.346,484,2.745,488,1.506,496,3.373,510,1.549,513,3.129,516,1.885,520,4.783,523,2.016,524,2.621,527,1.603,539,1.127,544,4.433,579,2.956,616,1.695,673,1.454,736,1.549,737,3.321,751,1.5,760,2.528,767,1.454,780,1.727,782,3.373,803,1.603,824,3.52,837,1.373,915,1.549,919,0.974,999,1.336,1056,3.549,1071,1.905,1073,2.974,1074,1.603,1076,3.585,1095,2.974,1101,2.528,1103,4.398,1104,1.5,1125,2.724,1128,3.682,1197,5.265,1242,2.621,1281,2.528,1290,4.787,1300,2.528,1303,2.449,1304,2.102,1333,1.885,1352,3.845,1353,6.259,1358,3.517,1366,1.984,1367,2.102,1455,3.316,1464,3.549,1478,2.621,1482,3.129,1487,1.984,1649,3.549,1662,3.549,1716,3.316,1853,1.801,1986,1.549,2121,3.549,2158,2.25,2289,1.801,2406,2.25,2408,2.102,2579,2.25,2757,4.661,2777,3.549,2871,6.278,2920,3.549,3135,4.398,3215,5.847,3390,5.155,3393,3.862,3394,3.862,3405,4.398,3408,2.449,3415,4.783,3424,3.862,3425,2.449,3426,1.984,3427,2.449,3430,2.449,3431,5.371,3432,4.337,3433,4.337,3434,4.337,3435,5.371,3436,5.371,3437,2.75,3438,2.75,3439,2.75,3440,4.337,3441,4.337,3442,2.75,3443,2.75,3444,2.75,3445,2.75,3446,4.337,3447,6.097,3448,4.337,3449,4.337,3450,4.337,3451,2.75,3452,4.337,3453,2.75,3454,4.337,3455,2.75,3456,4.337,3457,2.75,3458,2.75,3459,2.75,3460,2.75,3461,2.75,3462,2.75,3463,2.75,3464,2.75,3465,2.75,3466,2.75,3467,2.75,3468,2.75,3469,2.75,3470,4.337,3471,2.75,3472,2.75,3473,2.75,3474,2.75,3475,6.097,3476,4.337,3477,4.337,3478,2.75,3479,4.337,3480,2.75,3481,2.75,3482,2.75,3483,4.337,3484,2.75,3485,6.636,3486,2.75,3487,2.75,3488,2.75,3489,2.75,3490,2.75,3491,2.75,3492,2.75,3493,4.337,3494,4.337,3495,2.75,3496,2.75,3497,2.75]],["title/entities/StatusMapping.html",[885,1.429,3426,3.39]],["body/entities/StatusMapping.html",[3,0.072,4,0.072,5,0.064,13,0.343,14,0.914,19,0.634,20,0.372,21,0.007,30,0.072,31,0.005,32,0.005,43,0.564,49,0.178,53,0.232,63,1.481,68,2.015,311,4.987,323,1.953,523,2.302,548,3.303,579,2.992,885,2.17,887,2.588,902,4.144,904,3.08,905,3.787,906,3.211,908,3.211,909,2.685,917,4.029,918,3.211,919,1.936,920,2.461,1197,4.473,1290,5.729,3390,5.972,3406,7.462,3426,5.147,3498,4.87,3499,8.73,3500,9.247,3501,5.469,3502,7.135,3503,5.469,3504,5.469,3505,5.469,3506,5.469,3507,5.469]],["title/classes/StatusUpdateDto.html",[53,0.199,3135,3.39]],["body/classes/StatusUpdateDto.html",[3,0.079,4,0.079,5,0.071,13,0.245,14,0.971,16,2.037,17,0.993,18,7.766,19,0.598,20,0.325,21,0.007,30,0.079,31,0.005,32,0.005,43,0.524,49,0.15,53,0.322,57,1.225,63,1.374,73,2.311,74,2.582,75,2.299,77,1.479,101,2.265,107,1.931,147,3.786,311,5.216,318,2.914,431,4.368,473,3.028,579,3.18,616,2.752,860,4.011,931,4.419,976,4.922,1125,4.763,1290,5.992,1853,5.711,3135,5.471,3138,7.137,3390,5.711,3508,4.922,3509,6.015,3510,6.015,3511,6.015,3512,6.015,3513,6.015]],["title/controllers/StorageController.html",[157,1.378,3514,3.592]],["body/controllers/StorageController.html",[3,0.07,4,0.07,5,0.105,9,0.931,13,0.216,17,0.797,19,0.537,20,0.338,21,0.007,23,1.782,30,0.07,31,0.005,32,0.005,39,1.607,43,0.441,45,1.721,46,1.308,48,1.767,49,0.226,50,0.894,53,0.225,54,1.45,63,1.158,68,1.119,120,1.329,157,2.296,159,1.844,206,4.346,207,2.991,318,3.008,330,6.406,354,2.634,401,3.594,403,5.049,418,3.745,422,1.503,425,2.44,442,1.676,488,1.844,523,1.845,533,2.809,595,2.39,642,2.513,1131,5.127,1197,3.942,1236,3.209,1237,3.209,1238,3.336,1239,3.336,1243,3.336,1244,3.209,1248,2.227,1707,3.831,1723,5.35,1728,5.45,1745,6.971,1751,7.701,2462,4.346,3209,4.729,3514,5.35,3515,4.729,3516,6.999,3517,5.311,3518,5.311,3519,5.311,3520,5.311,3521,5.311,3522,5.311,3523,6.999,3524,5.311,3525,5.311,3526,6.999,3527,6.999,3528,5.311,3529,6.999,3530,5.311,3531,5.311,3532,5.311,3533,5.311,3534,4.729,3535,5.311,3536,5.311,3537,5.311,3538,5.311,3539,5.311,3540,5.311,3541,5.311,3542,5.311,3543,5.311,3544,5.311,3545,5.311,3546,5.311]],["title/modules/StorageModule.html",[172,1.429,193,3.39]],["body/modules/StorageModule.html",[3,0.067,4,0.067,5,0.06,20,0.198,21,0.007,30,0.09,31,0.005,32,0.005,39,1.162,43,0.319,48,1.142,49,0.236,50,0.852,53,0.215,54,1.583,101,1.511,159,1.757,172,2.324,174,2.171,179,2.458,180,2.458,193,5.513,201,2.223,203,2.602,204,1.658,212,4.889,213,3.817,220,3.057,221,2.394,241,3.868,266,4.14,280,3.469,281,3.868,282,1.478,358,5.181,360,2.85,442,2.411,538,2.949,539,2.074,1558,3.868,1559,6.139,1682,3.65,1688,4.438,1720,5.842,1721,4.889,1728,5.004,1757,4.506,2183,6.805,2185,6.805,2200,4.506,2229,5.181,2245,4.14,3019,5.181,3022,6.035,3026,6.711,3036,4.14,3037,4.14,3514,5.181,3534,4.506,3547,3.868,3548,5.06,3549,5.06,3550,5.06,3551,5.06,3552,6.253,3553,4.506,3554,4.506,3555,4.506,3556,4.506,3557,7.966,3558,4.506,3559,4.506,3560,4.506,3561,4.506,3562,4.506,3563,6.035,3564,6.035,3565,4.506,3566,6.035,3567,4.506,3568,4.506,3569,5.06,3570,5.06,3571,5.06,3572,5.06,3573,5.06,3574,5.06,3575,5.06,3576,7.642,3577,5.06,3578,5.06,3579,5.06,3580,5.06,3581,5.06]],["title/controllers/TenantController.html",[157,1.378,536,3.592]],["body/controllers/TenantController.html",[3,0.068,4,0.068,5,0.06,9,1.024,13,0.209,16,2.13,17,0.779,19,0.527,20,0.267,21,0.007,30,0.068,31,0.005,32,0.005,34,3.922,39,1.57,43,0.431,45,1.682,46,1.279,48,1.737,49,0.22,50,0.864,53,0.218,54,1.417,62,2.957,63,1.132,120,1.284,157,2.257,159,1.781,318,3.679,354,2.574,384,2.685,401,3.952,409,4.568,416,4.833,417,4.198,418,4.04,419,3.36,425,2.257,441,2.743,442,2.428,480,5.882,523,2.497,536,5.229,612,3.36,642,2.428,685,2.057,760,3.986,863,3.922,974,6.274,1071,3.756,1083,3.513,1084,3.513,1230,3.517,1236,3.1,1237,3.1,1242,4.133,1244,3.1,1248,2.151,1252,3.517,1445,4.198,1478,4.959,1896,4.48,3582,4.568,3583,6.091,3584,6.091,3585,5.13,3586,5.13,3587,5.13,3588,5.13,3589,5.13,3590,5.13,3591,5.13,3592,5.13,3593,5.13,3594,5.597,3595,5.13,3596,5.13,3597,6.84,3598,5.13,3599,5.13,3600,5.13,3601,5.13,3602,5.13]],["title/entities/TenantEntity.html",[548,1.844,885,1.429]],["body/entities/TenantEntity.html",[3,0.091,4,0.091,5,0.082,9,0.921,13,0.282,14,1.059,16,2.064,19,0.566,20,0.271,21,0.007,26,3.812,27,3.11,30,0.091,31,0.006,32,0.006,43,0.436,49,0.173,53,0.293,63,1.145,523,2.414,548,3.244,885,2.514,887,3.274,919,2.45,1184,4.994,1455,6.318,1684,7.232,3603,6.162,3604,6.92]],["title/injectables/TenantService.html",[33,0.99,416,2.951]],["body/injectables/TenantService.html",[0,1.403,3,0.04,4,0.04,5,0.036,9,0.405,13,0.124,14,0.602,16,2.05,17,0.837,19,0.629,20,0.3,21,0.007,30,0.062,31,0.003,32,0.003,33,0.99,35,1.146,39,1.078,43,0.532,45,1.809,46,1.375,48,1.872,49,0.222,50,0.513,53,0.129,54,1.524,68,0.642,101,1.924,107,1.641,109,2.114,112,0.926,130,1.195,141,3.076,165,3.388,203,2.504,204,0.998,262,1.599,282,1.518,314,2.223,318,3.244,323,1.998,347,2.959,353,1.805,361,1.564,362,2.167,374,2.95,416,2.95,418,2.9,419,1.995,422,1.329,423,2.861,425,1.89,441,1.221,442,0.961,463,2.95,484,2.77,488,1.99,523,2.452,539,1.249,541,1.995,542,2.088,543,2.197,544,1.715,548,1.195,549,2.492,571,2.328,580,6.581,668,2.223,736,1.715,737,3.45,751,1.661,767,1.611,887,1.441,902,2.063,1064,1.995,1071,2.831,1076,3.131,1083,2.412,1084,2.412,1104,1.661,1106,2.197,1108,2.088,1112,2.197,1113,2.197,1118,3.388,1119,3.388,1120,2.197,1121,2.197,1122,2.197,1123,2.197,1130,2.197,1131,1.995,1156,2.838,1281,4.467,1309,2.088,1426,4.814,1478,3.893,1493,2.088,1728,5.02,1737,2.492,1896,3.076,1902,5.043,1971,4.814,1972,2.197,2195,2.088,2322,2.328,2515,4.814,2528,2.492,2530,2.492,2618,3.844,2735,3.844,2846,6.019,2894,2.492,2957,6.788,3312,5.273,3344,2.492,3346,2.328,3373,3.844,3583,4.183,3584,4.183,3594,2.492,3605,2.492,3606,4.697,3607,5.738,3608,5.738,3609,4.697,3610,4.697,3611,5.105,3612,5.105,3613,4.697,3614,4.183,3615,3.046,3616,4.183,3617,4.183,3618,3.046,3619,4.183,3620,3.046,3621,4.183,3622,3.046,3623,3.046,3624,3.046,3625,3.046,3626,4.183,3627,3.046,3628,3.591,3629,4.183,3630,4.183,3631,4.183,3632,4.183,3633,4.183,3634,5.738,3635,3.046,3636,5.105,3637,4.183,3638,2.712,3639,2.712,3640,2.712,3641,4.183,3642,2.712,3643,2.712,3644,2.712,3645,5.105,3646,2.712,3647,2.712,3648,2.712,3649,4.183,3650,4.183,3651,2.712,3652,2.712,3653,2.712,3654,2.712,3655,2.712,3656,2.712,3657,2.712,3658,2.712,3659,2.712]],["title/interfaces/Tenants.html",[0,1.403,580,3.39]],["body/interfaces/Tenants.html",[0,1.669,2,1.917,3,0.051,4,0.051,5,0.045,13,0.156,14,0.716,16,2.103,19,0.617,20,0.218,21,0.007,30,0.074,31,0.004,32,0.004,33,1.178,48,0.867,49,0.231,50,0.647,53,0.163,54,1.663,68,0.809,101,1.669,107,1.423,109,1.728,130,1.507,141,2.515,165,2.77,203,2.243,204,1.258,262,1.307,282,1.677,314,1.817,318,3.182,323,1.973,347,2.568,353,1.475,361,1.972,362,1.771,374,2.412,416,2.412,418,2.515,419,2.515,422,1.086,423,2.842,425,2.122,441,1.54,442,1.212,463,4.829,484,2.935,488,1.94,523,2.449,539,1.574,541,2.515,542,2.633,543,2.77,544,2.163,548,1.507,549,3.142,571,2.935,580,6.425,668,1.817,737,2.965,767,2.031,887,1.817,902,1.687,1064,2.515,1071,2.894,1076,2.715,1083,1.972,1084,1.972,1104,2.094,1106,2.77,1108,2.633,1112,2.77,1113,2.77,1118,4.031,1119,4.031,1120,2.77,1121,2.77,1122,2.77,1123,2.77,1130,2.77,1131,2.515,1156,2.32,1281,3.839,1309,2.633,1426,4.138,1478,3.981,1493,2.633,1728,4.315,1737,3.142,1896,3.66,1902,4.517,1971,4.138,1972,2.77,2195,2.633,2322,2.935,2515,4.138,2528,3.142,2530,3.142,2618,3.142,2735,3.142,2846,5.391,2894,3.142,2957,6.566,3312,4.573,3344,3.142,3346,2.935,3373,4.573,3594,3.142,3605,3.142,3607,3.419,3608,3.419,3611,3.419,3612,3.419,3614,3.419,3616,3.419,3617,3.419,3619,3.419,3621,3.419,3626,3.419,3628,2.935,3629,3.419,3630,3.419,3631,3.419,3632,3.419,3633,3.419,3634,4.976,3636,4.976,3637,4.976,3638,3.419,3639,3.419,3640,3.419,3641,4.976,3642,3.419,3643,3.419,3644,3.419,3645,5.867,3646,3.419,3647,3.419,3648,3.419,3649,4.976,3650,4.976,3651,3.419,3652,3.419,3653,3.419,3654,3.419,3655,3.419,3656,3.419,3657,3.419,3658,3.419,3659,3.419]],["title/interfaces/TokenPayload.html",[0,1.403,418,2.115]],["body/interfaces/TokenPayload.html",[0,1.948,2,3.257,3,0.086,4,0.086,5,0.077,9,0.868,11,3.35,12,2.031,13,0.266,14,1.022,19,0.591,20,0.312,21,0.007,28,3.784,30,0.105,31,0.005,32,0.005,42,5.754,49,0.163,50,1.099,54,1.352,62,3.065,101,1.948,282,1.74,318,3.065,354,3.377,361,3.35,398,4.473,418,3.877,477,3.01,478,5.878,480,7.037,595,2.936,751,3.558,840,4.273,909,2.455,3660,5.339,3661,7.103,3662,5.81,3663,5.81,3664,5.81,3665,6.524]],["title/classes/TokenRequestDto.html",[53,0.199,2338,3.39]],["body/classes/TokenRequestDto.html",[3,0.078,4,0.078,5,0.069,9,1.15,11,3.837,12,1.903,13,0.239,14,0.957,16,1.373,17,0.851,19,0.625,20,0.349,21,0.007,27,2.812,30,0.078,31,0.005,32,0.005,43,0.545,49,0.187,53,0.317,57,1.197,63,1.431,73,2.258,75,2.28,77,1.445,118,3.83,120,1.47,123,3.73,134,2.755,285,3.363,361,4.686,372,6.146,390,4.029,398,5.633,399,6.724,427,7.317,429,7.317,449,5.123,463,5.16,706,3.55,715,6.825,718,5.233,724,5.233,999,3.63,2338,5.391,2698,5.233,3666,7.306,3667,7.7,3668,7.473,3669,5.876,3670,5.876,3671,5.876]],["title/classes/TokenResponse.html",[53,0.199,376,3.592]],["body/classes/TokenResponse.html",[3,0.091,4,0.091,5,0.081,13,0.281,14,1.057,17,0.94,19,0.627,20,0.345,21,0.006,30,0.091,31,0.006,32,0.006,43,0.577,53,0.293,57,1.406,376,6.31,434,6.37,436,6.75,437,5.278,438,6.053,489,7.225,579,3.461,583,3.889,2209,6.149,2421,5.651,3672,8.327,3673,6.905,3674,6.905]],["title/classes/TokenResponseDto.html",[53,0.199,2347,3.39]],["body/classes/TokenResponseDto.html",[3,0.079,4,0.079,5,0.071,9,1.16,11,4.714,13,0.245,14,0.971,17,0.863,19,0.598,20,0.352,21,0.007,30,0.079,31,0.005,32,0.005,43,0.55,49,0.15,53,0.255,57,1.225,63,1.443,118,3.857,120,1.505,134,2.796,285,3.413,354,3.547,372,6.174,390,4.124,434,5.992,436,6.349,437,5.797,438,5.694,493,4.419,579,3.18,583,3.388,715,6.873,959,4.136,999,4.237,2347,5.471,2402,5.356,3066,5.356,3069,5.356,3666,7.357,3667,7.766,3675,6.015,3676,6.015,3677,6.015]],["title/classes/TrustedAuthorityQuery.html",[53,0.199,946,2.839]],["body/classes/TrustedAuthorityQuery.html",[3,0.05,4,0.05,5,0.045,7,1.66,9,0.735,12,2.151,13,0.154,14,0.707,16,1.677,17,0.43,19,0.631,20,0.362,21,0.007,25,2.426,26,1.743,27,1.422,28,2.426,30,0.109,31,0.004,32,0.004,43,0.348,49,0.206,53,0.365,57,0.77,62,2.759,63,0.914,68,1.91,70,1.171,71,3.975,73,1.452,74,3.022,75,2.309,76,2.752,77,0.929,78,1.886,79,3.259,80,3.259,89,3.923,95,2.485,101,1.128,107,1.406,118,2.37,120,0.946,122,2.215,124,1.286,128,1.956,134,1.393,143,2.358,144,1.238,221,1.788,262,1.286,286,2.818,299,2.061,323,0.929,353,1.452,375,1.215,493,2.202,523,1.721,548,2.562,579,1.584,592,4.22,593,1.836,594,2.508,595,1.7,597,2.128,607,1.584,616,1.743,639,2.202,668,1.788,672,4.339,681,1.621,842,2.128,848,2.128,860,1.998,885,1.985,891,1.886,892,1.94,893,3.012,894,3.219,896,3.219,897,1.788,900,3.916,902,2.426,905,2.485,906,1.7,908,1.7,909,1.422,913,3.219,915,2.128,916,2.128,917,1.7,918,2.485,919,1.338,920,1.7,921,3.011,922,4.1,923,2.202,928,3.012,929,3.944,930,4.275,931,3.219,932,3.677,933,2.475,934,4.275,935,2.373,936,3.944,937,2.475,938,4.703,939,4.703,940,4.703,941,4.04,942,4.184,943,4.275,944,2.475,945,2.475,946,4.339,947,2.475,948,3.617,949,3.617,950,2.475,951,2.475,952,2.475,953,2.475,954,3.617,955,4.339,956,2.475,957,1.998,958,2.475,959,3.012,960,2.475,961,2.475,962,2.202,963,3.585,964,2.283,965,2.202,966,2.128,967,2.283,968,1.94,969,2.475,3678,3.779,3679,3.779,3680,3.779,3681,3.779]],["title/classes/UpdateKeyDto.html",[53,0.199,2153,3.592]],["body/classes/UpdateKeyDto.html",[3,0.095,4,0.095,5,0.085,21,0.007,23,1.835,30,0.095,31,0.006,32,0.006,37,4.006,49,0.212,53,0.306,57,1.468,120,1.803,282,1.846,1052,4.94,1404,5.544,1474,4.525,1498,5.508,2128,4.94,2153,6.471,3508,5.896,3682,8.465]],["title/classes/VCT.html",[53,0.199,986,3.222]],["body/classes/VCT.html",[3,0.076,4,0.076,5,0.068,9,1.081,13,0.234,14,0.943,17,1.106,19,0.666,20,0.361,21,0.007,30,0.076,31,0.005,32,0.005,37,3.847,43,0.581,46,1.52,49,0.184,53,0.312,57,1.17,63,1.526,74,3.14,75,2.432,77,1.413,118,3.16,120,1.437,134,2.117,285,2.585,716,6.544,986,6.078,1256,7.141,3683,5.115,3684,8.129,3685,8.129,3686,8.129,3687,5.744,3688,5.744,3689,5.744,3690,5.744,3691,5.744,3692,5.744,3693,5.744,3694,5.744,3695,5.744,3696,7.365]],["title/modules/VerifierModule.html",[172,1.429,194,3.39]],["body/modules/VerifierModule.html",[3,0.082,4,0.082,5,0.073,21,0.007,30,0.082,31,0.005,32,0.005,49,0.235,50,1.047,53,0.264,172,2.565,174,2.668,175,3.021,176,3.193,177,3.193,178,2.942,179,3.021,180,3.021,185,5.048,191,5.814,192,5.593,194,7.073,196,3.976,197,3.193,198,3.193,201,3.401,225,3.905,238,4.753,240,4.486,2017,6.062,2023,5.309,2024,3.502,2509,6.062,2510,5.537,2711,5.537,3697,6.218,3698,6.218,3699,6.218]],["title/classes/WebHookAuthConfig.html",[53,0.199,131,3.077]],["body/classes/WebHookAuthConfig.html",[3,0.065,4,0.065,5,0.058,13,0.201,14,0.855,17,0.563,19,0.518,20,0.373,21,0.007,23,2.059,30,0.115,31,0.005,32,0.005,43,0.312,46,1.412,49,0.189,53,0.377,57,1.008,63,0.818,68,1.043,70,1.532,73,1.901,75,2.294,76,2.229,77,1.217,84,2.565,105,4.947,106,3.239,107,2.15,108,5.545,109,4.07,110,4.745,111,3.568,112,2.46,114,3.332,115,3.428,117,3.239,118,2.864,119,3.239,120,1.238,121,2.786,122,2.677,123,3.332,124,2.875,125,4.564,126,3.391,127,4.192,128,2.99,129,5.297,130,2.62,131,5.531,132,3.568,133,4.815,134,1.823,135,1.561,136,4.947,137,3.568,138,4.815,139,4.815,140,3.391,141,3.239,142,3.568,143,1.787,144,2.187,145,2.882,146,3.239,147,2.469,148,3.239,149,4.371,150,3.568,151,3.568,152,3.239,153,2.882,154,3.239,155,3.239,156,2.173,3700,4.947]],["title/classes/WebHookAuthConfigHeader.html",[53,0.199,129,3.077]],["body/classes/WebHookAuthConfigHeader.html",[3,0.063,4,0.063,5,0.056,9,0.633,13,0.194,14,0.832,17,0.541,19,0.507,20,0.376,21,0.007,23,2.121,30,0.114,31,0.004,32,0.004,43,0.41,46,1.384,49,0.185,53,0.373,57,0.968,63,1.075,68,1.002,70,1.473,73,1.827,75,2.267,76,2.17,77,1.169,84,2.497,105,5.211,106,3.114,107,2.241,108,5.711,109,4.177,110,4.649,111,3.43,112,2.42,114,3.244,115,3.337,117,3.114,118,2.788,119,3.114,120,1.19,121,2.678,122,2.606,123,3.244,124,2.928,125,3.926,126,3.26,127,4.649,128,3.117,129,5.456,130,2.905,131,5.456,132,3.43,133,5.34,134,2.395,135,2.336,136,4.848,137,3.43,138,4.688,139,3.43,140,3.26,141,3.114,142,3.43,143,1.718,144,2.129,145,2.771,146,3.114,147,2.374,148,3.114,149,4.255,150,3.43,151,3.43,152,3.114,153,2.771,154,3.114,155,3.114,156,2.089,3701,4.755,3702,4.755,3703,4.234,3704,4.755]],["title/classes/WebHookAuthConfigNone.html",[53,0.199,136,3.077]],["body/classes/WebHookAuthConfigNone.html",[3,0.065,4,0.065,5,0.058,13,0.2,14,0.85,17,0.558,19,0.515,20,0.374,21,0.007,23,2.052,30,0.115,31,0.004,32,0.004,43,0.309,46,1.406,49,0.188,53,0.376,57,0.999,63,0.811,68,1.033,70,1.519,73,1.884,75,2.288,76,2.216,77,1.206,84,2.549,105,4.925,106,3.211,107,2.144,108,5.524,109,4.117,110,4.723,111,3.537,112,2.451,114,3.312,115,3.407,117,3.211,118,2.847,119,3.211,120,1.227,121,2.761,122,2.661,123,3.312,124,2.955,125,4.009,126,3.361,127,4.167,128,3.073,129,5.277,130,2.951,131,5.514,132,3.537,133,4.786,134,1.807,135,1.547,136,5.277,137,3.537,138,5.425,139,3.537,140,3.361,141,3.211,142,3.537,143,1.771,144,2.174,145,2.857,146,3.211,147,2.447,148,3.211,149,4.345,150,3.537,151,3.537,152,3.211,153,2.857,154,3.211,155,3.211,156,2.154,3703,4.366,3705,4.903]],["title/classes/WebhookConfig.html",[53,0.199,143,1.697]],["body/classes/WebhookConfig.html",[3,0.062,4,0.062,5,0.055,9,0.624,13,0.191,14,0.825,17,0.901,19,0.542,20,0.368,21,0.007,23,2.015,30,0.113,31,0.004,32,0.004,43,0.406,46,1.375,49,0.184,53,0.372,57,0.956,63,1.066,68,1.358,70,1.454,73,1.804,75,2.313,76,2.151,77,1.155,84,2.475,105,4.816,106,3.074,107,2.234,108,5.426,109,4.127,110,4.97,111,3.386,112,2.407,114,3.216,115,3.308,117,3.074,118,2.764,119,3.074,120,1.175,121,2.644,122,2.583,123,3.216,124,2.987,125,3.892,126,3.218,127,4.045,128,3.106,129,5.431,130,2.528,131,5.183,132,3.386,133,4.647,134,1.73,135,1.481,136,5.183,137,3.386,138,4.647,139,3.386,140,4.416,141,4.218,142,3.386,143,2.327,144,2.717,145,3.754,146,4.218,147,3.216,148,3.074,149,4.218,150,3.386,151,3.386,152,4.218,153,2.735,154,3.074,155,4.218,156,3.23,998,3.841,999,2.28,3706,4.694,3707,4.694,3708,4.694]],["title/classes/WebhookResponse.html",[53,0.199,3709,3.592]],["body/classes/WebhookResponse.html",[3,0.053,4,0.053,5,0.047,9,0.536,17,0.459,19,0.397,21,0.007,23,1.474,30,0.076,31,0.004,32,0.004,33,1.22,43,0.254,47,2.532,49,0.21,50,0.679,53,0.245,54,1.403,57,0.821,68,0.85,84,2.224,101,2.436,110,2.532,115,2.973,127,3.635,128,3.313,147,2.013,260,2.605,282,1.477,286,2.272,317,4.169,347,2.262,375,2.623,422,1.638,423,2.137,425,2.606,441,2.321,442,1.827,473,3.085,484,2.262,488,1.4,594,2.224,595,1.814,620,2.373,673,2.132,676,3.801,677,2.64,780,3.635,968,2.973,987,4.169,1074,4.313,1077,2.132,1208,5.196,1644,2.64,1752,2.908,2019,3.497,2020,3.635,2024,2.271,2028,2.908,2109,6.237,2186,5.339,2465,3.791,2531,4.435,2536,6.694,2553,4.737,2586,5.542,2587,4.737,2764,5.177,2765,2.764,2807,4.737,2866,2.532,3077,4.737,3154,3.59,3628,4.425,3709,5.658,3710,3.299,3711,4.032,3712,5.155,3713,6.031,3714,3.59,3715,3.59,3716,3.59,3717,3.59,3718,3.59,3719,3.59,3720,3.59,3721,7.265,3722,6.591,3723,6.591,3724,5.155,3725,3.59,3726,5.155,3727,5.155,3728,5.155,3729,5.155,3730,7.484,3731,5.155,3732,5.155,3733,5.155,3734,5.155,3735,5.155,3736,5.155,3737,5.155,3738,5.155,3739,3.59,3740,3.59,3741,3.59,3742,3.59,3743,3.59,3744,3.59,3745,5.155,3746,3.59]],["title/injectables/WebhookService.html",[33,0.99,2020,2.951]],["body/injectables/WebhookService.html",[3,0.048,4,0.048,5,0.043,9,0.715,13,0.148,17,0.857,19,0.25,20,0.25,21,0.007,23,0.927,30,0.071,31,0.004,32,0.004,33,1.133,35,1.37,39,1.234,43,0.403,45,1.571,46,1.194,47,2.287,48,1.213,49,0.204,50,0.613,53,0.228,54,1.462,68,1.133,84,2.065,101,2.497,110,3.376,112,1.108,115,2.76,127,3.376,128,3.299,147,2.683,260,2.419,262,1.24,282,1.394,286,2.11,317,3.973,347,2.513,375,2.619,422,1.996,423,2.016,425,2.546,441,2.156,442,1.696,473,3.218,484,2.134,488,1.866,594,2.065,595,2.419,620,2.204,673,1.926,676,4.293,677,2.385,750,2.051,780,3.376,968,1.87,987,3.599,1074,4.111,1077,1.926,1208,5.439,1644,3.52,1752,3.878,2019,4.262,2020,4.431,2024,2.051,2028,2.627,2109,6.019,2186,5.876,2465,4.62,2531,5.334,2536,6.881,2553,4.399,2586,5.228,2587,4.399,2726,2.98,2764,4.884,2765,2.497,2807,4.399,2866,3.376,3077,4.399,3628,5.393,3709,4.884,3710,2.98,3712,4.787,3713,6.7,3714,4.787,3715,5.689,3716,3.243,3717,3.243,3718,3.243,3719,3.243,3720,3.243,3721,7.012,3722,6.282,3723,6.282,3724,4.787,3725,3.243,3726,4.787,3727,4.787,3728,4.787,3729,4.787,3730,7.253,3731,4.787,3732,4.787,3733,4.787,3734,4.787,3735,4.787,3736,4.787,3737,4.787,3738,4.787,3739,5.689,3740,3.243,3741,3.243,3742,3.243,3743,3.243,3744,3.243,3745,4.787,3746,3.243,3747,3.642,3748,3.642,3749,3.642,3750,3.642,3751,3.642]],["title/controllers/WellKnownController.html",[157,1.378,200,3.592]],["body/controllers/WellKnownController.html",[3,0.059,4,0.059,5,0.053,9,0.957,13,0.183,17,0.819,20,0.319,21,0.007,23,1.594,30,0.059,31,0.004,32,0.004,39,1.437,43,0.454,45,1.769,46,1.453,48,2.053,49,0.225,50,0.758,53,0.191,54,1.491,63,1.19,68,1.319,114,2.248,120,1.127,134,1.66,157,2.11,159,1.563,163,2.828,195,5.33,200,5.499,244,4.932,245,5.943,247,4.01,276,3.041,323,1.107,352,3.781,353,2.764,359,3.647,367,4.588,382,4.588,385,2.09,404,5.122,408,3.214,420,2.949,422,1.274,425,2.11,428,3.248,473,3.313,497,3.981,523,1.65,616,1.975,642,2.131,644,7.877,645,4.784,673,2.381,674,4.932,675,3.442,685,1.806,695,3.442,729,6.406,742,3.442,1084,3.214,1090,3.781,1181,5.091,1185,4.731,1248,1.888,1641,3.087,1708,5.448,1969,3.685,2002,4.01,2011,5.19,2339,4.01,2414,5.19,2463,5.122,3402,4.01,3752,4.01,3753,4.503,3754,6.923,3755,5.573,3756,4.503,3757,4.503,3758,4.503,3759,4.503,3760,6.259,3761,4.503,3762,4.503,3763,4.503,3764,6.362,3765,4.503,3766,4.503,3767,4.503,3768,5.573,3769,4.503,3770,4.01,3771,4.01,3772,4.01,3773,4.503,3774,4.503,3775,4.503,3776,4.503,3777,4.01,3778,4.503,3779,4.503,3780,4.503,3781,4.503,3782,4.503,3783,4.503,3784,4.503,3785,4.503]],["title/injectables/WellKnownService.html",[33,0.99,195,3.222]],["body/injectables/WellKnownService.html",[3,0.05,4,0.05,5,0.045,9,0.508,11,2.858,12,0.972,13,0.155,17,0.822,19,0.45,20,0.343,21,0.007,23,1.672,30,0.05,31,0.004,32,0.004,33,1.173,35,1.437,39,1.278,43,0.455,45,1.775,46,1.349,48,1.981,49,0.219,50,0.643,53,0.162,54,1.495,112,1.692,195,4.947,227,3.124,228,2.15,244,3.815,245,5.864,276,3.89,282,1.214,304,3.4,321,3.815,323,1.369,347,2.193,352,4.36,353,2.138,354,2.094,359,3.243,366,2.754,367,3.473,382,3.473,385,1.858,397,4.064,408,2.858,422,2.042,423,2.277,425,2.25,473,3.047,477,2.567,478,2.5,484,2.193,488,1.932,497,3.72,513,2.754,515,2.754,516,2.617,522,1.961,523,2.111,593,2.704,616,1.756,645,4.254,658,4.015,673,2.019,678,5.119,685,2.894,737,3.813,751,3.035,767,2.019,782,4.124,824,3.278,837,1.906,959,2.082,983,3.495,1006,3.4,1084,4.112,1090,3.362,1109,3.124,1180,4.254,1181,5.024,1185,4.993,1283,4.995,1308,2.754,1311,2.15,1316,3.4,1340,3.124,1357,3.124,1358,2.5,1366,2.754,1367,2.919,1641,2.617,1708,4.818,1853,2.5,1971,5.192,1972,2.754,1979,4.254,2104,4.955,2335,4.254,2340,4.554,2403,4.015,2408,2.919,2414,5.205,2577,3.4,2579,3.124,2702,4.554,2984,4.955,2988,3.4,3754,4.955,3755,4.955,3764,5.905,3768,3.4,3770,3.4,3771,3.4,3772,3.4,3777,3.4,3786,3.4,3787,5.565,3788,5.565,3789,5.565,3790,3.818,3791,3.818,3792,5.565,3793,3.818,3794,5.565,3795,3.818,3796,5.565,3797,5.565,3798,5.565,3799,5.565,3800,5.905,3801,6.567,3802,4.955,3803,5.565,3804,3.818,3805,3.818,3806,3.818,3807,3.818,3808,3.818,3809,3.818,3810,5.565,3811,3.818,3812,3.818,3813,3.818,3814,3.818,3815,3.818]],["title/coverage.html",[3816,5.74]],["body/coverage.html",[0,2.46,1,1.704,5,0.025,6,1.855,7,0.915,8,1.855,12,0.53,20,0.302,21,0.007,22,0.854,23,0.53,27,0.784,31,0.002,32,0.002,33,1.897,34,1.592,36,1.855,53,0.41,56,1.258,58,4.128,60,1.258,78,1.04,79,1.04,80,1.04,83,1.308,90,1.258,97,1.258,99,1.308,103,1.258,105,1.364,106,3.764,129,1.364,131,1.364,135,1.093,136,1.364,143,0.752,157,2.494,158,1.592,160,1.855,178,0.986,195,1.428,200,1.592,223,1.592,226,1.592,228,3.702,230,1.592,234,1.592,237,1.592,239,1.592,241,1.592,245,2.647,344,1.592,345,1.855,354,0.784,367,1.101,368,1.592,371,1.592,376,1.592,382,1.101,400,3.083,414,1.364,416,1.308,418,0.937,442,0.657,473,0.723,497,0.937,533,1.101,534,1.502,535,4.237,536,1.592,544,1.95,548,0.817,552,1.502,554,1.704,555,1.704,580,1.502,581,1.502,582,1.855,583,4.149,598,1.258,599,3.895,600,3.895,601,1.308,602,1.308,617,1.308,622,1.258,625,1.258,636,1.502,637,1.855,640,1.592,641,1.855,652,1.308,674,1.428,676,1.07,678,1.258,682,1.592,705,1.855,706,3.971,728,3.397,737,0.937,738,1.214,739,1.258,770,1.502,772,1.502,774,1.502,811,1.888,836,1.258,845,7.311,885,2.351,886,1.258,888,2.833,911,1.502,922,4.128,923,4.163,932,1.173,936,1.258,946,1.258,955,1.258,957,1.101,970,2.833,971,1.855,974,1.592,975,1.855,978,2.092,979,3.083,986,1.428,1025,1.502,1036,1.592,1048,1.502,1049,1.855,1050,3.397,1054,1.592,1055,2.833,1060,1.428,1066,1.364,1067,1.855,1068,1.502,1069,3.397,1077,1.101,1125,6.127,1180,1.592,1181,4.061,1182,1.855,1183,2.833,1208,1.258,1223,1.592,1224,1.855,1247,1.364,1255,1.592,1256,3.397,1257,1.704,1258,1.855,1275,1.855,1281,1.214,1283,1.258,1378,4.718,1379,1.704,1382,1.428,1383,4.237,1393,1.428,1401,1.592,1407,2.833,1415,1.704,1421,1.592,1426,1.308,1428,1.592,1432,1.364,1436,1.592,1437,1.855,1438,3.083,1440,1.428,1468,1.364,1474,1.308,1496,2.374,1549,1.704,1551,1.704,1581,1.592,1582,1.855,1587,1.502,1591,1.428,1598,1.855,1600,1.308,1602,3.397,1605,1.502,1608,1.502,1616,1.855,1641,1.428,1643,1.855,1682,1.502,1683,1.855,1688,1.364,1689,3.958,1705,1.502,1708,1.308,1712,1.428,1721,1.502,1723,1.592,1724,1.855,1725,1.855,1728,1.364,1729,1.855,1788,1.592,1789,2.833,1824,1.592,1825,1.855,1845,3.083,1881,1.592,1882,1.855,1899,1.855,1955,1.592,1956,1.855,1957,1.704,1958,1.855,1961,1.428,1964,1.364,1971,1.308,2011,1.502,2012,1.855,2018,1.308,2019,1.258,2020,1.308,2021,1.704,2022,1.592,2050,1.855,2056,1.704,2068,1.855,2128,3.94,2129,2.833,2141,1.855,2153,1.592,2169,2.833,2175,1.704,2182,1.704,2189,1.855,2204,1.704,2205,1.855,2210,1.855,2224,2.91,2229,1.592,2230,1.855,2267,1.592,2268,2.833,2281,1.592,2326,1.592,2327,1.855,2333,1.592,2334,1.855,2338,1.502,2347,1.502,2348,1.428,2358,1.704,2360,1.704,2363,1.855,2414,1.502,2415,1.855,2426,2.833,2449,1.855,2465,1.364,2485,1.592,2486,1.855,2512,1.855,2515,1.308,2516,1.308,2524,1.592,2531,1.364,2560,2.647,2634,1.855,2659,1.502,2660,1.855,2664,1.592,2665,1.855,2672,1.592,2696,2.647,2703,1.855,2715,1.855,2727,1.428,2809,1.502,2810,1.855,2821,1.704,2834,1.855,2969,1.855,2978,1.855,3019,1.592,3020,1.855,3076,2.647,3122,1.592,3123,1.855,3135,1.502,3138,1.704,3140,1.592,3152,4.146,3153,1.855,3160,1.855,3185,1.704,3225,1.855,3285,1.704,3295,1.855,3305,1.855,3336,7.697,3389,1.592,3390,3.764,3391,1.855,3405,1.502,3406,2.833,3407,1.855,3426,1.502,3430,1.855,3498,1.855,3508,2.833,3514,1.592,3515,1.855,3547,2.647,3552,1.704,3582,1.855,3603,1.855,3605,2.833,3660,2.833,3666,2.833,3672,1.855,3683,1.855,3709,1.592,3710,2.833,3752,1.855,3786,1.855,3816,1.855,3817,2.083,3818,2.083,3819,7.367,3820,2.083,3821,3.463,3822,3.463,3823,5.178,3824,5.178,3825,7.88,3826,9.251,3827,2.083,3828,4.444,3829,8.238,3830,3.463,3831,5.178,3832,1.855,3833,2.083,3834,3.083,3835,2.083,3836,2.083,3837,7.561,3838,4.444,3839,4.444,3840,3.083,3841,3.463,3842,2.083,3843,1.855,3844,3.463,3845,6.202,3846,2.083,3847,2.083,3848,2.083,3849,2.083,3850,6.202,3851,2.083,3852,7.561,3853,5.178,3854,5.178,3855,1.855,3856,3.463,3857,6.882,3858,5.747,3859,2.083,3860,6.202,3861,3.463,3862,2.083,3863,5.178,3864,2.083,3865,2.083,3866,2.083,3867,2.083,3868,2.083,3869,2.083,3870,5.747,3871,3.463,3872,3.463,3873,2.083,3874,2.083,3875,2.083,3876,2.083,3877,2.083,3878,2.083,3879,3.463,3880,3.463,3881,1.855,3882,2.083,3883,2.083,3884,1.855,3885,2.083,3886,1.855,3887,5.178,3888,2.083,3889,2.083,3890,2.083,3891,2.083,3892,2.083,3893,3.083,3894,2.083,3895,2.083,3896,1.704,3897,1.855,3898,2.083,3899,2.083,3900,2.083,3901,2.083,3902,2.083]],["title/dependencies.html",[175,2.75,3903,3.48]],["body/dependencies.html",[12,1.411,21,0.007,31,0.005,32,0.005,50,0.933,52,3.998,53,0.305,70,1.717,77,1.363,120,1.387,175,2.692,204,1.816,206,4.535,207,3.122,209,4.535,211,4.935,212,3.998,213,3.122,215,4.935,217,3.481,218,5.234,275,4.237,359,3.23,361,3.696,431,2.692,539,2.272,541,3.63,542,3.8,766,3.998,824,3.593,919,1.962,1033,3.63,1185,3.022,1197,3.122,1300,4.93,1301,4.237,1302,4.237,1304,4.237,1306,4.237,1307,3.998,1487,3.998,1492,2.846,1495,4.237,1837,4.535,1970,3.63,2024,3.122,2055,4.535,2086,4.935,2089,4.935,2298,4.237,2765,3.8,2880,4.935,3026,3.998,3036,5.889,3037,4.535,3038,4.935,3039,4.935,3346,4.237,3904,7.197,3905,5.542,3906,7.197,3907,7.992,3908,5.542,3909,5.542,3910,5.542,3911,5.542,3912,5.542,3913,5.542,3914,5.542,3915,5.542,3916,7.197,3917,8.459,3918,8.459,3919,8.459,3920,5.542,3921,5.542,3922,5.542,3923,5.542,3924,7.992,3925,5.542,3926,5.542,3927,5.542,3928,5.542,3929,5.542,3930,5.542,3931,5.542,3932,5.542,3933,5.542,3934,5.542,3935,5.542,3936,5.542,3937,5.542,3938,5.542,3939,5.542,3940,5.542,3941,5.542,3942,5.542,3943,5.542,3944,5.542,3945,5.542,3946,5.542,3947,5.542,3948,5.542,3949,5.542,3950,5.542]],["title/miscellaneous/enumerations.html",[3951,2.455,3952,5.041]],["body/miscellaneous/enumerations.html",[12,1.601,13,0.256,20,0.305,21,0.007,31,0.005,32,0.005,84,3.405,106,4.119,109,2.83,110,3.95,112,2.986,123,3.893,124,2.655,125,4.712,126,4.312,127,3.95,156,3.425,375,2.022,594,2.416,599,3.95,600,4.898,614,3.665,626,4.898,627,4.119,706,4.712,1162,5.107,1184,3.8,1970,5.107,1973,5.346,1979,4.808,1986,4.392,2178,4.537,2436,4.808,2696,4.808,2866,3.95,3076,4.808,3102,6.381,3105,6.381,3115,6.944,3116,5.625,3117,6.944,3764,6.381,3800,5.146,3802,5.6,3896,5.146,3951,3.95,3952,5.6,3953,6.289,3954,6.289,3955,5.6,3956,7.798,3957,6.289,3958,5.6,3959,6.289,3960,6.289]],["title/miscellaneous/functions.html",[3951,2.455,3961,5.041]],["body/miscellaneous/functions.html",[12,2.27,13,0.288,17,0.805,20,0.276,21,0.006,31,0.006,32,0.006,45,1.738,46,1.321,48,1.889,178,4.362,207,3.98,217,4.438,310,4.27,317,3.98,454,5.783,674,6.113,770,6.037,810,5.402,1478,4.27,2224,5.481,2866,4.438,3881,6.293,3884,6.293,3886,6.293,3951,4.438,3961,6.293,3962,7.067,3963,7.067,3964,7.067,3965,7.067,3966,7.067,3967,7.067]],["title/index.html",[13,0.191,3968,4.185]],["body/index.html",[2,1.8,21,0.007,31,0.004,32,0.004,35,1.357,57,0.734,159,1.252,172,1.097,173,7.358,174,1.547,175,1.752,176,1.852,177,1.852,178,1.706,179,1.752,180,1.752,181,3.211,182,3.211,183,3.211,184,6.873,185,5.016,186,5.065,187,4.583,188,6.672,189,4.583,190,4.583,191,5.585,192,5.373,193,4.583,194,6.481,195,4.355,196,2.74,197,1.852,198,1.852,414,5.317,416,3.99,528,3.211,529,3.211,530,3.211,531,3.211,532,5.672,533,4.294,534,5.857,676,4.169,678,4.906,737,3.654,738,4.731,739,4.906,887,1.706,1066,5.317,1247,4.16,1281,4.731,1283,4.906,1374,5.406,1375,3.211,1376,3.211,1377,3.211,1423,3.211,1424,3.211,1425,3.211,1426,5.099,1591,4.355,1971,5.099,2013,3.211,2014,3.211,2015,3.211,2016,3.211,2017,6.061,2018,4.409,2019,4.242,2020,4.409,2348,5.566,2353,6.207,2354,3.211,2356,3.211,2357,3.211,2503,3.211,2504,3.211,2506,3.211,2509,5.576,2515,5.099,2516,5.099,2705,3.211,2706,3.211,2707,3.211,2708,3.211,2709,5.66,2727,5.566,2817,3.211,2818,3.211,2819,3.211,2973,3.211,2974,3.211,2975,3.211,3281,3.211,3282,3.211,3284,3.211,3419,3.211,3420,3.211,3422,3.211,3832,3.211,3968,3.211,3969,3.606,3970,3.606,3971,3.606,3972,3.606,3973,3.606]],["title/modules.html",[174,2.766]],["body/modules.html",[21,0.005,31,0.005,32,0.005,173,4.948,174,2.777,184,4.67,185,3.53,186,4.67,187,4.67,188,4.438,189,4.67,190,4.67,191,4.066,192,3.911,193,4.67,194,4.67,443,6.297,447,7.505,532,4.239,1374,4.67,2017,4.239,2353,4.948,2509,4.239,2709,4.67,3974,9.818,3975,9.818,3976,9.937,3977,9.185]],["title/properties.html",[14,0.725,3903,3.48]],["body/properties.html",[9,0.971,14,0.935,21,0.007,31,0.006,32,0.006,170,6.981,846,4.585,1076,3.547,2340,5.974,3978,7.301,3979,7.301,3980,7.301,3981,7.301,3982,7.301,3983,7.301,3984,8.531,3985,7.301,3986,7.301,3987,7.301,3988,7.301,3989,7.301,3990,7.301,3991,7.301]],["title/miscellaneous/typealiases.html",[3951,2.455,3992,5.661]],["body/miscellaneous/typealiases.html",[11,3.286,13,0.261,20,0.358,21,0.006,23,1.629,31,0.005,32,0.005,58,4.018,59,4.018,83,4.95,84,2.458,85,4.018,86,4.018,228,4.439,318,2.458,473,2.221,510,3.604,527,3.729,591,6.815,836,4.762,885,1.946,888,5.236,911,5.686,1070,3.194,1184,3.866,1208,4.762,1378,5.403,1383,7.295,1393,5.403,1401,6.025,1407,6.45,1415,6.45,1421,4.891,1657,5.236,1672,5.236,1689,4.891,1705,5.686,1712,5.403,1720,4.891,2169,5.236,2175,6.45,2176,4.616,2178,4.616,2224,5.161,2866,4.018,3026,4.616,3076,4.891,3118,4.387,3547,4.891,3552,6.45,3951,4.018,3958,5.698,3993,6.398,3994,6.398,3995,7.938,3996,5.698,3997,6.398,3998,6.398,3999,7.018]],["title/miscellaneous/variables.html",[2391,4.327,3951,2.455]],["body/miscellaneous/variables.html",[11,1.529,12,1.754,13,0.121,19,0.565,20,0.353,21,0.007,22,1.892,23,0.758,31,0.003,32,0.003,39,0.684,42,3.329,46,1.19,54,1.575,68,0.973,112,2.795,124,1.014,134,1.098,135,0.94,172,1.404,223,3.528,226,3.528,228,1.677,230,3.528,234,3.528,237,3.528,239,3.528,241,3.528,256,2.436,262,3.157,266,2.436,282,1.831,285,2.077,288,1.87,317,1.677,318,1.144,321,2.041,347,2.301,354,2.127,388,2.041,418,1.34,430,3.329,442,1.456,454,2.436,473,1.962,477,1.373,484,2.539,488,1.034,491,2.436,492,2.436,535,2.436,552,3.329,553,2.651,554,3.777,555,3.777,556,6.868,557,2.651,558,6.997,559,2.651,560,6.364,561,2.651,562,2.651,563,2.651,564,2.651,565,2.651,566,2.651,567,2.436,568,2.651,569,2.651,570,2.651,571,2.276,572,2.651,573,2.651,574,2.651,595,2.865,608,1.624,615,1.575,751,2.517,763,3.013,789,3.023,837,1.486,909,3.249,984,1.87,999,1.446,1070,1.486,1077,2.441,1161,1.87,1185,1.624,1289,2.148,1346,2.651,1347,3.777,1378,3.164,1379,3.777,1380,2.651,1381,2.651,1382,2.041,1388,2.436,1393,2.041,1394,2.651,1398,2.436,1399,2.651,1402,2.651,1403,4.365,1404,4.169,1405,4.625,1421,5.266,1549,2.436,1551,3.777,1552,2.651,1553,2.651,1554,2.651,1555,2.651,1556,5.669,1557,6.135,1558,6.006,1559,6.364,1560,2.651,1561,2.651,1562,2.651,1563,2.651,1564,2.651,1668,2.651,1689,2.276,1708,2.899,1720,2.276,1721,3.329,1722,2.651,1746,2.436,1855,2.651,2021,2.436,2042,2.651,2043,2.651,2056,3.777,2176,3.329,2178,2.148,2182,2.436,2191,2.651,2192,2.651,2193,2.651,2194,5.033,2195,2.041,2196,2.651,2197,2.651,2198,2.651,2199,2.651,2295,2.041,2358,2.436,2360,3.777,2361,2.651,2362,2.436,2391,3.528,2403,2.148,2465,3.023,2537,3.528,2560,4.32,2821,2.436,2822,2.436,2826,2.651,2827,2.651,2828,2.651,2829,5.033,2830,5.033,2831,2.436,2832,2.436,3026,5.485,3118,2.041,3152,2.148,3185,3.777,3188,4.11,3285,2.436,3287,2.436,3288,2.651,3289,2.651,3290,2.651,3547,2.276,3553,2.651,3554,2.651,3555,2.651,3556,2.651,3557,6.77,3558,2.651,3559,2.651,3560,2.651,3561,2.651,3562,2.651,3563,2.651,3564,2.651,3565,2.651,3566,2.651,3567,2.651,3568,2.651,3660,2.436,3661,4.11,3662,4.11,3663,4.11,3664,2.651,3800,2.436,3834,2.651,3840,2.651,3843,4.11,3855,2.651,3893,5.033,3896,2.436,3897,4.11,3951,1.87,3955,2.651,3995,2.651,3996,2.651,3999,2.651,4000,6.367,4001,2.977,4002,2.977,4003,2.977,4004,4.615,4005,2.977,4006,2.977,4007,2.977,4008,2.977,4009,4.615,4010,2.977,4011,2.977,4012,2.977,4013,5.652,4014,2.977,4015,6.367,4016,2.977,4017,7.289,4018,2.977,4019,4.615,4020,2.977,4021,2.977,4022,4.615,4023,2.977,4024,4.615,4025,2.977,4026,2.977,4027,2.977,4028,2.977,4029,4.615,4030,2.977,4031,2.977,4032,2.977,4033,2.977]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1125,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["0.0.1",{"_index":3979,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":3924,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":3925,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":3930,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":3945,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":3917,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":3949,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3467,"title":{},"body":{"injectables/StatusListService.html":{}}}],["0.5.1",{"_index":3929,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":3826,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3861,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":3862,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3819,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3825,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":3831,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3828,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3887,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3888,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3856,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1853,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/WellKnownService.html":{}}}],["1.11.0",{"_index":3928,"title":{},"body":{"dependencies.html":{}}}],["1.13.0",{"_index":3923,"title":{},"body":{"dependencies.html":{}}}],["1.5.4",{"_index":3943,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":3829,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":3870,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":3839,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":3872,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":3833,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":3865,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1765,"title":{},"body":{"injectables/FilesService.html":{}}}],["10,000",{"_index":3447,"title":{},"body":{"injectables/StatusListService.html":{}}}],["10.5.0",{"_index":3940,"title":{},"body":{"dependencies.html":{}}}],["10/12",{"_index":3880,"title":{},"body":{"coverage.html":{}}}],["10/15",{"_index":3846,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":845,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["1000",{"_index":1358,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["10000",{"_index":3460,"title":{},"body":{"injectables/StatusListService.html":{}}}],["11",{"_index":3868,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":3916,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":3912,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":3950,"title":{},"body":{"dependencies.html":{}}}],["11.1.6",{"_index":3907,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":3915,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":3971,"title":{},"body":{"index.html":{}}}],["12/14",{"_index":3895,"title":{},"body":{"coverage.html":{}}}],["12/schema",{"_index":3065,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["13.1.1",{"_index":3941,"title":{},"body":{"dependencies.html":{}}}],["13/13",{"_index":3873,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":3864,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":3898,"title":{},"body":{"coverage.html":{}}}],["15.1.3",{"_index":3942,"title":{},"body":{"dependencies.html":{}}}],["15/15",{"_index":3885,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":3832,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["18",{"_index":3969,"title":{},"body":{"index.html":{}}}],["18.0.0",{"_index":3931,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":3970,"title":{},"body":{"index.html":{}}}],["1_0.html#claims_query",{"_index":953,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["1_0.html#name",{"_index":943,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["2.0",{"_index":2340,"title":{},"body":{"controllers/OAuthController.html":{},"injectables/WellKnownService.html":{},"properties.html":{}}}],["2.0.2",{"_index":3934,"title":{},"body":{"dependencies.html":{}}}],["2/17",{"_index":3869,"title":{},"body":{"coverage.html":{}}}],["2/2",{"_index":3860,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":3863,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":3851,"title":{},"body":{"coverage.html":{}}}],["20/22",{"_index":3842,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":1963,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["20250714110838",{"_index":3919,"title":{},"body":{"dependencies.html":{}}}],["23",{"_index":3891,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":491,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["24h",{"_index":486,"title":{},"body":{"controllers/AuthController.html":{}}}],["25",{"_index":3871,"title":{},"body":{"coverage.html":{}}}],["256",{"_index":1347,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["28",{"_index":3972,"title":{},"body":{"index.html":{}}}],["3.0.1",{"_index":3911,"title":{},"body":{"dependencies.html":{}}}],["3.14.3",{"_index":3936,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":3933,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":3905,"title":{},"body":{"dependencies.html":{}}}],["3.864.0",{"_index":3904,"title":{},"body":{"dependencies.html":{}}}],["3/13",{"_index":3892,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":3837,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3824,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":3830,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":842,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["30d",{"_index":490,"title":{},"body":{"controllers/AuthController.html":{}}}],["33",{"_index":3838,"title":{},"body":{"coverage.html":{}}}],["36/36",{"_index":3822,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":2402,"title":{},"body":{"injectables/OAuthService.html":{},"classes/TokenResponseDto.html":{}}}],["4",{"_index":940,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["4.0.1",{"_index":3906,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":3908,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":3937,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":3857,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":3854,"title":{},"body":{"coverage.html":{}}}],["4/7",{"_index":3890,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["47",{"_index":3848,"title":{},"body":{"coverage.html":{}}}],["4909",{"_index":1992,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["5",{"_index":2107,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["5.0.3",{"_index":3914,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":3948,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":3858,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":3877,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":3850,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":699,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["57",{"_index":3889,"title":{},"body":{"coverage.html":{}}}],["58",{"_index":3835,"title":{},"body":{"coverage.html":{}}}],["6.0.0",{"_index":3913,"title":{},"body":{"dependencies.html":{}}}],["6.0.12",{"_index":3932,"title":{},"body":{"dependencies.html":{}}}],["6.0.2",{"_index":3926,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":3844,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":2560,"title":{},"body":{"injectables/Oid4vpService.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["63",{"_index":3973,"title":{},"body":{"index.html":{}}}],["66",{"_index":3845,"title":{},"body":{"coverage.html":{}}}],["7.8.2",{"_index":3946,"title":{},"body":{"dependencies.html":{}}}],["7/12",{"_index":3836,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":3867,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":3883,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":3876,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":3823,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":3882,"title":{},"body":{"coverage.html":{}}}],["8.16.3",{"_index":3939,"title":{},"body":{"dependencies.html":{}}}],["8/12",{"_index":3859,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":3875,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":3853,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":3879,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":3894,"title":{},"body":{"coverage.html":{}}}],["86400",{"_index":439,"title":{},"body":{"controllers/AuthController.html":{}}}],["87",{"_index":3866,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":3874,"title":{},"body":{"coverage.html":{}}}],["8a7a",{"_index":1993,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["8ad6",{"_index":1991,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["9/10",{"_index":3900,"title":{},"body":{"coverage.html":{}}}],["9/19",{"_index":3849,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":3899,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":3841,"title":{},"body":{"coverage.html":{}}}],["_d",{"_index":1509,"title":{},"body":{"classes/DBKeyService.html":{}}}],["_ext",{"_index":1513,"title":{},"body":{"classes/DBKeyService.html":{}}}],["_key_ops",{"_index":1511,"title":{},"body":{"classes/DBKeyService.html":{}}}],["a128gcm",{"_index":2574,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["a739c2c412c0",{"_index":1994,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["abstract",{"_index":2211,"title":{},"body":{"classes/KeyService.html":{}}}],["accept",{"_index":2002,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/WellKnownController.html":{}}}],["accepts",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":11,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"injectables/WellKnownService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["access_token",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["accesscert",{"_index":2582,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscert?.length",{"_index":2591,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscertificatecontrollerregister",{"_index":2883,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["accesscertificateid",{"_index":2811,"title":{},"body":{"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificateresponse",{"_index":1,"title":{"interfaces/AccessCertificateResponse.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["accessible",{"_index":1754,"title":{},"body":{"injectables/FilesService.html":{}}}],["accessing",{"_index":2850,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["accesskeyid",{"_index":3577,"title":{},"body":{"modules/StorageModule.html":{}}}],["accesstoken",{"_index":2399,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{}}}],["accesstokenrequest",{"_index":809,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["accordingly",{"_index":3632,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["acl",{"_index":1709,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/S3FileStorage.html":{}}}],["acl=public",{"_index":1717,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["action",{"_index":2542,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["active",{"_index":3105,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["actual",{"_index":521,"title":{},"body":{"controllers/AuthController.html":{}}}],["adapt",{"_index":92,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["adapters/db",{"_index":2188,"title":{},"body":{"modules/KeyModule.html":{}}}],["adapters/local.storage",{"_index":3549,"title":{},"body":{"modules/StorageModule.html":{}}}],["adapters/s3.storage",{"_index":3550,"title":{},"body":{"modules/StorageModule.html":{}}}],["adapters/vault",{"_index":2190,"title":{},"body":{"modules/KeyModule.html":{}}}],["add",{"_index":1311,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/MetricModule.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/WellKnownService.html":{}}}],["add(issuer_state",{"_index":3315,"title":{},"body":{"injectables/SessionService.html":{}}}],["addaccesscertificate",{"_index":2841,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addaccesscertificate(tenantid",{"_index":2852,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addclient",{"_index":2364,"title":{},"body":{"injectables/OAuthService.html":{}}}],["addclient(clientid",{"_index":2372,"title":{},"body":{"injectables/OAuthService.html":{}}}],["adding",{"_index":2837,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["additional",{"_index":1816,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/SessionLogContext.html":{}}}],["additionaldata",{"_index":3242,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["addkey",{"_index":2142,"title":{},"body":{"controllers/KeyController.html":{}}}],["addkey(token",{"_index":2146,"title":{},"body":{"controllers/KeyController.html":{}}}],["addregistrationcertificate",{"_index":2842,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addregistrationcertificate(req",{"_index":2855,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp",{"_index":2843,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp(name",{"_index":2857,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["adds",{"_index":2859,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["admin",{"_index":480,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/TenantController.html":{},"interfaces/TokenPayload.html":{}}}],["admin.guard",{"_index":3589,"title":{},"body":{"controllers/TenantController.html":{}}}],["adminauthguard",{"_index":34,"title":{"injectables/AdminAuthGuard.html":{}},"body":{"injectables/AdminAuthGuard.html":{},"controllers/TenantController.html":{},"coverage.html":{}}}],["against",{"_index":1141,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["agent",{"_index":319,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["alg",{"_index":837,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["algorithm",{"_index":1406,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/RegistrarService.html":{}}}],["algorithms",{"_index":1387,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["alias",{"_index":3852,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":3993,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":3594,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["allowedsigningalgs",{"_index":822,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["allowing",{"_index":3629,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["allowinsecureurls",{"_index":2048,"title":{},"body":{"modules/IssuerModule.html":{}}}],["allowlist",{"_index":59,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/typealiases.html":{}}}],["allowlistpolicy",{"_index":56,"title":{"classes/AllowListPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["allows",{"_index":2344,"title":{},"body":{"controllers/OAuthController.html":{}}}],["alpha",{"_index":3918,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":1100,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["always",{"_index":1637,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["amount",{"_index":1209,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{}}}],["any).$schema",{"_index":1326,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["any).issuer",{"_index":2124,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any).method",{"_index":880,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["any)[key",{"_index":2126,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apache",{"_index":3987,"title":{},"body":{"properties.html":{}}}],["api",{"_index":108,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/RegistrarService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["api:read",{"_index":2682,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["api:write",{"_index":2683,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["api_key",{"_index":126,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["apibody",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/StorageController.html":{}}}],["apibody({description",{"_index":661,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["apiconsumes",{"_index":3531,"title":{},"body":{"controllers/StorageController.html":{}}}],["apiconsumes(\"multipart/form",{"_index":3537,"title":{},"body":{"controllers/StorageController.html":{}}}],["apiexcludecontroller",{"_index":163,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiexcludecontroller(process.env.swagger_all",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiextramodels",{"_index":117,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["apiextramodels(webhookauthconfignone",{"_index":142,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["apiheader",{"_index":3774,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apihideproperty",{"_index":928,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["apihideproperty()@column('varchar",{"_index":1030,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apikey",{"_index":127,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["apikeyconfig",{"_index":105,"title":{"classes/ApiKeyConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["apioperation",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OAuthController.html":{},"controllers/WellKnownController.html":{}}}],["apioperation({summary",{"_index":2339,"title":{},"body":{"controllers/OAuthController.html":{},"controllers/WellKnownController.html":{}}}],["apiparam",{"_index":2463,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["apiproduces",{"_index":1969,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["apiproduces(\"application/json",{"_index":1981,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproduces(mediatype.application_json",{"_index":3776,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiproperty",{"_index":118,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/FileUploadDto.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["apiproperty({description",{"_index":3667,"title":{},"body":{"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{}}}],["apiproperty({enum",{"_index":3103,"title":{},"body":{"entities/Session.html":{}}}],["apiproperty({examples",{"_index":2435,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["apiproperty({required",{"_index":3693,"title":{},"body":{"classes/VCT.html":{}}}],["apiproperty({type",{"_index":1218,"title":{},"body":{"classes/CredentialSetQuery.html":{},"classes/FileUploadDto.html":{},"classes/OfferRequestDto.html":{}}}],["apiresponse",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiresponse({description",{"_index":1962,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apisecurity",{"_index":1237,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{}}}],["apisecurity(\"oauth2",{"_index":1244,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{}}}],["apitags",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{}}}],["apitags(\"authentication",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"issuer",{"_index":1241,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["apitags(\"oauth",{"_index":2350,"title":{},"body":{"controllers/OAuthController.html":{}}}],["apitags(\"presentation",{"_index":2681,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apitags(\"session",{"_index":3143,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags(\"status",{"_index":3399,"title":{},"body":{"controllers/StatusListController.html":{}}}],["app/app.controller",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":158,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":2866,"title":{},"body":{"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["application/json",{"_index":1979,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/jwk",{"_index":3760,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["application/jwt",{"_index":3802,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/statuslist+jwt",{"_index":3397,"title":{},"body":{"controllers/StatusListController.html":{}}}],["application_json",{"_index":3959,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["application_jwt",{"_index":3960,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["applications",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{}}}],["appmodule",{"_index":173,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["array",{"_index":95,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/JwksResponseDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["array(size",{"_index":3463,"title":{},"body":{"injectables/StatusListService.html":{}}}],["array(size).fill(0).map",{"_index":3461,"title":{},"body":{"injectables/StatusListService.html":{}}}],["array.isarray(dcql_query",{"_index":2557,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["associated",{"_index":1064,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"injectables/FilesService.html":{},"classes/IssuanceDto.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["assume",{"_index":859,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["async",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["att",{"_index":2801,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attached",{"_index":934,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["attachment",{"_index":3544,"title":{},"body":{"controllers/StorageController.html":{}}}],["attestation",{"_index":848,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["attestationbased",{"_index":86,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/typealiases.html":{}}}],["attestationbasedpolicy",{"_index":103,"title":{"classes/AttestationBasedPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["attestations",{"_index":935,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["attestations.map((att",{"_index":2802,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["aud",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["audience",{"_index":487,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth",{"_index":156,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["auth.controller",{"_index":546,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":547,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.module",{"_index":1791,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["auth/auth.guard",{"_index":1238,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{}}}],["auth/auth.module",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/entitites/tenant.entity",{"_index":920,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["auth/token.decorator",{"_index":1239,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{}}}],["auth_client_id",{"_index":573,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["auth_client_secret",{"_index":571,"title":{},"body":{"modules/AuthModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["auth_queries",{"_index":698,"title":{},"body":{"controllers/AuthorizeController.html":{},"entities/Session.html":{}}}],["auth_session",{"_index":707,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth_validation_schema",{"_index":223,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authconfig",{"_index":125,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["authconfig.api_key",{"_index":133,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["authconfig.method",{"_index":873,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authconfig.none",{"_index":138,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["authcontroller",{"_index":344,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["authenticate(req",{"_index":2073,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authenticating",{"_index":2876,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["authentication",{"_index":109,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["authentication.'})@apiresponse({status",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticationconfig",{"_index":1846,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethod",{"_index":626,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["authenticationmethod.auth",{"_index":1879,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethod.none",{"_index":1878,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethod.presentation_during_issuance",{"_index":1880,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethodauth",{"_index":598,"title":{"classes/AuthenticationMethodAuth.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationmethodinterface",{"_index":601,"title":{"interfaces/AuthenticationMethodInterface.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationmethodnone",{"_index":625,"title":{"classes/AuthenticationMethodNone.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationmethodpresentation",{"_index":622,"title":{"classes/AuthenticationMethodPresentation.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationurlconfig",{"_index":602,"title":{"classes/AuthenticationUrlConfig.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authfixed",{"_index":1988,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["authguard",{"_index":51,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["authguard(\"jwt",{"_index":38,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":455,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.startswith(\"basic",{"_index":457,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.substring(6",{"_index":459,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":184,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{}}}],["author",{"_index":3989,"title":{},"body":{"properties.html":{}}}],["authorities",{"_index":945,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["authorization",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["authorization_challenge_endpoint",{"_index":795,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_code",{"_index":881,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorization_encrypted_response_alg",{"_index":2572,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_encrypted_response_enc",{"_index":2573,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_endpoint",{"_index":785,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_request",{"_index":2539,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{}}}],["authorization_server",{"_index":1186,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["authorization_servers",{"_index":1187,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["authorizationchallengeendpoint",{"_index":648,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationchallengeendpoint(res",{"_index":651,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{}}}],["authorizationcodegrantidentifier",{"_index":761,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationresponse",{"_index":636,"title":{"classes/AuthorizationResponse.html":{}},"body":{"classes/AuthorizationResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["authorizationserver",{"_index":777,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata",{"_index":744,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.dpop_signing_alg_values_supported",{"_index":823,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.issuer",{"_index":843,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorize",{"_index":649,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(@query",{"_index":686,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(queries",{"_index":656,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize.service",{"_index":679,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize/authorize.controller",{"_index":2031,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorize/authorize.service",{"_index":2032,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorizecontroller",{"_index":640,"title":{"controllers/AuthorizeController.html":{}},"body":{"controllers/AuthorizeController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["authorized",{"_index":609,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["authorizequeries",{"_index":652,"title":{"classes/AuthorizeQueries.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"coverage.html":{}}}],["authorizequeries})@post('par",{"_index":663,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorizeservice",{"_index":678,"title":{"injectables/AuthorizeService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["authresponse",{"_index":581,"title":{"interfaces/AuthResponse.html":{}},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["authserver",{"_index":779,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/.well",{"_index":787,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize",{"_index":786,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/challenge",{"_index":796,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/par",{"_index":792,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/token",{"_index":784,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authtype",{"_index":3724,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["authz",{"_index":2580,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authzmetadata",{"_index":729,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/WellKnownController.html":{}}}],["authzmetadata(session",{"_index":742,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/WellKnownController.html":{}}}],["autoloadentities",{"_index":1569,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["autologging",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":2297,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["available",{"_index":443,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/OAuthService.html":{},"entities/StatusListEntity.html":{},"modules.html":{}}}],["avoid",{"_index":1146,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["await",{"_index":484,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":3036,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["axios",{"_index":3927,"title":{},"body":{"dependencies.html":{}}}],["back",{"_index":467,"title":{},"body":{"controllers/AuthController.html":{}}}],["badgateway/oauth2",{"_index":2880,"title":{},"body":{"injectables/RegistrarService.html":{},"dependencies.html":{}}}],["base64",{"_index":461,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/FileStorage.html":{},"injectables/ResolverService.html":{}}}],["base64credentials",{"_index":458,"title":{},"body":{"controllers/AuthController.html":{}}}],["base64url",{"_index":4028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":1289,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["basedir",{"_index":2233,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["baseurl",{"_index":2903,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["basic",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["batch",{"_index":1200,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{}}}],["batch_credential_issuance",{"_index":1188,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batch_size",{"_index":1210,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{}}}],["bearer",{"_index":437,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["before",{"_index":856,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["being",{"_index":3156,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["belong",{"_index":3526,"title":{},"body":{"controllers/StorageController.html":{}}}],["belongs",{"_index":3418,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["better",{"_index":3727,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["between",{"_index":589,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["binary",{"_index":1726,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["binding",{"_index":1312,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["bindings",{"_index":1860,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["bits",{"_index":3408,"title":{},"body":{"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["bitsperstatus",{"_index":3409,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["body",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"interfaces/FileStorage.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/TenantController.html":{}}}],["body.auth_session",{"_index":857,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.client_id",{"_index":468,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.client_secret",{"_index":469,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.grant_type",{"_index":448,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.issuer_state",{"_index":850,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.privatekey",{"_index":1505,"title":{},"body":{"classes/DBKeyService.html":{}}}],["body.requestid",{"_index":2687,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body.response",{"_index":2611,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["body.response_type",{"_index":2004,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["body.webhook",{"_index":2688,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["boolean",{"_index":28,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["bootstrap",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["both",{"_index":693,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bound",{"_index":2951,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["break",{"_index":878,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["browse",{"_index":3976,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":3974,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":3023,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["buffer",{"_index":1702,"title":{},"body":{"interfaces/FileStorage.html":{},"controllers/IssuerManagementController.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"classes/S3FileStorage.html":{}}}],["buffer.from",{"_index":460,"title":{},"body":{"controllers/AuthController.html":{}}}],["buffer.from(signature).tostring(\"base64url",{"_index":4025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.from(signaturebase64url",{"_index":4027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bugs",{"_index":3983,"title":{},"body":{"properties.html":{}}}],["builder/querypartialentity",{"_index":3350,"title":{},"body":{"injectables/SessionService.html":{}}}],["c.id",{"_index":3650,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["cache",{"_index":2104,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/WellKnownService.html":{}}}],["call",{"_index":2908,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["callback",{"_index":590,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{}}}],["callbacks",{"_index":613,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["called",{"_index":2865,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["callhandler",{"_index":3167,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["canactivate",{"_index":40,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":41,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["canonical",{"_index":1713,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["cascade",{"_index":905,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["cascading",{"_index":3658,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["case",{"_index":874,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["catch",{"_index":465,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{}}}],["catcherror",{"_index":3182,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["catcherror((error",{"_index":3211,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["cats",{"_index":3523,"title":{},"body":{"controllers/StorageController.html":{}}}],["cb",{"_index":2110,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cb(err",{"_index":2114,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cert",{"_index":1153,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["cert.crt",{"_index":2227,"title":{},"body":{"classes/KeyService.html":{}}}],["cert.id",{"_index":1533,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/RegistrarService.html":{}}}],["cert.publickey.export",{"_index":3001,"title":{},"body":{"injectables/ResolverService.html":{}}}],["cert.revoked",{"_index":2956,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cert.subjectaltname?.includes(new",{"_index":2997,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certentity",{"_index":886,"title":{"entities/CertEntity.html":{}},"body":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["certificate",{"_index":7,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["certificatechainlength",{"_index":2590,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["certificates",{"_index":890,"title":{},"body":{"entities/CertEntity.html":{},"injectables/RegistrarService.html":{}}}],["certificatetype",{"_index":911,"title":{},"body":{"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["certrepository",{"_index":1449,"title":{},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{}}}],["certs",{"_index":2952,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["certs?.length",{"_index":2959,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["certs[0",{"_index":2996,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certs[0].jwt",{"_index":2960,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cfg",{"_index":3570,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get",{"_index":3576,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_bucket",{"_index":3579,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_endpoint",{"_index":3574,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_public_base_url",{"_index":3580,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_region",{"_index":3573,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"storage_driver",{"_index":3571,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.getorthrow(\"local_storage_dir",{"_index":3581,"title":{},"body":{"modules/StorageModule.html":{}}}],["chain",{"_index":2992,"title":{},"body":{"injectables/ResolverService.html":{}}}],["challenge",{"_index":655,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["check",{"_index":287,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["checked",{"_index":864,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["checking",{"_index":3446,"title":{},"body":{"injectables/StatusListService.html":{}}}],["checks",{"_index":1831,"title":{},"body":{"controllers/HealthController.html":{},"injectables/RegistrarService.html":{}}}],["checksum",{"_index":1710,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{}}}],["checksumsha256",{"_index":3046,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["checl",{"_index":3002,"title":{},"body":{"injectables/ResolverService.html":{}}}],["child",{"_index":1939,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["children",{"_index":1936,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["claims",{"_index":100,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["claims_supported",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{}}}],["claimsquery",{"_index":78,"title":{"classes/ClaimsQuery.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["claimswebhook",{"_index":1847,"title":{},"body":{"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["class",{"_index":53,"title":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/DisplayCreateDto.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/FileUploadDto.html":{},"classes/IssuanceDto.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{}},"body":{"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":57,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/DisplayCreateDto.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/FileUploadDto.html":{},"classes/IssuanceDto.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"index.html":{}}}],["clear",{"_index":2628,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/JwtStrategy.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"dependencies.html":{}}}],["client.id",{"_index":479,"title":{},"body":{"controllers/AuthController.html":{}}}],["client_credentials",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenRequestDto.html":{}}}],["client_id",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{}}}],["client_metadata",{"_index":2566,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_name",{"_index":2575,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_secret",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"classes/TokenRequestDto.html":{}}}],["client_secret_basic",{"_index":506,"title":{},"body":{"controllers/AuthController.html":{}}}],["client_secret_post",{"_index":507,"title":{},"body":{"controllers/AuthController.html":{}}}],["clientcredentialsdto",{"_index":371,"title":{"classes/ClientCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["clientid",{"_index":451,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["clientinitdto",{"_index":974,"title":{"classes/ClientInitDto.html":{}},"body":{"classes/ClientInitDto.html":{},"controllers/TenantController.html":{},"coverage.html":{}}}],["clients",{"_index":2345,"title":{},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{}}}],["clientsecret",{"_index":452,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{}}}],["clientservice",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{}}}],["cloudfront",{"_index":3040,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["cluster_appmodule",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":528,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_exports",{"_index":531,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":529,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_providers",{"_index":530,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule",{"_index":1375,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule_exports",{"_index":1376,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule_providers",{"_index":1377,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptomodule",{"_index":1423,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_cryptomodule_exports",{"_index":1424,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_cryptomodule_providers",{"_index":1425,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_issuermodule",{"_index":2013,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_exports",{"_index":2016,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_imports",{"_index":2015,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_providers",{"_index":2014,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_oauthmodule",{"_index":2354,"title":{},"body":{"modules/OAuthModule.html":{},"index.html":{}}}],["cluster_oauthmodule_exports",{"_index":2356,"title":{},"body":{"modules/OAuthModule.html":{},"index.html":{}}}],["cluster_oauthmodule_imports",{"_index":2355,"title":{},"body":{"modules/OAuthModule.html":{}}}],["cluster_oauthmodule_providers",{"_index":2357,"title":{},"body":{"modules/OAuthModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule",{"_index":2503,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule_exports",{"_index":2504,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule_imports",{"_index":2505,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["cluster_oid4vpmodule_providers",{"_index":2506,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_presentationsmodule",{"_index":2705,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_exports",{"_index":2707,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_imports",{"_index":2706,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_providers",{"_index":2708,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_registrarmodule",{"_index":2817,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_registrarmodule_exports",{"_index":2819,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_registrarmodule_imports",{"_index":2820,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["cluster_registrarmodule_providers",{"_index":2818,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_resolvermodule",{"_index":2973,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_resolvermodule_exports",{"_index":2975,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_resolvermodule_providers",{"_index":2974,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_sessionmodule",{"_index":3281,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_exports",{"_index":3284,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_imports",{"_index":3283,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":3282,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_statuslistmodule",{"_index":3419,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_statuslistmodule_exports",{"_index":3420,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_statuslistmodule_imports",{"_index":3421,"title":{},"body":{"modules/StatusListModule.html":{}}}],["cluster_statuslistmodule_providers",{"_index":3422,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_verifiermodule",{"_index":3697,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cluster_verifiermodule_imports",{"_index":3698,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cnf",{"_index":1362,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["cnonce",{"_index":833,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["cnonceexpiresin",{"_index":844,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["code",{"_index":610,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{}}}],["code_challenge",{"_index":708,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_method",{"_index":709,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_methods_supported",{"_index":793,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["colorize",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":917,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column(\"boolean",{"_index":1040,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["column(\"date",{"_index":3120,"title":{},"body":{"entities/Session.html":{}}}],["column(\"int",{"_index":962,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column(\"json",{"_index":963,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column(\"varchar",{"_index":921,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column('date",{"_index":3088,"title":{},"body":{"entities/Session.html":{}}}],["column('int",{"_index":3410,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["column('json",{"_index":988,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column('json')@isobject",{"_index":992,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["column('json')@validatenested()@apiproperty({oneof",{"_index":1850,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["column('json')@validatenested()@type(undefined",{"_index":2646,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["column('varchar",{"_index":898,"title":{},"body":{"entities/CertEntity.html":{},"entities/FileEntity.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column({type",{"_index":3499,"title":{},"body":{"entities/StatusMapping.html":{}}}],["commonoptions",{"_index":1567,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["comparison",{"_index":2964,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["complete",{"_index":2736,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["completed",{"_index":3116,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["completion",{"_index":3251,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["components",{"_index":1539,"title":{},"body":{"classes/DBKeyService.html":{}}}],["computed",{"_index":3048,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["condition",{"_index":3329,"title":{},"body":{"injectables/SessionService.html":{}}}],["config",{"_index":135,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["config.dto",{"_index":1873,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.dto.ts",{"_index":600,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["config.dto.ts:21",{"_index":633,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:29",{"_index":635,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:41",{"_index":2663,"title":{},"body":{"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.dto.ts:49",{"_index":632,"title":{},"body":{"classes/AuthenticationMethodPresentation.html":{}}}],["config.dto.ts:53",{"_index":630,"title":{},"body":{"classes/AuthenticationMethodPresentation.html":{}}}],["config.dto.ts:59",{"_index":606,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{}}}],["config.dto.ts:63",{"_index":604,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{}}}],["config.dto.ts:69",{"_index":629,"title":{},"body":{"classes/AuthenticationMethodNone.html":{}}}],["config.entity",{"_index":82,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationConfigCreateDto.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{}}}],["config.entity.ts",{"_index":923,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["config.entity.ts:105",{"_index":1548,"title":{},"body":{"classes/DCQL.html":{}}}],["config.entity.ts:111",{"_index":1546,"title":{},"body":{"classes/DCQL.html":{}}}],["config.entity.ts:114",{"_index":1851,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:123",{"_index":1857,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:124",{"_index":2651,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:129",{"_index":1869,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:131",{"_index":2655,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:137",{"_index":2654,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:138",{"_index":1856,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:145",{"_index":2649,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:147",{"_index":1867,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:153",{"_index":2652,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:156",{"_index":1854,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:161",{"_index":2647,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:164",{"_index":1865,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:169",{"_index":2653,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:177",{"_index":2658,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:183",{"_index":2645,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:189",{"_index":2656,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:199",{"_index":2644,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:31",{"_index":2642,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:34",{"_index":2641,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:38",{"_index":2640,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:44",{"_index":3679,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["config.entity.ts:48",{"_index":3681,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["config.entity.ts:49",{"_index":1866,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:55",{"_index":1212,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:56",{"_index":1868,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:58",{"_index":1211,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:62",{"_index":1215,"title":{},"body":{"classes/CredentialQuery.html":{},"entities/IssuanceConfig.html":{}}}],["config.entity.ts:65",{"_index":1213,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:70",{"_index":1863,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:71",{"_index":1217,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:77",{"_index":924,"title":{},"body":{"classes/ClaimsQuery.html":{}}}],["config.entity.ts:80",{"_index":925,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/IssuanceConfig.html":{}}}],["config.entity.ts:84",{"_index":927,"title":{},"body":{"classes/ClaimsQuery.html":{}}}],["config.entity.ts:94",{"_index":1220,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["config.entity.ts:98",{"_index":1222,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["config.id",{"_index":1321,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["config.keyid",{"_index":1152,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service",{"_index":1240,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["config.service.ts",{"_index":1069,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["config.service.ts:146",{"_index":1096,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:155",{"_index":1089,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:168",{"_index":1092,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:17",{"_index":2279,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:18",{"_index":1079,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:182",{"_index":1098,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:195",{"_index":1082,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:23",{"_index":2288,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:34",{"_index":1093,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:47",{"_index":2291,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:59",{"_index":2280,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:63",{"_index":2287,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:67",{"_index":2286,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:71",{"_index":2285,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:75",{"_index":2283,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:79",{"_index":2282,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:86",{"_index":2292,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:94",{"_index":2296,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config/credential",{"_index":1068,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["config?.keyid",{"_index":1339,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["config_folder",{"_index":268,"title":{},"body":{"modules/AppModule.html":{}}}],["config_import",{"_index":265,"title":{},"body":{"modules/AppModule.html":{}}}],["config_import_force",{"_index":267,"title":{},"body":{"modules/AppModule.html":{}}}],["config_storage_schema",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configmodule.forroot",{"_index":248,"title":{},"body":{"modules/AppModule.html":{}}}],["configpath",{"_index":1112,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["configs",{"_index":1094,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["configservice",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["configservice.get",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configservice.get(\"jwt_issuer",{"_index":2123,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"jwt_secret",{"_index":2118,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"log_level",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"oidc",{"_index":2091,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"oidc_algorithm",{"_index":2116,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"oidc_internal_issuer_url",{"_index":2100,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow(\"db_database",{"_index":1579,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_host",{"_index":1571,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_password",{"_index":1577,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_port",{"_index":1573,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_username",{"_index":1575,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"folder",{"_index":333,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configservie",{"_index":1412,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["configurable",{"_index":483,"title":{},"body":{"controllers/AuthController.html":{}}}],["configuration",{"_index":107,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["configuration(@token",{"_index":2691,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configuration(user",{"_index":2668,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configurations",{"_index":1057,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["configured",{"_index":1419,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationRequest.html":{},"injectables/SessionService.html":{}}}],["conflictexception",{"_index":760,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{}}}],["conflictexception(\"certificate",{"_index":2228,"title":{},"body":{"classes/KeyService.html":{}}}],["conflictexception(\"issuer",{"_index":3009,"title":{},"body":{"injectables/ResolverService.html":{}}}],["conflictexception(\"no",{"_index":2613,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["conflictexception(\"user",{"_index":3598,"title":{},"body":{"controllers/TenantController.html":{}}}],["conflictexception(`request",{"_index":2782,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["connect",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["connect/certs",{"_index":2103,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["connect/token",{"_index":2897,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["connection",{"_index":1832,"title":{},"body":{"controllers/HealthController.html":{}}}],["console.error",{"_index":2111,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{}}}],["console.error(\"error",{"_index":2942,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["console.log('session",{"_index":2482,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["console.log(err",{"_index":2792,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["console.warn",{"_index":1793,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["const",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"classes/DisplayCreateDto.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateKeyDto.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["constraints",{"_index":1159,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["constructor",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["constructor(basedir",{"_index":2231,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["constructor(configservice",{"_index":736,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/DBKeyService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{}}}],["constructor(configservie",{"_index":1410,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["constructor(credentialconfigrepository",{"_index":1075,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["constructor(cryptoservice",{"_index":1280,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["constructor(displayrepository",{"_index":1617,"title":{},"body":{"injectables/DisplayService.html":{}}}],["constructor(httpservice",{"_index":2726,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/WebhookService.html":{}}}],["constructor(issuanceconfigrepo",{"_index":1903,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["constructor(keyrepository",{"_index":1650,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["constructor(logger",{"_index":3239,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["constructor(oid4vciservice",{"_index":3790,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["constructor(private",{"_index":1248,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoImplementationService.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/ResolverService.html":{},"injectables/SessionPipe.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{}}}],["constructor(reflector",{"_index":2051,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["constructor(s3",{"_index":3021,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["constructor(sessionrepository",{"_index":3309,"title":{},"body":{"injectables/SessionService.html":{}}}],["constructor(sessionservice",{"_index":3297,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["constructor(storage",{"_index":1733,"title":{},"body":{"injectables/FilesService.html":{}}}],["containing",{"_index":593,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WellKnownService.html":{}}}],["content",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["contenttype",{"_index":1708,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":47,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["context.flowtype",{"_index":3267,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.getclass",{"_index":2061,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":2060,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.sessionid",{"_index":3269,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.switchtohttp().getrequest",{"_index":3189,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":3190,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.tenantid",{"_index":3270,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.ts",{"_index":3153,"title":{},"body":{"interfaces/SessionLogContext.html":{},"coverage.html":{}}}],["context.ts:21",{"_index":3155,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["continue",{"_index":1139,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["controller",{"_index":157,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"injectables/SessionPipe.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["controller(\":session/.well",{"_index":3773,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["controller(\":session/authorize",{"_index":684,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["controller(\":session/oid4vp",{"_index":2499,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["controller(\":session/vci",{"_index":2469,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["controller(\":tenantid/credentials",{"_index":1267,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["controller(\":tenantid/status",{"_index":3400,"title":{},"body":{"controllers/StatusListController.html":{}}}],["controller(\"display",{"_index":1594,"title":{},"body":{"controllers/DisplayController.html":{}}}],["controller(\"health",{"_index":1838,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"issuer",{"_index":1245,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["controller(\"key",{"_index":2159,"title":{},"body":{"controllers/KeyController.html":{}}}],["controller(\"oauth",{"_index":2351,"title":{},"body":{"controllers/OAuthController.html":{}}}],["controller(\"presentation",{"_index":2684,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["controller(\"session",{"_index":3144,"title":{},"body":{"controllers/SessionController.html":{}}}],["controller(\"storage",{"_index":3535,"title":{},"body":{"controllers/StorageController.html":{}}}],["controller(\"tenant",{"_index":3592,"title":{},"body":{"controllers/TenantController.html":{}}}],["controllers",{"_index":159,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"modules/CryptoModule.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["convert",{"_index":1534,"title":{},"body":{"classes/DBKeyService.html":{}}}],["coordinate",{"_index":1639,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["copy",{"_index":3217,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["correct",{"_index":865,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["count",{"_index":3373,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["counter",{"_index":1124,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["coverage",{"_index":3816,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covered",{"_index":2947,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["create",{"_index":1352,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["create(session",{"_index":3318,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(tenantid",{"_index":1452,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"classes/KeyService.html":{}}}],["create.dto",{"_index":1110,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["create.dto.ts",{"_index":1050,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"classes/DisplayCreateDto.html":{},"classes/PresentationConfigCreateDto.html":{},"coverage.html":{}}}],["create_authorization_request",{"_index":2543,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest",{"_index":2513,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest(session",{"_index":2518,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationservermetadata",{"_index":783,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["created",{"_index":897,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["createdat",{"_index":891,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["createdatecolumn",{"_index":894,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["createdisplay",{"_index":1583,"title":{},"body":{"controllers/DisplayController.html":{}}}],["createdisplay(user",{"_index":1585,"title":{},"body":{"controllers/DisplayController.html":{}}}],["createdsession",{"_index":3371,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.issuanceid",{"_index":3376,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.tenantid",{"_index":3375,"title":{},"body":{"injectables/SessionService.html":{}}}],["createentry",{"_index":3431,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createentry(session",{"_index":3438,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createhash('sha256').update(bufferorstreamtobuffer(body)).digest('base64",{"_index":1769,"title":{},"body":{"injectables/FilesService.html":{}}}],["createheaderandpayload",{"_index":3454,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist",{"_index":3432,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist(entry",{"_index":3441,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createparamdecorator",{"_index":3661,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["createreadstream",{"_index":2238,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createreadstream(fullpath",{"_index":2264,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createrequest",{"_index":2514,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createrequest(requestid",{"_index":2523,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["creates",{"_index":1397,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{}}}],["createwritestream",{"_index":2239,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createwritestream(fullpath",{"_index":2253,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["creation",{"_index":961,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["credential",{"_index":616,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["credential(req",{"_index":2452,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credential.issuanceconfigs",{"_index":1874,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["credential.issuanceconfigs)@jointable",{"_index":1858,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["credential_configurations_supported",{"_index":1189,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{}}}],["credential_configurations_supported[value.id",{"_index":1330,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_creation",{"_index":3276,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_endpoint",{"_index":1190,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["credential_ids",{"_index":937,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["credential_issuance",{"_index":3275,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_issuer",{"_index":1191,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["credential_revoked",{"_index":2331,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["credential_set",{"_index":956,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["credential_sets",{"_index":102,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["credential_signing_alg_values_supported",{"_index":1317,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_verification",{"_index":3278,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credentialconfig",{"_index":978,"title":{"entities/CredentialConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialconfig).key",{"_index":1163,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfig.keybinding",{"_index":1363,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.lifetime",{"_index":1361,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.schema",{"_index":1373,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.statusmanagement",{"_index":1354,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct",{"_index":1368,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct.vct",{"_index":1370,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigcreate",{"_index":1048,"title":{"classes/CredentialConfigCreate.html":{}},"body":{"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"coverage.html":{}}}],["credentialconfigid",{"_index":1950,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfigids",{"_index":1065,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{}}}],["credentialconfigmapping",{"_index":1054,"title":{"classes/CredentialConfigMapping.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["credentialconfigrepo",{"_index":1282,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigrepository",{"_index":1080,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfigs",{"_index":1062,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["credentialconfigservice",{"_index":1066,"title":{"injectables/CredentialConfigService.html":{}},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["credentialconfiguration",{"_index":1331,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.claims",{"_index":1337,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.disclosureframe",{"_index":1338,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigurationid",{"_index":1290,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["credentialconfigurationids",{"_index":2427,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["credentialconfigurationsupported",{"_index":991,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{}}}],["credentialcount",{"_index":2624,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialid",{"_index":1297,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialissuer",{"_index":3807,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["credentialissuermetadatadto",{"_index":1180,"title":{"classes/CredentialIssuerMetadataDto.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["credentialofferobject",{"_index":3096,"title":{},"body":{"entities/Session.html":{}}}],["credentialpayload",{"_index":3077,"title":{},"body":{"entities/Session.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["credentialquery",{"_index":79,"title":{"classes/CredentialQuery.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["credentialresponse",{"_index":2464,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credentials",{"_index":101,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["credentials.dto",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":971,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:5",{"_index":972,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:7",{"_index":973,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.length",{"_index":2623,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentials.push(credential",{"_index":1953,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentials.split",{"_index":464,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials/credential",{"_index":1920,"title":{},"body":{"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials/credentials.controller",{"_index":2033,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials/credentials.service",{"_index":1266,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{}}}],["credentials/entities/credential.entity",{"_index":1871,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials?.length",{"_index":2625,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialsconfigservice",{"_index":1904,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialscontroller",{"_index":1223,"title":{"controllers/CredentialsController.html":{}},"body":{"controllers/CredentialsController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsetquery",{"_index":80,"title":{"classes/CredentialSetQuery.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["credentialsmetadatacontroller",{"_index":1255,"title":{"controllers/CredentialsMetadataController.html":{}},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsservice",{"_index":1247,"title":{"injectables/CredentialsService.html":{}},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["credentialtype",{"_index":3245,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["cron",{"_index":3333,"title":{},"body":{"injectables/SessionService.html":{}}}],["crt",{"_index":15,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{}}}],["crv",{"_index":1630,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["crypto",{"_index":1160,"title":{},"body":{"injectables/CredentialConfigService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"modules/KeyModule.html":{}}}],["crypto.service",{"_index":1429,"title":{},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{}}}],["crypto.webcrypto.subtle.exportkey",{"_index":4019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.generatekey",{"_index":4018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.importkey",{"_index":4022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.sign",{"_index":4023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.verify",{"_index":4030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto/crypto.module",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["crypto/crypto.service",{"_index":767,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{}}}],["crypto/encryption/encryption.service",{"_index":2528,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["crypto/key/crypto",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialsService.html":{},"injectables/WellKnownService.html":{}}}],["crypto/key/dto/key",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{}}}],["crypto/key/entities/cert.entity",{"_index":1035,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["crypto/key/key.module",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto_alg",{"_index":1380,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"miscellaneous/variables.html":{}}}],["crypto_validation_schema",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptoImplementatationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptographic",{"_index":2851,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cryptographic_binding_methods_supported",{"_index":1318,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["cryptoimplementatationmodule",{"_index":1374,"title":{"modules/CryptoImplementatationModule.html":{}},"body":{"modules/CryptoImplementatationModule.html":{},"modules/KeyModule.html":{},"index.html":{},"modules.html":{}}}],["cryptoimplementation",{"_index":1382,"title":{"interfaces/CryptoImplementation.html":{}},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptoimplementationservice",{"_index":1283,"title":{"injectables/CryptoImplementationService.html":{}},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["cryptokey",{"_index":1488,"title":{},"body":{"classes/DBKeyService.html":{}}}],["cryptomodule",{"_index":185,"title":{"modules/CryptoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["cryptoservice",{"_index":737,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["cryptoservice.getcrypto",{"_index":1504,"title":{},"body":{"classes/DBKeyService.html":{}}}],["cryptotype",{"_index":1415,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ctx",{"_index":3662,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3663,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":1932,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["curve",{"_index":1627,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["customprops",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["d",{"_index":1508,"title":{},"body":{"classes/DBKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["data",{"_index":595,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"interfaces/CryptoImplementation.html":{},"classes/DCQL.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/StorageController.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["data')@apibody({description",{"_index":3522,"title":{},"body":{"controllers/StorageController.html":{}}}],["database",{"_index":1578,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"injectables/OAuthService.html":{}}}],["database/database.module",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":186,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"index.html":{},"modules.html":{}}}],["date",{"_index":893,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["date().gettime",{"_index":1357,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["date().toisostring().slice(0",{"_index":1764,"title":{},"body":{"injectables/FilesService.html":{}}}],["date(date.now",{"_index":3388,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(token.expiresat",{"_index":2916,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["date.gettime",{"_index":2927,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["date.now",{"_index":2602,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["day",{"_index":3343,"title":{},"body":{"injectables/SessionService.html":{}}}],["db",{"_index":1839,"title":{},"body":{"controllers/HealthController.html":{}}}],["db_database",{"_index":1564,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_host",{"_index":1555,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_password",{"_index":1563,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_port",{"_index":1560,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_type",{"_index":1552,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_username",{"_index":1562,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_validation_schema",{"_index":1551,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbkeyservice",{"_index":1436,"title":{"classes/DBKeyService.html":{}},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["dbtype",{"_index":1566,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dc+sd",{"_index":2570,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcql",{"_index":955,"title":{"classes/DCQL.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["dcql_query",{"_index":964,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["dcql_query.length",{"_index":2558,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcqlquerycount",{"_index":2556,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dd",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["deal",{"_index":1977,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["debug",{"_index":258,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["debugging",{"_index":2095,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["declarations",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["declare",{"_index":88,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["decodedvc",{"_index":2784,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.header",{"_index":2787,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.payload",{"_index":2786,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decorator",{"_index":4013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":63,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"classes/DCQL.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/FileEntity.html":{},"classes/FileUploadDto.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/RegistrarEntity.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["decrease",{"_index":3380,"title":{},"body":{"injectables/SessionService.html":{}}}],["decryption",{"_index":1646,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe",{"_index":1647,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe(response",{"_index":1652,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["dedicated",{"_index":2407,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["deeppartial",{"_index":3319,"title":{},"body":{"injectables/SessionService.html":{}}}],["default",{"_index":262,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"entities/KeyEntity.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["default_auth_client_id",{"_index":554,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_auth_client_secret",{"_index":555,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_jwt_secret",{"_index":552,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultclientid",{"_index":2392,"title":{},"body":{"injectables/OAuthService.html":{}}}],["defaultclientsecret",{"_index":2394,"title":{},"body":{"injectables/OAuthService.html":{}}}],["defaultmetrics",{"_index":2324,"title":{},"body":{"modules/MetricModule.html":{}}}],["define",{"_index":701,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/PresentationConfigCreateDto.html":{}}}],["defined",{"_index":43,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["defines",{"_index":2826,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["delete",{"_index":1071,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["delete(\":id",{"_index":1252,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{}}}],["delete(':id",{"_index":1230,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{}}}],["delete(id",{"_index":3321,"title":{},"body":{"injectables/SessionService.html":{}}}],["delete(key",{"_index":1693,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["delete(tenantid",{"_index":1081,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["deletebytenant",{"_index":1730,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletebytenant(tenantid",{"_index":1738,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteconfiguration",{"_index":2666,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(@param(\"id",{"_index":2694,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(id",{"_index":2670,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleted",{"_index":1737,"title":{},"body":{"injectables/FilesService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["deleteissuanceconfiguration",{"_index":1226,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["deleteissuanceconfiguration(id",{"_index":1229,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{}}}],["deleteissuanceconfiguration(tenantid",{"_index":1907,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["deletekey",{"_index":2143,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(@token",{"_index":2167,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(token",{"_index":2148,"title":{},"body":{"controllers/KeyController.html":{}}}],["deleteobjectcommand",{"_index":3032,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["deletepresentationconfig",{"_index":2721,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletepresentationconfig(id",{"_index":2733,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletes",{"_index":1083,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["deletesession",{"_index":3124,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletesession(id",{"_index":3128,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletetenant",{"_index":3583,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{}}}],["deletetenant(@param(\"id",{"_index":3600,"title":{},"body":{"controllers/TenantController.html":{}}}],["deletetenant(id",{"_index":3585,"title":{},"body":{"controllers/TenantController.html":{}}}],["deletetenant(tenantid",{"_index":3614,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["deletion",{"_index":2735,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["dependencies",{"_index":175,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"dependencies.html":{},"index.html":{}}}],["desc",{"_index":2778,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionService.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/NoneTrustPolicy.html":{},"controllers/OAuthController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"properties.html":{}}}],["details",{"_index":639,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["detection",{"_index":1768,"title":{},"body":{"injectables/FilesService.html":{}}}],["determine",{"_index":1855,"title":{},"body":{"entities/IssuanceConfig.html":{},"miscellaneous/variables.html":{}}}],["development/testing",{"_index":3647,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["different",{"_index":1386,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{}}}],["digest",{"_index":1298,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["direct_post.jwt",{"_index":2565,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["directory",{"_index":2743,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dirname",{"_index":2244,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["disable",{"_index":2919,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["disclosure",{"_index":1003,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["disclosureframe",{"_index":980,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{}}}],["discovery",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["discovery.dto",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["discovery.dto.ts",{"_index":3821,"title":{},"body":{"coverage.html":{}}}],["discoveryendpoint",{"_index":2898,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["discriminated",{"_index":1004,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["discriminator",{"_index":152,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["display",{"_index":1192,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{}}}],["display.service",{"_index":1592,"title":{},"body":{"controllers/DisplayController.html":{}}}],["display/display.controller",{"_index":2035,"title":{},"body":{"modules/IssuerModule.html":{}}}],["display/display.service",{"_index":2041,"title":{},"body":{"modules/IssuerModule.html":{}}}],["display/entities/display.entity",{"_index":2036,"title":{},"body":{"modules/IssuerModule.html":{}}}],["displaycontroller",{"_index":1581,"title":{"controllers/DisplayController.html":{}},"body":{"controllers/DisplayController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["displaycreatedto",{"_index":1587,"title":{"classes/DisplayCreateDto.html":{}},"body":{"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"injectables/DisplayService.html":{},"coverage.html":{}}}],["displaydata",{"_index":1586,"title":{},"body":{"controllers/DisplayController.html":{},"injectables/DisplayService.html":{}}}],["displayentity",{"_index":1600,"title":{"entities/DisplayEntity.html":{}},"body":{"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["displayinfo",{"_index":1605,"title":{"classes/DisplayInfo.html":{}},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"coverage.html":{}}}],["displaylogo",{"_index":1608,"title":{"classes/DisplayLogo.html":{}},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"coverage.html":{}}}],["displayrepository",{"_index":1619,"title":{},"body":{"injectables/DisplayService.html":{}}}],["displayservice",{"_index":1591,"title":{"injectables/DisplayService.html":{}},"body":{"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["disposition",{"_index":3543,"title":{},"body":{"controllers/StorageController.html":{}}}],["dns",{"_index":2939,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["document",{"_index":2984,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["documentation",{"_index":3817,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":2732,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["download",{"_index":3516,"title":{},"body":{"controllers/StorageController.html":{}}}],["download(@param(\"key",{"_index":3540,"title":{},"body":{"controllers/StorageController.html":{}}}],["download(key",{"_index":3517,"title":{},"body":{"controllers/StorageController.html":{}}}],["dpop",{"_index":817,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpop_jkt",{"_index":710,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["dpop_signing_alg_values_supported",{"_index":788,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpoprequired",{"_index":1848,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["dpopvalue",{"_index":815,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["driver",{"_index":3552,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["dto",{"_index":584,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["dto/auth",{"_index":2767,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dto/authentication",{"_index":1872,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["dto/authorization",{"_index":2497,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["dto/authorize",{"_index":680,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dto/client",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TenantController.html":{}}}],["dto/credential",{"_index":1109,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/WellKnownService.html":{}}}],["dto/display",{"_index":1593,"title":{},"body":{"controllers/DisplayController.html":{},"injectables/DisplayService.html":{}}}],["dto/file",{"_index":3532,"title":{},"body":{"controllers/StorageController.html":{}}}],["dto/issuance.dto",{"_index":1891,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["dto/issuer",{"_index":2987,"title":{},"body":{"injectables/ResolverService.html":{}}}],["dto/jwks",{"_index":3771,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/key",{"_index":1497,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{}}}],["dto/notification",{"_index":2468,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["dto/oauth",{"_index":3772,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/oidc",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/par",{"_index":683,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["dto/presentation",{"_index":2534,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["dto/status",{"_index":3457,"title":{},"body":{"injectables/StatusListService.html":{}}}],["dto/token",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{}}}],["dto/vp",{"_index":933,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["duration",{"_index":3204,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["duration}ms",{"_index":3210,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["during",{"_index":3729,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["dynamically",{"_index":2410,"title":{},"body":{"injectables/OAuthService.html":{}}}],["dynamicmodule",{"_index":2185,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["e",{"_index":1170,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["e.g",{"_index":474,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{},"interfaces/SessionLogContext.html":{}}}],["e.message",{"_index":1172,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["each",{"_index":89,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["easier",{"_index":2962,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["ec",{"_index":1628,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["ec_public",{"_index":1468,"title":{"classes/EC_Public.html":{}},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["ecdh",{"_index":1676,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["ecdsa",{"_index":4014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ecdsa_p256",{"_index":3843,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ed25519",{"_index":1421,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["eddsa",{"_index":4017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":3484,"title":{},"body":{"injectables/StatusListService.html":{}}}],["elements",{"_index":1128,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["elliptic",{"_index":1626,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["embedded",{"_index":1002,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["embeddeddisclosurepolicy",{"_index":60,"title":{"classes/EmbeddedDisclosurePolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["embeddeddisclosurepolicy:31",{"_index":66,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["embeddeddisclosurepolicy:42",{"_index":3016,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["embeddeddisclosurepolicy:54",{"_index":2325,"title":{},"body":{"classes/NoneTrustPolicy.html":{}}}],["embeddeddisclosurepolicy:80",{"_index":340,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["emits",{"_index":3174,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["emitter",{"_index":3910,"title":{},"body":{"dependencies.html":{}}}],["empty",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StatusListService.html":{}}}],["enabled",{"_index":1351,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"injectables/RegistrarService.html":{}}}],["enabledebugmode",{"_index":2301,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablehttplogger",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablesessionlogger",{"_index":2300,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["encodeuri(key",{"_index":3052,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["encodeuricomponent(key)}=${encodeuricomponent(value",{"_index":2600,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["encrypt",{"_index":1657,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"miscellaneous/typealiases.html":{}}}],["encrypted",{"_index":1658,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption",{"_index":1645,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption/encryption.service",{"_index":1430,"title":{},"body":{"modules/CryptoModule.html":{}}}],["encryptionservice",{"_index":1426,"title":{"injectables/EncryptionService.html":{}},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["encrypts",{"_index":1655,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["endpoint",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/HealthController.html":{},"modules/MetricModule.html":{},"controllers/OAuthController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/StorageModule.html":{}}}],["endpoints",{"_index":645,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/HealthController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["enhanced",{"_index":525,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":2121,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entities",{"_index":887,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/DisplayEntity.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"index.html":{}}}],["entities/cert.entity",{"_index":1499,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{}}}],["entities/credential.entity",{"_index":1053,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["entities/display.entity",{"_index":1601,"title":{},"body":{"classes/DisplayCreateDto.html":{},"injectables/DisplayService.html":{}}}],["entities/files.entity",{"_index":1757,"title":{},"body":{"injectables/FilesService.html":{},"modules/StorageModule.html":{}}}],["entities/issuance",{"_index":1059,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["entities/keys.entity",{"_index":1500,"title":{},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{}}}],["entities/presentation",{"_index":2662,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["entities/registrar.entity",{"_index":2824,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{}}}],["entities/session.entity",{"_index":3139,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{}}}],["entities/status",{"_index":3424,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["entitites/tenant.entity",{"_index":549,"title":{},"body":{"modules/AuthModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["entity",{"_index":885,"title":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{}},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"injectables/SessionPipe.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["entries",{"_index":2871,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entries.length",{"_index":3495,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry",{"_index":1353,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entry.bits",{"_index":3474,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.elements",{"_index":3491,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.elements[id",{"_index":3490,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.key",{"_index":1681,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["entry.key.d",{"_index":1680,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["entry.relyingpartyid",{"_index":2953,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["entry.tenantid",{"_index":3475,"title":{},"body":{"injectables/StatusListService.html":{}}}],["enum",{"_index":123,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{},"classes/TokenRequestDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":3952,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":2295,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"modules/RegistrarModule.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["environments",{"_index":1795,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["equals",{"_index":3072,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals(\"https://json",{"_index":3073,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals(\"object",{"_index":3075,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals('https://json",{"_index":3063,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals('object",{"_index":3070,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["erika",{"_index":2444,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["err",{"_index":2109,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["err.message",{"_index":2807,"title":{},"body":{"injectables/PresentationsService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["error",{"_index":260,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["error(\"error",{"_index":2943,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["error(\"issuer",{"_index":2990,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(\"key",{"_index":3014,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(\"no",{"_index":2796,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["error(\"stack",{"_index":3487,"title":{},"body":{"injectables/StatusListService.html":{}}}],["error(\"subject",{"_index":2999,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('credential",{"_index":867,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["error(`error",{"_index":3738,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["error(`invalid",{"_index":1820,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["error(`unsupported",{"_index":1422,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["error.children",{"_index":1937,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["error.children.length",{"_index":1938,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["error.constraints",{"_index":1167,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error.message",{"_index":1821,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.name",{"_index":3213,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.property",{"_index":1166,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error.stack",{"_index":3216,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.value",{"_index":1168,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error_description",{"_index":855,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["errormessages",{"_index":1941,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["errors",{"_index":1158,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerService.html":{}}}],["es",{"_index":1667,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["es256",{"_index":510,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["es256.getverifier(publickey",{"_index":2789,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["eslint",{"_index":2918,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["eslint/no",{"_index":2923,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["etag",{"_index":1715,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["etsi_tl",{"_index":948,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["eudi",{"_index":3982,"title":{},"body":{"properties.html":{}}}],["eudiplo",{"_index":164,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["event",{"_index":1156,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/NotificationRequestDto.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["events",{"_index":3226,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["example",{"_index":1983,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["examples",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{}}}],["exchange",{"_index":669,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["execution",{"_index":3170,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["executioncontext",{"_index":42,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1464,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/StatusListService.html":{}}}],["existing",{"_index":2157,"title":{},"body":{"controllers/KeyController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{}}}],["exists",{"_index":1101,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"interfaces/FileStorage.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/StatusListService.html":{}}}],["exists(key",{"_index":1695,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["existssync",{"_index":2240,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["exp",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["expandvariables",{"_index":278,"title":{},"body":{"modules/AppModule.html":{}}}],["expect",{"_index":3714,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["expected",{"_index":2436,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["expectedcode",{"_index":831,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedpreauthorizedcode",{"_index":826,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedtxcode",{"_index":828,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectresponse",{"_index":3713,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["expiration",{"_index":1359,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/ParResponseDto.html":{}}}],["expirationdate",{"_index":2915,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["expirationdate.gettime",{"_index":2926,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["expire",{"_index":2122,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expired",{"_index":3117,"title":{},"body":{"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["expires_in",{"_index":438,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/OAuthService.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["expiresat",{"_index":2601,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["expiresin",{"_index":482,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["expiresinseconds",{"_index":841,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["export",{"_index":30,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["exportable",{"_index":1522,"title":{},"body":{"classes/DBKeyService.html":{}}}],["exportjwk",{"_index":1489,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["exportjwk(secret.privatekey",{"_index":1670,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exports",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["exportspki",{"_index":1490,"title":{},"body":{"classes/DBKeyService.html":{}}}],["exportspki(publickeyinstance",{"_index":1542,"title":{},"body":{"classes/DBKeyService.html":{}}}],["express",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"controllers/StorageController.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["express.multer.file",{"_index":1745,"title":{},"body":{"injectables/FilesService.html":{},"controllers/StorageController.html":{}}}],["ext",{"_index":1512,"title":{},"body":{"classes/DBKeyService.html":{}}}],["extend",{"_index":938,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["extends",{"_index":37,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/DBKeyService.html":{},"classes/DisplayCreateDto.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/RootOfTrustPolicy.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{}}}],["extends#integrity",{"_index":3684,"title":{},"body":{"classes/VCT.html":{}}}],["external",{"_index":444,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["extname",{"_index":1755,"title":{},"body":{"injectables/FilesService.html":{}}}],["extname(file.originalname",{"_index":1761,"title":{},"body":{"injectables/FilesService.html":{}}}],["extract",{"_index":454,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["extractable",{"_index":1538,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["extracterrormessages",{"_index":1930,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extracterrormessages(child",{"_index":1940,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extracterrormessages(error",{"_index":1943,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extractjwt",{"_index":2087,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2115,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{}}}],["eyjhbgcioijsuzi1niisinr5cci6ikpxvcj9",{"_index":3677,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["failed",{"_index":1162,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["failure",{"_index":3379,"title":{},"body":{"injectables/SessionService.html":{}}}],["failwitherror",{"_index":2097,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fall",{"_index":466,"title":{},"body":{"controllers/AuthController.html":{}}}],["false",{"_index":285,"title":{},"body":{"modules/AppModule.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/VCT.html":{},"miscellaneous/variables.html":{}}}],["false})@isboolean",{"_index":1019,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["false})@isempty",{"_index":3694,"title":{},"body":{"classes/VCT.html":{}}}],["family_name",{"_index":2445,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["fatal",{"_index":261,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["fd3ebf28",{"_index":1990,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["fetch",{"_index":2761,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fetched",{"_index":3115,"title":{},"body":{"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["fields",{"_index":2619,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["file#asynchronous",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["file.buffer",{"_index":1771,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.jwt",{"_index":3482,"title":{},"body":{"injectables/StatusListService.html":{}}}],["file.mimetype",{"_index":1772,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.originalname",{"_index":1774,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.replace(\".json",{"_index":1136,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["file.stack.pop",{"_index":3486,"title":{},"body":{"injectables/StatusListService.html":{}}}],["file_storage",{"_index":1721,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fileentity",{"_index":1682,"title":{"entities/FileEntity.html":{}},"body":{"entities/FileEntity.html":{},"injectables/FilesService.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["fileinterceptor",{"_index":3530,"title":{},"body":{"controllers/StorageController.html":{}}}],["filerepository",{"_index":1734,"title":{},"body":{"injectables/FilesService.html":{}}}],["files",{"_index":1131,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["files.service",{"_index":3534,"title":{},"body":{"controllers/StorageController.html":{},"modules/StorageModule.html":{}}}],["filesservice",{"_index":1728,"title":{"injectables/FilesService.html":{}},"body":{"injectables/FilesService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["filestorage",{"_index":1688,"title":{"interfaces/FileStorage.html":{}},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["fileuploaddto",{"_index":1723,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"controllers/StorageController.html":{},"coverage.html":{}}}],["fileuploaddto})@post",{"_index":3524,"title":{},"body":{"controllers/StorageController.html":{}}}],["fill(0",{"_index":3464,"title":{},"body":{"injectables/StatusListService.html":{}}}],["filter((tenant",{"_index":1122,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["finally",{"_index":2985,"title":{},"body":{"injectables/ResolverService.html":{}}}],["find",{"_index":3619,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["findonebyorfail",{"_index":1333,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["findoptionswhere",{"_index":3327,"title":{},"body":{"injectables/SessionService.html":{}}}],["findtenantbyid",{"_index":3606,"title":{},"body":{"injectables/TenantService.html":{}}}],["findtenantbyid(tenantid",{"_index":3617,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["first",{"_index":1535,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/ResolverService.html":{}}}],["firstvaluefrom",{"_index":2764,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["firstvaluefrom(this.httpservice.get(uri)).then",{"_index":2793,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fixed",{"_index":1989,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["flag",{"_index":3665,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["flow",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["flow_complete",{"_index":3273,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_error",{"_index":3274,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_start",{"_index":3271,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flowtype",{"_index":2537,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["folder",{"_index":251,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["forbiddenexception",{"_index":3637,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["forbidnonwhitelisted",{"_index":1150,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["forbidunknownvalues",{"_index":1145,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["force",{"_index":1116,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["forcepathstyle",{"_index":3575,"title":{},"body":{"modules/StorageModule.html":{}}}],["format",{"_index":25,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"classes/FileUploadDto.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/ResolverService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["formats",{"_index":3798,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["forroot",{"_index":2183,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["forwardref",{"_index":2508,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{}}}],["found",{"_index":803,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionPipe.html":{},"injectables/StatusListService.html":{}}}],["foundation",{"_index":170,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"properties.html":{}}}],["free",{"_index":3440,"title":{},"body":{"injectables/StatusListService.html":{}}}],["fresh",{"_index":2593,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["fs",{"_index":1108,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["fullpath",{"_index":2246,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["function",{"_index":2224,"title":{},"body":{"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":3961,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":3082,"title":{},"body":{"entities/Session.html":{}}}],["g",{"_index":2549,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["gauge",{"_index":3312,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["generate",{"_index":1463,"title":{},"body":{"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/OAuthService.html":{},"controllers/PresentationManagementController.html":{}}}],["generateaccesstoken",{"_index":2365,"title":{},"body":{"injectables/OAuthService.html":{}}}],["generateaccesstoken(clientid",{"_index":2374,"title":{},"body":{"injectables/OAuthService.html":{}}}],["generated",{"_index":1456,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["generated/client.gen",{"_index":2888,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["generatekeypair",{"_index":1388,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["generatekeypair(\"ecdh",{"_index":1666,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generates",{"_index":1392,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{}}}],["generatesalt",{"_index":1299,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["generatetoken",{"_index":1797,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generatetoken(payload",{"_index":2064,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetokenoptions",{"_index":1788,"title":{"interfaces/GenerateTokenOptions.html":{}},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["generation",{"_index":1799,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generic",{"_index":1384,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyService.html":{},"injectables/SessionLoggerService.html":{}}}],["get(\".well",{"_index":494,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\":id",{"_index":3146,"title":{},"body":{"controllers/SessionController.html":{}}}],["get(\":key",{"_index":3539,"title":{},"body":{"controllers/StorageController.html":{}}}],["get(\"jwks.json",{"_index":3783,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"oauth",{"_index":3780,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"openid",{"_index":3778,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"schema/:id",{"_index":1272,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get(\"status",{"_index":3401,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get(\"vct/:id",{"_index":1268,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('.well",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':id",{"_index":3132,"title":{},"body":{"controllers/SessionController.html":{}}}],["get(':key",{"_index":3518,"title":{},"body":{"controllers/StorageController.html":{}}}],["get('oauth",{"_index":3756,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('schema/:id",{"_index":1261,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('session",{"_index":2481,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["get('status",{"_index":3395,"title":{},"body":{"controllers/StatusListController.html":{}}}],["get('vct/:id",{"_index":1264,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get()@healthcheck",{"_index":1833,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@sessionlogger('session",{"_index":2491,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get(state",{"_index":3323,"title":{},"body":{"injectables/SessionService.html":{}}}],["get(tenantid",{"_index":1088,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{}}}],["getalg",{"_index":1408,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getall",{"_index":3306,"title":{},"body":{"injectables/SessionService.html":{}}}],["getallsessions",{"_index":3125,"title":{},"body":{"controllers/SessionController.html":{}}}],["getauthorizationserver",{"_index":730,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["getauthorizationserver(tenantid",{"_index":745,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["getauthzmetadata",{"_index":3788,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getauthzmetadata(session",{"_index":3792,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getby",{"_index":800,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["getby(where",{"_index":3326,"title":{},"body":{"injectables/SessionService.html":{}}}],["getbyid",{"_index":1072,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getbyid(tenantid",{"_index":1091,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getcertificate",{"_index":1448,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getcertificate(tenantid",{"_index":1485,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getconfigs",{"_index":1227,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(@token",{"_index":1249,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(user",{"_index":1232,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfiguration",{"_index":2269,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getcredential",{"_index":1276,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential(credentialconfigurationid",{"_index":1285,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfigurationsupported",{"_index":1277,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfigurationsupported(session",{"_index":1291,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcrypto",{"_index":1409,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getcrypto(alg",{"_index":1416,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getdisplay",{"_index":1584,"title":{},"body":{"controllers/DisplayController.html":{}}}],["getdisplay(@token",{"_index":1595,"title":{},"body":{"controllers/DisplayController.html":{}}}],["getdisplay(user",{"_index":1589,"title":{},"body":{"controllers/DisplayController.html":{}}}],["getdownloadurl",{"_index":1731,"title":{},"body":{"injectables/FilesService.html":{}}}],["getdownloadurl(key",{"_index":1741,"title":{},"body":{"injectables/FilesService.html":{}}}],["getencryptionpublickey",{"_index":1648,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getencryptionpublickey(tenantid",{"_index":1659,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getexistingrp",{"_index":2844,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getexistingrp(name",{"_index":2861,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getexternaloidcconfig",{"_index":2070,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getexternaloidcconfig(configservice",{"_index":2075,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getglobaljwks",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["getheadersfromrequest",{"_index":770,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getheadersfromrequest(req",{"_index":810,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["getintegratedoauth2config",{"_index":2071,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getintegratedoauth2config(configservice",{"_index":2079,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getissuanceconfiguration",{"_index":1900,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfiguration(tenantid",{"_index":1909,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid",{"_index":1901,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid(issuanceconfigid",{"_index":1911,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurations",{"_index":1884,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(@token",{"_index":1893,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(user",{"_index":1887,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuermetadata",{"_index":3789,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getissuermetadata(session",{"_index":3794,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getjwks",{"_index":3755,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["getjwks(@sessionentity",{"_index":3784,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(session",{"_index":3758,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(tenantid",{"_index":3803,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getkeys",{"_index":2144,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkeys(@token",{"_index":2161,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkeys(token",{"_index":2150,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkid",{"_index":1441,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getkid(tenantid",{"_index":1457,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getlist",{"_index":3393,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlist(@param(\"tenantid",{"_index":3403,"title":{},"body":{"controllers/StatusListController.html":{}}}],["getlist(tenantid",{"_index":3394,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlogformat",{"_index":2270,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getloglevel",{"_index":2271,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getoauth2token",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoauth2token(body",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{}}}],["getobjectcommand",{"_index":3033,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["getoffer",{"_index":1959,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoffer(res",{"_index":1960,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoidcdiscovery",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["getorthrow(\"public_url",{"_index":2046,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/RegistrarService.html":{}}}],["getpresentationconfig",{"_index":2722,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfig(id",{"_index":2737,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs",{"_index":2723,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs(tenantid",{"_index":2739,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getprivatekey",{"_index":1442,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getprivatekey(tenantid",{"_index":1461,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpubfromprivatekey",{"_index":1443,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpubfromprivatekey(privatekey",{"_index":1465,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpublickey",{"_index":1444,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getpublickey(type",{"_index":1469,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getrepositorytoken",{"_index":2187,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrepositorytoken(certentity",{"_index":2202,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrepositorytoken(keyentity",{"_index":2203,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrequestwithsession",{"_index":2488,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(@sessionentity",{"_index":2500,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(session",{"_index":2490,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getresponse",{"_index":2489,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["getresponse(body",{"_index":2494,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["gets",{"_index":1459,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getschema",{"_index":1278,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschema(credentialconfigurationid",{"_index":1293,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschemapath",{"_index":119,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["getschemapath(allowlistpolicy",{"_index":1043,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["getschemapath(attestationbasedpolicy",{"_index":1041,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["getschemapath(authenticationmethodauth",{"_index":1876,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["getschemapath(authenticationmethodnone",{"_index":1875,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["getschemapath(authenticationmethodpresentation",{"_index":1877,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["getschemapath(nonetrustpolicy",{"_index":1042,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["getschemapath(rootoftrustpolicy",{"_index":1044,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["getschemapath(webhookauthconfigheader",{"_index":151,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["getschemapath(webhookauthconfignone",{"_index":150,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["getsession",{"_index":3126,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(@param(\"id",{"_index":3147,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(session",{"_index":3131,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsignedurl",{"_index":1690,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsignedurl(key",{"_index":1697,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsignedurl?(key",{"_index":1719,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["getsigner",{"_index":1389,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsigner(privatekeyjwk",{"_index":1394,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["getstream",{"_index":1691,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getstream(key",{"_index":1699,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["gettenants",{"_index":3607,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["getting",{"_index":1206,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["gettoken",{"_index":2336,"title":{},"body":{"controllers/OAuthController.html":{}}}],["gettoken(tokenrequest",{"_index":2337,"title":{},"body":{"controllers/OAuthController.html":{}}}],["getvct",{"_index":1279,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getvct(credentialid",{"_index":1295,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getverifier",{"_index":1390,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getverifier(publickeyjwk",{"_index":1399,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["given",{"_index":1084,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"classes/KeyService.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["given_name",{"_index":1996,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["global",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"modules/CryptoImplementatationModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["globalthis.headers",{"_index":3966,"title":{},"body":{"miscellaneous/functions.html":{}}}],["grant",{"_index":449,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"controllers/OAuthController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/TokenRequestDto.html":{}}}],["grant_type",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenRequestDto.html":{}}}],["grant_types_supported",{"_index":504,"title":{},"body":{"controllers/AuthController.html":{}}}],["granttype",{"_index":773,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["graph",{"_index":3977,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":2320,"title":{},"body":{"modules/MetricModule.html":{}}}],["handle",{"_index":658,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{}}}],["handleclientcredentialsgrant",{"_index":2366,"title":{},"body":{"injectables/OAuthService.html":{}}}],["handleclientcredentialsgrant(request",{"_index":2376,"title":{},"body":{"injectables/OAuthService.html":{}}}],["handled",{"_index":1818,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["handler",{"_index":3171,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["handles",{"_index":646,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["handlesigningkeyerror",{"_index":2108,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":1644,"title":{},"body":{"injectables/EncryptionService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["hasclient",{"_index":2367,"title":{},"body":{"injectables/OAuthService.html":{}}}],["hasclient(clientid",{"_index":2378,"title":{},"body":{"injectables/OAuthService.html":{}}}],["hash",{"_index":4016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashalg",{"_index":1345,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hasher",{"_index":1344,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["hasresponsedata",{"_index":3736,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["haswebhook",{"_index":2616,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["head",{"_index":3049,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.contentlength",{"_index":3055,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.contenttype",{"_index":3056,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.etag",{"_index":3054,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["header",{"_index":114,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["header(\"content",{"_index":3402,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["header('content",{"_index":3759,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["header.kid",{"_index":3013,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c",{"_index":2991,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c.map",{"_index":2994,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header[\"jwk",{"_index":3003,"title":{},"body":{"injectables/ResolverService.html":{}}}],["headername",{"_index":111,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["headers",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["headers.authorization",{"_index":456,"title":{},"body":{"controllers/AuthController.html":{}}}],["headers[session.claimswebhook!.auth.config.headername",{"_index":3718,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["headers[webhook.auth.config.headername",{"_index":3743,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["headobjectcommand",{"_index":3034,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["health",{"_index":1826,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1844,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1835,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1829,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1824,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":187,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"index.html":{},"modules.html":{}}}],["help",{"_index":577,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{}}}],["here",{"_index":3812,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["hh:mm:ss",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["holdercnf",{"_index":1286,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["host",{"_index":1369,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["hostname",{"_index":2559,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${session.id}/oid4vp",{"_index":2563,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${session.tenantid",{"_index":2545,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid}/credentials",{"_index":1371,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hot",{"_index":2293,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["hour",{"_index":2403,"title":{},"body":{"injectables/OAuthService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["hours",{"_index":492,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["hs256",{"_index":1807,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["http",{"_index":2298,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["httpmethod",{"_index":762,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["httpmodule",{"_index":2023,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules/VerifierModule.html":{}}}],["https://${this.bucket}.s3.amazonaws.com/${encodeuri(key",{"_index":3053,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["https://github.com/iamolegga/nestjs",{"_index":289,"title":{},"body":{"modules/AppModule.html":{}}}],["https://github.com/openwallet",{"_index":3984,"title":{},"body":{"properties.html":{}}}],["https://json",{"_index":3074,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["https://openid.net/specs/openid",{"_index":939,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["https://openwallet",{"_index":169,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["httpservice",{"_index":2186,"title":{},"body":{"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["iat",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["id",{"_index":16,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TokenRequestDto.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["id_token_signing_alg_values_supported",{"_index":509,"title":{},"body":{"controllers/AuthController.html":{}}}],["identifier",{"_index":27,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"classes/DCQL.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"entities/TenantEntity.html":{},"classes/TokenRequestDto.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["ids",{"_index":1063,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["idx",{"_index":3485,"title":{},"body":{"injectables/StatusListService.html":{}}}],["ignore",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":2120,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":2008,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png",{"_index":1980,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png')@apibody({type",{"_index":1966,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["image/png')@useguards(jwtauthguard)@apisecurity('oauth2')@apibody({type",{"_index":2673,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["images",{"_index":3527,"title":{},"body":{"controllers/StorageController.html":{}}}],["imeplement",{"_index":1385,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation",{"_index":1418,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/OAuthService.html":{}}}],["implementation.module",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{}}}],["implementation.module.ts",{"_index":1379,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["implementation.service",{"_index":1308,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{}}}],["implementation.service.ts",{"_index":1407,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.service.ts:10",{"_index":1411,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:17",{"_index":1413,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:26",{"_index":1417,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.ts",{"_index":1383,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.ts:19",{"_index":1391,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:24",{"_index":1396,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:29",{"_index":1400,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation/crypto",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["implementation/ed25519.ts",{"_index":3855,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":130,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/EC_Public.html":{},"injectables/IssuanceService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/LocalFileStorage.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["import",{"_index":49,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["import(tenantid",{"_index":1473,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["import.dto",{"_index":1498,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/UpdateKeyDto.html":{}}}],["import.dto.ts",{"_index":2129,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"coverage.html":{}}}],["import.dto.ts:11",{"_index":2137,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:13",{"_index":2138,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:15",{"_index":2132,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:17",{"_index":2133,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:19",{"_index":2131,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:31",{"_index":2181,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:38",{"_index":2179,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:45",{"_index":2180,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:7",{"_index":2134,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:9",{"_index":2136,"title":{},"body":{"classes/Key.html":{}}}],["imported",{"_index":1174,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["importerror",{"_index":1171,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["importing",{"_index":2140,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["importjwk",{"_index":1491,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{}}}],["importjwk(keyentity.key",{"_index":1675,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["importjwk(payload.cnf.jwk",{"_index":2797,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["importjwk(privatekey",{"_index":1543,"title":{},"body":{"classes/DBKeyService.html":{}}}],["imports",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CredentialConfigService.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{}}}],["include",{"_index":472,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{}}}],["included",{"_index":1861,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["includes",{"_index":2520,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["including",{"_index":2836,"title":{},"body":{"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":3154,"title":{},"body":{"interfaces/SessionLogContext.html":{},"classes/WebhookResponse.html":{}}}],["indexes",{"_index":3415,"title":{},"body":{"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["indicates",{"_index":29,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["indicating",{"_index":2701,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["information",{"_index":168,"title":{},"body":{"controllers/AppController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"controllers/IssuerManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["inherited",{"_index":65,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/DBKeyService.html":{},"classes/NoneTrustPolicy.html":{},"classes/RootOfTrustPolicy.html":{}}}],["init",{"_index":1445,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"controllers/TenantController.html":{}}}],["init(tenant",{"_index":1476,"title":{},"body":{"classes/DBKeyService.html":{}}}],["init(tenantid",{"_index":2220,"title":{},"body":{"classes/KeyService.html":{}}}],["init.dto",{"_index":3590,"title":{},"body":{"controllers/TenantController.html":{}}}],["init.dto.ts",{"_index":975,"title":{},"body":{"classes/ClientInitDto.html":{},"coverage.html":{}}}],["init.dto.ts:6",{"_index":977,"title":{},"body":{"classes/ClientInitDto.html":{}}}],["initialization",{"_index":3272,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["initialize",{"_index":1478,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/functions.html":{}}}],["initializeclients",{"_index":2368,"title":{},"body":{"injectables/OAuthService.html":{}}}],["initialized",{"_index":2222,"title":{},"body":{"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["initializes",{"_index":1246,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["inittenant",{"_index":3584,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{}}}],["inittenant(@token",{"_index":3593,"title":{},"body":{"controllers/TenantController.html":{}}}],["inittenant(id",{"_index":3621,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["inittenant(user",{"_index":3587,"title":{},"body":{"controllers/TenantController.html":{}}}],["inject",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["inject(\"keyservice",{"_index":2160,"title":{},"body":{"controllers/KeyController.html":{}}}],["inject(file_storage",{"_index":1758,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectable",{"_index":33,"title":{"injectables/AdminAuthGuard.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["injectables",{"_index":35,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"index.html":{}}}],["injectmetric",{"_index":3344,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["injectmetric(\"sessions",{"_index":3352,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectmetric(\"tenant_total",{"_index":3640,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["injectrepository",{"_index":1104,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["injectrepository(credentialconfig",{"_index":1111,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["injectrepository(displayentity",{"_index":1622,"title":{},"body":{"injectables/DisplayService.html":{}}}],["injectrepository(fileentity",{"_index":1759,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(issuanceconfig",{"_index":1921,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["injectrepository(keyentity",{"_index":1665,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["injectrepository(presentationconfig",{"_index":2768,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["injectrepository(registrarentity",{"_index":2890,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["injectrepository(session",{"_index":3351,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(statuslistentity",{"_index":3459,"title":{},"body":{"injectables/StatusListService.html":{}}}],["injectrepository(statusmapping",{"_index":3458,"title":{},"body":{"injectables/StatusListService.html":{}}}],["injectrepository(tenantentity",{"_index":3639,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["instance",{"_index":1046,"title":{},"body":{"entities/CredentialConfig.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["instance.decode(`${data}.${signature",{"_index":2785,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["instanceof",{"_index":2113,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalFileStorage.html":{}}}],["instantiate",{"_index":1007,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["instead",{"_index":96,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["insufficient_authorization",{"_index":854,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["int",{"_index":3502,"title":{},"body":{"entities/StatusMapping.html":{}}}],["integrated",{"_index":1796,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["integration",{"_index":3636,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["intended",{"_index":1635,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["interact",{"_index":3981,"title":{},"body":{"properties.html":{}}}],["interacting",{"_index":2878,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["interaction",{"_index":2835,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["intercept",{"_index":3163,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercept(context",{"_index":3166,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interceptor",{"_index":3161,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercepts",{"_index":3169,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthenticationMethodInterface.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthenticationMethodInterface.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["interval",{"_index":3356,"title":{},"body":{"injectables/SessionService.html":{}}}],["intervaltime",{"_index":3354,"title":{},"body":{"injectables/SessionService.html":{}}}],["invalid",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["is_public_key",{"_index":2056,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isabsolute",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["isabsolute(folder",{"_index":335,"title":{},"body":{"modules/AppModule.html":{}}}],["isarray",{"_index":71,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isarray()@isoptional",{"_index":926,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/OfferRequestDto.html":{}}}],["isarray()@isoptional()@validatenested({each",{"_index":1216,"title":{},"body":{"classes/CredentialQuery.html":{},"classes/DCQL.html":{}}}],["isarray()@isstring({each",{"_index":3680,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["isarray()@validatenested({each",{"_index":1547,"title":{},"body":{"classes/DCQL.html":{}}}],["isboolean",{"_index":929,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isboolean()@isoptional",{"_index":1221,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["isboolean()@isoptional()@column('boolean",{"_index":1864,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["isdebugmodeenabled",{"_index":2272,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isdefined",{"_index":72,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/CredentialConfigService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isdefined()@isarray()@validatenested({each",{"_index":341,"title":{},"body":{"classes/AttestationBasedPolicy.html":{},"classes/PolicyCredential.html":{}}}],["isdefined()@isstring",{"_index":3017,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["isdefined()@isstring({each",{"_index":67,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["isempty",{"_index":3696,"title":{},"body":{"classes/VCT.html":{}}}],["isenabled",{"_index":2845,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["isenum",{"_index":121,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isenum([\"credential_accepted",{"_index":2332,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum([\"ec",{"_index":2139,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["isenum(['credential_accepted",{"_index":2330,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum(['ec",{"_index":2135,"title":{},"body":{"classes/Key.html":{}}}],["isenum(authconfig",{"_index":139,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isenum(responsetype",{"_index":2443,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isglobal",{"_index":277,"title":{},"body":{"modules/AppModule.html":{}}}],["ishttploggerenabled",{"_index":2273,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isin",{"_index":73,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isin([\"aki",{"_index":947,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isin([\"allowlist",{"_index":87,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin([\"attestationbased",{"_index":104,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin([\"auth",{"_index":624,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isin([\"client_credentials",{"_index":3671,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["isin([\"none",{"_index":98,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin([\"presentationduringissuance",{"_index":623,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isin([\"rootoftrust",{"_index":91,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin(['undefined'])@isstring",{"_index":3703,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{}}}],["isin([0",{"_index":3513,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isin([authconfig.api_key",{"_index":132,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isin([authconfig.none",{"_index":137,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isnotempty",{"_index":930,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isnotempty()@isstring({each",{"_index":2639,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["isnull",{"_index":3347,"title":{},"body":{"injectables/SessionService.html":{}}}],["isnumber",{"_index":931,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isnumber()@isin(['0",{"_index":3511,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber()@isoptional()@column('int",{"_index":1852,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["isobject",{"_index":122,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isobject()@isoptional",{"_index":2699,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["isobject()@validatenested()@type(undefined",{"_index":603,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodPresentation.html":{}}}],["isoptional",{"_index":74,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{}}}],["isoptional()@column('boolean",{"_index":1018,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@column('int",{"_index":1022,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@isarray()@validatenested()@type(undefined)@column('json",{"_index":2643,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["isoptional()@isarray()@validatenested({each",{"_index":2635,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["isoptional()@isboolean",{"_index":1214,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["isoptional()@isstring",{"_index":716,"title":{},"body":{"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{}}}],["isoptional()@validatenested()@apiproperty({oneof",{"_index":997,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@validatenested()@type(undefined",{"_index":634,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["isoptional()@validatenested()@type(undefined)@column('json",{"_index":1026,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["ispublic",{"_index":1746,"title":{},"body":{"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["iss",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["issessionloggerenabled",{"_index":2274,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isstring",{"_index":75,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isstring()@column('varchar",{"_index":994,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["isstring()@isin(['aki",{"_index":3678,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["isstring()@isin(['allowlist",{"_index":64,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["isstring()@isin(['attestationbased",{"_index":339,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["isstring()@isin(['auth",{"_index":605,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{}}}],["isstring()@isin(['none",{"_index":628,"title":{},"body":{"classes/AuthenticationMethodNone.html":{},"classes/NoneTrustPolicy.html":{}}}],["isstring()@isin(['presentationduringissuance",{"_index":631,"title":{},"body":{"classes/AuthenticationMethodPresentation.html":{}}}],["isstring()@isin(['rootoftrust",{"_index":3015,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["isstring()@isoptional",{"_index":976,"title":{},"body":{"classes/ClientInitDto.html":{},"classes/KeyImportDto.html":{},"classes/StatusUpdateDto.html":{}}}],["isstring()@isoptional()@column('varchar",{"_index":1862,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["issuance",{"_index":620,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["issuance.credentialconfigs",{"_index":1015,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["issuance.service",{"_index":1892,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["issuance/credentials",{"_index":1115,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["issuance/entities/issuance",{"_index":1038,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{}}}],["issuance/issuance",{"_index":1925,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuance/issuance.controller",{"_index":2037,"title":{},"body":{"modules/IssuerModule.html":{}}}],["issuance/issuance.service",{"_index":769,"title":{},"body":{"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig",{"_index":811,"title":{"entities/IssuanceConfig.html":{}},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["issuanceconfig.authenticationconfig",{"_index":871,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig.claimswebhook",{"_index":875,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig.credentialconfigs.find",{"_index":1320,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuanceconfig.dpoprequired",{"_index":821,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfigid",{"_index":1913,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuanceconfigrepo",{"_index":1906,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuanceconfigs",{"_index":981,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{}}}],["issuancecontroller",{"_index":1881,"title":{"controllers/IssuanceController.html":{}},"body":{"controllers/IssuanceController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuancecounter",{"_index":3365,"title":{},"body":{"injectables/SessionService.html":{}}}],["issuancedto",{"_index":1060,"title":{"classes/IssuanceDto.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"coverage.html":{}}}],["issuanceid",{"_index":869,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["issuanceservice",{"_index":739,"title":{"injectables/IssuanceService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"index.html":{}}}],["issue",{"_index":2455,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["issued",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/WellKnownService.html":{}}}],["issuer",{"_index":497,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["issuer/authorize/authorize.service",{"_index":3805,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["issuer/authorize/dto/authorize",{"_index":3114,"title":{},"body":{"entities/Session.html":{}}}],["issuer/issuer.module",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["issuer/oid4vci/dto/offer",{"_index":2529,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["issuer/oid4vci/oid4vci.service",{"_index":1972,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{}}}],["issuer/status",{"_index":543,"title":{},"body":{"modules/AuthModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["issuer_state",{"_index":711,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["issuer_validation_schema",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["issuermanagementcontroller",{"_index":1955,"title":{"controllers/IssuerManagementController.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuermetadata",{"_index":2011,"title":{"interfaces/IssuerMetadata.html":{}},"body":{"interfaces/IssuerMetadata.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["issuermetadata(session",{"_index":3763,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuermodule",{"_index":188,"title":{"modules/IssuerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"index.html":{},"modules.html":{}}}],["issues",{"_index":1288,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuing",{"_index":3277,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["isused",{"_index":1319,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["isused?.id",{"_index":1328,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["isusingexternaloidc",{"_index":1822,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["isuuid",{"_index":2442,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["isuuid()@isoptional",{"_index":2439,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["isverified",{"_index":4029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["it's",{"_index":3728,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["item.name",{"_index":2934,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["items",{"_index":954,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["iterate",{"_index":1126,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["itself",{"_index":3595,"title":{},"body":{"controllers/TenantController.html":{}}}],["job",{"_index":3334,"title":{},"body":{"injectables/SessionService.html":{}}}],["joi",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/OAuthModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["joi.boolean().default(false",{"_index":266,"title":{},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.boolean().when(joi.ref(\"storage_driver",{"_index":3567,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.exist",{"_index":2830,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().default(24",{"_index":3290,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().default(60",{"_index":3288,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().when(\"db_type",{"_index":1561,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.object",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.optional",{"_index":1558,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.required",{"_index":1559,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string",{"_index":256,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"../../assets/config",{"_index":269,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"../../tmp",{"_index":252,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"24h",{"_index":570,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"azp",{"_index":562,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"eudiplo",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"http://localhost:3000",{"_index":2043,"title":{},"body":{"modules/IssuerModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"rs256",{"_index":564,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default((parent",{"_index":3558,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(default_auth_client_id",{"_index":574,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(default_auth_client_secret",{"_index":572,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(default_jwt_secret",{"_index":566,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().optional",{"_index":556,"title":{},"body":{"modules/AuthModule.html":{},"modules/OAuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().optional().default(\"eudiplo",{"_index":568,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":559,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().uri().when(\"km_type",{"_index":2197,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"db",{"_index":2192,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"es256\").default(\"es256",{"_index":1381,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"local",{"_index":3554,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"sqlite",{"_index":1553,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(\"db_type",{"_index":1556,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(\"km_type",{"_index":2199,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(\"registrar_url",{"_index":2829,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(joi.ref(\"storage_driver",{"_index":3557,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.when(\"oidc",{"_index":558,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{}}}],["join(__dirname",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["join(configpath",{"_index":1129,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["join(folder",{"_index":336,"title":{},"body":{"modules/AppModule.html":{}}}],["join(parent.folder",{"_index":3559,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["join(this.basedir",{"_index":2247,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["jointable",{"_index":1870,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["jose",{"_index":1492,"title":{},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"dependencies.html":{}}}],["joseheaderparameters",{"_index":2225,"title":{},"body":{"classes/KeyService.html":{}}}],["json",{"_index":276,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/SchemaResponse.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["json.parse",{"_index":1133,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["json.stringify",{"_index":3121,"title":{},"body":{"entities/Session.html":{}}}],["json.stringify(data",{"_index":3208,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["json.stringify(presentationconfig.dcql_query).replace",{"_index":2548,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(presentationconfig.registrationcert).replace",{"_index":2551,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jsonwebkey",{"_index":1395,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["jwe",{"_index":1656,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwk",{"_index":763,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"miscellaneous/variables.html":{}}}],["jwk_ec_private",{"_index":1466,"title":{},"body":{"classes/DBKeyService.html":{}}}],["jwk_ec_public",{"_index":1629,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["jwks",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["jwks_uri",{"_index":500,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["jwksrequestsperminute",{"_index":2106,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksresponsedto",{"_index":1641,"title":{"classes/JwksResponseDto.html":{}},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["jwksuri",{"_index":2101,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt",{"_index":824,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["jwt.service",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["jwt.setaudience(options.audience",{"_index":1814,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.sign(secretkey",{"_index":1815,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.strategy",{"_index":550,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt/crypto",{"_index":1301,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":1304,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt/sd",{"_index":1306,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt/types",{"_index":1487,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt_alg_values",{"_index":2571,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jwt_expires_in",{"_index":569,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["jwt_issuer",{"_index":567,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":565,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":533,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"coverage.html":{},"index.html":{}}}],["jwtdecrypt",{"_index":1664,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtdecrypt(response",{"_index":1677,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtfromrequest",{"_index":2078,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtheaderparameters",{"_index":1483,"title":{},"body":{"classes/DBKeyService.html":{}}}],["jwtpayload",{"_index":1482,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{}}}],["jwtservice",{"_index":414,"title":{"injectables/JwtService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"index.html":{}}}],["jwtstrategy",{"_index":534,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["jwtstrategy.getexternaloidcconfig(configservice",{"_index":2092,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy.getintegratedoauth2config(configservice",{"_index":2093,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtverify",{"_index":1790,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{}}}],["jwtverify(`${data}.${signature",{"_index":2798,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["jwtverify(token",{"_index":1819,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwtwithstatuslistpayload",{"_index":1303,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/StatusListService.html":{}}}],["kb",{"_index":1313,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["kbverifier",{"_index":2718,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keep",{"_index":1045,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["keepdiscriminatorproperty",{"_index":155,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["key",{"_index":23,"title":{"classes/Key.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/StorageController.html":{},"classes/UpdateKeyDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["key).then",{"_index":2799,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key.key",{"_index":1530,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.kid",{"_index":3012,"title":{},"body":{"injectables/ResolverService.html":{}}}],["key.service",{"_index":1501,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{}}}],["key.service.ts",{"_index":1438,"title":{},"body":{"classes/DBKeyService.html":{},"coverage.html":{}}}],["key.service.ts:118",{"_index":1462,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:153",{"_index":1471,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:158",{"_index":1472,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:28",{"_index":1451,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:62",{"_index":1467,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key/entities/cert.entity",{"_index":1431,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key/entities/keys.entity",{"_index":1433,"title":{},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{}}}],["key/key.controller",{"_index":1434,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key_ops",{"_index":1510,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key_validation_schema",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["keybinding",{"_index":982,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/PresentationsService.html":{}}}],["keybindingnonce",{"_index":2747,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindings",{"_index":2759,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keycloak",{"_index":2112,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycloakissuerurl",{"_index":2099,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycloakissuerurl}/protocol/openid",{"_index":2102,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycontroller",{"_index":1428,"title":{"controllers/KeyController.html":{}},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{},"coverage.html":{}}}],["keyentity",{"_index":1432,"title":{"entities/KeyEntity.html":{}},"body":{"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["keyid",{"_index":983,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["keyimportdto",{"_index":1474,"title":{"classes/KeyImportDto.html":{}},"body":{"classes/DBKeyService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["keymodule",{"_index":189,"title":{"modules/KeyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"index.html":{},"modules.html":{}}}],["keymodule.forroot",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["keyobj",{"_index":2204,"title":{"classes/KeyObj.html":{}},"body":{"classes/KeyObj.html":{},"coverage.html":{}}}],["keypair",{"_index":1393,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["keypair.privatekey",{"_index":4021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keypair.publickey",{"_index":4020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyrepository",{"_index":1450,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"modules/KeyModule.html":{}}}],["keyresponsedto",{"_index":368,"title":{"classes/KeyResponseDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["keys",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyResponseDto.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["keys.privatekey",{"_index":1517,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice",{"_index":1440,"title":{"classes/KeyService.html":{}},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["keyservice:109",{"_index":1480,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:136",{"_index":1458,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:152",{"_index":1470,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:195",{"_index":1484,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:46",{"_index":1475,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:77",{"_index":1477,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:85",{"_index":1486,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:86",{"_index":1453,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyusage",{"_index":2175,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["kid",{"_index":2130,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["km_type",{"_index":2191,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["kmtype",{"_index":2201,"title":{},"body":{"modules/KeyModule.html":{}}}],["know",{"_index":2948,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["known",{"_index":3754,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["known.controller",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["known.controller.ts",{"_index":3752,"title":{},"body":{"controllers/WellKnownController.html":{},"coverage.html":{}}}],["known.controller.ts:45",{"_index":3767,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:57",{"_index":3757,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:69",{"_index":3762,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.service",{"_index":247,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["known.service.ts",{"_index":3786,"title":{},"body":{"injectables/WellKnownService.html":{},"coverage.html":{}}}],["known.service.ts:16",{"_index":3791,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:39",{"_index":3795,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:77",{"_index":3793,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:87",{"_index":3804,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known/dto/credential",{"_index":1182,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"coverage.html":{}}}],["known/dto/jwks",{"_index":1496,"title":{},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["known/dto/oauth",{"_index":2415,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"coverage.html":{}}}],["known/jwks.json",{"_index":502,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["known/jwks.json')@apioperation({summary",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["known/jwt",{"_index":3006,"title":{},"body":{"injectables/ResolverService.html":{}}}],["known/oauth",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{}}}],["known/openid",{"_index":2900,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["known/well",{"_index":245,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["kty",{"_index":1631,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["labelnames",{"_index":3292,"title":{},"body":{"modules/SessionModule.html":{}}}],["labs.github.io/eudiplo/latest",{"_index":171,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["labs/eudiplo.git",{"_index":3988,"title":{},"body":{"properties.html":{}}}],["labs/eudiplo/issues",{"_index":3985,"title":{},"body":{"properties.html":{}}}],["last",{"_index":915,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["later",{"_index":526,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{}}}],["legend",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["length",{"_index":3209,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"controllers/StorageController.html":{}}}],["lessthan",{"_index":3348,"title":{},"body":{"injectables/SessionService.html":{}}}],["lessthan(new",{"_index":3387,"title":{},"body":{"injectables/SessionService.html":{}}}],["level",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels",{"_index":2308,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels[level.tolowercase",{"_index":2311,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["license",{"_index":3986,"title":{},"body":{"properties.html":{}}}],["lifetime",{"_index":959,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WellKnownService.html":{}}}],["line",{"_index":2921,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["link",{"_index":618,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["links",{"_index":1859,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["list",{"_index":1197,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/PresentationsService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"controllers/StorageController.html":{},"dependencies.html":{}}}],["list')@header('content",{"_index":3396,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller",{"_index":3428,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.controller.ts",{"_index":3391,"title":{},"body":{"controllers/StatusListController.html":{},"coverage.html":{}}}],["list.controller.ts:17",{"_index":3398,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.entity",{"_index":3425,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["list.entity.ts",{"_index":3407,"title":{},"body":{"entities/StatusListEntity.html":{},"coverage.html":{}}}],["list.entity.ts:14",{"_index":3417,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:20",{"_index":3416,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:26",{"_index":3412,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:32",{"_index":3414,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:38",{"_index":3411,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:44",{"_index":3413,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.module",{"_index":545,"title":{},"body":{"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/SessionModule.html":{}}}],["list.module.ts",{"_index":3423,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.service",{"_index":1309,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["list.service.ts",{"_index":3430,"title":{},"body":{"injectables/StatusListService.html":{},"coverage.html":{}}}],["list.service.ts:114",{"_index":3443,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:124",{"_index":3439,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:167",{"_index":3451,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:183",{"_index":3453,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:20",{"_index":3437,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:36",{"_index":3445,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:60",{"_index":3444,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:68",{"_index":3442,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list/dto/status",{"_index":3138,"title":{},"body":{"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["list/entities/status",{"_index":3406,"title":{},"body":{"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["list/status",{"_index":544,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["listen",{"_index":3630,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["literal",{"_index":591,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":2618,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["loadconfiguration",{"_index":2275,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loadtenants",{"_index":3608,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["loadtypemetadataformat",{"_index":1349,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["local",{"_index":1720,"title":{},"body":{"interfaces/FileStorage.html":{},"modules/StorageModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["local_storage_dir",{"_index":3556,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["locale",{"_index":1609,"title":{},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{}}}],["localfilestorage",{"_index":2229,"title":{"classes/LocalFileStorage.html":{}},"body":{"classes/LocalFileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["log",{"_index":2310,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_debug_mode",{"_index":272,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_enable_http_logger",{"_index":270,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_enable_session_logger",{"_index":271,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_format",{"_index":273,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_level",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["logauthorizationrequest",{"_index":3228,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logauthorizationrequest(context",{"_index":3241,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcontext",{"_index":2536,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["logcredentialissuance",{"_index":3229,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialissuance(context",{"_index":3244,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification",{"_index":3230,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification(context",{"_index":3247,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete",{"_index":3231,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete(context",{"_index":3249,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror",{"_index":3232,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror(context",{"_index":3252,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart",{"_index":3233,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart(context",{"_index":3254,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logformat",{"_index":2302,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["logged",{"_index":3157,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["logger",{"_index":1077,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.decorator",{"_index":2467,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logger.decorator.ts",{"_index":3893,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.interceptor",{"_index":2027,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["logger.interceptor.ts",{"_index":3160,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{}}}],["logger.interceptor.ts:136",{"_index":3176,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:19",{"_index":3165,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:44",{"_index":3168,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.service",{"_index":2028,"title":{},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["logger.service.ts",{"_index":3225,"title":{},"body":{"injectables/SessionLoggerService.html":{},"coverage.html":{}}}],["logger.service.ts:102",{"_index":3246,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:12",{"_index":3240,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:124",{"_index":3248,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:146",{"_index":3243,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:163",{"_index":3263,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:180",{"_index":3257,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:202",{"_index":3259,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:221",{"_index":3261,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:30",{"_index":3264,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:37",{"_index":3255,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:56",{"_index":3250,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:75",{"_index":3253,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger/session",{"_index":3712,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["loggerconfigservice",{"_index":2267,"title":{"injectables/LoggerConfigService.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggerconfiguration",{"_index":2281,"title":{"interfaces/LoggerConfiguration.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggermodule",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggermodule.forrootasync",{"_index":279,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":288,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["loglevel",{"_index":2284,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["lognotification",{"_index":3234,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["lognotification(context",{"_index":3256,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logo",{"_index":1610,"title":{},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{}}}],["logs",{"_index":2521,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logsession",{"_index":3235,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsession(context",{"_index":3258,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror",{"_index":3236,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror(context",{"_index":3260,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange",{"_index":3237,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange(context",{"_index":3262,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["long",{"_index":960,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["made",{"_index":958,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["main",{"_index":161,"title":{},"body":{"controllers/AppController.html":{}}}],["maintain",{"_index":588,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["make",{"_index":481,"title":{},"body":{"controllers/AuthController.html":{}}}],["makegaugeprovider",{"_index":540,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{}}}],["makes",{"_index":1006,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/WellKnownService.html":{}}}],["making",{"_index":2730,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["manage",{"_index":889,"title":{},"body":{"entities/CertEntity.html":{},"entities/IssuanceConfig.html":{},"injectables/OAuthService.html":{}}}],["management",{"_index":1242,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{}}}],["management.controller",{"_index":2038,"title":{},"body":{"modules/IssuerModule.html":{}}}],["management.controller.ts",{"_index":1958,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["management.controller.ts:83",{"_index":1968,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management/credentials",{"_index":1225,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["management/issuance",{"_index":1883,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["management/issuer",{"_index":1957,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["managing",{"_index":1070,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["manytomany",{"_index":1034,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["manytomany(undefined",{"_index":1014,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["manytoone",{"_index":918,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["manytoone(undefined",{"_index":904,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{}}}],["map",{"_index":2385,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["map((_",{"_index":3465,"title":{},"body":{"injectables/StatusListService.html":{}}}],["map((error",{"_index":1942,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["mapping",{"_index":1056,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity",{"_index":3427,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity.ts",{"_index":3498,"title":{},"body":{"entities/StatusMapping.html":{},"coverage.html":{}}}],["mapping.entity.ts:13",{"_index":3506,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:16",{"_index":3505,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:19",{"_index":3504,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:22",{"_index":3503,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:25",{"_index":3501,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:7",{"_index":3507,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mark",{"_index":4033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marks",{"_index":3340,"title":{},"body":{"injectables/SessionService.html":{}}}],["match",{"_index":3000,"title":{},"body":{"injectables/ResolverService.html":{}}}],["matching",{"_index":32,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":2172,"title":{},"body":{"entities/KeyEntity.html":{}}}],["math.floor(date.now",{"_index":2406,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{}}}],["math.floor(new",{"_index":2577,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["math.random",{"_index":3468,"title":{},"body":{"injectables/StatusListService.html":{}}}],["math.round(new",{"_index":1356,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["max",{"_index":1997,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["maybe",{"_index":2965,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["media",{"_index":3800,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mediatype",{"_index":3764,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["mediatype.application_jwt",{"_index":3777,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["mediatype.application_jwt)@get('openid",{"_index":3766,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["memorystorage",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":3214,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["messages",{"_index":1931,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.join",{"_index":1945,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.length",{"_index":1944,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.push",{"_index":1933,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["meta",{"_index":951,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["metadata",{"_index":1185,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["metadata+jwt",{"_index":3809,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.'})@apiproduces(mediatype.application_json",{"_index":3765,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["metadata.controller",{"_index":2034,"title":{},"body":{"modules/IssuerModule.html":{}}}],["metadata.controller.ts",{"_index":1258,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"coverage.html":{}}}],["metadata.controller.ts:15",{"_index":1265,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.controller.ts:25",{"_index":1262,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.credential_issuer",{"_index":3810,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.dto",{"_index":2988,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["metadata.dto.ts",{"_index":1183,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["metadata.dto.ts:12",{"_index":1196,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:16",{"_index":1202,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:20",{"_index":1207,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:24",{"_index":1199,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:33",{"_index":1205,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:37",{"_index":1201,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:41",{"_index":1194,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:8",{"_index":1203,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata/credentials",{"_index":1257,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["metadata/dto/schema",{"_index":1036,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["metadata/dto/vct.dto",{"_index":1037,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{}}}],["metadata/dto/vct.dto.ts",{"_index":3683,"title":{},"body":{"classes/VCT.html":{},"coverage.html":{}}}],["metadata/dto/vct.dto.ts:12",{"_index":3690,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:15",{"_index":3687,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:18",{"_index":3688,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:21",{"_index":3689,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:24",{"_index":3691,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:27",{"_index":3692,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:9",{"_index":3695,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/vct/${credentialconfig.id",{"_index":1372,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["method",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["methods",{"_index":39,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["metric/metric.module",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["metricmodule",{"_index":190,"title":{"modules/MetricModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetricModule.html":{},"index.html":{},"modules.html":{}}}],["metrics",{"_index":2322,"title":{},"body":{"modules/MetricModule.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["middleware",{"_index":3980,"title":{},"body":{"properties.html":{}}}],["mirko",{"_index":3990,"title":{},"body":{"properties.html":{}}}],["miscellaneous",{"_index":3951,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misused",{"_index":2924,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["mkdirsync",{"_index":2241,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["mkdirsync(dirname(fullpath",{"_index":2248,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["mm",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"injectables/WellKnownService.html":{}}}],["modify",{"_index":2001,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["modifying",{"_index":3218,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["module",{"_index":172,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":174,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["mollik",{"_index":3991,"title":{},"body":{"properties.html":{}}}],["more",{"_index":167,"title":{},"body":{"controllers/AppController.html":{},"entities/Session.html":{}}}],["move",{"_index":2389,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["mso_mdoc",{"_index":2569,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["multer",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["multermodule",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["multermodule.register",{"_index":329,"title":{},"body":{"modules/AppModule.html":{}}}],["multi",{"_index":3109,"title":{},"body":{"entities/Session.html":{}}}],["multiple",{"_index":950,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["mustermann",{"_index":2446,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["mysql2",{"_index":3935,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":46,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name)?.id",{"_index":2935,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["namedcurve",{"_index":4015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["necessary",{"_index":966,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["need",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{},"injectables/RegistrarService.html":{}}}],["needed",{"_index":93,"title":{},"body":{"classes/AllowListPolicy.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{}}}],["needs",{"_index":863,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/TenantController.html":{}}}],["nestinterceptor",{"_index":3181,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["nestjs",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":2024,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"modules/VerifierModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":50,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"modules/VerifierModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2055,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":3909,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":52,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":206,"title":{},"body":{"modules/AppModule.html":{},"controllers/StorageController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":120,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"classes/DCQL.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/FileUploadDto.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1837,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":539,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["new",{"_index":442,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":2920,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{}}}],["next.handle",{"_index":3187,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.handle().pipe",{"_index":3202,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["node:crypto",{"_index":671,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{}}}],["nodejs",{"_index":1302,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["noncce",{"_index":3113,"title":{},"body":{"entities/Session.html":{}}}],["nonce",{"_index":2451,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["nonce(@sessionentity",{"_index":2479,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["nonce(session",{"_index":2456,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["none",{"_index":84,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["nonetrustpolicy",{"_index":97,"title":{"classes/NoneTrustPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["not(isnull",{"_index":3367,"title":{},"body":{"injectables/SessionService.html":{}}}],["notfoundexception",{"_index":3301,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["notification",{"_index":1208,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["notification_endpoint",{"_index":1193,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["notification_id",{"_index":2328,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["notificationevent",{"_index":2329,"title":{},"body":{"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["notificationrequestdto",{"_index":2326,"title":{"classes/NotificationRequestDto.html":{}},"body":{"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["notifications",{"_index":146,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["notifications(body",{"_index":2459,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["notifywebhook",{"_index":1849,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/Session.html":{}}}],["now",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["null",{"_index":2957,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["nullable",{"_index":900,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["number",{"_index":579,"title":{},"body":{"modules/AuthModule.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"interfaces/FileStorage.html":{},"entities/IssuanceConfig.html":{},"classes/ParResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["oauth",{"_index":2335,"title":{},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["oauth.controller",{"_index":2359,"title":{},"body":{"modules/OAuthModule.html":{}}}],["oauth.service",{"_index":2349,"title":{},"body":{"controllers/OAuthController.html":{},"modules/OAuthModule.html":{}}}],["oauth2",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["oauth2authorizationserver",{"_index":747,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oauth2authorizationserverresponse",{"_index":2414,"title":{"classes/Oauth2AuthorizationServerResponse.html":{}},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["oauth2client",{"_index":2840,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oauth_client_id",{"_index":2361,"title":{},"body":{"modules/OAuthModule.html":{},"miscellaneous/variables.html":{}}}],["oauth_client_secret",{"_index":2362,"title":{},"body":{"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"miscellaneous/variables.html":{}}}],["oauth_validation_schema",{"_index":2360,"title":{},"body":{"modules/OAuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["oauthcontroller",{"_index":2333,"title":{"controllers/OAuthController.html":{}},"body":{"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"coverage.html":{}}}],["oauthmodule",{"_index":2353,"title":{"modules/OAuthModule.html":{}},"body":{"modules/OAuthModule.html":{},"index.html":{},"modules.html":{}}}],["oauthservice",{"_index":2348,"title":{"injectables/OAuthService.html":{}},"body":{"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"coverage.html":{},"index.html":{}}}],["obj",{"_index":3057,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.body",{"_index":3058,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.contentlength",{"_index":3060,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.contenttype",{"_index":3059,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["object",{"_index":909,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"entities/KeyEntity.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/RegistrarEntity.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/variables.html":{}}}],["object.dto.ts",{"_index":2205,"title":{},"body":{"classes/KeyObj.html":{},"coverage.html":{}}}],["object.dto.ts:11",{"_index":2207,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.dto.ts:15",{"_index":2208,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.dto.ts:19",{"_index":2206,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.entries(params",{"_index":2599,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["object.keys(res.vp_token",{"_index":2800,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["object.values",{"_index":1934,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["objects",{"_index":1149,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"classes/SchemaResponse.html":{}}}],["observable",{"_index":3173,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["obtain",{"_index":2341,"title":{},"body":{"controllers/OAuthController.html":{}}}],["offer",{"_index":868,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["offerrequestdto",{"_index":1961,"title":{"classes/OfferRequestDto.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/Session.html":{},"coverage.html":{}}}],["offerresponse",{"_index":1964,"title":{"classes/OfferResponse.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["offerurl",{"_index":3078,"title":{},"body":{"entities/Session.html":{}}}],["oid4vci",{"_index":608,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"miscellaneous/variables.html":{}}}],["oid4vci/dto/offer",{"_index":1975,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["oid4vci/oid4vci.controller",{"_index":2039,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.service",{"_index":2040,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/util",{"_index":771,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oid4vcicontroller",{"_index":2022,"title":{"controllers/Oid4vciController.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["oid4vciservice",{"_index":1971,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["oid4vp",{"_index":615,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"miscellaneous/variables.html":{}}}],["oid4vp.controller",{"_index":2511,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["oid4vp.service",{"_index":2498,"title":{},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vp/dto/presentation",{"_index":2678,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vp/oid4vp.module",{"_index":2711,"title":{},"body":{"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{}}}],["oid4vp/oid4vp.service",{"_index":2679,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vpcontroller",{"_index":2485,"title":{"controllers/Oid4vpController.html":{}},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"coverage.html":{}}}],["oid4vpmodule",{"_index":2017,"title":{"modules/Oid4vpModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["oid4vpservice",{"_index":738,"title":{"injectables/Oid4vpService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{},"index.html":{}}}],["oidc",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["oidc_algorithm",{"_index":563,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["oidc_internal_issuer_url",{"_index":557,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["oidc_sub",{"_index":561,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["oidcdiscoverydto",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["oidcissuerurl",{"_index":2892,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/.well",{"_index":2899,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/protocol/openid",{"_index":2896,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["older",{"_index":3342,"title":{},"body":{"injectables/SessionService.html":{}}}],["omittype",{"_index":1052,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/DisplayCreateDto.html":{},"classes/IssuanceDto.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/UpdateKeyDto.html":{}}}],["omittype(credentialconfig",{"_index":1051,"title":{},"body":{"classes/CredentialConfigCreate.html":{}}}],["omittype(displayentity",{"_index":1599,"title":{},"body":{"classes/DisplayCreateDto.html":{}}}],["omittype(issuanceconfig",{"_index":1061,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{}}}],["omittype(keyimportdto",{"_index":3682,"title":{},"body":{"classes/UpdateKeyDto.html":{}}}],["omittype(presentationconfig",{"_index":2661,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{}}}],["on(\"error",{"_index":2259,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["on(\"finish",{"_index":2257,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["onapplicationbootstrap",{"_index":1902,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["once",{"_index":2854,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["ondelete",{"_index":906,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["one",{"_index":1460,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/RegistrarService.html":{}}}],["oneof",{"_index":148,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["ones",{"_index":1335,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["onmoduleinit",{"_index":2846,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["ontenantdelete",{"_index":1073,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["ontenantdelete(tenantid",{"_index":1095,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit",{"_index":1649,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit(tenantid",{"_index":1662,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["openid",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{}}}],["openid4vc/oauth2",{"_index":766,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"dependencies.html":{}}}],["openid4vc/openid4vci",{"_index":1033,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["openid4vc/openid4vp",{"_index":3920,"title":{},"body":{"dependencies.html":{}}}],["openid4vc/utils",{"_index":3921,"title":{},"body":{"dependencies.html":{}}}],["openid4vci",{"_index":644,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/WellKnownController.html":{}}}],["openid4vp://?${(await",{"_index":851,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["openid4vp://?${querystring",{"_index":2608,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["openid4vp://?${values.uri",{"_index":2690,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["openid_federation",{"_index":949,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["openidvci",{"_index":3808,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["operation",{"_index":1087,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["operations",{"_index":1414,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"controllers/Oid4vpController.html":{},"injectables/RegistrarService.html":{}}}],["optional",{"_index":17,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":299,"title":{},"body":{"modules/AppModule.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["options.audience",{"_index":1813,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.dto",{"_index":2535,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["options.dto.ts",{"_index":2703,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["options.expiresin",{"_index":1802,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["opts",{"_index":1704,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["opts?.acl",{"_index":3044,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["opts?.checksum",{"_index":3047,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["opts?.contenttype",{"_index":2263,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["opts?.metadata",{"_index":3043,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["order",{"_index":2777,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["original",{"_index":3219,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["originalname",{"_index":1773,"title":{},"body":{"injectables/FilesService.html":{}}}],["otherwhise",{"_index":1976,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["otherwise",{"_index":560,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["ov",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["over",{"_index":1127,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["override",{"_index":1995,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["overrides",{"_index":2433,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["overview",{"_index":3968,"title":{"index.html":{}},"body":{"index.html":{}}}],["overwrite",{"_index":1919,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["overwritten",{"_index":1102,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["owns",{"_index":908,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["p",{"_index":1668,"title":{},"body":{"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":3903,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pairs",{"_index":596,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["par",{"_index":650,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(@body",{"_index":689,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(body",{"_index":660,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["param",{"_index":425,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["param(\"id",{"_index":1253,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/SessionController.html":{}}}],["param(\"tenantid",{"_index":1270,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["parameter",{"_index":587,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/SessionPipe.html":{}}}],["parameterdecorator",{"_index":3967,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parameters",{"_index":45,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2595,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["parresponsedto",{"_index":682,"title":{"classes/ParResponseDto.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"coverage.html":{}}}],["parse",{"_index":2749,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseaccesstokenrequest",{"_index":808,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest",{"_index":731,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest(body",{"_index":748,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["parsed",{"_index":2750,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parsedaccesstokenauthorizationcoderequestgrant",{"_index":772,"title":{"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenpreauthorizedcoderequestgrant",{"_index":774,"title":{"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenrequest",{"_index":807,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.accesstokenrequest",{"_index":820,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.dpop?.jwt",{"_index":825,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant",{"_index":819,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.granttype",{"_index":816,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.preauthorizedcode",{"_index":827,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.txcode",{"_index":829,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parseloglevel",{"_index":2276,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["parseloglevel(level",{"_index":2290,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["parseresponse",{"_index":2724,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseresponse(res",{"_index":2745,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["part",{"_index":2763,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parties",{"_index":2839,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["party",{"_index":2860,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pass",{"_index":2000,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/RegistrarService.html":{}}}],["passed",{"_index":1334,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{}}}],["passport",{"_index":2089,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":2085,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":537,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2084,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":2069,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":1576,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["path",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["payload",{"_index":477,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["payload.admin",{"_index":2127,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.cnf",{"_index":2795,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["payload.id",{"_index":1137,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["payload.iss",{"_index":2989,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.iss}/.well",{"_index":3005,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.sub",{"_index":1811,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["payloads",{"_index":2979,"title":{},"body":{"injectables/ResolverService.html":{}}}],["peculiar/x509",{"_index":3922,"title":{},"body":{"dependencies.html":{}}}],["pem",{"_index":24,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["perform",{"_index":1830,"title":{},"body":{"controllers/HealthController.html":{}}}],["periodically",{"_index":2875,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pg",{"_index":3938,"title":{},"body":{"dependencies.html":{}}}],["pid",{"_index":1985,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{}}}],["pid,hostname",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["pino",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{}}}],["pino?tab=readme",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["pinohttp",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["pinologger",{"_index":1078,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["pipetransform",{"_index":3302,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["pkcecodechallengemethod",{"_index":764,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["pkcecodechallengemethod.s256",{"_index":794,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["plain",{"_index":1148,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["plaintoclass",{"_index":1105,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["plaintoclass(issuancedto",{"_index":1927,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["png",{"_index":1978,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["policies.dto",{"_index":1039,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["policy",{"_index":61,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["policycredential",{"_index":99,"title":{"classes/PolicyCredential.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["policytype",{"_index":83,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["port",{"_index":1572,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["positives",{"_index":1147,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["post",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{}}}],["post(\"challenge",{"_index":703,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post(\"credential",{"_index":2471,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"nonce",{"_index":2477,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"notification",{"_index":2474,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"oauth2/token",{"_index":426,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"offer",{"_index":1998,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["post(\"par",{"_index":688,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post(\"request",{"_index":2685,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["post(\"revoke",{"_index":3149,"title":{},"body":{"controllers/SessionController.html":{}}}],["post(\"token",{"_index":700,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/OAuthController.html":{}}}],["post('challenge",{"_index":653,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('credential')@sessionlogger('session",{"_index":2453,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('nonce')@sessionlogger('nonce",{"_index":2457,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification')@sessionlogger('notification_id",{"_index":2460,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('oauth2/token')@apibody({type",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('revoke",{"_index":3136,"title":{},"body":{"controllers/SessionController.html":{}}}],["post('token",{"_index":666,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post()@sessionlogger('session",{"_index":2495,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["postgres",{"_index":1570,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres\").default(\"sqlite",{"_index":1554,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["pre",{"_index":2441,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["preauthorizedcode",{"_index":775,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["preauthorizedcodegrantidentifier",{"_index":765,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["predefined",{"_index":2742,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["preferred",{"_index":1195,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["prefix",{"_index":642,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{}}}],["preheader",{"_index":3477,"title":{},"body":{"injectables/StatusListService.html":{}}}],["prepayload",{"_index":3476,"title":{},"body":{"injectables/StatusListService.html":{}}}],["presentation",{"_index":594,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["presentation_during_issuance",{"_index":627,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["presentationattachment",{"_index":936,"title":{"classes/PresentationAttachment.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["presentationconfig",{"_index":957,"title":{"entities/PresentationConfig.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["presentationconfig.lifetime",{"_index":2603,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfig.webhook",{"_index":2606,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfigcreatedto",{"_index":2659,"title":{"classes/PresentationConfigCreateDto.html":{}},"body":{"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["presentationduringissuance",{"_index":614,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["presentationduringissuanceconfig",{"_index":617,"title":{"classes/PresentationDuringIssuanceConfig.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["presentationexists",{"_index":2773,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["presentationmanagementcontroller",{"_index":2664,"title":{"controllers/PresentationManagementController.html":{}},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"coverage.html":{}}}],["presentationrequest",{"_index":2672,"title":{"classes/PresentationRequest.html":{}},"body":{"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"coverage.html":{}}}],["presentationrequestoptions",{"_index":2524,"title":{"interfaces/PresentationRequestOptions.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["presentations",{"_index":942,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["presentations.controller",{"_index":2713,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["presentations.service",{"_index":2680,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentations/dto/auth",{"_index":2532,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentations/presentations.module",{"_index":2510,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["presentations/presentations.service",{"_index":2533,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationsmodule",{"_index":2509,"title":{"modules/PresentationsModule.html":{}},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["presentationsservice",{"_index":2516,"title":{"injectables/PresentationsService.html":{}},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"coverage.html":{},"index.html":{}}}],["presigned",{"_index":1718,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["presigner",{"_index":3039,"title":{},"body":{"classes/S3FileStorage.html":{},"dependencies.html":{}}}],["pretty",{"_index":275,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"dependencies.html":{}}}],["primary",{"_index":902,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["primarycolumn",{"_index":1684,"title":{},"body":{"entities/FileEntity.html":{},"entities/Session.html":{},"entities/TenantEntity.html":{}}}],["primarycolumn(\"uuid",{"_index":3119,"title":{},"body":{"entities/Session.html":{}}}],["primarycolumn('uuid",{"_index":3090,"title":{},"body":{"entities/Session.html":{}}}],["private",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}}}],["private_key",{"_index":3221,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["privateencryptionkey",{"_index":1674,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privatekey",{"_index":1404,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/UpdateKeyDto.html":{},"miscellaneous/variables.html":{}}}],["privatekey.alg",{"_index":1520,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.ext",{"_index":1523,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.key_ops",{"_index":1524,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.kid",{"_index":1507,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekeyinstance",{"_index":1536,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekeyjwk",{"_index":1398,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"miscellaneous/variables.html":{}}}],["proceed",{"_index":3172,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["process",{"_index":621,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{}}}],["process.env.node_env",{"_index":263,"title":{},"body":{"modules/AppModule.html":{}}}],["process_presentation_response",{"_index":2615,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processes",{"_index":2527,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["production",{"_index":264,"title":{},"body":{"modules/AppModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["progress",{"_index":3159,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["prom",{"_index":3346,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["prometheus",{"_index":542,"title":{},"body":{"modules/AuthModule.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["prometheus/dist/injector",{"_index":3345,"title":{},"body":{"injectables/SessionService.html":{}}}],["prometheusmodule",{"_index":2319,"title":{},"body":{"modules/MetricModule.html":{}}}],["prometheusmodule.register",{"_index":2323,"title":{},"body":{"modules/MetricModule.html":{}}}],["promise",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["promise((resolve",{"_index":2250,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.all(att",{"_index":2808,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["promise.all(files.map((file",{"_index":1785,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.resolve",{"_index":1782,"title":{},"body":{"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["promise.resolve(existssync(join(this.basedir",{"_index":2266,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.resolve(rmsync(join(this.basedir",{"_index":2265,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.resolve(this.storage.delete(key",{"_index":1779,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.resolve(this.storage.getstream(key",{"_index":1778,"title":{},"body":{"injectables/FilesService.html":{}}}],["promises",{"_index":2925,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["proof_signing_alg_values_supported",{"_index":1315,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["proof_types_supported",{"_index":1314,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/FileEntity.html":{},"classes/FileUploadDto.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"properties.html":{}}}],["property",{"_index":153,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["protect",{"_index":2321,"title":{},"body":{"modules/MetricModule.html":{}}}],["protected",{"_index":1447,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["provide",{"_index":2200,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["provided",{"_index":147,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["provider",{"_index":445,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["providers",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["provides",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"injectables/IssuanceService.html":{},"modules/RegistrarModule.html":{}}}],["providing",{"_index":1827,"title":{},"body":{"controllers/HealthController.html":{}}}],["public",{"_index":22,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":2057,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["public_url",{"_index":2042,"title":{},"body":{"modules/IssuerModule.html":{},"miscellaneous/variables.html":{}}}],["publicbaseurl",{"_index":3024,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["publicjwk",{"_index":838,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["publickey",{"_index":1403,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyObj.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["publickeyinstance",{"_index":1541,"title":{},"body":{"classes/DBKeyService.html":{}}}],["publickeyjwk",{"_index":1402,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["publicly",{"_index":1753,"title":{},"body":{"injectables/FilesService.html":{}}}],["publicurl",{"_index":495,"title":{},"body":{"controllers/AuthController.html":{}}}],["publicurl}/.well",{"_index":501,"title":{},"body":{"controllers/AuthController.html":{}}}],["publicurl}/oauth2/token",{"_index":499,"title":{},"body":{"controllers/AuthController.html":{}}}],["purpose",{"_index":2949,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pushed",{"_index":662,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["pushed_authorization_request_endpoint",{"_index":791,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["put",{"_index":1692,"title":{},"body":{"interfaces/FileStorage.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["put(\":id",{"_index":2165,"title":{},"body":{"controllers/KeyController.html":{}}}],["put(':id",{"_index":2154,"title":{},"body":{"controllers/KeyController.html":{}}}],["put(key",{"_index":1701,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["putobjectcommand",{"_index":3035,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["putoptions",{"_index":1705,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["qr",{"_index":1982,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["qrcode",{"_index":1970,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["qrcode.tobuffer(values.uri",{"_index":2006,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["qrcodebuffer",{"_index":2005,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["queries",{"_index":659,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["queries.request_uri",{"_index":798,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["query",{"_index":672,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["querydeeppartialentity",{"_index":3316,"title":{},"body":{"injectables/SessionService.html":{}}}],["querystring",{"_index":2598,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["r",{"_index":3007,"title":{},"body":{"injectables/ResolverService.html":{}}}],["r.data",{"_index":3008,"title":{},"body":{"injectables/ResolverService.html":{}}}],["random",{"_index":1518,"title":{},"body":{"classes/DBKeyService.html":{}}}],["randomness",{"_index":3449,"title":{},"body":{"injectables/StatusListService.html":{}}}],["randomuuid",{"_index":670,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/FilesService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["randomuuid()}${safeext",{"_index":1766,"title":{},"body":{"injectables/FilesService.html":{}}}],["ratelimit",{"_index":2105,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["re",{"_index":849,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["reachable",{"_index":3010,"title":{},"body":{"injectables/ResolverService.html":{}}}],["react",{"_index":3631,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["read",{"_index":3045,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["readable",{"_index":1703,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["readable.from(body",{"_index":2255,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["readdirsync",{"_index":1106,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["readdirsync(configpath",{"_index":1120,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["readdirsync(path",{"_index":1132,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync",{"_index":1107,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync(join(path",{"_index":1134,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readonly",{"_index":685,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["real",{"_index":2386,"title":{},"body":{"injectables/OAuthService.html":{}}}],["receive",{"_index":968,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["received",{"_index":3732,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["receives",{"_index":3304,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["record",{"_index":987,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"interfaces/FileStorage.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/SchemaResponse.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["recursive",{"_index":2249,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["recursively",{"_index":1935,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["redacted",{"_index":3224,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["redirect_uri",{"_index":712,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["redirected",{"_index":611,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["ref",{"_index":149,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["reference",{"_index":1519,"title":{},"body":{"classes/DBKeyService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["reflect",{"_index":3944,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2052,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["refresh",{"_index":2868,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["refresh_token",{"_index":489,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["refreshaccesstoken",{"_index":2847,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["refreshes",{"_index":2874,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["regcert",{"_index":2547,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["region",{"_index":3572,"title":{},"body":{"modules/StorageModule.html":{}}}],["register",{"_index":3331,"title":{},"body":{"injectables/SessionService.html":{}}}],["registrar",{"_index":2822,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar.service",{"_index":2825,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar/generated",{"_index":2972,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrar/registrar.module",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["registrar/registrar.service",{"_index":2530,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["registrar_oidc_client_id",{"_index":2831,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_client_secret",{"_index":2832,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_url",{"_index":2828,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["registrar_url",{"_index":2827,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["registrar_validation_schema",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registrarentity",{"_index":2809,"title":{"entities/RegistrarEntity.html":{}},"body":{"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"coverage.html":{}}}],["registrarmodule",{"_index":191,"title":{"modules/RegistrarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["registrarrepository",{"_index":2848,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrarservice",{"_index":2515,"title":{"injectables/RegistrarService.html":{}},"body":{"injectables/Oid4vpService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["registration",{"_index":965,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["registrationcert",{"_index":967,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["registrationcertid",{"_index":2756,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["registrationcertificatecontrollerall",{"_index":2884,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrollerregister",{"_index":2885,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrationcertificatecreation",{"_index":2970,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrationcertificaterequest",{"_index":932,"title":{"classes/RegistrationCertificateRequest.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["reject",{"_index":2251,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["related",{"_index":2195,"title":{},"body":{"modules/KeyModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["relations",{"_index":1177,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{}}}],["relevant",{"_index":619,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/Oid4vciController.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["reload",{"_index":2294,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["reloadconfiguration",{"_index":2277,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["relying",{"_index":2838,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerfindall",{"_index":2886,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerregister",{"_index":2887,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartyid",{"_index":2812,"title":{},"body":{"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{}}}],["remove",{"_index":1047,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/DBKeyService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["removeclient",{"_index":2369,"title":{},"body":{"injectables/OAuthService.html":{}}}],["removeclient(clientid",{"_index":2381,"title":{},"body":{"injectables/OAuthService.html":{}}}],["replace(\"https",{"_index":2938,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["repository",{"_index":1076,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"properties.html":{}}}],["representing",{"_index":597,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/IssuerMetadata.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["represents",{"_index":1184,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/Session.html":{},"entities/TenantEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["repsonse",{"_index":10,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{}}}],["req",{"_index":310,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/JwtStrategy.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["req+jwt",{"_index":2581,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["req.body",{"_index":2961,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["req.headers[\"content",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers[\"user",{"_index":320,"title":{},"body":{"modules/AppModule.html":{}}}],["req.id",{"_index":2958,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["req.method",{"_index":315,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["req.params?.session",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["req.params?.tenantid",{"_index":324,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":12,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["request.'})@isenum(responsetype",{"_index":2437,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.client_id",{"_index":2397,"title":{},"body":{"injectables/OAuthService.html":{}}}],["request.client_secret",{"_index":2398,"title":{},"body":{"injectables/OAuthService.html":{}}}],["request.dto",{"_index":681,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["request.dto.ts",{"_index":706,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TokenRequestDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["request.dto.ts:12",{"_index":718,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/TokenRequestDto.html":{}}}],["request.dto.ts:13",{"_index":2971,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:15",{"_index":723,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:18",{"_index":725,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:19",{"_index":3669,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["request.dto.ts:21",{"_index":727,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:24",{"_index":719,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:25",{"_index":2438,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:26",{"_index":2698,"title":{},"body":{"classes/PresentationRequest.html":{},"classes/TokenRequestDto.html":{}}}],["request.dto.ts:27",{"_index":720,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:30",{"_index":721,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:31",{"_index":2434,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:32",{"_index":2697,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:33",{"_index":724,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/TokenRequestDto.html":{}}}],["request.dto.ts:36",{"_index":717,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:38",{"_index":2432,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:40",{"_index":2700,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:58",{"_index":2429,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:6",{"_index":722,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.dto.ts:66",{"_index":2431,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:73",{"_index":2440,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:77",{"_index":2448,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:78",{"_index":2447,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:9",{"_index":726,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.header",{"_index":2583,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.headers[\"accept",{"_index":4012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.headers[\"content",{"_index":3198,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers[\"user",{"_index":3197,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.method",{"_index":3193,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.tenantid",{"_index":3192,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params[sessionidparam",{"_index":3191,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.payload",{"_index":2585,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.scope",{"_index":2401,"title":{},"body":{"injectables/OAuthService.html":{}}}],["request.url",{"_index":3194,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.user",{"_index":3664,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["request/response",{"_index":2299,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["request_error",{"_index":3212,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_start",{"_index":3196,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_success",{"_index":3205,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_uri",{"_index":690,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["requested",{"_index":2483,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["requestid",{"_index":2493,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["requesting",{"_index":3616,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["requests",{"_index":647,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["requesturl",{"_index":2607,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["require_pushed_authorization_requests",{"_index":790,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["required",{"_index":134,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["requiredclaimkeys",{"_index":2804,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredfields",{"_index":2746,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requires",{"_index":2424,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["res",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["res.data",{"_index":2794,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["res.data![\"crt",{"_index":2945,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data![\"id",{"_index":2946,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data![\"jwt",{"_index":2968,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data?.filter",{"_index":2955,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.error",{"_index":2941,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.payload",{"_index":1678,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["res.redirect(`${values.redirect_uri}?code=${code",{"_index":805,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send",{"_index":883,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send(qrcodebuffer",{"_index":2009,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.send(values",{"_index":2010,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.setheader(\"content",{"_index":2007,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.state",{"_index":2612,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["res.status(400).send(response",{"_index":877,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.statuscode",{"_index":327,"title":{},"body":{"modules/AppModule.html":{}}}],["reset",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["resolve",{"_index":2258,"title":{},"body":{"classes/LocalFileStorage.html":{},"injectables/ResolverService.html":{}}}],["resolvepublickey",{"_index":2980,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey(payload",{"_index":2982,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolver.service",{"_index":2977,"title":{},"body":{"modules/ResolverModule.html":{}}}],["resolver/resolver.module",{"_index":2712,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["resolver/resolver.service",{"_index":2766,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolvermodule",{"_index":2709,"title":{"modules/ResolverModule.html":{}},"body":{"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"index.html":{},"modules.html":{}}}],["resolverservice",{"_index":2727,"title":{"injectables/ResolverService.html":{}},"body":{"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"index.html":{}}}],["resolves",{"_index":1085,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"injectables/PresentationsService.html":{}}}],["resolving",{"_index":2731,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["resource",{"_index":713,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["response",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["response.data!.find((item",{"_index":2933,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.data![\"id",{"_index":2931,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.dto",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["response.dto.ts",{"_index":583,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:11",{"_index":638,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{}}}],["response.dto.ts:13",{"_index":2417,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:14",{"_index":3066,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponseDto.html":{}}}],["response.dto.ts:15",{"_index":1634,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:16",{"_index":3071,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:17",{"_index":2422,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:18",{"_index":3068,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:19",{"_index":1638,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:2",{"_index":3673,"title":{},"body":{"classes/TokenResponse.html":{}}}],["response.dto.ts:20",{"_index":3069,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponseDto.html":{}}}],["response.dto.ts:21",{"_index":2419,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:23",{"_index":1640,"title":{},"body":{"classes/EC_Public.html":{},"classes/SchemaResponse.html":{}}}],["response.dto.ts:25",{"_index":2420,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:26",{"_index":3067,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:27",{"_index":3676,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["response.dto.ts:29",{"_index":2423,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:3",{"_index":3674,"title":{},"body":{"classes/TokenResponse.html":{}}}],["response.dto.ts:33",{"_index":2049,"title":{},"body":{"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:37",{"_index":2416,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:4",{"_index":2209,"title":{},"body":{"classes/KeyResponseDto.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:5",{"_index":2421,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:8",{"_index":3675,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["response.dto.ts:9",{"_index":2425,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["response.error",{"_index":2929,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.jwks.keys.find((key",{"_index":3011,"title":{},"body":{"injectables/ResolverService.html":{}}}],["response.key",{"_index":1777,"title":{},"body":{"injectables/FilesService.html":{}}}],["response.statuscode",{"_index":3206,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["response.ts",{"_index":8,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["response_mode",{"_index":2564,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_processing",{"_index":2614,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_type",{"_index":714,"title":{},"body":{"classes/AuthorizeQueries.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["response_types_supported",{"_index":503,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Oid4vpService.html":{}}}],["response_uri",{"_index":2562,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responses",{"_index":3162,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsesize",{"_index":3207,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsestatus",{"_index":3734,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["responsetype",{"_index":1973,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["responsetype.qrcode",{"_index":1984,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsetype.uri",{"_index":1987,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsible",{"_index":1439,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/HealthController.html":{},"controllers/KeyController.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{}}}],["result",{"_index":1086,"title":{},"body":{"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["result.payload",{"_index":2805,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["results",{"_index":31,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":3787,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["retrieve",{"_index":694,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{}}}],["retrieves",{"_index":1090,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["return",{"_index":54,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":2702,"title":{},"body":{"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["returning",{"_index":2098,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["returns",{"_index":48,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["reuse",{"_index":2630,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["review",{"_index":3811,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["revokeall",{"_index":3127,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(@body",{"_index":3150,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(value",{"_index":3134,"title":{},"body":{"controllers/SessionController.html":{}}}],["revoked",{"_index":18,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/StatusUpdateDto.html":{}}}],["right",{"_index":1008,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["rmsync",{"_index":2242,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["root",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/OAuthService.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["rootoftrust",{"_index":85,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/typealiases.html":{}}}],["rootoftrustpolicy",{"_index":90,"title":{"classes/RootOfTrustPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["rootpath",{"_index":334,"title":{},"body":{"modules/AppModule.html":{}}}],["rp",{"_index":2940,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["rp_name",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["rpid",{"_index":2928,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["rs256",{"_index":2409,"title":{},"body":{"injectables/OAuthService.html":{}}}],["rsa",{"_index":2086,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["rules",{"_index":1012,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["run",{"_index":3335,"title":{},"body":{"injectables/SessionService.html":{}}}],["running",{"_index":166,"title":{},"body":{"controllers/AppController.html":{}}}],["runs",{"_index":1010,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["rxjs",{"_index":2765,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":3184,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["s3",{"_index":3026,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["s3\").default(\"local",{"_index":3555,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_access_key_id",{"_index":3563,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_bucket",{"_index":3562,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_endpoint",{"_index":3565,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_force_path_style",{"_index":3566,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_public_base_url",{"_index":3568,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_region",{"_index":3561,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_secret_access_key",{"_index":3564,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3client",{"_index":3022,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{}}}],["s3filestorage",{"_index":3019,"title":{"classes/S3FileStorage.html":{}},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["safeext",{"_index":1760,"title":{},"body":{"injectables/FilesService.html":{}}}],["saltgenerator",{"_index":1348,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["same",{"_index":847,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sanitize",{"_index":3179,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody",{"_index":3164,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody(body",{"_index":3175,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized",{"_index":3180,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized[field",{"_index":3223,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizes",{"_index":3177,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["save",{"_index":692,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/DBKeyService.html":{}}}],["saves",{"_index":1748,"title":{},"body":{"injectables/FilesService.html":{}}}],["saveuserupload",{"_index":1732,"title":{},"body":{"injectables/FilesService.html":{}}}],["saveuserupload(tenantid",{"_index":1744,"title":{},"body":{"injectables/FilesService.html":{}}}],["schedulemodule",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":3310,"title":{},"body":{"injectables/SessionService.html":{}}}],["schema",{"_index":984,"title":{},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"miscellaneous/variables.html":{}}}],["schema(@param(\"id",{"_index":1273,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema(id",{"_index":1260,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema.org/draft/2020",{"_index":3064,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["schema_uri",{"_index":3685,"title":{},"body":{"classes/VCT.html":{}}}],["schema_uri#integrity",{"_index":3686,"title":{},"body":{"classes/VCT.html":{}}}],["schemaresponse",{"_index":1025,"title":{"classes/SchemaResponse.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["scope",{"_index":715,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/OAuthService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{}}}],["scopes_supported",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{}}}],["sd",{"_index":1300,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["sdjwt",{"_index":1341,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwt.issue",{"_index":1364,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwtinstance",{"_index":2719,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["sdjwtvcinstance",{"_index":1305,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["sdk/client",{"_index":3037,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":3038,"title":{},"body":{"classes/S3FileStorage.html":{},"dependencies.html":{}}}],["seconds",{"_index":493,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/ParResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["secret",{"_index":463,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TokenRequestDto.html":{}}}],["secretaccesskey",{"_index":3578,"title":{},"body":{"modules/StorageModule.html":{}}}],["secretkey",{"_index":1804,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secretorkey",{"_index":2117,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkeyprovider",{"_index":2077,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":1794,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["securely",{"_index":2388,"title":{},"body":{"injectables/OAuthService.html":{}}}],["self",{"_index":3601,"title":{},"body":{"controllers/TenantController.html":{}}}],["send",{"_index":145,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["sendauthorizationcode",{"_index":732,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sendauthorizationcode(res",{"_index":752,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse",{"_index":733,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse(queries",{"_index":754,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sending",{"_index":3721,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sends",{"_index":3628,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook",{"_index":3715,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook(session",{"_index":3748,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhooknotification",{"_index":3739,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhooknotification(session",{"_index":3750,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sense",{"_index":3813,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["sensitive",{"_index":3178,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields",{"_index":3220,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields.foreach((field",{"_index":3222,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sent",{"_index":115,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["serializers",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["server')@apioperation({summary",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{}}}],["server's",{"_index":2418,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["servers",{"_index":1198,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["servestaticmodule",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":488,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["service.db",{"_index":1580,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["service_documentation",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{}}}],["services",{"_index":141,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["session",{"_index":473,"title":{"entities/Session.html":{}},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["session.auth_queries",{"_index":802,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.authorization_code",{"_index":832,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.claimswebhook",{"_index":2617,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.claimswebhook!.auth",{"_index":3716,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth.config.value",{"_index":3719,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth.type",{"_index":3717,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth?.type",{"_index":3725,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.url",{"_index":3723,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.controller",{"_index":3286,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.credentialpayload",{"_index":3733,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.credentialpayload!.claims",{"_index":3731,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.credentialpayload?.claims?.[credentialconfigurationid",{"_index":1336,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["session.credentials",{"_index":861,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.id",{"_index":780,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.issuanceid",{"_index":813,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["session.notifywebhook",{"_index":3740,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.pipe",{"_index":3141,"title":{},"body":{"controllers/SessionController.html":{}}}],["session.requestid",{"_index":2541,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.service",{"_index":3142,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{}}}],["session.tenantid",{"_index":782,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["session.vp_nonce",{"_index":2621,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session/.well",{"_index":3753,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["session/authorize",{"_index":643,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["session/entities/session.entity",{"_index":673,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["session/oid4vp",{"_index":2487,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["session/session.decorator",{"_index":675,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["session/session.module",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["session/session.service",{"_index":677,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session/vci",{"_index":2450,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_id",{"_index":2484,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_logger_key",{"_index":3185,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["session_tidy_up_interval",{"_index":3287,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["session_ttl",{"_index":3289,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["session_type",{"_index":3294,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session_validation_schema",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessioncontroller",{"_index":3122,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionentity",{"_index":674,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sessionid",{"_index":311,"title":{},"body":{"modules/AppModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionPipe.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["sessionidparam",{"_index":3188,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["sessionlogcontext",{"_index":2531,"title":{"interfaces/SessionLogContext.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["sessionlogger",{"_index":2465,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionlogger(\"nonce",{"_index":2478,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger(\"notification_id",{"_index":2475,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger(\"session",{"_index":2472,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["sessionloggerinterceptor",{"_index":2018,"title":{"injectables/SessionLoggerInterceptor.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"index.html":{}}}],["sessionloggerservice",{"_index":2019,"title":{"injectables/SessionLoggerService.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["sessionmodule",{"_index":192,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/SessionModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["sessionpipe",{"_index":3140,"title":{"injectables/SessionPipe.html":{}},"body":{"controllers/SessionController.html":{},"injectables/SessionPipe.html":{},"coverage.html":{}}}],["sessionrepository",{"_index":3314,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":3118,"title":{},"body":{"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sessionscounter",{"_index":3311,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionservice",{"_index":676,"title":{"injectables/SessionService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["sessionstatus",{"_index":3102,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["sessionstatus.active",{"_index":3360,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.completed",{"_index":3362,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.expired",{"_index":3363,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.failed",{"_index":3364,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.fetched",{"_index":3361,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus})@column('varchar",{"_index":3104,"title":{},"body":{"entities/Session.html":{}}}],["sessiontype",{"_index":3377,"title":{},"body":{"injectables/SessionService.html":{}}}],["set",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["set+json",{"_index":3782,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["set+json')@get('jwks.json",{"_index":3761,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["setauthcode",{"_index":734,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["setauthcode(issuer_state",{"_index":756,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["setentry",{"_index":3433,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setentry(id",{"_index":3450,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setexpirationtime(expiresin",{"_index":1812,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setglobalconfig",{"_index":2025,"title":{},"body":{"modules/IssuerModule.html":{}}}],["setinterval(callback",{"_index":3357,"title":{},"body":{"injectables/SessionService.html":{}}}],["setissuedat",{"_index":1808,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setissuer(issuer",{"_index":1809,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setmetadata(is_public_key",{"_index":4031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(session_logger_key",{"_index":4032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprotectedheader",{"_index":1806,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader(header",{"_index":1544,"title":{},"body":{"classes/DBKeyService.html":{}}}],["setstate",{"_index":3307,"title":{},"body":{"injectables/SessionService.html":{}}}],["setstate(session",{"_index":3338,"title":{},"body":{"injectables/SessionService.html":{}}}],["setsubject(options.subject",{"_index":1810,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["settimeout",{"_index":2917,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["setuptenant",{"_index":3609,"title":{},"body":{"injectables/TenantService.html":{}}}],["setuptenant(id",{"_index":3626,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["sha",{"_index":1346,"title":{},"body":{"injectables/CredentialsService.html":{},"miscellaneous/variables.html":{}}}],["sha256",{"_index":1711,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["shouldenableautologging",{"_index":2278,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["shouldlog",{"_index":3238,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["shuffel",{"_index":3462,"title":{},"body":{"injectables/StatusListService.html":{}}}],["shuffled",{"_index":3448,"title":{},"body":{"injectables/StatusListService.html":{}}}],["sign",{"_index":2176,"title":{},"body":{"entities/KeyEntity.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/S3FileStorage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sign(privatekeyinstance",{"_index":1545,"title":{},"body":{"classes/DBKeyService.html":{}}}],["signalg",{"_index":1343,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["signature",{"_index":1405,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["signature).catch((err",{"_index":2791,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["signaturebase64url",{"_index":4026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signed",{"_index":3801,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["signedjwt",{"_index":2584,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwt.length",{"_index":2589,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwtlength",{"_index":2588,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signer",{"_index":836,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["signer(tenantid",{"_index":1479,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["signing",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/JwtStrategy.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["signjwt",{"_index":1446,"title":{},"body":{"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["signjwt(payload",{"_index":1481,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["simplicity",{"_index":2806,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["singleline",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["size",{"_index":1716,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"injectables/StatusListService.html":{}}}],["skip",{"_index":1140,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["slice(1",{"_index":1763,"title":{},"body":{"injectables/FilesService.html":{}}}],["someone",{"_index":2966,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["sort",{"_index":3466,"title":{},"body":{"injectables/StatusListService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["specific",{"_index":524,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["specified",{"_index":3796,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["sqlite",{"_index":1557,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["sqlite3",{"_index":3947,"title":{},"body":{"dependencies.html":{}}}],["src",{"_index":2254,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src.pipe(write",{"_index":2256,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/.../auth.module.ts",{"_index":4000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication",{"_index":3954,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../cert.entity.ts",{"_index":3994,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../crypto",{"_index":3995,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../crypto.service.ts",{"_index":4002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.module.ts",{"_index":4001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ed25519.ts",{"_index":4003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../issuer.module.ts",{"_index":4005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../key.module.ts",{"_index":4006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../keys.entity.ts",{"_index":3997,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":3962,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../media",{"_index":3955,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../oauth.module.ts",{"_index":4007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../policies.dto.ts",{"_index":3998,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../presentation",{"_index":3957,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../public.decorator.ts",{"_index":4004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registrar.module.ts",{"_index":4008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session",{"_index":4009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.decorator.ts",{"_index":3964,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../session.entity.ts",{"_index":3958,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../session.module.ts",{"_index":4010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../storage.module.ts",{"_index":3996,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../storage.types.ts",{"_index":3999,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../token.decorator.ts",{"_index":4011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../util.ts",{"_index":3963,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../webhook.dto.ts",{"_index":3953,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":160,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:8",{"_index":162,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/dto/oidc",{"_index":3820,"title":{},"body":{"coverage.html":{}}}],["src/auth/admin.guard.ts",{"_index":36,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"coverage.html":{}}}],["src/auth/admin.guard.ts:6",{"_index":44,"title":{},"body":{"injectables/AdminAuthGuard.html":{}}}],["src/auth/auth.controller.ts",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:172",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:207",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:75",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":2050,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":2054,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:7",{"_index":2053,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":535,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/client",{"_index":970,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"coverage.html":{}}}],["src/auth/dto/oidc",{"_index":3827,"title":{},"body":{"coverage.html":{}}}],["src/auth/dto/token",{"_index":3672,"title":{},"body":{"classes/TokenResponse.html":{},"coverage.html":{}}}],["src/auth/entitites/tenant.entity.ts",{"_index":3603,"title":{},"body":{"entities/TenantEntity.html":{},"coverage.html":{}}}],["src/auth/entitites/tenant.entity.ts:12",{"_index":3604,"title":{},"body":{"entities/TenantEntity.html":{}}}],["src/auth/jwt.service.ts",{"_index":1789,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["src/auth/jwt.service.ts:14",{"_index":2063,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:28",{"_index":2065,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:65",{"_index":2067,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:91",{"_index":2066,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":2068,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":2074,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:27",{"_index":2076,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:55",{"_index":2080,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:79",{"_index":2082,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:9",{"_index":2072,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/public.decorator.ts",{"_index":3834,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/tenant.service.ts",{"_index":3605,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["src/auth/tenant.service.ts:105",{"_index":3635,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:118",{"_index":3618,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:126",{"_index":3627,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:139",{"_index":3615,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:30",{"_index":3613,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:46",{"_index":3625,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:60",{"_index":3624,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:70",{"_index":3622,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:79",{"_index":3620,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:89",{"_index":3623,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.controller.ts",{"_index":3582,"title":{},"body":{"controllers/TenantController.html":{},"coverage.html":{}}}],["src/auth/tenant/tenant.controller.ts:31",{"_index":3588,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/auth/tenant/tenant.controller.ts:44",{"_index":3586,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/auth/token.decorator.ts",{"_index":3660,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/crypto.module.ts",{"_index":1427,"title":{},"body":{"modules/CryptoModule.html":{}}}],["src/crypto/crypto.service.ts",{"_index":3840,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/encryption/encryption.service.ts",{"_index":1643,"title":{},"body":{"injectables/EncryptionService.html":{},"coverage.html":{}}}],["src/crypto/encryption/encryption.service.ts:12",{"_index":1651,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:26",{"_index":1663,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:44",{"_index":1661,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:54",{"_index":1653,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:74",{"_index":1660,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/key/adapters/db",{"_index":1437,"title":{},"body":{"classes/DBKeyService.html":{},"coverage.html":{}}}],["src/crypto/key/adapters/vault",{"_index":3847,"title":{},"body":{"coverage.html":{}}}],["src/crypto/key/crypto",{"_index":1378,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/dto/key",{"_index":2128,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["src/crypto/key/entities/cert.entity.ts",{"_index":888,"title":{},"body":{"entities/CertEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/cert.entity.ts:21",{"_index":903,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:27",{"_index":910,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:33",{"_index":907,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:39",{"_index":899,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:45",{"_index":912,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:51",{"_index":901,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:57",{"_index":895,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:63",{"_index":914,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts",{"_index":2169,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/keys.entity.ts:16",{"_index":2170,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:22",{"_index":2174,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:28",{"_index":2173,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:34",{"_index":2171,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:40",{"_index":2177,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/key.controller.ts",{"_index":2141,"title":{},"body":{"controllers/KeyController.html":{},"coverage.html":{}}}],["src/crypto/key/key.controller.ts:39",{"_index":2151,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:51",{"_index":2147,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:67",{"_index":2155,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:82",{"_index":2149,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.module.ts",{"_index":2182,"title":{},"body":{"modules/KeyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/key.module.ts:33",{"_index":2184,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.service.ts",{"_index":2210,"title":{},"body":{"classes/KeyService.html":{},"coverage.html":{}}}],["src/crypto/key/key.service.ts:12",{"_index":2212,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:23",{"_index":2221,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:30",{"_index":2213,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:37",{"_index":2219,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:43",{"_index":2223,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:49",{"_index":2215,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:55",{"_index":2216,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:60",{"_index":2217,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:65",{"_index":2218,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:72",{"_index":2226,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:85",{"_index":2214,"title":{},"body":{"classes/KeyService.html":{}}}],["src/database/database.module.ts",{"_index":1549,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/health/health.controller.ts",{"_index":1825,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:25",{"_index":1834,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1842,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/issuer/authorize/authorize.controller.ts",{"_index":641,"title":{},"body":{"controllers/AuthorizeController.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.controller.ts:30",{"_index":657,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:44",{"_index":664,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:65",{"_index":667,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:81",{"_index":654,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.service.ts",{"_index":728,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.service.ts:103",{"_index":759,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:206",{"_index":749,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:224",{"_index":741,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:296",{"_index":753,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:303",{"_index":757,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:37",{"_index":740,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:48",{"_index":746,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:55",{"_index":743,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:78",{"_index":755,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/dto/authorize",{"_index":705,"title":{},"body":{"classes/AuthorizeQueries.html":{},"coverage.html":{}}}],["src/issuer/authorize/dto/par",{"_index":2634,"title":{},"body":{"classes/ParResponseDto.html":{},"coverage.html":{}}}],["src/issuer/credentials",{"_index":1256,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["src/issuer/credentials/credential",{"_index":1067,"title":{},"body":{"injectables/CredentialConfigService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts",{"_index":1224,"title":{},"body":{"controllers/CredentialsController.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts:35",{"_index":1233,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:45",{"_index":1235,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:58",{"_index":1231,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.service.ts",{"_index":1275,"title":{},"body":{"injectables/CredentialsService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.service.ts:102",{"_index":1287,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:209",{"_index":1296,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:23",{"_index":1284,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:235",{"_index":1294,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:46",{"_index":1292,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/dto/credential",{"_index":1049,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"coverage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts",{"_index":979,"title":{},"body":{"entities/CredentialConfig.html":{},"coverage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:105",{"_index":1027,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:138",{"_index":1001,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:145",{"_index":1016,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:43",{"_index":1013,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:47",{"_index":995,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:51",{"_index":1031,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:57",{"_index":1029,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:61",{"_index":993,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:66",{"_index":990,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:71",{"_index":996,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:77",{"_index":1032,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:82",{"_index":1020,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:86",{"_index":1021,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:89",{"_index":1017,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:94",{"_index":1028,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:99",{"_index":1024,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts",{"_index":58,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:24",{"_index":1642,"title":{},"body":{"classes/EmbeddedDisclosurePolicy.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:35",{"_index":69,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:47",{"_index":3018,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:62",{"_index":2636,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:68",{"_index":2638,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:74",{"_index":2637,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:86",{"_index":343,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["src/issuer/display/display.controller.ts",{"_index":1582,"title":{},"body":{"controllers/DisplayController.html":{},"coverage.html":{}}}],["src/issuer/display/display.controller.ts:27",{"_index":1590,"title":{},"body":{"controllers/DisplayController.html":{}}}],["src/issuer/display/display.controller.ts:38",{"_index":1588,"title":{},"body":{"controllers/DisplayController.html":{}}}],["src/issuer/display/display.service.ts",{"_index":1616,"title":{},"body":{"injectables/DisplayService.html":{},"coverage.html":{}}}],["src/issuer/display/display.service.ts:11",{"_index":1618,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/display.service.ts:26",{"_index":1621,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/display.service.ts:38",{"_index":1620,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/dto/display",{"_index":1598,"title":{},"body":{"classes/DisplayCreateDto.html":{},"coverage.html":{}}}],["src/issuer/display/entities/display.entity.ts",{"_index":1602,"title":{},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"coverage.html":{}}}],["src/issuer/display/entities/display.entity.ts:13",{"_index":1614,"title":{},"body":{"classes/DisplayInfo.html":{}}}],["src/issuer/display/entities/display.entity.ts:15",{"_index":1611,"title":{},"body":{"classes/DisplayInfo.html":{}}}],["src/issuer/display/entities/display.entity.ts:19",{"_index":1613,"title":{},"body":{"classes/DisplayInfo.html":{}}}],["src/issuer/display/entities/display.entity.ts:26",{"_index":1604,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/display/entities/display.entity.ts:32",{"_index":1603,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/display/entities/display.entity.ts:40",{"_index":1607,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/display/entities/display.entity.ts:9",{"_index":1615,"title":{},"body":{"classes/DisplayLogo.html":{}}}],["src/issuer/issuance/dto/authentication",{"_index":599,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts",{"_index":1055,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:13",{"_index":1058,"title":{},"body":{"classes/CredentialConfigMapping.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:30",{"_index":1898,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/entities/issuance",{"_index":1845,"title":{},"body":{"entities/IssuanceConfig.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts",{"_index":1882,"title":{},"body":{"controllers/IssuanceController.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts:28",{"_index":1888,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:38",{"_index":1890,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:54",{"_index":1886,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.service.ts",{"_index":1899,"title":{},"body":{"injectables/IssuanceService.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.service.ts:153",{"_index":1916,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:162",{"_index":1910,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:175",{"_index":1912,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:191",{"_index":1918,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:21",{"_index":1905,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:215",{"_index":1908,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:39",{"_index":1915,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:48",{"_index":1914,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuer",{"_index":1956,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["src/issuer/issuer.module.ts",{"_index":2021,"title":{},"body":{"modules/IssuerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/issuer/oid4vci/dto/notification",{"_index":2327,"title":{},"body":{"classes/NotificationRequestDto.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/dto/offer",{"_index":2426,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts",{"_index":2449,"title":{},"body":{"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:29",{"_index":2454,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:43",{"_index":2461,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:53",{"_index":2458,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts",{"_index":3878,"title":{},"body":{"coverage.html":{}}}],["src/issuer/oid4vci/util.ts",{"_index":3881,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/issuer/status",{"_index":3390,"title":{},"body":{"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":3884,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/metric/metric.module.ts",{"_index":2318,"title":{},"body":{"modules/MetricModule.html":{}}}],["src/oauth/dto/token",{"_index":3666,"title":{},"body":{"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"coverage.html":{}}}],["src/oauth/oauth.controller.ts",{"_index":2334,"title":{},"body":{"controllers/OAuthController.html":{},"coverage.html":{}}}],["src/oauth/oauth.controller.ts:22",{"_index":2343,"title":{},"body":{"controllers/OAuthController.html":{}}}],["src/oauth/oauth.module.ts",{"_index":2358,"title":{},"body":{"modules/OAuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/oauth/oauth.service.ts",{"_index":2363,"title":{},"body":{"injectables/OAuthService.html":{},"coverage.html":{}}}],["src/oauth/oauth.service.ts:10",{"_index":2371,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:100",{"_index":2379,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:20",{"_index":2380,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:33",{"_index":2377,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:60",{"_index":2384,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:68",{"_index":2375,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:92",{"_index":2373,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:96",{"_index":2382,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/registrar/dto/access",{"_index":6,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["src/registrar/entities/registrar.entity.ts",{"_index":2810,"title":{},"body":{"entities/RegistrarEntity.html":{},"coverage.html":{}}}],["src/registrar/entities/registrar.entity.ts:13",{"_index":2815,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:16",{"_index":2814,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:19",{"_index":2813,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:7",{"_index":2816,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/registrar.module.ts",{"_index":2821,"title":{},"body":{"modules/RegistrarModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/registrar/registrar.service.ts",{"_index":2834,"title":{},"body":{"injectables/RegistrarService.html":{},"coverage.html":{}}}],["src/registrar/registrar.service.ts:100",{"_index":2864,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:111",{"_index":2872,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:133",{"_index":2870,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:141",{"_index":2873,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:158",{"_index":2858,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:181",{"_index":2862,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:198",{"_index":2853,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:240",{"_index":2856,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:32",{"_index":2879,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:36",{"_index":2877,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:40",{"_index":2849,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:59",{"_index":2869,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:92",{"_index":2863,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/session/entities/session.entity.ts",{"_index":3076,"title":{},"body":{"entities/Session.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/session/entities/session.entity.ts:105",{"_index":3093,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:111",{"_index":3083,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:117",{"_index":3111,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:120",{"_index":3089,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:126",{"_index":3097,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:132",{"_index":3098,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:138",{"_index":3084,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:143",{"_index":3081,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:148",{"_index":3095,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:153",{"_index":3094,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:158",{"_index":3108,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:164",{"_index":3107,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:171",{"_index":3106,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:58",{"_index":3091,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:61",{"_index":3092,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:67",{"_index":3100,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:73",{"_index":3101,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:79",{"_index":3086,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:84",{"_index":3080,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:89",{"_index":3099,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:94",{"_index":3079,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:99",{"_index":3112,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session.controller.ts",{"_index":3123,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{}}}],["src/session/session.controller.ts:33",{"_index":3130,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:42",{"_index":3133,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:53",{"_index":3129,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:66",{"_index":3137,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.decorator.ts",{"_index":3886,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/session/session.module.ts",{"_index":3285,"title":{},"body":{"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/session/session.pipe.ts",{"_index":3295,"title":{},"body":{"injectables/SessionPipe.html":{},"coverage.html":{}}}],["src/session/session.pipe.ts:6",{"_index":3298,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["src/session/session.pipe.ts:9",{"_index":3300,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["src/session/session.service.ts",{"_index":3305,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/session/session.service.ts:118",{"_index":3339,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:144",{"_index":3317,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:152",{"_index":3325,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:163",{"_index":3324,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:172",{"_index":3328,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:179",{"_index":3341,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:19",{"_index":3313,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:192",{"_index":3322,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:34",{"_index":3330,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:89",{"_index":3337,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:98",{"_index":3320,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/storage/adapters/local.storage.ts",{"_index":2230,"title":{},"body":{"classes/LocalFileStorage.html":{},"coverage.html":{}}}],["src/storage/adapters/local.storage.ts:13",{"_index":2232,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:16",{"_index":2237,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:37",{"_index":2236,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:42",{"_index":2234,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:46",{"_index":2235,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts",{"_index":3020,"title":{},"body":{"classes/S3FileStorage.html":{},"coverage.html":{}}}],["src/storage/adapters/s3.storage.ts:13",{"_index":3025,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:20",{"_index":3031,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:56",{"_index":3030,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:68",{"_index":3027,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:74",{"_index":3028,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:85",{"_index":3029,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/dto/file",{"_index":1724,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["src/storage/entities/files.entity.ts",{"_index":1683,"title":{},"body":{"entities/FileEntity.html":{},"coverage.html":{}}}],["src/storage/entities/files.entity.ts:13",{"_index":1687,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/storage/entities/files.entity.ts:19",{"_index":1686,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/storage/entities/files.entity.ts:7",{"_index":1685,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/storage/files.service.ts",{"_index":1729,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/storage/files.service.ts:15",{"_index":1735,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:30",{"_index":1747,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:64",{"_index":1743,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:73",{"_index":1736,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:77",{"_index":1742,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:88",{"_index":1739,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/storage.controller.ts",{"_index":3515,"title":{},"body":{"controllers/StorageController.html":{},"coverage.html":{}}}],["src/storage/storage.controller.ts:44",{"_index":3525,"title":{},"body":{"controllers/StorageController.html":{}}}],["src/storage/storage.controller.ts:52",{"_index":3519,"title":{},"body":{"controllers/StorageController.html":{}}}],["src/storage/storage.module.ts",{"_index":3547,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/storage/storage.module.ts:55",{"_index":3548,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/storage/storage.types.ts",{"_index":1689,"title":{},"body":{"interfaces/FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/storage/storage.types.ts:21",{"_index":1706,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:27",{"_index":1700,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:31",{"_index":1694,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:33",{"_index":1696,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:35",{"_index":1698,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/utils/logger/logger",{"_index":2268,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["src/utils/logger/session",{"_index":3152,"title":{},"body":{"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mediatype/media",{"_index":3896,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/utils/webhook/webhook.dto.ts",{"_index":106,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/utils/webhook/webhook.dto.ts:105",{"_index":3707,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:19",{"_index":113,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:24",{"_index":116,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:44",{"_index":3704,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{}}}],["src/utils/webhook/webhook.dto.ts:51",{"_index":3702,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{}}}],["src/utils/webhook/webhook.dto.ts:60",{"_index":3705,"title":{},"body":{"classes/WebHookAuthConfigNone.html":{}}}],["src/utils/webhook/webhook.dto.ts:65",{"_index":3700,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:77",{"_index":3708,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.service.ts",{"_index":3710,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["src/utils/webhook/webhook.service.ts:111",{"_index":3751,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:12",{"_index":3711,"title":{},"body":{"classes/WebhookResponse.html":{}}}],["src/utils/webhook/webhook.service.ts:20",{"_index":3747,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:40",{"_index":3749,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/verifier/oid4vp/dto/authorization",{"_index":637,"title":{},"body":{"classes/AuthorizationResponse.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/dto/presentation",{"_index":2696,"title":{},"body":{"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts",{"_index":2486,"title":{},"body":{"controllers/Oid4vpController.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:32",{"_index":2492,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:43",{"_index":2496,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.module.ts",{"_index":2507,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts",{"_index":2512,"title":{},"body":{"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:20",{"_index":2517,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:205",{"_index":2525,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:264",{"_index":2526,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:41",{"_index":2519,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/presentations/dto/auth",{"_index":582,"title":{},"body":{"interfaces/AuthResponse.html":{},"coverage.html":{}}}],["src/verifier/presentations/dto/presentation",{"_index":2660,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{},"coverage.html":{}}}],["src/verifier/presentations/dto/vp",{"_index":2969,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{},"coverage.html":{}}}],["src/verifier/presentations/entities/presentation",{"_index":922,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts",{"_index":2665,"title":{},"body":{"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts:111",{"_index":2669,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:121",{"_index":2677,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:137",{"_index":2671,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:79",{"_index":2675,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.module.ts",{"_index":2710,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["src/verifier/presentations/presentations.service.ts",{"_index":2715,"title":{},"body":{"injectables/PresentationsService.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.service.ts:141",{"_index":2740,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:154",{"_index":2753,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:170",{"_index":2734,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:180",{"_index":2738,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:201",{"_index":2755,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:214",{"_index":2762,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:237",{"_index":2760,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:252",{"_index":2758,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:269",{"_index":2748,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:33",{"_index":2729,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:53",{"_index":2744,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:66",{"_index":2741,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/resolver/dto/issuer",{"_index":2012,"title":{},"body":{"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.module.ts",{"_index":2976,"title":{},"body":{"modules/ResolverModule.html":{}}}],["src/verifier/resolver/resolver.service.ts",{"_index":2978,"title":{},"body":{"injectables/ResolverService.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.service.ts:12",{"_index":2981,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:21",{"_index":2983,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/verifier.module.ts",{"_index":3699,"title":{},"body":{"modules/VerifierModule.html":{}}}],["src/well",{"_index":1181,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["st",{"_index":2260,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["st.size",{"_index":2262,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["stack",{"_index":3215,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["stage",{"_index":2538,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["start",{"_index":2522,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["started",{"_index":3268,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["starting",{"_index":3200,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["starts",{"_index":2867,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["startswith(\"http",{"_index":2047,"title":{},"body":{"modules/IssuerModule.html":{}}}],["starttime",{"_index":3201,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["state",{"_index":585,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["statements",{"_index":3818,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":3359,"title":{},"body":{"injectables/SessionService.html":{}}}],["static",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["statsync",{"_index":2243,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["statsync(fullpath",{"_index":2261,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["status",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"dependencies.html":{}}}],["status_list",{"_index":3489,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuscode",{"_index":326,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["statuslist",{"_index":3455,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslist(entry.elements",{"_index":3473,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslist+jwt",{"_index":3478,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistcontroller",{"_index":3389,"title":{"controllers/StatusListController.html":{}},"body":{"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"coverage.html":{}}}],["statuslistentity",{"_index":3405,"title":{"entities/StatusListEntity.html":{}},"body":{"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["statuslistfetcher",{"_index":2720,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["statuslistjwtheaderparameters",{"_index":3456,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistmodule",{"_index":532,"title":{"modules/StatusListModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"index.html":{},"modules.html":{}}}],["statuslistrepository",{"_index":3436,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistservice",{"_index":1281,"title":{"injectables/StatusListService.html":{}},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["statusmanagement",{"_index":985,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["statusmapping",{"_index":3426,"title":{"entities/StatusMapping.html":{}},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["statusmappingrepository",{"_index":3435,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statusupdatedto",{"_index":3135,"title":{"classes/StatusUpdateDto.html":{}},"body":{"controllers/SessionController.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["step",{"_index":696,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["still",{"_index":476,"title":{},"body":{"controllers/AuthController.html":{}}}],["stopatfirsterror",{"_index":1151,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["storage",{"_index":330,"title":{},"body":{"modules/AppModule.html":{},"injectables/FilesService.html":{},"controllers/StorageController.html":{}}}],["storage.controller",{"_index":3551,"title":{},"body":{"modules/StorageModule.html":{}}}],["storage.types",{"_index":2245,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"modules/StorageModule.html":{}}}],["storage/files.service",{"_index":3638,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["storage/storage.module",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["storage/storage.types",{"_index":1756,"title":{},"body":{"injectables/FilesService.html":{}}}],["storage_driver",{"_index":3553,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["storagecontroller",{"_index":3514,"title":{"controllers/StorageController.html":{}},"body":{"controllers/StorageController.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["storagemodule",{"_index":193,"title":{"modules/StorageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{},"index.html":{},"modules.html":{}}}],["storagemodule.forroot",{"_index":338,"title":{},"body":{"modules/AppModule.html":{}}}],["store",{"_index":1074,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["store(tenantid",{"_index":1097,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["storecredentialconfiguration",{"_index":1228,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["storecredentialconfiguration(config",{"_index":1234,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["stored",{"_index":1103,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/FilesService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["storedobject",{"_index":1712,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["storedsecret",{"_index":2404,"title":{},"body":{"injectables/OAuthService.html":{}}}],["storeissuanceconfiguration",{"_index":1885,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["storeissuanceconfiguration(config",{"_index":1889,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["storeissuanceconfiguration(tenantid",{"_index":1917,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["storepresentationconfig",{"_index":2667,"title":{},"body":{"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["storepresentationconfig(config",{"_index":2676,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["storepresentationconfig(tenantid",{"_index":2751,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid",{"_index":2725,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid(registrationcertid",{"_index":2754,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["stores",{"_index":1099,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["strategy",{"_index":2088,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1707,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"controllers/StorageController.html":{}}}],["stream.contenttype",{"_index":3545,"title":{},"body":{"controllers/StorageController.html":{}}}],["stream.size",{"_index":3546,"title":{},"body":{"controllers/StorageController.html":{}}}],["streamablefile",{"_index":3528,"title":{},"body":{"controllers/StorageController.html":{}}}],["streamablefile(stream.stream",{"_index":3542,"title":{},"body":{"controllers/StorageController.html":{}}}],["string",{"_index":19,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":870,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{}}}],["structured",{"_index":3227,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["sub",{"_index":478,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/OAuthService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{}}}],["subclass",{"_index":1009,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["subclass’s",{"_index":1011,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["subfolder",{"_index":1114,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["subject",{"_index":840,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{}}}],["subject_types_supported",{"_index":508,"title":{},"body":{"controllers/AuthController.html":{}}}],["subtypes",{"_index":154,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["succeeded",{"_index":3279,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["success",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionService.html":{}}}],["successful",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionService.html":{}}}],["successfully",{"_index":2587,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["such",{"_index":1636,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/Session.html":{}}}],["summary",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["super",{"_index":2058,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super(config",{"_index":2094,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(configservice",{"_index":1502,"title":{},"body":{"classes/DBKeyService.html":{}}}],["super.authenticate(req",{"_index":2096,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":55,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["supersecret",{"_index":553,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["support",{"_index":447,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/Session.html":{},"modules.html":{}}}],["supported",{"_index":450,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["supportedauthenticationscheme.clientattestationjwt",{"_index":797,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["supports",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{}}}],["svg",{"_index":3975,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":3775,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["switch",{"_index":872,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["symbol(\"file_storage",{"_index":1722,"title":{},"body":{"interfaces/FileStorage.html":{},"miscellaneous/variables.html":{}}}],["symmetric",{"_index":2119,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["synchronize",{"_index":1568,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["system",{"_index":1455,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"injectables/StatusListService.html":{},"entities/TenantEntity.html":{}}}],["t",{"_index":1654,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["table",{"_index":3902,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3901,"title":{},"body":{"coverage.html":{}}}],["tamper",{"_index":1767,"title":{},"body":{"injectables/FilesService.html":{}}}],["tap",{"_index":3183,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["tap((data",{"_index":3203,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["target",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["tell",{"_index":2626,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenancy",{"_index":3110,"title":{},"body":{"entities/Session.html":{}}}],["tenant",{"_index":523,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"injectables/OAuthService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["tenant.isdirectory",{"_index":1123,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.name",{"_index":1130,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.secret",{"_index":3651,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.service",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TenantController.html":{}}}],["tenant/2025/08/14/uuid.ext",{"_index":1714,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["tenant/tenant.controller",{"_index":551,"title":{},"body":{"modules/AuthModule.html":{}}}],["tenant_id",{"_index":3293,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["tenant_total",{"_index":576,"title":{},"body":{"modules/AuthModule.html":{}}}],["tenantcontroller",{"_index":536,"title":{"controllers/TenantController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/TenantController.html":{},"coverage.html":{}}}],["tenantentity",{"_index":548,"title":{"entities/TenantEntity.html":{}},"body":{"modules/AuthModule.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["tenantfolders",{"_index":1119,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenanthost",{"_index":2544,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenantid",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["tenantid)).uri",{"_index":853,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["tenantid/credentials",{"_index":1259,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["tenantid/status",{"_index":3392,"title":{},"body":{"controllers/StatusListController.html":{}}}],["tenantrepository",{"_index":3611,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenants",{"_index":580,"title":{"interfaces/Tenants.html":{}},"body":{"modules/AuthModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["tenantsecret",{"_index":3634,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenantservice",{"_index":416,"title":{"injectables/TenantService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["tenanttotal",{"_index":3612,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["terminusmodule",{"_index":1843,"title":{},"body":{"modules/HealthModule.html":{}}}],["textencoder().encode(data",{"_index":4024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textencoder().encode(secret",{"_index":1805,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["then((cert",{"_index":1532,"title":{},"body":{"classes/DBKeyService.html":{}}}],["then((entry",{"_index":1679,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["then((file",{"_index":3481,"title":{},"body":{"injectables/StatusListService.html":{}}}],["then((key",{"_index":1529,"title":{},"body":{"classes/DBKeyService.html":{}}}],["then((res",{"_index":2954,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["then((response",{"_index":2932,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["then((session",{"_index":801,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["then(async",{"_index":1669,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{}}}],["think",{"_index":475,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.accesstoken",{"_index":2905,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.addaccesscertificate",{"_index":2910,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.addrp(name",{"_index":2909,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.authorizeservice.authorizationchallengeendpoint",{"_index":704,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.authzmetadata",{"_index":3814,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.authorizeservice.sendauthorizationresponse(queries",{"_index":687,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.validatetokenrequest(body",{"_index":702,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authzmetadata(session",{"_index":814,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.bucket",{"_index":3042,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.certrepository",{"_index":1531,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["this.client",{"_index":2901,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.client.setconfig",{"_index":2902,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.clients.delete(clientid",{"_index":2412,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.get(clientid",{"_index":2405,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.has(clientid",{"_index":2413,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.set(clientid",{"_index":2411,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.set(defaultclientid",{"_index":2395,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clientservice.validatetenant",{"_index":470,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config",{"_index":2304,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enabledebugmode",{"_index":2314,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablehttplogger",{"_index":2313,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablesessionlogger",{"_index":2312,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.level",{"_index":2315,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.logformat",{"_index":2316,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice",{"_index":2937,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.get",{"_index":2307,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.configservice.get(\"config_import",{"_index":1118,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.get(\"config_import_force",{"_index":1117,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.get(\"jwt_secret",{"_index":1792,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.get(\"log_level",{"_index":2306,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice.get(\"oauth_client_id",{"_index":2393,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.configservice.get(\"oidc",{"_index":1823,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["this.configservice.get(\"public_url\")}/storage/${key",{"_index":1783,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.configservice.get(\"registrar_url",{"_index":2906,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow",{"_index":2894,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.getorthrow(\"auth_client_id",{"_index":3648,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.getorthrow(\"config_folder",{"_index":1113,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.getorthrow(\"jwt_expires_in",{"_index":1803,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"jwt_issuer",{"_index":1801,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"jwt_secret",{"_index":1800,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"oidc_sub",{"_index":2125,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.configservice.getorthrow(\"public_url",{"_index":496,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}${req.url",{"_index":806,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.id",{"_index":835,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.tenantid}/credentials/vct/${credentialconfigurationid",{"_index":1365,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.tenantid}/credentials/vct/${value.id",{"_index":1324,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${values.session}/oid4vp",{"_index":2597,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.configservice.getorthrow(\"registrar_oidc_url",{"_index":2893,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"registrar_url",{"_index":2904,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"rp_name",{"_index":2576,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"session_tidy_up_interval",{"_index":3355,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservice.getorthrow(\"session_ttl",{"_index":3386,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservie.get(\"crypto_alg",{"_index":1420,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["this.create(tenant",{"_index":1515,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.create(tenantid",{"_index":1528,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.createlist(entry",{"_index":3470,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.credentialconfigrepo",{"_index":1332,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findby",{"_index":1310,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findonebyorfail",{"_index":1350,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepository.delete",{"_index":1175,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.find",{"_index":1176,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.findonebyorfail",{"_index":1178,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.save",{"_index":1179,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialsconfigservice.getbyid",{"_index":1952,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsconfigservice.import",{"_index":1923,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsservice.delete(user.sub",{"_index":1254,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.get(user.sub",{"_index":1250,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.getschema(id",{"_index":1274,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.getvct(id",{"_index":1271,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.store(user.sub",{"_index":1251,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.crypto",{"_index":1503,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.alg",{"_index":1521,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.generatekeypair",{"_index":1516,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.getsigner(privatekey",{"_index":1526,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.cryptoimplementationservice.getalg",{"_index":1316,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.deletekey(token.sub",{"_index":2168,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getalg",{"_index":1537,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.cryptoservice.getcallbackcontext(tenantid",{"_index":778,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.cryptoservice.getcertchain",{"_index":1367,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.getcertentry",{"_index":1154,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.cryptoservice.getcerts(tenantid",{"_index":2163,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getjwks(tenantid).then((key",{"_index":3815,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.cryptoservice.import",{"_index":1922,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.cryptoservice.importkey(tenantid",{"_index":2164,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.keyservice.getkid",{"_index":1340,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.keyservice.getkid(tenantid",{"_index":2936,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.getpublickey",{"_index":839,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.signer",{"_index":1342,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.cryptoservice.ontenantinit(id",{"_index":3652,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.cryptoservice.signjwt",{"_index":2408,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.storeaccesscertificate",{"_index":2944,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.cryptoservice.updatecert(tenantid",{"_index":2166,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.db.pingcheck(\"database",{"_index":1841,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.displayrepository.create",{"_index":1624,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayrepository.findone",{"_index":1623,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayrepository.save(displayentity",{"_index":1625,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayservice.create(user.sub",{"_index":1597,"title":{},"body":{"controllers/DisplayController.html":{}}}],["this.displayservice.get(user.sub",{"_index":1596,"title":{},"body":{"controllers/DisplayController.html":{}}}],["this.encryptionservice.decryptjwe",{"_index":2610,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.getencryptionpublickey",{"_index":2567,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.ontenantinit(id",{"_index":3653,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.filerepository.delete",{"_index":1787,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filerepository.find",{"_index":1784,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filerepository.save",{"_index":1775,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filesservice.deletebytenant(tenantid",{"_index":3657,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.filesservice.getstream(key).then",{"_index":3541,"title":{},"body":{"controllers/StorageController.html":{}}}],["this.filesservice.saveuserupload(user.sub",{"_index":3538,"title":{},"body":{"controllers/StorageController.html":{}}}],["this.generateaccesstoken",{"_index":2400,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.getauthorizationserver",{"_index":781,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getauthorizationserver(tenantid).createaccesstokenresponse",{"_index":834,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getbyid",{"_index":1138,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.getdownloadurl(response.key",{"_index":1776,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.getexistingrp(name",{"_index":2930,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.getissuanceconfigurationbyid",{"_index":1926,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.getkid(tenant).catch(async",{"_index":1514,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getkid(tenantid).catch",{"_index":1527,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getpresentationconfig",{"_index":2774,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.getprivatekey(tenantid",{"_index":1525,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getpubfromprivatekey(privatekeyjwk",{"_index":1540,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.gettenants().find((c",{"_index":3649,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.health.check",{"_index":1840,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpservice.get",{"_index":3004,"title":{},"body":{"injectables/ResolverService.html":{}}}],["this.httpservice.post",{"_index":3726,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.import",{"_index":1924,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.initializeclients",{"_index":2390,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.isenabled",{"_index":2891,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.ishttploggerenabled",{"_index":2317,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.issuanceconfigrepo.delete",{"_index":1947,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.find",{"_index":1948,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.findoneorfail",{"_index":1949,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.save",{"_index":1954,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceservice.deleteissuanceconfiguration(user.sub",{"_index":1897,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfiguration(user.sub",{"_index":1894,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfigurationbyid",{"_index":812,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.issuanceservice.storeissuanceconfiguration",{"_index":1895,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.isusingexternaloidc",{"_index":1798,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.jwtservice.generatetoken(payload",{"_index":485,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.isusingexternaloidc",{"_index":440,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.kbverifier.bind(this",{"_index":2771,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.keyrepository",{"_index":1506,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["this.keyrepository.delete",{"_index":1673,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.keyrepository.save",{"_index":1671,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.loadconfiguration",{"_index":2303,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.loadtenants",{"_index":3646,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.logger.error",{"_index":1155,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.info",{"_index":1173,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.setcontext(\"sessionlogger",{"_index":3195,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.logger.setcontext(\"sessionloggerservice",{"_index":3265,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.oauth2client",{"_index":2895,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.oauth2client.clientcredentials().then((token",{"_index":2913,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.oauthservice.handleclientcredentialsgrant",{"_index":2352,"title":{},"body":{"controllers/OAuthController.html":{}}}],["this.oid4vciservice.createoffer",{"_index":2003,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.oid4vciservice.getcredential(req",{"_index":2473,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.handlenotification(req",{"_index":2476,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.issuermetadata(session",{"_index":3806,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.oid4vciservice.noncerequest(session",{"_index":2480,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.ontenantinit(id",{"_index":3656,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.oid4vpservice.createauthorizationrequest(session",{"_index":2501,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.oid4vpservice.createrequest",{"_index":2686,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.oid4vpservice.createrequest(\"pid",{"_index":852,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.oid4vpservice.getresponse(body",{"_index":2502,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.parsechallengerequest",{"_index":876,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.parseloglevel",{"_index":2305,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.presentationsservice.deletepresentationconfig(id",{"_index":2695,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.getpresentationconfig",{"_index":2546,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.getpresentationconfigs(user.sub",{"_index":2692,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.parseresponse",{"_index":2620,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.storepresentationconfig",{"_index":2693,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.storercid",{"_index":2967,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.publicbaseurl",{"_index":3050,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.publicbaseurl.replace",{"_index":3051,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.reflector.get",{"_index":3186,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.reflector.getallandoverride",{"_index":2059,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refreshaccesstoken",{"_index":2907,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.delete",{"_index":2912,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.findonebyorfail",{"_index":2950,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.save",{"_index":2911,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarservice.addregistrationcertificate",{"_index":2552,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.isenabled",{"_index":2550,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.ontenantinit(id",{"_index":3655,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.resolverservice.resolvepublickey",{"_index":2788,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.s3",{"_index":3061,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.s3.send",{"_index":3041,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.sanitizebody(request.body",{"_index":3199,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.schedulerregistry.addinterval(\"tidyupsessions",{"_index":3358,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sdjwtinstance",{"_index":2769,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.sendauthorizationcode(res",{"_index":862,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionlogger.logauthorizationrequest(logcontext",{"_index":2555,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logcredentialverification",{"_index":2622,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowcomplete(logcontext",{"_index":2632,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowerror(logcontext",{"_index":2592,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowstart(logcontext",{"_index":2540,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logsession",{"_index":2586,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsession(logcontext",{"_index":3720,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsessionerror",{"_index":3737,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionrepository.countby",{"_index":3366,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.delete",{"_index":3370,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.find",{"_index":3382,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail",{"_index":3383,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail(where",{"_index":3384,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":3372,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.update",{"_index":3378,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.dec",{"_index":3381,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.inc",{"_index":3374,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.set",{"_index":3368,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice",{"_index":799,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(body.issuer_state",{"_index":697,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.sessionservice.add(issuer_state",{"_index":884,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(res.state",{"_index":2627,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(session.id",{"_index":2553,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionservice.add(values.session",{"_index":2609,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.create",{"_index":2604,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.delete(id",{"_index":3148,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(body.auth_session",{"_index":858,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(body.issuer_state",{"_index":866,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(sessionid",{"_index":3303,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["this.sessionservice.getall",{"_index":3145,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.setauthcode(issuer_state",{"_index":882,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setauthcode(values.issuer_state",{"_index":804,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setentry(entry.index",{"_index":3496,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.setuptenant(id",{"_index":3644,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.shouldlog",{"_index":3266,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.statuslistfetcher.bind(this",{"_index":2772,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.statuslistrepository",{"_index":3480,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.delete",{"_index":3471,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.findonebyorfail",{"_index":3483,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.save",{"_index":3469,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.update",{"_index":3479,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistservice.createentry",{"_index":1355,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.statuslistservice.getlist(tenantid",{"_index":3404,"title":{},"body":{"controllers/StatusListController.html":{}}}],["this.statuslistservice.ontenantinit(id",{"_index":3654,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.statuslistservice.updatestatus(value",{"_index":3151,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.statusmappingrepository.delete",{"_index":3472,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.findby",{"_index":3492,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.save",{"_index":3488,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.storage.delete(file.id",{"_index":1786,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.getsignedurl",{"_index":1780,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.getsignedurl(key",{"_index":1781,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.put(key",{"_index":1770,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.store(tenant.name",{"_index":1169,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.storeissuanceconfiguration",{"_index":1946,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.storepresentationconfig(tenant.name",{"_index":2775,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.tenantrepository.count",{"_index":3642,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.delete",{"_index":3659,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.save",{"_index":3641,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenants",{"_index":3645,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantservice.deletetenant(id",{"_index":3602,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantservice.inittenant(values.id",{"_index":3599,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenanttotal.set",{"_index":3643,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tidyupsessions",{"_index":3353,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.validateclientcredentials",{"_index":2396,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.verifier.bind(this",{"_index":2770,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository",{"_index":2781,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.delete",{"_index":2780,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.find",{"_index":2776,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.save",{"_index":2779,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.update",{"_index":2783,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.webhookservice.sendwebhook",{"_index":2631,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.wellknownservice.getauthzmetadata(session",{"_index":3781,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getissuermetadata(session",{"_index":3779,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getjwks(session.tenantid",{"_index":3785,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["throw",{"_index":441,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionPipe.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["tidy",{"_index":3332,"title":{},"body":{"injectables/SessionService.html":{}}}],["tidyupsessions",{"_index":3308,"title":{},"body":{"injectables/SessionService.html":{}}}],["time",{"_index":1360,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/ParResponseDto.html":{}}}],["timestamp",{"_index":896,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["title",{"_index":3062,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["todo",{"_index":286,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/FilesService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"modules/MetricModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["token",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponseDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token(body",{"_index":665,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["token.accesstoken",{"_index":2914,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["token.decorator",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["token.sub",{"_index":2162,"title":{},"body":{"controllers/KeyController.html":{}}}],["token_endpoint",{"_index":498,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_endpoint_auth_methods_supported",{"_index":505,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_exchange",{"_index":3280,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["token_type",{"_index":436,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["tokenpayload",{"_index":418,"title":{"interfaces/TokenPayload.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenrequest",{"_index":2346,"title":{},"body":{"controllers/OAuthController.html":{}}}],["tokenrequestdto",{"_index":2338,"title":{"classes/TokenRequestDto.html":{}},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenRequestDto.html":{},"coverage.html":{}}}],["tokenresponse",{"_index":376,"title":{"classes/TokenResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{},"coverage.html":{}}}],["tokenresponsedto",{"_index":2347,"title":{"classes/TokenResponseDto.html":{}},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenResponseDto.html":{},"coverage.html":{}}}],["tokens",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/OAuthController.html":{}}}],["tolowercase",{"_index":1762,"title":{},"body":{"injectables/FilesService.html":{}}}],["toodo",{"_index":1928,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["tostring(\"ascii",{"_index":462,"title":{},"body":{"controllers/AuthController.html":{}}}],["total",{"_index":578,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["tracking",{"_index":2704,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{}}}],["transform",{"_index":3296,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["transform(sessionid",{"_index":3299,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["transformer",{"_index":70,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["translatetime",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["transport",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["true",{"_index":68,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["true})@column('json",{"_index":1000,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isnumber",{"_index":1023,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isoptional()@isobject",{"_index":989,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isoptional()@isstring",{"_index":2648,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isoptional()@validate(webhookconfig)@type(undefined",{"_index":2657,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isstring",{"_index":2650,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@type(undefined",{"_index":342,"title":{},"body":{"classes/AttestationBasedPolicy.html":{},"classes/CredentialQuery.html":{},"classes/DCQL.html":{},"classes/PolicyCredential.html":{}}}],["trust",{"_index":2993,"title":{},"body":{"injectables/ResolverService.html":{}}}],["trusted",{"_index":944,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["trusted_authorities",{"_index":952,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["trustedauthorityquery",{"_index":946,"title":{"classes/TrustedAuthorityQuery.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["try",{"_index":453,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"classes/S3FileStorage.html":{}}}],["ttl",{"_index":3385,"title":{},"body":{"injectables/SessionService.html":{}}}],["two",{"_index":3797,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["txcode",{"_index":776,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["typ",{"_index":2579,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["type",{"_index":20,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isobject",{"_index":3701,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{}}}],["type.'})@post('token",{"_index":2342,"title":{},"body":{"controllers/OAuthController.html":{}}}],["type.decorator",{"_index":3769,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["type.decorator.ts",{"_index":3897,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":3770,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["type.enum.ts",{"_index":3956,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":3992,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":2889,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["typeorm",{"_index":919,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":3349,"title":{},"body":{"injectables/SessionService.html":{}}}],["typeorm/repository/repository",{"_index":1493,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["typeormhealthindicator",{"_index":1836,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":538,"title":{},"body":{"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{}}}],["typeormmodule.forfeature",{"_index":2044,"title":{},"body":{"modules/IssuerModule.html":{}}}],["typeormmodule.forfeature([certentity",{"_index":1435,"title":{},"body":{"modules/CryptoModule.html":{},"modules/KeyModule.html":{}}}],["typeormmodule.forfeature([fileentity",{"_index":3569,"title":{},"body":{"modules/StorageModule.html":{}}}],["typeormmodule.forfeature([presentationconfig",{"_index":2714,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["typeormmodule.forfeature([registrarentity",{"_index":2833,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["typeormmodule.forfeature([session",{"_index":3291,"title":{},"body":{"modules/SessionModule.html":{}}}],["typeormmodule.forfeature([statusmapping",{"_index":3429,"title":{},"body":{"modules/StatusListModule.html":{}}}],["typeormmodule.forfeature([tenantentity",{"_index":575,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1565,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1550,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":2178,"title":{},"body":{"entities/KeyEntity.html":{},"modules/RegistrarModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":2922,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["typically",{"_index":1204,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{}}}],["unauthorizedexception",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{}}}],["unauthorizedexception(\"invalid",{"_index":471,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{}}}],["undefined",{"_index":999,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/OfferRequestDto.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/WebhookConfig.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apiproduces('application/json",{"_index":1965,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["undefined})@apiresponse({status",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray",{"_index":1219,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["undefined})@isobject()@isoptional",{"_index":2428,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["undefined})@isstring",{"_index":3668,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["undefined})@isstring()@isin(['client_credentials",{"_index":3670,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["undefined})@post('offer",{"_index":1967,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["undefined})@post('request",{"_index":2674,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["undefined})@type(undefined",{"_index":998,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/WebhookConfig.html":{}}}],["union",{"_index":1005,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["unique",{"_index":26,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["unknown",{"_index":751,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["unsecure",{"_index":2045,"title":{},"body":{"modules/IssuerModule.html":{}}}],["unsigned",{"_index":3799,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["unsupported",{"_index":879,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["up",{"_index":165,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["update",{"_index":2757,"title":{},"body":{"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["update.dto",{"_index":2158,"title":{},"body":{"controllers/KeyController.html":{},"controllers/SessionController.html":{},"injectables/StatusListService.html":{}}}],["update.dto.ts",{"_index":3508,"title":{},"body":{"classes/StatusUpdateDto.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["update.dto.ts:16",{"_index":3509,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:24",{"_index":3512,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:8",{"_index":3510,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["updated",{"_index":916,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["updatedat",{"_index":892,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["updatedatecolumn",{"_index":913,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["updatekey",{"_index":2145,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatekey(token",{"_index":2152,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatekeydto",{"_index":2153,"title":{"classes/UpdateKeyDto.html":{}},"body":{"controllers/KeyController.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["updates",{"_index":2156,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatestatus",{"_index":3434,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updatestatus(value",{"_index":3452,"title":{},"body":{"injectables/StatusListService.html":{}}}],["upload",{"_index":1751,"title":{},"body":{"injectables/FilesService.html":{},"controllers/StorageController.html":{}}}],["upload(user",{"_index":3520,"title":{},"body":{"controllers/StorageController.html":{}}}],["upload.dto",{"_index":3533,"title":{},"body":{"controllers/StorageController.html":{}}}],["upload.dto.ts",{"_index":1725,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["upload.dto.ts:5",{"_index":1727,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["uploaded",{"_index":1749,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadedfile",{"_index":3529,"title":{},"body":{"controllers/StorageController.html":{}}}],["uploading",{"_index":1750,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploads",{"_index":3560,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["uri",{"_index":1986,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"miscellaneous/enumerations.html":{}}}],["url",{"_index":144,"title":{},"body":{"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["url(payload.iss).hostname",{"_index":2998,"title":{},"body":{"injectables/ResolverService.html":{}}}],["urn:${randomuuid",{"_index":691,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["usage",{"_index":1672,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"miscellaneous/typealiases.html":{}}}],["use",{"_index":446,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/EC_Public.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{}}}],["used",{"_index":124,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CryptoImplementationService.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["useexternaloidc",{"_index":2090,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["useful",{"_index":3158,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["useguards",{"_index":1236,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{}}}],["useguards(adminauthguard",{"_index":3591,"title":{},"body":{"controllers/TenantController.html":{}}}],["useguards(jwtauthguard",{"_index":1243,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{}}}],["useinterceptors",{"_index":2462,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StorageController.html":{}}}],["useinterceptors(fileinterceptor(\"file",{"_index":3536,"title":{},"body":{"controllers/StorageController.html":{}}}],["useinterceptors(sessionloggerinterceptor",{"_index":2470,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["useinterceptors(undefined)@useguards(jwtauthguard)@apisecurity('oauth2')@apiconsumes('multipart/form",{"_index":3521,"title":{},"body":{"controllers/StorageController.html":{}}}],["user",{"_index":318,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/SessionModule.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user.admin",{"_index":3597,"title":{},"body":{"controllers/TenantController.html":{}}}],["user.sub",{"_index":1896,"title":{},"body":{"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["username",{"_index":1574,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["users",{"_index":612,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/TenantController.html":{}}}],["uses",{"_index":1828,"title":{},"body":{"controllers/HealthController.html":{},"injectables/SessionLoggerService.html":{}}}],["using",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/OAuthController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["utf8",{"_index":1135,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["utility",{"_index":3965,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utils/logger//session",{"_index":2466,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["utils/logger/session",{"_index":2026,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["utils/mediatype/media",{"_index":3768,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["utils/webhook/webhook.dto",{"_index":607,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["utils/webhook/webhook.service",{"_index":2029,"title":{},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["uuid",{"_index":1495,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"dependencies.html":{}}}],["v4",{"_index":1494,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["valid",{"_index":860,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["valid(\"json",{"_index":274,"title":{},"body":{"modules/AppModule.html":{}}}],["valid(\"trace",{"_index":257,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":668,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/OAuthService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["validate(config",{"_index":1143,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/PresentationsService.html":{}}}],["validate(issuancedto",{"_index":1929,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["validate(payload",{"_index":2081,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(webhookconfig",{"_index":969,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["validateclientcredentials",{"_index":2370,"title":{},"body":{"injectables/OAuthService.html":{}}}],["validateclientcredentials(clientid",{"_index":2383,"title":{},"body":{"injectables/OAuthService.html":{}}}],["validated",{"_index":2083,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":76,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["validatenested()@apiproperty({oneof",{"_index":3706,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["validatenested()@type(undefined",{"_index":1612,"title":{},"body":{"classes/DisplayInfo.html":{},"classes/KeyImportDto.html":{}}}],["validatenested()@type(undefined)@column('json",{"_index":1606,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["validatenested()@type(undefined)@isoptional",{"_index":2430,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["validatetenant",{"_index":3610,"title":{},"body":{"injectables/TenantService.html":{}}}],["validatetenant(tenantid",{"_index":3633,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["validatetokenrequest",{"_index":735,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["validatetokenrequest(body",{"_index":758,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["validation",{"_index":1161,"title":{},"body":{"injectables/CredentialConfigService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["validationerror",{"_index":1157,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors",{"_index":1142,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors.length",{"_index":1164,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors.map((error",{"_index":1165,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationschema",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":77,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["value",{"_index":112,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.config",{"_index":1329,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.config.disclosure_policy",{"_index":1327,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.config.vct",{"_index":1323,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.credentialconfigids",{"_index":1951,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.credentialconfigurationid",{"_index":3494,"title":{},"body":{"injectables/StatusListService.html":{}}}],["value.embeddeddisclosurepolicy",{"_index":1325,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.id",{"_index":1322,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.sessionid",{"_index":3493,"title":{},"body":{"injectables/StatusListService.html":{}}}],["value.status",{"_index":3497,"title":{},"body":{"injectables/StatusListService.html":{}}}],["values",{"_index":62,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/SessionService.html":{},"controllers/TenantController.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["values.id",{"_index":3596,"title":{},"body":{"controllers/TenantController.html":{}}}],["values.session",{"_index":2594,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["values.uri",{"_index":2689,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["values.webhook",{"_index":2605,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["varchar",{"_index":3500,"title":{},"body":{"entities/StatusMapping.html":{}}}],["variable",{"_index":3336,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["variables",{"_index":2391,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/OAuthService.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":140,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["vault",{"_index":2194,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault\").default(\"db",{"_index":2193,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault_token",{"_index":2198,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault_url",{"_index":2196,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vaultkeyservice",{"_index":2189,"title":{},"body":{"modules/KeyModule.html":{},"coverage.html":{}}}],["vc",{"_index":1307,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["vcs",{"_index":2717,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vct",{"_index":986,"title":{"classes/VCT.html":{}},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["vct(@param(\"id",{"_index":1269,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["vct(id",{"_index":1263,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["verbose",{"_index":2309,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["verifiable",{"_index":941,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["verification",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{}}}],["verification.'})@apiresponse({status",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{}}}],["verificationcounter",{"_index":3369,"title":{},"body":{"injectables/SessionService.html":{}}}],["verificationresult",{"_index":3085,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verified",{"_index":3087,"title":{},"body":{"entities/Session.html":{}}}],["verifier",{"_index":1401,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["verifier/oid4vp/dto/presentation",{"_index":1974,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["verifier/oid4vp/oid4vp.module",{"_index":2030,"title":{},"body":{"modules/IssuerModule.html":{}}}],["verifier/oid4vp/oid4vp.service",{"_index":768,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifier/presentations/dto/vp",{"_index":2881,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["verifier/presentations/entities/presentation",{"_index":81,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["verifier/presentations/presentations.module",{"_index":2823,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["verifier/presentations/presentations.service",{"_index":2882,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["verifier/verifier.module",{"_index":243,"title":{},"body":{"modules/AppModule.html":{}}}],["verifier_attestations",{"_index":2578,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["verifiermodule",{"_index":194,"title":{"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["verify",{"_index":789,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["verify(data",{"_index":2790,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verify(res.vp_token[att",{"_index":2803,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verifyauthorizationcodeaccesstokenrequest",{"_index":830,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifying",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifypreauthorizedcodeaccesstokenrequest",{"_index":818,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifytoken",{"_index":2062,"title":{},"body":{"injectables/JwtService.html":{}}}],["verifytoken(token",{"_index":1817,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["version",{"_index":3978,"title":{},"body":{"properties.html":{}}}],["via",{"_index":695,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{}}}],["void",{"_index":2289,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["vp",{"_index":592,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["vp_formats",{"_index":2568,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vp_nonce",{"_index":2554,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["vp_token",{"_index":586,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["vprequest",{"_index":2752,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequestrepository",{"_index":2728,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vps",{"_index":2716,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["wallet",{"_index":846,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"properties.html":{}}}],["want",{"_index":94,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/FilesService.html":{},"classes/NoneTrustPolicy.html":{},"injectables/OAuthService.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["warn",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["we'll",{"_index":1999,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/OAuthService.html":{}}}],["web",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/StatusListEntity.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["webhook",{"_index":128,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth",{"_index":3741,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth.config.value",{"_index":3744,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth.type",{"_index":3742,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth?.type",{"_index":3746,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.url",{"_index":3745,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhookauthconfig",{"_index":131,"title":{"classes/WebHookAuthConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookauthconfigheader",{"_index":129,"title":{"classes/WebHookAuthConfigHeader.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookauthconfignone",{"_index":136,"title":{"classes/WebHookAuthConfigNone.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookconfig",{"_index":143,"title":{"classes/WebhookConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookresponse",{"_index":3709,"title":{"classes/WebhookResponse.html":{}},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["webhookresponse.data",{"_index":3730,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhookresponse.status",{"_index":3735,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhooks",{"_index":110,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["webhooksent",{"_index":2633,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookservice",{"_index":2020,"title":{"injectables/WebhookService.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["webhookurl",{"_index":3722,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webook",{"_index":2629,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["well",{"_index":244,"title":{},"body":{"modules/AppModule.html":{},"classes/DBKeyService.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["wellknowncontroller",{"_index":200,"title":{"controllers/WellKnownController.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["wellknownservice",{"_index":195,"title":{"injectables/WellKnownService.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["whether",{"_index":1752,"title":{},"body":{"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["whitelist",{"_index":1144,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["whose",{"_index":1740,"title":{},"body":{"injectables/FilesService.html":{}}}],["willsoto/nestjs",{"_index":541,"title":{},"body":{"modules/AuthModule.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["withfiletypes",{"_index":1121,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["write",{"_index":2252,"title":{},"body":{"classes/LocalFileStorage.html":{},"injectables/RegistrarService.html":{}}}],["writing",{"_index":2963,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["wrtites",{"_index":1454,"title":{},"body":{"classes/DBKeyService.html":{}}}],["x",{"_index":1632,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["x509_san_dns",{"_index":2561,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509_san_dns:${hostname",{"_index":2596,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509certificate",{"_index":2986,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x509certificate(buffer.from(cert",{"_index":2995,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x5c",{"_index":1366,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["y",{"_index":1633,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["yes",{"_index":750,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"interfaces/FileStorage.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/OAuthService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{}}}],["you'd",{"_index":2387,"title":{},"body":{"injectables/OAuthService.html":{}}}],["yyyy",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessCertificateResponse.html":{"url":"interfaces/AccessCertificateResponse.html","title":"interface - AccessCertificateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccessCertificateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/dto/access-certificate-response.ts\n        \n\n\n            \n                Description\n            \n            \n                Repsonse of access certificate request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            crt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        crt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        crt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The public key in PEM format.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier of the access certificate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if the access certificate is revoked.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminAuthGuard.html":{"url":"injectables/AdminAuthGuard.html","title":"injectable - AdminAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/admin.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard(\"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/admin.guard.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class AdminAuthGuard extends AuthGuard(\"jwt\") {\n    canActivate(context: ExecutionContext) {\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllowListPolicy.html":{"url":"classes/AllowListPolicy.html","title":"class - AllowListPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllowListPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                allowList\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['allowList'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:31\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiKeyConfig.html":{"url":"classes/ApiKeyConfig.html","title":"class - ApiKeyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for API key authentication in webhooks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                headerName\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:19\n                        \n                    \n\n            \n                \n                    The name of the header where the API key will be sent.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:24\n                        \n                    \n\n            \n                \n                    The value of the API key to be sent in the header.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                main\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        main\n                        \n                    \n                \n            \n            \n                \n                        \n                    main()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { ApiExcludeController } from \"@nestjs/swagger\";\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n    @Get()\n    main(): string {\n        return 'EUDIPLO is up and running, more information at https://openwallet-foundation-labs.github.io/eudiplo/latest/';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WellKnownService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WellKnownController\n                        \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CryptoModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            KeyModule\n                        \n                        \n                            MetricModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StorageModule\n                        \n                        \n                            VerifierModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { MulterModule } from \"@nestjs/platform-express\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\nimport { ServeStaticModule } from \"@nestjs/serve-static\";\nimport * as Joi from \"joi\";\nimport { memoryStorage } from \"multer\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { isAbsolute, join } from \"path\";\nimport { AppController } from \"./app/app.controller\";\nimport { AUTH_VALIDATION_SCHEMA, AuthModule } from \"./auth/auth.module\";\nimport { CryptoModule } from \"./crypto/crypto.module\";\nimport { CRYPTO_VALIDATION_SCHEMA } from \"./crypto/key/crypto-implementation/crypto-implementation.module\";\nimport { KEY_VALIDATION_SCHEMA, KeyModule } from \"./crypto/key/key.module\";\nimport { DatabaseModule } from \"./database/database.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { ISSUER_VALIDATION_SCHEMA, IssuerModule } from \"./issuer/issuer.module\";\nimport { MetricModule } from \"./metric/metric.module\";\nimport {\n    REGISTRAR_VALIDATION_SCHEMA,\n    RegistrarModule,\n} from \"./registrar/registrar.module\";\nimport {\n    SESSION_VALIDATION_SCHEMA,\n    SessionModule,\n} from \"./session/session.module\";\nimport { CONFIG_STORAGE_SCHEMA, StorageModule } from \"./storage/storage.module\";\nimport { VerifierModule } from \"./verifier/verifier.module\";\nimport { WellKnownController } from \"./well-known/well-known.controller\";\nimport { WellKnownService } from \"./well-known/well-known.service\";\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            validationSchema: Joi.object({\n                FOLDER: Joi.string().default(\"../../tmp\"),\n                RP_NAME: Joi.string().default(\"EUDIPLO\"),\n                LOG_LEVEL: Joi.string()\n                    .valid(\"trace\", \"debug\", \"info\", \"warn\", \"error\", \"fatal\")\n                    .default(\n                        process.env.NODE_ENV === \"production\"\n                            ? \"warn\"\n                            : \"debug\",\n                    ),\n                CONFIG_IMPORT: Joi.boolean().default(false),\n                CONFIG_IMPORT_FORCE: Joi.boolean().default(false),\n                CONFIG_FOLDER: Joi.string().default(\"../../assets/config\"),\n                ...AUTH_VALIDATION_SCHEMA,\n                ...REGISTRAR_VALIDATION_SCHEMA,\n                ...KEY_VALIDATION_SCHEMA,\n                ...CRYPTO_VALIDATION_SCHEMA,\n                ...ISSUER_VALIDATION_SCHEMA,\n                ...SESSION_VALIDATION_SCHEMA,\n                ...CONFIG_STORAGE_SCHEMA,\n                LOG_ENABLE_HTTP_LOGGER: Joi.boolean().default(false),\n                LOG_ENABLE_SESSION_LOGGER: Joi.boolean().default(false),\n                LOG_DEBUG_MODE: Joi.boolean().default(false),\n                LOG_FORMAT: Joi.string()\n                    .valid(\"json\", \"pretty\")\n                    .default(\n                        process.env.NODE_ENV === \"production\"\n                            ? \"json\"\n                            : \"pretty\",\n                    ),\n            }),\n            isGlobal: true,\n            expandVariables: true,\n        }),\n        LoggerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const enableHttpLogger = configService.get(\n                    \"LOG_ENABLE_HTTP_LOGGER\",\n                    false,\n                );\n                //TODO: check if logging to file is needed: https://github.com/iamolegga/nestjs-pino?tab=readme-ov-file#asynchronous-logging\n                return {\n                    pinoHttp: {\n                        level: configService.get(\"LOG_LEVEL\", \"info\"),\n                        autoLogging: enableHttpLogger,\n                        transport: {\n                            target: \"pino-pretty\",\n                            options: {\n                                colorize: true,\n                                singleLine: false,\n                                translateTime: \"yyyy-mm-dd HH:MM:ss\",\n                                ignore: \"pid,hostname\",\n                            },\n                        },\n                        customProps: (req: any) => ({\n                            sessionId: req.params?.session,\n                        }),\n                        serializers: {\n                            req: (req: any) => ({\n                                method: req.method,\n                                url: req.url,\n                                headers: {\n                                    \"user-agent\": req.headers[\"user-agent\"],\n                                    \"content-type\": req.headers[\"content-type\"],\n                                },\n                                sessionId: req.params?.session,\n                                tenantId: req.params?.tenantId,\n                            }),\n                            res: (res: any) => ({\n                                statusCode: res.statusCode,\n                            }),\n                        },\n                    },\n                };\n            },\n        }),\n        AuthModule,\n        KeyModule.forRoot(),\n        MulterModule.register({\n            storage: memoryStorage(),\n        }),\n        CryptoModule,\n        IssuerModule,\n        VerifierModule,\n        RegistrarModule,\n        ScheduleModule.forRoot(),\n        ServeStaticModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const folder = configService.getOrThrow(\"FOLDER\");\n                const rootPath = isAbsolute(folder)\n                    ? join(folder, \"public\")\n                    : join(__dirname, \"../\", folder, \"public\");\n                return [\n                    {\n                        rootPath,\n                    },\n                ];\n            },\n        }),\n        DatabaseModule,\n        SessionModule,\n        DatabaseModule,\n        HealthModule,\n        MetricModule,\n        StorageModule.forRoot(),\n    ],\n    controllers: [WellKnownController, AppController],\n    providers: [WellKnownService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AttestationBasedPolicy.html":{"url":"classes/AttestationBasedPolicy.html","title":"class - AttestationBasedPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AttestationBasedPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['attestationBased'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:80\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyCredential[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:86\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getGlobalJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOAuth2Token\n                            \n                            \n                                    \n                                    \n                                    \n                                getOidcDiscovery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getGlobalJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGlobalJwks()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/jwks.json')@ApiOperation({summary: 'JSON Web Key Set', description: 'Returns the JSON Web Key Set for token verification.'})@ApiResponse({status: 200, description: 'JSON Web Key Set'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:207\n                        \n                    \n\n\n            \n                \n                        Global JWKS endpoint for client credentials flow.\nThis provides the JSON Web Key Set for verifying tokens issued by this server.\n\n\n                        \n                            Returns :         KeyResponseDto\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('oauth2/token')@ApiBody({type: ClientCredentialsDto, examples: undefined})@ApiResponse({status: 200, description: 'OAuth2 token response', type: TokenResponse, examples: undefined})@ApiResponse({status: 401, description: 'Invalid client credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:75\n                        \n                    \n\n\n            \n                \n                        OAuth2 Token endpoint - supports client credentials flow only\nAccepts client credentials either in Authorization header (Basic auth) or request body\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getOidcDiscovery\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOidcDiscovery()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/oauth-authorization-server')@ApiOperation({summary: 'OIDC Discovery Configuration', description: 'Returns the OpenID Connect discovery configuration for client credentials authentication.'})@ApiResponse({status: 200, description: 'OIDC Discovery Configuration'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:172\n                        \n                    \n\n\n            \n                \n                        OIDC Discovery endpoint for client credentials flow.\nThis endpoint provides the OpenID Connect configuration for applications\nthat need to authenticate using client_id and client_secret.\n\n\n                        \n                            Returns :         OidcDiscoveryDto\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Headers,\n    Post,\n    UnauthorizedException,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    ApiBody,\n    ApiExcludeController,\n    ApiOperation,\n    ApiResponse,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { KeyResponseDto } from \"../crypto/key/dto/key-response.dto\";\nimport { ClientCredentialsDto } from \"./dto/client-credentials.dto\";\nimport { OidcDiscoveryDto } from \"./dto/oidc-discovery.dto\";\nimport { TokenResponse } from \"./dto/token-response.dto\";\nimport { JwtService } from \"./jwt.service\";\nimport { TenantService } from \"./tenant.service\";\nimport { TokenPayload } from \"./token.decorator\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiTags(\"Authentication\")\n@Controller(\"\")\nexport class AuthController {\n    constructor(\n        private jwtService: JwtService,\n        private clientService: TenantService,\n        private configService: ConfigService,\n    ) {}\n\n    /**\n     * OAuth2 Token endpoint - supports client credentials flow only\n     * Accepts client credentials either in Authorization header (Basic auth) or request body\n     * @param body\n     * @param headers\n     * @returns\n     */\n    @Post(\"oauth2/token\")\n    @ApiBody({\n        type: ClientCredentialsDto,\n        examples: {\n            client_credentials: {\n                summary: \"Client Credentials Flow\",\n                value: {\n                    grant_type: \"client_credentials\",\n                    client_id: \"root\",\n                    client_secret: \"root\",\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"OAuth2 token response\",\n        type: TokenResponse,\n        examples: {\n            success: {\n                summary: \"Successful response\",\n                value: {\n                    access_token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n                    token_type: \"Bearer\",\n                    expires_in: 86400,\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 401,\n        description: \"Invalid client credentials\",\n    })\n    async getOAuth2Token(\n        @Body() body: any,\n        @Headers() headers: any,\n    ): Promise {\n        if (this.jwtService.isUsingExternalOIDC()) {\n            throw new UnauthorizedException(\n                \"OAuth2 token endpoint is not available when using external OIDC provider. Use your external OIDC provider for authentication.\",\n            );\n        }\n\n        // Only support client credentials flow\n        if (body.grant_type !== \"client_credentials\") {\n            throw new UnauthorizedException(\n                \"Only client_credentials grant type is supported\",\n            );\n        }\n\n        let clientId: string;\n        let clientSecret: string;\n\n        // Try to extract credentials from Authorization header (Basic auth)\n        const authHeader = headers.authorization;\n        if (authHeader && authHeader.startsWith(\"Basic \")) {\n            try {\n                const base64Credentials = authHeader.substring(6);\n                const credentials = Buffer.from(\n                    base64Credentials,\n                    \"base64\",\n                ).toString(\"ascii\");\n                const [id, secret] = credentials.split(\":\");\n                clientId = id;\n                clientSecret = secret;\n            } catch {\n                throw new UnauthorizedException(\n                    \"Invalid Authorization header format\",\n                );\n            }\n        } else {\n            // Fall back to request body\n            clientId = body.client_id;\n            clientSecret = body.client_secret;\n        }\n\n        if (!clientId || !clientSecret) {\n            throw new UnauthorizedException(\n                \"Client credentials must be provided either in Authorization header (Basic auth) or request body\",\n            );\n        }\n\n        const client = this.clientService.validateTenant(\n            clientId,\n            clientSecret,\n        );\n        if (!client) {\n            throw new UnauthorizedException(\"Invalid client credentials\");\n        }\n\n        //TODO: check if the access token should only include the session id or also e.g. the credentials that should be issued. I would think this is not required since we still need the claims for it.\n        const payload: TokenPayload = {\n            sub: client.id,\n            admin: true,\n        };\n\n        //TODO: make expiresIn configurable?\n        const access_token = await this.jwtService.generateToken(payload, {\n            expiresIn: \"24h\",\n            audience: \"eudiplo-service\",\n        });\n\n        const refresh_token = await this.jwtService.generateToken(payload, {\n            expiresIn: \"30d\",\n            audience: \"eudiplo-service\",\n        });\n\n        return {\n            access_token,\n            refresh_token,\n            token_type: \"Bearer\",\n            expires_in: 86400, // 24 hours in seconds\n        };\n    }\n\n    /**\n     * OIDC Discovery endpoint for client credentials flow.\n     * This endpoint provides the OpenID Connect configuration for applications\n     * that need to authenticate using client_id and client_secret.\n     */\n    @Get(\".well-known/oauth-authorization-server\")\n    @ApiOperation({\n        summary: \"OIDC Discovery Configuration\",\n        description:\n            \"Returns the OpenID Connect discovery configuration for client credentials authentication.\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"OIDC Discovery Configuration\",\n    })\n    getOidcDiscovery(): OidcDiscoveryDto {\n        const publicUrl = this.configService.getOrThrow(\"PUBLIC_URL\");\n\n        return {\n            issuer: publicUrl,\n            token_endpoint: `${publicUrl}/oauth2/token`,\n            jwks_uri: `${publicUrl}/.well-known/jwks.json`,\n            response_types_supported: [\"token\"],\n            grant_types_supported: [\"client_credentials\"],\n            token_endpoint_auth_methods_supported: [\n                \"client_secret_basic\",\n                \"client_secret_post\",\n            ],\n            subject_types_supported: [\"public\"],\n            id_token_signing_alg_values_supported: [\"ES256\"],\n            scopes_supported: [\"openid\"],\n            claims_supported: [\"iss\", \"sub\", \"aud\", \"exp\", \"iat\"],\n            service_documentation:\n                \"https://openwallet-foundation-labs.github.io/eudiplo/latest/\",\n        };\n    }\n\n    /**\n     * Global JWKS endpoint for client credentials flow.\n     * This provides the JSON Web Key Set for verifying tokens issued by this server.\n     */\n    @Get(\".well-known/jwks.json\")\n    @ApiOperation({\n        summary: \"JSON Web Key Set\",\n        description: \"Returns the JSON Web Key Set for token verification.\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"JSON Web Key Set\",\n    })\n    getGlobalJwks(): KeyResponseDto {\n        // For now, return an empty key set since the actual keys are tenant-specific\n        // This can be enhanced later to include global signing keys if needed\n        return {\n            keys: [],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCryptoModule->AuthModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAuthModule -->\n\nIssuerModule->AuthModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAuthModule -->\n\nRegistrarModule->AuthModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAuthModule -->\n\nSessionModule->AuthModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nAuthModule -->\n\nStatusListModule->AuthModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTenantService\n\nTenantService\n\nAuthModule -->\n\nTenantService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            TenantService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            TenantController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { makeGaugeProvider } from \"@willsoto/nestjs-prometheus\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { IssuerModule } from \"../issuer/issuer.module\";\nimport { StatusListModule } from \"../issuer/status-list/status-list.module\";\nimport { RegistrarModule } from \"../registrar/registrar.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { AuthController } from \"./auth.controller\";\nimport { JwtAuthGuard } from \"./auth.guard\";\nimport { TenantEntity } from \"./entitites/tenant.entity\";\nimport { JwtService } from \"./jwt.service\";\nimport { JwtStrategy } from \"./jwt.strategy\";\nimport { TenantController } from \"./tenant/tenant.controller\";\nimport { TenantService } from \"./tenant.service\";\n\nexport const DEFAULT_JWT_SECRET = \"supersecret\";\nexport const DEFAULT_AUTH_CLIENT_ID = \"root\";\nexport const DEFAULT_AUTH_CLIENT_SECRET = \"root\";\n\nexport const AUTH_VALIDATION_SCHEMA = {\n    OIDC: Joi.string().optional(),\n    OIDC_INTERNAL_ISSUER_URL: Joi.when(\"OIDC\", {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    OIDC_SUB: Joi.when(\"OIDC\", {\n        then: Joi.string().default(\"azp\"),\n        otherwise: Joi.string().optional(),\n    }),\n    OIDC_ALGORITHM: Joi.when(\"OIDC\", {\n        then: Joi.string().default(\"RS256\"),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_JWT_SECRET),\n    }),\n    JWT_ISSUER: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default(\"eudiplo-service\"),\n    }),\n    JWT_EXPIRES_IN: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(\"24h\"),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_SECRET),\n    }),\n    AUTH_CLIENT_ID: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_ID),\n    }),\n};\n@Module({\n    imports: [\n        PassportModule,\n        ConfigModule,\n        CryptoModule,\n        StatusListModule,\n        RegistrarModule,\n        SessionModule,\n        IssuerModule,\n        TypeOrmModule.forFeature([TenantEntity]),\n    ],\n    providers: [\n        JwtStrategy,\n        JwtAuthGuard,\n        JwtService,\n        TenantService,\n        makeGaugeProvider({\n            name: \"tenant_total\",\n            help: \"Total number of tenants\",\n        }),\n    ],\n    controllers: [AuthController, TenantController],\n    exports: [PassportModule, JwtStrategy, JwtAuthGuard, JwtService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/auth-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResponse DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                        \n                                            vp_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state parameter to maintain state between the request and callback.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vp_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vp_token:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The VP token containing the presentation data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthResponse {\n    /**\n     * The VP token containing the presentation data.\n     */\n    vp_token: {\n        /**\n         * Key-value pairs representing the VP token data.\n         */\n        [key: string]: string;\n    };\n    /**\n     * The state parameter to maintain state between the request and callback.\n     */\n    state: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationMethodAuth.html":{"url":"classes/AuthenticationMethodAuth.html","title":"class - AuthenticationMethodAuth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationMethodAuth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AuthenticationMethodInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationUrlConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['auth'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:59\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticationMethodInterface.html":{"url":"interfaces/AuthenticationMethodInterface.html","title":"interface - AuthenticationMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticationMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            method\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:     \"none\" | \"auth\" | \"presentationDuringIssuance\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"none\" | \"auth\" | \"presentationDuringIssuance\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationMethodNone.html":{"url":"classes/AuthenticationMethodNone.html","title":"class - AuthenticationMethodNone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationMethodNone\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AuthenticationMethodInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['none'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:69\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationMethodPresentation.html":{"url":"classes/AuthenticationMethodPresentation.html","title":"class - AuthenticationMethodPresentation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationMethodPresentation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AuthenticationMethodInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationDuringIssuanceConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['presentationDuringIssuance'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationUrlConfig.html":{"url":"classes/AuthenticationUrlConfig.html","title":"class - AuthenticationUrlConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationUrlConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'auth'\nUsed for OID4VCI authorized code flow where the user will be redirected for authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                url\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:21\n                        \n                    \n\n            \n                \n                    The URL used in the OID4VCI authorized code flow.\nThis URL is where users will be redirected for authentication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:29\n                        \n                    \n\n            \n                \n                    Optional webhook configuration for authentication callbacks\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationResponse.html":{"url":"classes/AuthorizationResponse.html","title":"class - AuthorizationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/authorization-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the authorization response containing the VP token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                response\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The response string containing the authorization details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\n\n/**\n * DTO for the authorization response containing the VP token.\n */\nexport class AuthorizationResponse {\n    /**\n     * The response string containing the authorization details.\n     */\n    @IsString()\n    response: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizeController.html":{"url":"controllers/AuthorizeController.html","title":"controller - AuthorizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/authorize\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI authorization endpoints.\nThis controller handles the authorization requests, token requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationChallengeEndpoint\n                            \n                            \n                                    \n                                authorize\n                            \n                            \n                                    \n                                    \n                                    Async\n                                par\n                            \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response, body: AuthorizeQueries, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('challenge')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:81\n                        \n                    \n\n\n            \n                \n                        Endpoint for the authorization challenge.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorize\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorize(queries: AuthorizeQueries, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Authorization Request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        par\n                        \n                    \n                \n            \n            \n                \n                        \n                    par(body: AuthorizeQueries)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'Pushed Authorization Request', type: AuthorizeQueries})@Post('par')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:44\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Pushed Authorization Request (PAR).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n            \n                \n                        \n                    token(body: any, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:65\n                        \n                    \n\n\n            \n                \n                        Endpoint to validate the token request.\nThis endpoint is used to exchange the authorization code for an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { Body, Controller, Get, Post, Query, Req, Res } from \"@nestjs/common\";\nimport { ApiBody, ApiExcludeController } from \"@nestjs/swagger\";\nimport type { Request, Response } from \"express\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionService } from \"../../session/session.service\";\nimport { AuthorizeService } from \"./authorize.service\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\nimport { ParResponseDto } from \"./dto/par-response.dto\";\n\n/**\n * Controller for the OpenID4VCI authorization endpoints.\n * This controller handles the authorization requests, token requests.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":session/authorize\")\nexport class AuthorizeController {\n    constructor(\n        private readonly authorizeService: AuthorizeService,\n        private sessionService: SessionService,\n    ) {}\n\n    /**\n     * Endpoint to handle the Authorization Request.\n     * @param queries\n     * @param res\n     */\n    @Get()\n    authorize(@Query() queries: AuthorizeQueries, @Res() res: Response) {\n        return this.authorizeService.sendAuthorizationResponse(queries, res);\n    }\n\n    /**\n     * Endpoint to handle the Pushed Authorization Request (PAR).\n     * @param body\n     * @returns\n     */\n    @ApiBody({\n        description: \"Pushed Authorization Request\",\n        type: AuthorizeQueries,\n    })\n    @Post(\"par\")\n    async par(@Body() body: AuthorizeQueries): Promise {\n        const request_uri = `urn:${randomUUID()}`;\n        // save both so we can retrieve the session also via the request_uri in the authorize step.\n        await this.sessionService.add(body.issuer_state!, {\n            request_uri,\n            auth_queries: body,\n        });\n        return {\n            expires_in: 500,\n            request_uri,\n        };\n    }\n\n    /**\n     * Endpoint to validate the token request.\n     * This endpoint is used to exchange the authorization code for an access token.\n     * @param body\n     * @param req\n     * @returns\n     */\n    @Post(\"token\")\n    token(\n        @Body() body: any,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        //TODO: define body\n        return this.authorizeService.validateTokenRequest(body, req, session);\n    }\n\n    /**\n     * Endpoint for the authorization challenge.\n     * @param res\n     * @param body\n     * @returns\n     */\n    @Post(\"challenge\")\n    authorizationChallengeEndpoint(\n        @Res() res: Response,\n        @Body() body: AuthorizeQueries,\n        @SessionEntity() session: Session,\n    ) {\n        return this.authorizeService.authorizationChallengeEndpoint(\n            res,\n            body,\n            session,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizeQueries.html":{"url":"classes/AuthorizeQueries.html","title":"class - AuthorizeQueries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizeQueries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/authorize-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                auth_session\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                client_id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge_method\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dpop_jkt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                issuer_state\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                redirect_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resource\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        auth_session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge_method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dpop_jkt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        issuer_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        redirect_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\nexport class AuthorizeQueries {\n    @IsOptional()\n    @IsString()\n    issuer_state?: string;\n    @IsOptional()\n    @IsString()\n    response_type?: string;\n    @IsOptional()\n    @IsString()\n    client_id?: string;\n    @IsOptional()\n    @IsString()\n    redirect_uri?: string;\n    @IsOptional()\n    @IsString()\n    resource?: string;\n    @IsOptional()\n    @IsString()\n    scope?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge_method?: string;\n    @IsOptional()\n    @IsString()\n    dpop_jkt?: string;\n    @IsOptional()\n    @IsString()\n    request_uri?: string;\n    @IsOptional()\n    @IsString()\n    auth_session?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizeService.html":{"url":"injectables/AuthorizeService.html","title":"injectable - AuthorizeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authorizationChallengeEndpoint\n                            \n                            \n                                authzMetadata\n                            \n                            \n                                getAuthorizationServer\n                            \n                            \n                                    Async\n                                parseChallengeRequest\n                            \n                            \n                                    Private\n                                    Async\n                                sendAuthorizationCode\n                            \n                            \n                                    Async\n                                sendAuthorizationResponse\n                            \n                            \n                                    Async\n                                setAuthCode\n                            \n                            \n                                    Async\n                                validateTokenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, oid4vpService: Oid4vpService, sessionService: SessionService, issuanceService: IssuanceService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/authorize/authorize.service.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vpService\n                                                  \n                                                        \n                                                                        Oid4vpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response>, body: AuthorizeQueries, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:224\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \nauthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     AuthorizationServerMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthorizationServer\n                        \n                    \n                \n            \n            \n                \ngetAuthorizationServer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Oauth2AuthorizationServer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        parseChallengeRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseChallengeRequest(body: AuthorizeQueries, tenantId: string, webhook?: WebhookConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:206\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                webhook\n                                            \n                                                            WebhookConfig\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendAuthorizationCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationCode(res: Response, issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:296\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendAuthorizationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationResponse(queries: AuthorizeQueries, res: Response>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setAuthCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAuthCode(issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:303\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateTokenRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateTokenRequest(body: any, req: Request, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session.tenantId,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CertEntity.html":{"url":"entities/CertEntity.html","title":"entity - CertEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CertEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/cert.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage certificates for keys.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                crt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:57\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:39\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:51\n                        \n                    \n\n            \n                \n                    Description of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:33\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:27\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertificateType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'signing', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:45\n                        \n                    \n\n            \n                \n                    Type of the certificate (access or signing).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:63\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\nexport type CertificateType = \"access\" | \"signing\";\n\n/**\n * Entity to manage certificates for keys.\n */\n@Entity()\nexport class CertEntity {\n    /**\n     * Unique identifier for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Certificate in PEM format.\n     */\n    @Column(\"varchar\")\n    crt: string;\n\n    /**\n     * Type of the certificate (access or signing).\n     */\n    @Column(\"varchar\", { default: \"signing\", primary: true })\n    type: CertificateType;\n\n    /**\n     * Description of the key.\n     */\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClaimsQuery.html":{"url":"classes/ClaimsQuery.html","title":"class - ClaimsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClaimsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                path\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:84\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsNotEmpty()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientCredentialsDto.html":{"url":"classes/ClientCredentialsDto.html","title":"class - ClientCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                client_id\n                            \n                            \n                                    \n                                client_secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\n\nexport class ClientCredentialsDto {\n    @IsString()\n    client_id: string;\n    @IsString()\n    client_secret: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientInitDto.html":{"url":"classes/ClientInitDto.html","title":"class - ClientInitDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientInitDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-init.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-init.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\nexport class ClientInitDto {\n    @IsString()\n    @IsOptional()\n    id?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CredentialConfig.html":{"url":"entities/CredentialConfig.html","title":"entity - CredentialConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CredentialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                disclosureFrame\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                embeddedDisclosurePolicy\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                issuanceConfigs\n                            \n                            \n                                    \n                                key\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                keyBinding\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                keyId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lifeTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusManagement\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:66\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfigurationSupported\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        disclosureFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        embeddedDisclosurePolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EmbeddedDisclosurePolicy\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@ApiProperty({oneOf: undefined})@Type(undefined, {discriminator: undefined, keepDiscriminatorProperty: true})@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:138\n                        \n                    \n\n            \n                \n                    Embedded disclosure policy (discriminated union by policy).\nThe discriminator makes class-transformer instantiate the right subclass,\nand then class-validator runs that subclass’s rules.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IssuanceConfig[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, issuance => issuance.credentialConfigs, {cascade: undefined, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:145\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:89\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        keyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('boolean', {default: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:82\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        keyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:86\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lifeTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('int', {nullable: true})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:99\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SchemaResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusManagement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('boolean', {default: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:57\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VCT\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:77\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // --- credential-config.entity.ts ---\n\nimport {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { CredentialConfigurationSupported } from \"@openid4vc/openid4vci\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @IsObject()\n    config!: CredentialConfigurationSupported;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity)\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialConfigCreate.html":{"url":"classes/CredentialConfigCreate.html","title":"class - CredentialConfigCreate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialConfigCreate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/dto/credential-config-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(CredentialConfig, [\n    \"tenantId\",\n    \"issuanceConfigs\",\n    \"key\",\n])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { CredentialConfig } from \"../entities/credential.entity\";\n\nexport class CredentialConfigCreate extends OmitType(CredentialConfig, [\n    \"tenantId\",\n    \"issuanceConfigs\",\n    \"key\",\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialConfigMapping.html":{"url":"classes/CredentialConfigMapping.html","title":"class - CredentialConfigMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialConfigMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for mapping credential configurations in issuance.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:13\n                        \n                    \n\n            \n                \n                    Unique identifier for the credential configuration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\nimport { IssuanceConfig } from \"../entities/issuance-config.entity\";\n\n/**\n * DTO for mapping credential configurations in issuance.\n */\nexport class CredentialConfigMapping {\n    /**\n     * Unique identifier for the credential configuration.\n     */\n    @IsString()\n    id: string;\n}\n\n/**\n * DTO for mapping issuance configurations.\n */\nexport class IssuanceDto extends OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"credentialConfigs\",\n] as const) {\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    credentialConfigIds: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialConfigService.html":{"url":"injectables/CredentialConfigService.html","title":"injectable - CredentialConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credential-config/credential-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credential configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(credentialConfigRepository: Repository, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credential-config/credential-config.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialConfigService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        credentialConfigRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for CredentialConfig entity.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:195\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the CredentialConfig entity to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the result of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:155\n                        \n                    \n\n\n            \n                \n                        Retrieves all credential configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CredentialConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:168\n                        \n                    \n\n\n            \n                \n                        Retrieves a credential configuration by its ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Imports the configs\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:146\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore(tenantId: string, config: CredentialConfigCreate)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:182\n                        \n                    \n\n\n            \n                \n                        Stores a credential configuration for a given tenant.\nIf the configuration already exists, it will be overwritten.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                config\n                                            \n                                                            CredentialConfigCreate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CredentialConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored CredentialConfig entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../../crypto/crypto.service\";\nimport { CredentialConfigCreate } from \"../dto/credential-config-create.dto\";\nimport { CredentialConfig } from \"../entities/credential.entity\";\n\n/**\n * Service for managing credential configurations.\n */\n@Injectable()\nexport class CredentialConfigService {\n    /**\n     * Constructor for CredentialConfigService.\n     * @param credentialConfigRepository - Repository for CredentialConfig entity.\n     */\n    constructor(\n        @InjectRepository(CredentialConfig)\n        private readonly credentialConfigRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Imports the configs\n     */\n    public async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"issuance/credentials\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    try {\n                        const payload = JSON.parse(\n                            readFileSync(join(path, file), \"utf8\"),\n                        );\n\n                        const id = file.replace(\".json\", \"\");\n                        payload.id = id;\n                        const exists = await this.getById(\n                            tenant.name,\n                            id,\n                        ).catch(() => false);\n                        if (exists && !force) {\n                            continue; // Skip if config already exists and force is not set\n                        }\n\n                        // Validate the payload against CredentialConfig\n                        const config = plainToClass(\n                            CredentialConfigCreate,\n                            payload,\n                        );\n                        const validationErrors = await validate(config, {\n                            whitelist: true,\n                            forbidUnknownValues: false, // avoid false positives on plain objects\n                            forbidNonWhitelisted: false,\n                            stopAtFirstError: false,\n                        });\n\n                        // Check if keyId is provided and if the certificate exists\n                        if (config.keyId) {\n                            const cert = await this.cryptoService.getCertEntry(\n                                tenant.name,\n                                config.keyId,\n                            );\n                            if (!cert) {\n                                this.logger.error(\n                                    {\n                                        event: \"ValidationError\",\n                                        file,\n                                        tenant: tenant.name,\n                                        errors: [\n                                            {\n                                                property: \"keyId\",\n                                                constraints: {\n                                                    isDefined:\n                                                        \"Key ID must be defined in the crypto service.\",\n                                                },\n                                                value: config.keyId,\n                                            },\n                                        ],\n                                    },\n                                    `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                                );\n                                continue; // Skip this invalid config\n                            }\n                            (config as CredentialConfig).key = cert;\n                        }\n\n                        if (validationErrors.length > 0) {\n                            this.logger.error(\n                                {\n                                    event: \"ValidationError\",\n                                    file,\n                                    tenant: tenant.name,\n                                    errors: validationErrors.map((error) => ({\n                                        property: error.property,\n                                        constraints: error.constraints,\n                                        value: error.value,\n                                    })),\n                                },\n                                `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                            );\n                            continue; // Skip this invalid config\n                        }\n\n                        await this.store(tenant.name, config);\n                        counter++;\n                    } catch (e) {\n                        this.logger.error(\n                            {\n                                event: \"ImportError\",\n                                file,\n                                tenant: tenant.name,\n                                error: e.message,\n                            },\n                            `Failed to import credentials config ${file} in tenant ${tenant.name}`,\n                        );\n                    }\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} credential configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    async onTenantDelete(tenantId: string) {\n        await this.credentialConfigRepository.delete({ tenantId });\n    }\n\n    /**\n     * Retrieves all credential configurations for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @returns A promise that resolves to an array of CredentialConfig entities.\n     */\n    get(tenantId: string) {\n        return this.credentialConfigRepository.find({\n            where: { tenantId },\n            relations: [\"key\"],\n        });\n    }\n\n    /**\n     * Retrieves a credential configuration by its ID for a given tenant.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    getById(tenantId: string, id: string) {\n        return this.credentialConfigRepository.findOneByOrFail({\n            id,\n            tenantId,\n        });\n    }\n\n    /**\n     * Stores a credential configuration for a given tenant.\n     * If the configuration already exists, it will be overwritten.\n     * @param tenantId - The ID of the tenant.\n     * @param config - The CredentialConfig entity to store.\n     * @returns A promise that resolves to the stored CredentialConfig entity.\n     */\n    store(tenantId: string, config: CredentialConfigCreate) {\n        return this.credentialConfigRepository.save({\n            ...config,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a credential configuration for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @param id - The ID of the CredentialConfig entity to delete.\n     * @returns A promise that resolves to the result of the delete operation.\n     */\n    delete(tenantId: string, id: string) {\n        return this.credentialConfigRepository.delete({\n            id,\n            tenantId,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuerMetadataDto.html":{"url":"classes/CredentialIssuerMetadataDto.html","title":"class - CredentialIssuerMetadataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuerMetadataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/credential-issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the metadata for a credential issuer.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_server\n                            \n                            \n                                authorization_servers\n                            \n                            \n                                batch_credential_issuance\n                            \n                            \n                                credential_configurations_supported\n                            \n                            \n                                credential_endpoint\n                            \n                            \n                                credential_issuer\n                            \n                            \n                                display\n                            \n                            \n                                notification_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:41\n                        \n                    \n\n            \n                \n                    The URL of the preferred authorization server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_servers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:12\n                        \n                    \n\n            \n                \n                    List of authorization servers that support the credential issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        batch_credential_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:24\n                        \n                    \n\n            \n                \n                    Information about batch credential issuance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_configurations_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:37\n                        \n                    \n\n            \n                \n                    Object of credentials configurations supported by the issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:16\n                        \n                    \n\n            \n                \n                    The URL of the credential issuance endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:8\n                        \n                    \n\n            \n                \n                    The issuer identifier, typically a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:33\n                        \n                    \n\n            \n                \n                    Display information for the credentials that are getting issued.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notification_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:20\n                        \n                    \n\n            \n                \n                    The URL of the notification endpoint for credential issuance.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialIssuerMetadataDto {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    credential_issuer: string;\n    /**\n     * List of authorization servers that support the credential issuer.\n     */\n    authorization_servers: string[];\n    /**\n     * The URL of the credential issuance endpoint.\n     */\n    credential_endpoint: string;\n    /**\n     * The URL of the notification endpoint for credential issuance.\n     */\n    notification_endpoint: string;\n    /**\n     * Information about batch credential issuance.\n     */\n    batch_credential_issuance: {\n        /**\n         * Amount of elements in a batch.\n         */\n        batch_size: number;\n    };\n    /**\n     * Display information for the credentials that are getting issued.\n     */\n    display: Array;\n    /**\n     * Object of credentials configurations supported by the issuer.\n     */\n    credential_configurations_supported: any;\n    /**\n     * The URL of the preferred authorization server.\n     */\n    authorization_server: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialQuery.html":{"url":"classes/CredentialQuery.html","title":"class - CredentialQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                format\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                meta\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                multiple\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                trusted_authorities\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        multiple\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        trusted_authorities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TrustedAuthorityQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:71\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsNotEmpty()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialSetQuery.html":{"url":"classes/CredentialSetQuery.html","title":"class - CredentialSetQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialSetQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                options\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                required\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[][]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', items: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:98\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsNotEmpty()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsController.html":{"url":"controllers/CredentialsController.html","title":"controller - CredentialsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/credentials\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing credential configurations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getConfigs\n                            \n                            \n                                    \n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Deletes an credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getConfigs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigs(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Returns the credential configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(config: CredentialConfigCreate, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Stores the credential configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            CredentialConfigCreate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { CredentialConfigService } from \"./credential-config/credential-config.service\";\nimport { CredentialConfigCreate } from \"./dto/credential-config-create.dto\";\n\n/**\n * Controller for managing credential configurations.\n */\n@ApiTags(\"Issuer management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"issuer-management/credentials\")\nexport class CredentialsController {\n    /**\n     * Initializes the CredentialsController with the CredentialConfigService.\n     * @param credentialsService\n     */\n    constructor(private readonly credentialsService: CredentialConfigService) {}\n\n    /**\n     * Returns the credential configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getConfigs(@Token() user: TokenPayload) {\n        return this.credentialsService.get(user.sub);\n    }\n\n    /**\n     * Stores the credential configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeCredentialConfiguration(\n        @Body() config: CredentialConfigCreate,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.store(user.sub, config);\n    }\n\n    /**\n     * Deletes an credential configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteIssuanceConfiguration(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.delete(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsMetadataController.html":{"url":"controllers/CredentialsMetadataController.html","title":"controller - CredentialsMetadataController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsMetadataController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/credentials-metadata.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/credentials-metadata\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n            \n                \n                        \n                    schema(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('schema/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n            \n                \n                        \n                    vct(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vct/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:15\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the credential configuration.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from \"@nestjs/common\";\nimport { ApiExcludeController } from \"@nestjs/swagger\";\nimport { CredentialsService } from \"../credentials/credentials.service\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":tenantId/credentials-metadata\")\nexport class CredentialsMetadataController {\n    constructor(private readonly credentialsService: CredentialsService) {}\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n     * @param id - The identifier of the credential configuration.\n     */\n    @Get(\"vct/:id\")\n    vct(@Param(\"id\") id: string, @Param(\"tenantId\") tenantId: string) {\n        return this.credentialsService.getVCT(id, tenantId);\n    }\n\n    /**\n     * Retrieves the schema for a specific credential\n     * @param id\n     * @returns\n     */\n    @Get(\"schema/:id\")\n    schema(@Param(\"id\") id: string, @Param(\"tenantId\") tenantId: string) {\n        return this.credentialsService.getSchema(id, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialsService.html":{"url":"injectables/CredentialsService.html","title":"injectable - CredentialsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credentials and their configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                getCredentialConfigurationSupported\n                            \n                            \n                                    Async\n                                getSchema\n                            \n                            \n                                    Async\n                                getVCT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, configService: ConfigService, statusListService: StatusListService, credentialConfigRepo: Repository, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credentials.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(credentialConfigurationId: string, holderCnf: Jwk, session: Session, issuanceConfig: IssuanceConfig, claims?: Record>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Issues a credential based on the provided configuration and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                holderCnf\n                                            \n                                                        Jwk\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuanceConfig\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                claims\n                                            \n                                                        Record>\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredentialConfigurationSupported\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredentialConfigurationSupported(session: Session, issuanceConfig: IssuanceConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration that is required for oid4vci\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuanceConfig\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSchema(credentialConfigurationId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:235\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVCT\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVCT(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:209\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport type { Jwk } from \"@openid4vc/oauth2\";\nimport { CredentialConfigurationSupported } from \"@openid4vc/openid4vci\";\nimport { digest, generateSalt } from \"@sd-jwt/crypto-nodejs\";\nimport { JWTwithStatusListPayload } from \"@sd-jwt/jwt-status-list\";\nimport { SDJwtVcInstance } from \"@sd-jwt/sd-jwt-vc\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { CryptoImplementationService } from \"../../crypto/key/crypto-implementation/crypto-implementation.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SchemaResponse } from \"../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../issuance/entities/issuance-config.entity\";\nimport { StatusListService } from \"../status-list/status-list.service\";\nimport { CredentialConfig } from \"./entities/credential.entity\";\n\n/**\n * Service for managing credentials and their configurations.\n */\n@Injectable()\nexport class CredentialsService {\n    /**\n     * Constructor for CredentialsService.\n     * @param cryptoService\n     * @param configService\n     * @param statusListService\n     * @param credentialConfigRepo\n     * @param cryptoImplementationService\n     */\n    constructor(\n        private cryptoService: CryptoService,\n        private configService: ConfigService,\n        private statusListService: StatusListService,\n        @InjectRepository(CredentialConfig)\n        private credentialConfigRepo: Repository,\n        private cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Returns the credential configuration that is required for oid4vci\n     * @param tenantId\n     * @returns\n     */\n    async getCredentialConfigurationSupported(\n        session: Session,\n        issuanceConfig: IssuanceConfig,\n    ): Promise> {\n        const credential_configurations_supported: Record = {};\n\n        const configs = await this.credentialConfigRepo.findBy({\n            tenantId: session.tenantId,\n        });\n\n        //add key binding when required:\n        const kb = {\n            proof_types_supported: {\n                jwt: {\n                    proof_signing_alg_values_supported: [\n                        this.cryptoImplementationService.getAlg(),\n                    ],\n                },\n            },\n            credential_signing_alg_values_supported: [\n                this.cryptoImplementationService.getAlg(),\n            ],\n            cryptographic_binding_methods_supported: [\"jwk\"],\n        };\n\n        for (const value of configs) {\n            const isUsed = issuanceConfig.credentialConfigs.find(\n                (config) => config.id === value.id,\n            );\n            value.config.vct = `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.tenantId}/credentials/vct/${value.id}`;\n\n            if (value.embeddedDisclosurePolicy) {\n                delete (value.embeddedDisclosurePolicy as any).$schema;\n                value.config.disclosure_policy = value.embeddedDisclosurePolicy;\n            }\n\n            if (isUsed?.id)\n                value.config = {\n                    ...value.config,\n                    ...kb,\n                };\n            credential_configurations_supported[value.id] = value.config;\n        }\n        return credential_configurations_supported;\n    }\n\n    /**\n     * Issues a credential based on the provided configuration and session.\n     * @param credentialConfigurationId\n     * @param holderCnf\n     * @param session\n     * @returns\n     */\n    async getCredential(\n        credentialConfigurationId: string,\n        holderCnf: Jwk,\n        session: Session,\n        issuanceConfig: IssuanceConfig,\n        claims?: Record>,\n    ) {\n        const credentialConfiguration = await this.credentialConfigRepo\n            .findOneByOrFail({\n                id: credentialConfigurationId,\n                tenantId: session.tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialConfigurationId} not found`,\n                );\n            });\n        //use passed claims, if not provided try the ones stored in the session and the use default ones from the config is provided\n        claims =\n            claims ??\n            session.credentialPayload?.claims?.[credentialConfigurationId] ??\n            credentialConfiguration.claims;\n        const disclosureFrame = credentialConfiguration.disclosureFrame;\n\n        const config = issuanceConfig.credentialConfigs.find(\n            (config) => config.id === credentialConfigurationId,\n        );\n\n        const keyId =\n            config?.keyId ??\n            (await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"signing\",\n            ));\n\n        const sdjwt = new SDJwtVcInstance({\n            signer: await this.cryptoService.keyService.signer(\n                session.tenantId,\n                keyId,\n            ),\n            signAlg: this.cryptoImplementationService.getAlg(),\n            hasher: digest,\n            hashAlg: \"sha-256\",\n            saltGenerator: generateSalt,\n            loadTypeMetadataFormat: true,\n        });\n\n        const credentialConfig =\n            await this.credentialConfigRepo.findOneByOrFail({\n                id: credentialConfigurationId,\n                tenantId: session.tenantId,\n            });\n\n        // If status management is enabled, create a status entry\n        let status: JWTwithStatusListPayload | undefined;\n        if (credentialConfig.statusManagement) {\n            status = await this.statusListService.createEntry(\n                session,\n                credentialConfigurationId,\n            );\n        }\n\n        const iat = Math.round(new Date().getTime() / 1000);\n        // Set expiration time if lifeTime is defined\n        let exp: number | undefined;\n        if (credentialConfig.lifeTime) {\n            exp = iat + credentialConfig.lifeTime;\n        }\n\n        // If key binding is enabled, include the JWK in the cnf\n        let cnf: { jwk: Jwk } | undefined;\n\n        if (credentialConfig.keyBinding) {\n            cnf = {\n                jwk: holderCnf,\n            };\n        }\n\n        return sdjwt.issue(\n            {\n                iss: this.configService.getOrThrow(\"PUBLIC_URL\"),\n                iat,\n                exp,\n                vct: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.tenantId}/credentials/vct/${credentialConfigurationId}`,\n                cnf,\n                ...claims,\n                ...status,\n            },\n            disclosureFrame,\n            {\n                header: {\n                    x5c: await this.cryptoService.getCertChain(\n                        \"signing\",\n                        session.tenantId,\n                    ),\n                    alg: this.cryptoImplementationService.getAlg(),\n                },\n            },\n        );\n    }\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n     * @param credentialId\n     * @param tenantId\n     * @returns\n     */\n    async getVCT(credentialId: string, tenantId: string): Promise {\n        const credentialConfig = await this.credentialConfigRepo\n            .findOneByOrFail({\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialId} not found`,\n                );\n            });\n        if (!credentialConfig.vct) {\n            throw new ConflictException(\n                `VCT for credential configuration with id ${credentialId} not found`,\n            );\n        }\n        const host = this.configService.getOrThrow(\"PUBLIC_URL\");\n        credentialConfig.vct.vct = `${host}/${tenantId}/credentials-metadata/vct/${credentialConfig.id}`;\n        return credentialConfig.vct;\n    }\n\n    /**\n     * Retrieves the schema for a specific credential configuration.\n     * @param id\n     * @param tenantId\n     * @returns\n     */\n    async getSchema(\n        credentialConfigurationId: string,\n        tenantId: string,\n    ): Promise {\n        const credentialConfig =\n            await this.credentialConfigRepo.findOneByOrFail({\n                tenantId,\n            });\n        if (!credentialConfig) {\n            throw new ConflictException(\n                `Credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        if (!credentialConfig.schema) {\n            throw new ConflictException(\n                `Schema for credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        return credentialConfig.schema;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoImplementatationModule.html":{"url":"modules/CryptoImplementatationModule.html","title":"module - CryptoImplementatationModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoImplementatationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoImplementatationModule\n\n\n\ncluster_CryptoImplementatationModule_exports\n\n\n\ncluster_CryptoImplementatationModule_providers\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\n\n\nCryptoImplementatationModule\n\nCryptoImplementatationModule\n\nCryptoImplementationService  -->\n\nCryptoImplementatationModule->CryptoImplementationService \n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoImplementatationModule -->\n\nCryptoImplementationService->CryptoImplementatationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoImplementationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoImplementationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport * as Joi from \"joi\";\nimport { CryptoImplementationService } from \"./crypto-implementation.service\";\n\nexport const CRYPTO_VALIDATION_SCHEMA = {\n    CRYPTO_ALG: Joi.string().valid(\"ES256\").default(\"ES256\"),\n};\n\n@Global()\n@Module({\n    imports: [ConfigModule],\n    providers: [CryptoImplementationService],\n    exports: [CryptoImplementationService],\n})\nexport class CryptoImplementatationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoImplementation.html":{"url":"interfaces/CryptoImplementation.html","title":"interface - CryptoImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface to imeplement different algorithms.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alg\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        generateKeyPair\n                                    \n                                \n                                \n                                    \n                                        getSigner\n                                    \n                                \n                                \n                                    \n                                        getVerifier\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyPair\n                        \n                    \n                \n            \n            \n                \ngenerateKeyPair()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a new keypair\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSigner\n                        \n                    \n                \n            \n            \n                \ngetSigner(privateKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:24\n                        \n                    \n\n\n            \n                \n                        creates a signer based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVerifier\n                        \n                    \n                \n            \n            \n                \ngetVerifier(publicKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:29\n                        \n                    \n\n\n            \n                \n                        creates a verifier based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                publicKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type KeyPair = {\n    publicKey: JsonWebKey;\n    privateKey: JsonWebKey;\n};\n\ntype Signer = (data: string) => Promise;\n\ntype Verifier = (data: string, signature: string) => Promise;\n\n/**\n * Generic interface to imeplement different algorithms.\n */\nexport interface CryptoImplementation {\n    //name of the algorithm\n    alg: string;\n    /**\n     * Generates a new keypair\n     */\n    generateKeyPair(): Promise;\n    /**\n     * creates a signer based on the passed key.\n     * @param privateKeyJWK\n     */\n    getSigner(privateKeyJWK: JsonWebKey): Promise;\n    /**\n     * creates a verifier based on the passed key.\n     * @param publicKeyJWK\n     */\n    getVerifier(publicKeyJWK: JsonWebKey): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoImplementationService.html":{"url":"injectables/CryptoImplementationService.html","title":"injectable - CryptoImplementationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoImplementationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlg\n                            \n                            \n                                getCrypto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configServie: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configServie\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlg\n                        \n                    \n                \n            \n            \n                \ngetAlg()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Return the algorithm that is used for the crypto operations like signing.\n\n\n                        \n                            Returns :         CryptoType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCrypto\n                        \n                    \n                \n            \n            \n                \ngetCrypto(alg)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Returns the crypto implementation based on the configured algorithm.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                alg\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.configServie.get(\"CRYPTO_ALG\")\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CryptoImplementation\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ES256 } from \"@sd-jwt/crypto-nodejs\";\nimport { CryptoImplementation } from \"./crypto-implementation\";\nimport { ED25519 } from \"./ed25519\";\n\nexport type CryptoType = \"ES256\" | \"Ed25519\";\n\n@Injectable()\nexport class CryptoImplementationService {\n    constructor(private configServie: ConfigService) {}\n\n    /**\n     * Return the algorithm that is used for the crypto operations like signing.\n     * @returns\n     */\n    getAlg(): CryptoType {\n        return this.configServie.get(\"CRYPTO_ALG\") as CryptoType;\n    }\n\n    /**\n     * Returns the crypto implementation based on the configured algorithm.\n     * @param alg\n     * @returns\n     */\n    getCrypto(\n        alg = this.configServie.get(\"CRYPTO_ALG\"),\n    ): CryptoImplementation {\n        switch (alg) {\n            case \"Ed25519\":\n                return ED25519;\n            case \"ES256\":\n                return ES256;\n            default:\n                throw new Error(`Unsupported algorithm ${alg}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoModule.html":{"url":"modules/CryptoModule.html","title":"module - CryptoModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\n\nCryptoService \n\nCryptoService \n\n\n\nEncryptionService \n\nEncryptionService \n\n\n\nCryptoModule\n\nCryptoModule\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/crypto.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            KeyController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoService } from \"./crypto.service\";\nimport { EncryptionService } from \"./encryption/encryption.service\";\nimport { CertEntity } from \"./key/entities/cert.entity\";\nimport { KeyEntity } from \"./key/entities/keys.entity\";\nimport { KeyController } from \"./key/key.controller\";\n\n@Module({\n    imports: [TypeOrmModule.forFeature([CertEntity, KeyEntity])],\n    controllers: [KeyController],\n    providers: [CryptoService, EncryptionService],\n    exports: [CryptoService, EncryptionService],\n})\nexport class CryptoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBKeyService.html":{"url":"classes/DBKeyService.html","title":"class - DBKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/adapters/db-key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The key service is responsible for managing the keys of the issuer.\n\n            \n\n            \n                Extends\n            \n            \n                            KeyService\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                crypto\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                getKid\n                            \n                            \n                                    Private\n                                    Async\n                                getPrivateKey\n                            \n                            \n                                    Private\n                                getPubFromPrivateKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                import\n                            \n                            \n                                init\n                            \n                            \n                                    Async\n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoImplementationService, certRepository: Repository, keyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/adapters/db-key.service.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/adapters/db-key.service.ts:28\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:86\n\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair and wrtites the private key to the file system.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string, type: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:136\n\n                        \n                    \n\n\n            \n                \n                        Gets one key id for the tenant.\nIf no key exists, it will throw an error.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    \"signing\"\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPrivateKey(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Get the keys from the file system or generate them if they do not exist\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getPubFromPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPubFromPrivateKey(privateKey: JWK_EC_Private)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Get the public key from the private key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKey\n                                            \n                                                        JWK_EC_Private\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         EC_Public\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:152\n\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        import\n                        \n                    \n                \n            \n            \n                \nimport(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:46\n\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit(tenant: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:77\n\n                        \n                    \n\n\n            \n                \n                        Initialize the key service for a specific tenant.\nThis will create the keys if they do not exist.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:109\n\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JWTHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:195\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:85\n\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { Signer } from \"@sd-jwt/types\";\nimport {\n    CryptoKey,\n    exportJWK,\n    exportSPKI,\n    importJWK,\n    JWK,\n    JWK_EC_Private,\n    JWTHeaderParameters,\n    JWTPayload,\n    SignJWT,\n} from \"jose\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\nimport { CryptoImplementation } from \"../crypto-implementation/crypto-implementation\";\nimport { CryptoImplementationService } from \"../crypto-implementation/crypto-implementation.service\";\nimport { KeyImportDto } from \"../dto/key-import.dto\";\nimport { CertEntity, CertificateType } from \"../entities/cert.entity\";\nimport { KeyEntity } from \"../entities/keys.entity\";\nimport { KeyService } from \"../key.service\";\n\n/**\n * The key service is responsible for managing the keys of the issuer.\n */\nexport class DBKeyService extends KeyService {\n    private crypto: CryptoImplementation;\n\n    constructor(\n        configService: ConfigService,\n        private cryptoService: CryptoImplementationService,\n        certRepository: Repository,\n        private keyRepository: Repository,\n    ) {\n        super(configService, certRepository);\n        this.crypto = cryptoService.getCrypto();\n    }\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     * @returns\n     */\n    import(tenantId: string, body: KeyImportDto): Promise {\n        const privateKey = body.privateKey;\n        return this.keyRepository\n            .save({\n                id: privateKey.kid,\n                tenantId,\n                key: privateKey,\n            })\n            .then(() => privateKey.kid);\n    }\n\n    /**\n     * Get the public key from the private key.\n     * @param privateKey\n     * @returns\n     */\n    private getPubFromPrivateKey(privateKey: JWK_EC_Private): EC_Public {\n        const {\n            d: _d,\n            key_ops: _key_ops,\n            ext: _ext,\n            ...publicKey\n        } = privateKey;\n        return publicKey as EC_Public;\n    }\n\n    /**\n     * Initialize the key service for a specific tenant.\n     * This will create the keys if they do not exist.\n     * @param tenant\n     */\n    init(tenant: string): Promise {\n        return this.getKid(tenant).catch(async () => this.create(tenant));\n    }\n\n    /**\n     * Creates a new keypair and wrtites the private key to the file system.\n     * @param tenantId\n     * @returns key id of the generated key.\n     */\n    async create(tenantId: string): Promise {\n        const keys = await this.crypto.generateKeyPair();\n        const privateKey = keys.privateKey as JWK;\n        //add a random key id for reference\n        privateKey.kid = v4();\n        privateKey.alg = this.crypto.alg;\n\n        //remove exportable and key_ops from the private key\n        delete privateKey.ext;\n        delete privateKey.key_ops;\n\n        return this.keyRepository\n            .save({\n                id: privateKey.kid,\n                tenantId,\n                key: privateKey,\n            })\n            .then(() => privateKey.kid!);\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    async signer(tenantId: string, keyId?: string): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n        return this.crypto.getSigner(privateKey);\n    }\n\n    /**\n     * Get the keys from the file system or generate them if they do not exist\n     * @returns\n     */\n    private async getPrivateKey(tenantId: string, keyId?: string) {\n        keyId =\n            keyId ||\n            (await this.getKid(tenantId).catch(() => this.create(tenantId)));\n\n        return this.keyRepository\n            .findOneByOrFail({\n                id: keyId,\n                tenantId,\n            })\n            .then((key) => key.key);\n    }\n\n    /**\n     * Gets one key id for the tenant.\n     * If no key exists, it will throw an error.\n     * @returns\n     */\n    getKid(\n        tenantId: string,\n        type: CertificateType = \"signing\",\n    ): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                type,\n            })\n            .then((cert) => cert.id);\n    }\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    getPublicKey(type: \"jwk\", tenantId: string, keyId?: string): Promise;\n    getPublicKey(\n        type: \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    async getPublicKey(\n        type: \"pem\" | \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n\n        // Convert the private key to a public key\n        // First import the private key as a CryptoKey\n        const privateKeyInstance = await importJWK(\n            privateKey,\n            this.cryptoService.getAlg(),\n            { extractable: true },\n        );\n\n        // Export it as a JWK to get the public key components\n        const privateKeyJWK = (await exportJWK(\n            privateKeyInstance,\n        )) as JWK_EC_Private;\n\n        // Remove private key components to get only the public key\n\n        const publicKey = this.getPubFromPrivateKey(privateKeyJWK);\n\n        if (type === \"pem\") {\n            // Import the public key and export as PEM\n            const publicKeyInstance = await importJWK(\n                publicKey,\n                this.cryptoService.getAlg(),\n                { extractable: true },\n            );\n            return exportSPKI(publicKeyInstance as CryptoKey);\n        } else {\n            return publicKey;\n        }\n    }\n\n    async signJWT(\n        payload: JWTPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n        const privateKeyInstance = (await importJWK(privateKey)) as CryptoKey;\n        return new SignJWT(payload)\n            .setProtectedHeader(header)\n            .sign(privateKeyInstance);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DCQL.html":{"url":"classes/DCQL.html","title":"class - DCQL","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DCQL\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                credential_set\n                            \n                            \n                                    \n                                    \n                                    \n                                credentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        credential_set\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialSetQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:105\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsNotEmpty()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule, TypeOrmModuleOptions } from \"@nestjs/typeorm\";\nimport * as Joi from \"joi\";\nimport { join } from \"path\";\n\nexport const DB_VALIDATION_SCHEMA = {\n    DB_TYPE: Joi.string().valid(\"sqlite\", \"postgres\").default(\"sqlite\"),\n    DB_HOST: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n};\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (\n                configService: ConfigService,\n            ): TypeOrmModuleOptions => {\n                const dbType = configService.get(\n                    \"DB_TYPE\",\n                );\n\n                const commonOptions = {\n                    synchronize: true,\n                    autoLoadEntities: true,\n                };\n\n                if (dbType === \"postgres\") {\n                    return {\n                        type: \"postgres\",\n                        host: configService.getOrThrow(\"DB_HOST\"),\n                        port: configService.getOrThrow(\"DB_PORT\"),\n                        username:\n                            configService.getOrThrow(\"DB_USERNAME\"),\n                        password:\n                            configService.getOrThrow(\"DB_PASSWORD\"),\n                        database:\n                            configService.getOrThrow(\"DB_DATABASE\"),\n                        ...commonOptions,\n                    };\n                }\n\n                return {\n                    type: \"sqlite\",\n                    database: join(\n                        configService.getOrThrow(\"FOLDER\"),\n                        \"service.db\",\n                    ),\n                    ...commonOptions,\n                };\n            },\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DisplayController.html":{"url":"controllers/DisplayController.html","title":"controller - DisplayController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DisplayController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/display.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                display\n            \n\n\n            \n                Description\n            \n            \n                Display Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDisplay\n                            \n                            \n                                    \n                                getDisplay\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDisplay\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDisplay(user: TokenPayload, displayData: DisplayCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/display/display.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Create a new display for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user token payload\n\n                                            \n                                        \n                                        \n                                                displayData\n                                            \n                                                            DisplayCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The display data to create\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created display information\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDisplay\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDisplay(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/display/display.controller.ts:27\n                        \n                    \n\n\n            \n                \n                        Get display information for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user token payload\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The display information\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiSecurity } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { DisplayService } from \"./display.service\";\nimport { DisplayCreateDto } from \"./dto/display-create.dto\";\n\n/**\n * Display Controller\n */\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"display\")\nexport class DisplayController {\n    /**\n     * Display Controller\n     * @param displayService\n     */\n    constructor(private readonly displayService: DisplayService) {}\n\n    /**\n     * Get display information for a user\n     * @param user The user token payload\n     * @returns The display information\n     */\n    @Get()\n    getDisplay(@Token() user: TokenPayload) {\n        return this.displayService.get(user.sub);\n    }\n\n    /**\n     * Create a new display for a user\n     * @param user The user token payload\n     * @param displayData The display data to create\n     * @returns The created display information\n     */\n    @Post()\n    createDisplay(\n        @Token() user: TokenPayload,\n        @Body() displayData: DisplayCreateDto,\n    ) {\n        return this.displayService.create(user.sub, displayData);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayCreateDto.html":{"url":"classes/DisplayCreateDto.html","title":"class - DisplayCreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayCreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/dto/display-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(DisplayEntity, [\n    \"tenant\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { DisplayEntity } from \"../entities/display.entity\";\n\nexport class DisplayCreateDto extends OmitType(DisplayEntity, [\n    \"tenant\",\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DisplayEntity.html":{"url":"entities/DisplayEntity.html","title":"entity - DisplayEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DisplayEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/entities/display.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:32\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:40\n                        \n                    \n\n            \n                \n                    The display information.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsString, ValidateNested } from \"class-validator\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\nclass DisplayLogo {\n    @IsString()\n    url: string;\n}\nexport class DisplayInfo {\n    @IsString()\n    name: string;\n    @IsString()\n    locale: string;\n\n    @ValidateNested()\n    @Type(() => DisplayLogo)\n    logo: DisplayLogo;\n}\n\n@Entity()\nexport class DisplayEntity {\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The display information.\n     */\n    @ValidateNested()\n    @Type(() => DisplayInfo)\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayInfo.html":{"url":"classes/DisplayInfo.html","title":"class - DisplayInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/entities/display.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                locale\n                            \n                            \n                                    \n                                    \n                                logo\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        locale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayLogo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsString, ValidateNested } from \"class-validator\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\nclass DisplayLogo {\n    @IsString()\n    url: string;\n}\nexport class DisplayInfo {\n    @IsString()\n    name: string;\n    @IsString()\n    locale: string;\n\n    @ValidateNested()\n    @Type(() => DisplayLogo)\n    logo: DisplayLogo;\n}\n\n@Entity()\nexport class DisplayEntity {\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The display information.\n     */\n    @ValidateNested()\n    @Type(() => DisplayInfo)\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayLogo.html":{"url":"classes/DisplayLogo.html","title":"class - DisplayLogo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayLogo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/entities/display.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsString, ValidateNested } from \"class-validator\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\nclass DisplayLogo {\n    @IsString()\n    url: string;\n}\nexport class DisplayInfo {\n    @IsString()\n    name: string;\n    @IsString()\n    locale: string;\n\n    @ValidateNested()\n    @Type(() => DisplayLogo)\n    logo: DisplayLogo;\n}\n\n@Entity()\nexport class DisplayEntity {\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The display information.\n     */\n    @ValidateNested()\n    @Type(() => DisplayInfo)\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DisplayService.html":{"url":"injectables/DisplayService.html","title":"injectable - DisplayService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DisplayService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/display.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Display Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(displayRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/display/display.service.ts:11\n                            \n                        \n\n                \n                    \n                            Display Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        displayRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(tenantId: string, displayData: DisplayCreateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/display/display.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Create a new display for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant\n\n                                            \n                                        \n                                        \n                                                displayData\n                                            \n                                                            DisplayCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The display data to create\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created display information\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/display/display.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Get display information for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The display information for the tenant\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DisplayCreateDto } from \"./dto/display-create.dto\";\nimport { DisplayEntity } from \"./entities/display.entity\";\n\n/**\n * Display Service\n */\n@Injectable()\nexport class DisplayService {\n    /**\n     * Display Service\n     * @param displayRepository\n     */\n    constructor(\n        @InjectRepository(DisplayEntity)\n        private readonly displayRepository: Repository,\n    ) {}\n\n    /**\n     * Get display information for a user\n     * @param tenantId The ID of the tenant\n     * @returns The display information for the tenant\n     */\n    get(tenantId: string): Promise {\n        return this.displayRepository.findOne({\n            where: { tenantId },\n        });\n    }\n\n    /**\n     * Create a new display for a user\n     * @param tenantId The ID of the tenant\n     * @param displayData The display data to create\n     * @returns The created display information\n     */\n    create(\n        tenantId: string,\n        displayData: DisplayCreateDto,\n    ): Promise {\n        const displayEntity = this.displayRepository.create({\n            ...displayData,\n            tenantId,\n        });\n        return this.displayRepository.save(displayEntity);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EC_Public.html":{"url":"classes/EC_Public.html","title":"class - EC_Public","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EC_Public\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\nThis class is used to define the structure of EC public keys in JWK format.\n\n            \n\n\n            \n                Implements\n            \n            \n                            JWK_EC_Public\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crv\n                            \n                            \n                                kty\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The algorithm intended for use with the key, such as 'ES256'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        kty\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The key type, which is always 'EC' for Elliptic Curve keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:19\n                        \n                    \n\n            \n                \n                    The x coordinate of the EC public key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    The y coordinate of the EC public key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from \"jose\";\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: \"EC\";\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmbeddedDisclosurePolicy.html":{"url":"classes/EmbeddedDisclosurePolicy.html","title":"class - EmbeddedDisclosurePolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmbeddedDisclosurePolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                policy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/encryption/encryption.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling encryption and decryption operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decryptJwe\n                            \n                            \n                                getEncryptionPublicKey\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(keyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/encryption/encryption.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for the EncryptionService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        keyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decryptJwe\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptJwe(response: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:54\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Encrypts a response using JWE (JSON Web Encryption).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe response to encrypt.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to encrypt the response.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The encrypted response as a JWE string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEncryptionPublicKey\n                        \n                    \n                \n            \n            \n                \ngetEncryptionPublicKey(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Retrieves the public encryption key for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The public encryption key as a JWK.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Deletes the encryption keys for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the keys.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Initializes the encryption keys for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to initialize the keys.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { exportJWK, generateKeyPair, importJWK, JWK, jwtDecrypt } from \"jose\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport { KeyEntity } from \"../key/entities/keys.entity\";\n\n/**\n * Service for handling encryption and decryption operations.\n */\n@Injectable()\nexport class EncryptionService {\n    /**\n     * Constructor for the EncryptionService.\n     * @param configService\n     */\n    constructor(\n        @InjectRepository(KeyEntity)\n        private keyRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the encryption keys for a given tenant.\n     * @param tenantId - The ID of the tenant for which to initialize the keys.\n     */\n    async onTenantInit(tenantId: string) {\n        const privateKey = await generateKeyPair(\"ECDH-ES\", {\n            crv: \"P-256\",\n            extractable: true,\n        }).then(async (secret) => exportJWK(secret.privateKey));\n\n        this.keyRepository.save({\n            id: v4(),\n            tenantId,\n            key: privateKey,\n            usage: \"encrypt\",\n        });\n    }\n\n    /**\n     * Deletes the encryption keys for a given tenant.\n     * @param tenantId - The ID of the tenant for which to delete the keys.\n     */\n    async onTenantDelete(tenantId: string) {\n        await this.keyRepository.delete({ tenantId });\n    }\n\n    /**\n     * Encrypts a response using JWE (JSON Web Encryption).\n     * @param response - The response to encrypt.\n     * @param tenantId - The ID of the tenant for which to encrypt the response.\n     * @returns The encrypted response as a JWE string.\n     */\n    async decryptJwe(response: string, tenantId: string): Promise {\n        const privateEncryptionKey = await this.keyRepository\n            .findOneByOrFail({\n                tenantId,\n                usage: \"encrypt\",\n            })\n            .then(\n                (keyEntity) =>\n                    importJWK(keyEntity.key, \"ECDH-ES\") as Promise,\n            );\n\n        const res = await jwtDecrypt(response, privateEncryptionKey);\n        return res.payload;\n    }\n\n    /**\n     * Retrieves the public encryption key for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve the public key.\n     * @returns The public encryption key as a JWK.\n     */\n    getEncryptionPublicKey(tenantId: string): Promise {\n        return this.keyRepository\n            .findOneByOrFail({\n                tenantId,\n                usage: \"encrypt\",\n            })\n            .then((entry) => {\n                delete entry.key.d;\n                return entry.key;\n            });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FileEntity.html":{"url":"entities/FileEntity.html","title":"entity - FileEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/entities/files.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/entities/files.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/entities/files.entity.ts:19\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/entities/files.entity.ts:13\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryColumn } from \"typeorm\";\nimport { TenantEntity } from \"../../auth/entitites/tenant.entity\";\n\n@Entity()\nexport class FileEntity {\n    @PrimaryColumn()\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileStorage.html":{"url":"interfaces/FileStorage.html","title":"interface - FileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        exists\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        getSignedUrl\n                                    \n                                \n                                \n                                    \n                                        getStream\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        getSignedUrl\n                        \n                    \n                \n            \n            \n                \ngetSignedUrl(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Readable } from \"stream\";\n\nexport type PutOptions = {\n    contentType?: string;\n    metadata?: Record;\n    acl?: \"private\" | \"public\";\n    checksum?: string; // e.g., sha256 base64\n};\n\nexport type StoredObject = {\n    key: string; // canonical key (e.g. \"tenant/2025/08/14/uuid.ext\")\n    etag?: string;\n    size?: number;\n    url?: string; // public URL if ACL=public or a presigned URL\n    contentType?: string;\n    metadata?: Record;\n};\n\nexport interface FileStorage {\n    put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise;\n\n    getStream(\n        key: string,\n    ): Promise;\n\n    delete(key: string): Promise;\n\n    exists(key: string): Promise;\n\n    getSignedUrl?(key: string): Promise; // optional for local\n}\n\nexport const FILE_STORAGE = Symbol(\"FILE_STORAGE\");\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/dto/file-upload.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'binary'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/dto/file-upload.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class FileUploadDto {\n    @ApiProperty({ type: \"string\", format: \"binary\" })\n    file: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                    Async\n                                deleteByTenant\n                            \n                            \n                                getDownloadUrl\n                            \n                            \n                                getStream\n                            \n                            \n                                    Async\n                                saveUserUpload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storage: FileStorage, fileRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/storage/files.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storage\n                                                  \n                                                        \n                                                                        FileStorage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fileRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:73\n                        \n                    \n\n\n            \n                \n                        Deletes a file from the storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The unique identifier of the file.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the file is deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteByTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteByTenant(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Deletes all files associated with a specific tenant\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant whose files should be deleted.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \ngetDownloadUrl(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Retrieves a readable stream of the file associated with the given key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The unique identifier of the file.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to a readable stream of the file.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveUserUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveUserUpload(tenantId: string, file: Express.Multer.File, isPublic)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Saves a user-uploaded file to the storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The ID of the tenant uploading the file.\n\n                                            \n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The file to upload.\n\n                                            \n                                        \n                                        \n                                                isPublic\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    Whether the file should be publicly accessible.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The metadata of the stored file.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { randomUUID } from \"crypto\";\nimport { extname } from \"path\";\nimport { Repository } from \"typeorm\";\nimport {\n    FILE_STORAGE,\n    FileStorage,\n    StoredObject,\n} from \"../storage/storage.types\";\nimport { FileEntity } from \"./entities/files.entity\";\n\n@Injectable()\nexport class FilesService {\n    constructor(\n        @Inject(FILE_STORAGE) private storage: FileStorage,\n        @InjectRepository(FileEntity)\n        private fileRepository: Repository,\n        private configService: ConfigService,\n    ) {}\n\n    /**\n     * Saves a user-uploaded file to the storage.\n     * @param tenantId The ID of the tenant uploading the file.\n     * @param file The file to upload.\n     * @param isPublic Whether the file should be publicly accessible.\n     * @returns The metadata of the stored file.\n     */\n    async saveUserUpload(\n        tenantId: string,\n        file: Express.Multer.File,\n        isPublic = false,\n    ): Promise {\n        const safeExt = extname(file.originalname || \"\")\n            .toLowerCase()\n            .slice(1);\n        const key = `${new Date().toISOString().slice(0, 10)}-${randomUUID()}${safeExt ? \".\" + safeExt : \"\"}`;\n\n        // TODO: add checksum if you want tamper detection:\n        // const checksum = createHash('sha256').update(bufferOrStreamToBuffer(body)).digest('base64');\n\n        const response = await this.storage.put(key, file.buffer, {\n            contentType: file.mimetype,\n            acl: isPublic ? \"public\" : \"private\",\n            metadata: { originalName: file.originalname },\n        });\n        await this.fileRepository.save({\n            id: key,\n            tenantId,\n        });\n        const url = await this.getDownloadUrl(response.key);\n        return {\n            key: response.key,\n            url,\n        };\n    }\n\n    /**\n     * Retrieves a readable stream of the file associated with the given key.\n     * @param key The unique identifier of the file.\n     * @returns A promise that resolves to a readable stream of the file.\n     */\n    getStream(key: string) {\n        return Promise.resolve(this.storage.getStream(key));\n    }\n\n    /**\n     * Deletes a file from the storage.\n     * @param key The unique identifier of the file.\n     * @returns A promise that resolves when the file is deleted.\n     */\n    delete(key: string) {\n        return Promise.resolve(this.storage.delete(key));\n    }\n\n    getDownloadUrl(key: string) {\n        if (this.storage.getSignedUrl) return this.storage.getSignedUrl(key);\n        return Promise.resolve(\n            `${this.configService.get(\"PUBLIC_URL\")}/storage/${key}`,\n        );\n    }\n\n    /**\n     * Deletes all files associated with a specific tenant\n     * @param tenantId The ID of the tenant whose files should be deleted.\n     */\n    async deleteByTenant(tenantId: string) {\n        const files = await this.fileRepository.find({ where: { tenantId } });\n        await Promise.all(files.map((file) => this.storage.delete(file.id)));\n        await this.fileRepository.delete({ tenantId });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GenerateTokenOptions.html":{"url":"interfaces/GenerateTokenOptions.html","title":"interface - GenerateTokenOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GenerateTokenOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            audience\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { jwtVerify, SignJWT } from \"jose\";\nimport { DEFAULT_JWT_SECRET } from \"./auth.module\";\nimport { TokenPayload } from \"./token.decorator\";\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {\n        if (\n            this.configService.get(\"JWT_SECRET\") === DEFAULT_JWT_SECRET\n        ) {\n            console.warn(\n                \"Using default JWT secret. This is not secure for production environments.\",\n            );\n        }\n    }\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow(\"JWT_EXPIRES_IN\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: \"HS256\" })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token verification is handled by external OIDC provider.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: [\"HS256\"],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get(\"OIDC\") !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                HealthController is responsible for providing health check endpoints.\nIt uses the HealthCheckService to perform checks on the database connection.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Endpoint to check the health of the service.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n    HealthCheck,\n    HealthCheckService,\n    TypeOrmHealthIndicator,\n} from \"@nestjs/terminus\";\n\n/**\n * HealthController is responsible for providing health check endpoints.\n * It uses the HealthCheckService to perform checks on the database connection.\n */\n@Controller(\"health\")\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private db: TypeOrmHealthIndicator,\n    ) {}\n\n    /**\n     * Endpoint to check the health of the service.\n     * @returns\n     */\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([() => this.db.pingCheck(\"database\")]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n    imports: [TerminusModule],\n    controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/IssuanceConfig.html":{"url":"entities/IssuanceConfig.html","title":"entity - IssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  IssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/entities/issuance-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage issuance configs\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                authenticationConfig\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                batch_size\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                credentialConfigs\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                dPopRequired\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        authenticationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationMethodNone | AuthenticationMethodAuth | AuthenticationMethodPresentation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@ValidateNested()@ApiProperty({oneOf: undefined})@Type(undefined, {discriminator: undefined, keepDiscriminatorProperty: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:114\n                        \n                    \n\n            \n                \n                    Authentication configuration for the issuance process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        batch_size\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Column('int', {default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:156\n                        \n                    \n\n            \n                \n                    Value to determine the amount of credentials that are issued in a batch.\nDefault is 1.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:138\n                        \n                    \n\n            \n                \n                    Webhook to receive claims for the issuance process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:123\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentialConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfig[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, credential => credential.issuanceConfigs)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:80\n                        \n                    \n\n            \n                \n                    Links to all credential config bindings that are included in this issuance config.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:70\n                        \n                    \n\n            \n                \n                    Description of the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        dPopRequired\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@Column('boolean', {default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:164\n                        \n                    \n\n            \n                \n                    Indicates whether DPoP is required for the issuance process. Default value is true.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:49\n                        \n                    \n\n            \n                \n                    Unique identifier for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:147\n                        \n                    \n\n            \n                \n                    Webhook to send the result of the notification response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:62\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:56\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:129\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    JoinTable,\n    ManyToMany,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { CredentialConfig } from \"../../credentials/entities/credential.entity\";\nimport {\n    AuthenticationMethod,\n    AuthenticationMethodAuth,\n    AuthenticationMethodNone,\n    AuthenticationMethodPresentation,\n} from \"../dto/authentication-config.dto\";\n\n/**\n * Entity to manage issuance configs\n */\n@ApiExtraModels(\n    AuthenticationMethodNone,\n    AuthenticationMethodAuth,\n    AuthenticationMethodPresentation,\n)\n@Entity()\nexport class IssuanceConfig {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the issuance configuration.\n     */\n    @IsString()\n    @IsOptional()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    /**\n     * Links to all credential config bindings that are included in this issuance config.\n     */\n    @ManyToMany(\n        () => CredentialConfig,\n        (credential) => credential.issuanceConfigs,\n    )\n    @JoinTable()\n    credentialConfigs: CredentialConfig[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AuthenticationMethodNone) },\n            { $ref: getSchemaPath(AuthenticationMethodAuth) },\n            { $ref: getSchemaPath(AuthenticationMethodPresentation) },\n        ],\n    })\n    @Type(() => AuthenticationMethodNone, {\n        discriminator: {\n            property: \"method\",\n            subTypes: [\n                {\n                    name: AuthenticationMethod.NONE,\n                    value: AuthenticationMethodNone,\n                },\n                {\n                    name: AuthenticationMethod.AUTH,\n                    value: AuthenticationMethodAuth,\n                },\n                {\n                    name: AuthenticationMethod.PRESENTATION_DURING_ISSUANCE,\n                    value: AuthenticationMethodPresentation,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    authenticationConfig:\n        | AuthenticationMethodNone\n        | AuthenticationMethodAuth\n        | AuthenticationMethodPresentation;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Webhook to receive claims for the issuance process.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @Column(\"json\", { nullable: true })\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Webhook to send the result of the notification response\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @Column(\"json\", { nullable: true })\n    notifyWebhook?: WebhookConfig;\n\n    /**\n     * Value to determine the amount of credentials that are issued in a batch.\n     * Default is 1.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 1 })\n    batch_size?: number;\n\n    /**\n     * Indicates whether DPoP is required for the issuance process. Default value is true.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: true })\n    dPopRequired?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuanceController.html":{"url":"controllers/IssuanceController.html","title":"controller - IssuanceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuanceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/issuance\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getIssuanceConfigurations\n                            \n                            \n                                    \n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Deletes an issuance configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIssuanceConfigurations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfigurations(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(config: IssuanceDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Stores the issuance configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { IssuanceDto } from \"./dto/issuance.dto\";\nimport { IssuanceService } from \"./issuance.service\";\n\n@ApiTags(\"Issuer management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"issuer-management/issuance\")\nexport class IssuanceController {\n    constructor(private readonly issuanceService: IssuanceService) {}\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getIssuanceConfigurations(@Token() user: TokenPayload) {\n        return this.issuanceService.getIssuanceConfiguration(user.sub);\n    }\n\n    /**\n     * Stores the issuance configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeIssuanceConfiguration(\n        @Body() config: IssuanceDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.storeIssuanceConfiguration(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes an issuance configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteIssuanceConfiguration(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.deleteIssuanceConfiguration(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IssuanceDto.html":{"url":"classes/IssuanceDto.html","title":"class - IssuanceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IssuanceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for mapping issuance configurations.\n\n            \n\n            \n                Extends\n            \n            \n                            OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"credentialConfigs\",\n] as const)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:30\n                        \n                    \n\n            \n                \n                    Ids of the credential configurations associated with this issuance configuration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\nimport { IssuanceConfig } from \"../entities/issuance-config.entity\";\n\n/**\n * DTO for mapping credential configurations in issuance.\n */\nexport class CredentialConfigMapping {\n    /**\n     * Unique identifier for the credential configuration.\n     */\n    @IsString()\n    id: string;\n}\n\n/**\n * DTO for mapping issuance configurations.\n */\nexport class IssuanceDto extends OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"credentialConfigs\",\n] as const) {\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    credentialConfigIds: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssuanceService.html":{"url":"injectables/IssuanceService.html","title":"injectable - IssuanceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IssuanceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing issuance configurations.\nIt provides methods to get, store, and delete issuance configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    Public\n                                getIssuanceConfiguration\n                            \n                            \n                                getIssuanceConfigurationById\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(issuanceConfigRepo: Repository, credentialsConfigService: CredentialConfigService, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/issuance/issuance.service.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor for IssuanceService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        issuanceConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsConfigService\n                                                  \n                                                        \n                                                                        CredentialConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \ndeleteIssuanceConfiguration(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:215\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:162\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getIssuanceConfigurationById\n                        \n                    \n                \n            \n            \n                \ngetIssuanceConfigurationById(issuanceConfigId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:175\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configuration by ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuanceConfigId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations and the credential configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(tenantId: string, value: IssuanceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:191\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { CredentialConfigService } from \"../credentials/credential-config/credential-config.service\";\nimport { CredentialConfig } from \"../credentials/entities/credential.entity\";\nimport { IssuanceDto } from \"./dto/issuance.dto\";\nimport { IssuanceConfig } from \"./entities/issuance-config.entity\";\n\n/**\n * Service for managing issuance configurations.\n * It provides methods to get, store, and delete issuance configurations.\n */\n@Injectable()\nexport class IssuanceService implements OnApplicationBootstrap {\n    /**\n     * Constructor for IssuanceService.\n     * @param issuanceConfigRepo\n     * @param credentialsConfigService\n     */\n    constructor(\n        @InjectRepository(IssuanceConfig)\n        private issuanceConfigRepo: Repository,\n        private credentialsConfigService: CredentialConfigService,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Import issuance configurations and the credential configurations from the configured folder.\n     */\n    async onApplicationBootstrap() {\n        await this.cryptoService.import();\n        await this.credentialsConfigService.import();\n        await this.import();\n    }\n\n    /**\n     * Import issuance configurations from the configured folder.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"issuance/issuance\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    payload.id = file.replace(\".json\", \"\");\n                    const exists = await this.getIssuanceConfigurationById(\n                        payload.id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (exists && !force) {\n                        continue; // Skip if config already exists and force is not set.\n                    }\n\n                    // Validate the payload against IssuanceDto\n                    const issuanceDto = plainToClass(IssuanceDto, payload);\n                    //TOODO: it does not validate the different config options\n                    const validationErrors = await validate(issuanceDto, {\n                        whitelist: true,\n                        forbidUnknownValues: false, // avoid false positives on plain objects\n                        forbidNonWhitelisted: false,\n                        stopAtFirstError: false,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        const extractErrorMessages = (error: any): string[] => {\n                            const messages: string[] = [];\n\n                            // Add constraints from the current level\n                            if (error.constraints) {\n                                messages.push(\n                                    ...Object.values(\n                                        error.constraints as Record,\n                                    ),\n                                );\n                            }\n\n                            // Recursively add constraints from children\n                            if (error.children && error.children.length > 0) {\n                                for (const child of error.children) {\n                                    messages.push(\n                                        ...extractErrorMessages(child),\n                                    );\n                                }\n                            }\n\n                            return messages;\n                        };\n\n                        const errorMessages = validationErrors\n                            .map((error) => {\n                                const messages = extractErrorMessages(error);\n                                return messages.length > 0\n                                    ? `${error.property}: ${messages.join(\", \")}`\n                                    : error.property;\n                            })\n                            .join(\"; \");\n\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for issuance config ${file} in tenant ${tenant.name}: ${errorMessages}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n                    await this.storeIssuanceConfiguration(\n                        tenant.name,\n                        issuanceDto,\n                    );\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} issuance configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    async onTenantDelete(tenantId: string) {\n        await this.issuanceConfigRepo.delete({ tenantId });\n    }\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @param tenantId\n     * @returns\n     */\n    public getIssuanceConfiguration(tenantId: string) {\n        return this.issuanceConfigRepo.find({\n            where: { tenantId },\n            relations: [\"credentialConfigs\"],\n        });\n    }\n\n    /**\n     * Returns the issuance configuration by ID for a given tenant.\n     * @param issuanceConfigId\n     * @param tenantId\n     * @returns\n     */\n    getIssuanceConfigurationById(\n        issuanceConfigId: string,\n        tenantId: string,\n    ): Promise {\n        return this.issuanceConfigRepo.findOneOrFail({\n            where: { id: issuanceConfigId, tenantId },\n            relations: [\"credentialConfigs\"],\n        });\n    }\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeIssuanceConfiguration(tenantId: string, value: IssuanceDto) {\n        const credentials: CredentialConfig[] = [];\n        //check if all credential configs exist\n        for (const credentialConfigId of value.credentialConfigIds) {\n            const credential = await this.credentialsConfigService.getById(\n                tenantId,\n                credentialConfigId,\n            );\n            credentials.push(credential);\n        }\n        const issuanceConfig = await this.issuanceConfigRepo.save({\n            ...value,\n            tenantId,\n            credentialConfigs: credentials,\n        });\n        return issuanceConfig;\n    }\n\n    /**\n     * Deletes a credential configuration.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    deleteIssuanceConfiguration(tenantId: string, id: string) {\n        return this.issuanceConfigRepo.delete({ tenantId, id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuerManagementController.html":{"url":"controllers/IssuerManagementController.html","title":"controller - IssuerManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuerManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuer-management/issuer-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: OfferRequestDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: OfferRequestDto, examples: undefined})@Post('offer')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:83\n                        \n                    \n\n\n            \n                \n                        Create an offer for a credential.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Res, UseGuards } from \"@nestjs/common\";\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { Response } from \"express\";\nimport * as QRCode from \"qrcode\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { ResponseType } from \"../../verifier/oid4vp/dto/presentation-request.dto\";\nimport {\n    OfferRequestDto,\n    OfferResponse,\n} from \"../oid4vci/dto/offer-request.dto\";\n\n@ApiTags(\"Issuer management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"issuer-management\")\nexport class IssuerManagementController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Create an offer for a credential.\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: \"JSON response\",\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            \"application/json\": { schema: { type: \"object\" } },\n            \"image/png\": { schema: { type: \"string\", format: \"binary\" } },\n        },\n    })\n    @ApiProduces(\"application/json\", \"image/png\")\n    @ApiBody({\n        type: OfferRequestDto,\n        examples: {\n            qrcode: {\n                summary: \"QR-Code Example\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid\",\n                } as OfferRequestDto,\n            },\n            uri: {\n                summary: \"URI\",\n                value: {\n                    response_type: ResponseType.URI,\n                    issuanceId: \"pid\",\n                } as OfferRequestDto,\n            },\n            authfixed: {\n                summary: \"Auth flow with fixed session\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid\",\n                    session: \"fd3ebf28-8ad6-4909-8a7a-a739c2c412c0\",\n                } as OfferRequestDto,\n            },\n            override: {\n                summary: \"Override\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid-none\",\n                    claims: {\n                        pid: {\n                            given_name: \"Max\",\n                        },\n                    },\n                } as OfferRequestDto,\n            },\n        },\n    })\n    @Post(\"offer\")\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: OfferRequestDto,\n        @Token() user: TokenPayload,\n    ) {\n        // For now, we'll just pass the body to the service as before\n        // You can modify the service later to accept user information if needed\n        const values = await this.oid4vciService.createOffer(\n            body,\n            user,\n            user.sub,\n        );\n\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader(\"Content-Type\", \"image/png\");\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IssuerMetadata.html":{"url":"interfaces/IssuerMetadata.html","title":"interface - IssuerMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IssuerMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/dto/issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the issuer metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            jwks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The issuer identifier, typically a URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { JWK } from \"jose\";\n\n/**\n * Interface representing the issuer metadata.\n */\nexport interface IssuerMetadata {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    issuer: string;\n    /**\n     * The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n     */\n    jwks: {\n        /**\n         * List of keys in the JWKS.\n         */\n        keys: JWK[];\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssuerModule.html":{"url":"modules/IssuerModule.html","title":"module - IssuerModule","body":"\n                   \n\n\n\n\n    Modules\n    IssuerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nCredentialConfigService \n\nCredentialConfigService \n\nCredentialConfigService  -->\n\nIssuerModule->CredentialConfigService \n\n\n\n\n\nIssuanceService \n\nIssuanceService \n\nIssuanceService  -->\n\nIssuerModule->IssuanceService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nDisplayService\n\nDisplayService\n\nIssuerModule -->\n\nDisplayService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/issuer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            CredentialsService\n                        \n                        \n                            DisplayService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vciController\n                        \n                        \n                            AuthorizeController\n                        \n                        \n                            CredentialsController\n                        \n                        \n                            IssuerManagementController\n                        \n                        \n                            IssuanceController\n                        \n                        \n                            CredentialsMetadataController\n                        \n                        \n                            DisplayController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { setGlobalConfig } from \"@openid4vc/openid4vci\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { SessionLoggerInterceptor } from \"../utils/logger/session-logger.interceptor\";\nimport { SessionLoggerService } from \"../utils/logger/session-logger.service\";\nimport { WebhookService } from \"../utils/webhook/webhook.service\";\nimport { Oid4vpModule } from \"../verifier/oid4vp/oid4vp.module\";\nimport { AuthorizeController } from \"./authorize/authorize.controller\";\nimport { AuthorizeService } from \"./authorize/authorize.service\";\nimport { CredentialConfigService } from \"./credentials/credential-config/credential-config.service\";\nimport { CredentialsController } from \"./credentials/credentials.controller\";\nimport { CredentialsService } from \"./credentials/credentials.service\";\nimport { CredentialConfig } from \"./credentials/entities/credential.entity\";\nimport { CredentialsMetadataController } from \"./credentials-metadata/credentials-metadata.controller\";\nimport { DisplayController } from \"./display/display.controller\";\nimport { DisplayEntity } from \"./display/entities/display.entity\";\nimport { IssuanceConfig } from \"./issuance/entities/issuance-config.entity\";\nimport { IssuanceController } from \"./issuance/issuance.controller\";\nimport { IssuanceService } from \"./issuance/issuance.service\";\nimport { IssuerManagementController } from \"./issuer-management/issuer-management.controller\";\nimport { Oid4vciController } from \"./oid4vci/oid4vci.controller\";\nimport { Oid4vciService } from \"./oid4vci/oid4vci.service\";\nimport { StatusListModule } from \"./status-list/status-list.module\";\nimport { DisplayService } from \"./display/display.service\";\n\nexport const ISSUER_VALIDATION_SCHEMA = {\n    PUBLIC_URL: Joi.string().default(\"http://localhost:3000\"),\n};\n\n@Module({\n    imports: [\n        CryptoModule,\n        StatusListModule,\n        Oid4vpModule,\n        SessionModule,\n        HttpModule,\n        TypeOrmModule.forFeature([\n            IssuanceConfig,\n            CredentialConfig,\n            DisplayEntity,\n        ]),\n    ],\n    controllers: [\n        Oid4vciController,\n        AuthorizeController,\n        CredentialsController,\n        IssuerManagementController,\n        IssuanceController,\n        CredentialsMetadataController,\n        DisplayController,\n    ],\n    providers: [\n        AuthorizeService,\n        CredentialsService,\n        Oid4vciService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        IssuanceService,\n        CredentialConfigService,\n        WebhookService,\n        DisplayService,\n    ],\n    exports: [\n        AuthorizeService,\n        Oid4vciService,\n        IssuanceService,\n        CredentialConfigService,\n    ],\n})\nexport class IssuerModule {\n    constructor(configService: ConfigService) {\n        const unsecure = configService\n            .getOrThrow(\"PUBLIC_URL\")\n            .startsWith(\"http://\");\n        setGlobalConfig({ allowInsecureUrls: unsecure });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwksResponseDto.html":{"url":"classes/JwksResponseDto.html","title":"class - JwksResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwksResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    An array of EC public keys in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from \"jose\";\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: \"EC\";\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard(\"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { IS_PUBLIC_KEY } from \"./public.decorator\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard(\"jwt\") {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            IS_PUBLIC_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) {\n            return true;\n        }\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                isUsingExternalOIDC\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(payload: TokenPayload, options: GenerateTokenOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Generate a JWT token for integrated OAuth2 server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            GenerateTokenOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsingExternalOIDC\n                        \n                    \n                \n            \n            \n                \nisUsingExternalOIDC()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Check if the service is using external OIDC provider\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Verify a JWT token (for additional validation if needed)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { jwtVerify, SignJWT } from \"jose\";\nimport { DEFAULT_JWT_SECRET } from \"./auth.module\";\nimport { TokenPayload } from \"./token.decorator\";\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {\n        if (\n            this.configService.get(\"JWT_SECRET\") === DEFAULT_JWT_SECRET\n        ) {\n            console.warn(\n                \"Using default JWT secret. This is not secure for production environments.\",\n            );\n        }\n    }\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow(\"JWT_EXPIRES_IN\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: \"HS256\" })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token verification is handled by external OIDC provider.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: [\"HS256\"],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get(\"OIDC\") !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, \"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Private\n                                    Static\n                                getExternalOIDCConfig\n                            \n                            \n                                    Private\n                                    Static\n                                getIntegratedOAuth2Config\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: any, options?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getExternalOIDCConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExternalOIDCConfig(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { secretOrKeyProvider: any; jwtFromRequest: any; algorithms: {}; issuer: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getIntegratedOAuth2Config\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntegratedOAuth2Config(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:79\n                        \n                    \n\n\n            \n                \n                        Validate the JWT payload. It will also check if the client is set up.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The JWT payload\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The validated payload or an error\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { passportJwtSecret } from \"jwks-rsa\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { TokenPayload } from \"./token.decorator\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, \"jwt\") {\n    constructor(private configService: ConfigService) {\n        const useExternalOIDC = configService.get(\"OIDC\");\n\n        const config = useExternalOIDC\n            ? JwtStrategy.getExternalOIDCConfig(configService)\n            : JwtStrategy.getIntegratedOAuth2Config(configService);\n        super(config);\n    }\n\n    // Override authenticate to add debugging\n    authenticate(req: any, options?: any) {\n        return super.authenticate(req, {\n            ...options,\n            failWithError: true, // This will throw errors instead of just returning 401\n        });\n    }\n\n    private static getExternalOIDCConfig(configService: ConfigService) {\n        const keycloakIssuerUrl = configService.get(\"OIDC_INTERNAL_ISSUER_URL\");\n        const jwksUri = `${keycloakIssuerUrl}/protocol/openid-connect/certs`;\n\n        return {\n            secretOrKeyProvider: passportJwtSecret({\n                cache: true,\n                rateLimit: true,\n                jwksRequestsPerMinute: 5,\n                jwksUri: jwksUri,\n                handleSigningKeyError: (err, cb) => {\n                    console.error(\"❌ Keycloak JWKS error:\", err);\n                    if (err instanceof Error) {\n                        return cb(err);\n                    }\n                    return cb(\n                        new Error(\n                            \"Could not get the signing key from Keycloak\",\n                        ),\n                    );\n                },\n            }),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: [configService.get(\"OIDC_ALGORITHM\")],\n            issuer: keycloakIssuerUrl,\n        };\n    }\n\n    private static getIntegratedOAuth2Config(\n        configService: ConfigService,\n    ): any {\n        const config = {\n            secretOrKey: configService.get(\"JWT_SECRET\"),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: [\"HS256\"], // Using symmetric key for integrated OAuth2\n            ignoreExpiration: false, // Ensure tokens expire\n        };\n\n        // Add issuer validation only if JWT_ISSUER is configured\n        const issuer = configService.get(\"JWT_ISSUER\");\n        if (issuer) {\n            (config as any).issuer = issuer;\n        }\n\n        return config;\n    }\n\n    /**\n     * Validate the JWT payload. It will also check if the client is set up.\n     * @param payload The JWT payload\n     * @returns The validated payload or an error\n     */\n    validate(payload: TokenPayload): any {\n        const useExternalOIDC =\n            this.configService.get(\"OIDC\") !== undefined;\n        let sub = payload.sub;\n        if (useExternalOIDC) {\n            const key = this.configService.getOrThrow(\"OIDC_SUB\");\n            sub = (payload as any)[key] as string;\n        }\n\n        return { sub, admin: payload.admin || false };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Key.html":{"url":"classes/Key.html","title":"class - Key","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Key\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        JWK\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                alg\n                            \n                            \n                                    \n                                crv\n                            \n                            \n                                    \n                                d\n                            \n                            \n                                    \n                                kid\n                            \n                            \n                                    \n                                kty\n                            \n                            \n                                    \n                                x\n                            \n                            \n                                    \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        alg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        d\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['EC'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsEnum, IsOptional, IsString, ValidateNested } from \"class-validator\";\nimport { JWK } from \"jose\";\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum([\"EC\"])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @ValidateNested()\n    @Type(() => Key)\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n\n    /**\n     * Description of the key.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/KeyController.html":{"url":"controllers/KeyController.html","title":"controller - KeyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  KeyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                key\n            \n\n\n            \n                Description\n            \n            \n                KeyController is responsible for managing keys in the system.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addKey\n                            \n                            \n                                    \n                                deleteKey\n                            \n                            \n                                    \n                                getKeys\n                            \n                            \n                                    \n                                    Async\n                                updateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    addKey(token: TokenPayload, body: KeyImportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Add a new key to the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteKey(token: TokenPayload, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Delete a key from the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeys(token: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Get all keys for the tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateKey(token: TokenPayload, id: string, body: UpdateKeyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:67\n                        \n                    \n\n\n            \n                \n                        Updates an existing key in the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateKeyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Inject,\n    Param,\n    Post,\n    Put,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { CryptoService } from \"../crypto.service\";\nimport { KeyImportDto } from \"./dto/key-import.dto\";\nimport { UpdateKeyDto } from \"./dto/key-update.dto\";\nimport { CertEntity } from \"./entities/cert.entity\";\nimport { KeyService } from \"./key.service\";\n\n/**\n * KeyController is responsible for managing keys in the system.\n */\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"key\")\nexport class KeyController {\n    constructor(\n        @Inject(\"KeyService\") public readonly keyService: KeyService,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Get all keys for the tenant.\n     * @param token\n     * @returns\n     */\n    @Get()\n    getKeys(@Token() token: TokenPayload): Promise {\n        const tenantId = token.sub;\n        return this.cryptoService.getCerts(tenantId);\n    }\n\n    /**\n     * Add a new key to the key service.\n     * @param token\n     * @param body\n     * @returns\n     */\n    @Post()\n    async addKey(\n        @Token() token: TokenPayload,\n        @Body() body: KeyImportDto,\n    ): Promise {\n        const tenantId = token.sub;\n        const id = await this.cryptoService.importKey(tenantId, body);\n        return { id };\n    }\n\n    /**\n     * Updates an existing key in the key service.\n     * @param token\n     * @param id\n     * @param body\n     */\n    @Put(\":id\")\n    async updateKey(\n        @Token() token: TokenPayload,\n        @Param(\"id\") id: string,\n        @Body() body: UpdateKeyDto,\n    ): Promise {\n        const tenantId = token.sub;\n        await this.cryptoService.updateCert(tenantId, id, body);\n    }\n\n    /**\n     * Delete a key from the key service.\n     * @param token\n     * @param id\n     */\n    @Delete(\":id\")\n    deleteKey(@Token() token: TokenPayload, @Param(\"id\") id: string) {\n        return this.cryptoService.deleteKey(token.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/KeyEntity.html":{"url":"entities/KeyEntity.html","title":"entity - KeyEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  KeyEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/keys.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                key\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                usage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:16\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JWK\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:34\n                        \n                    \n\n            \n                \n                    The key material.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:28\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:22\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        usage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KeyUsage\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'sign'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:40\n                        \n                    \n\n            \n                \n                    The usage type of the key.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { JWK } from \"jose\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\n/**\n * Key usage types.\n */\nexport type KeyUsage = \"sign\" | \"encrypt\";\n\n@Entity()\nexport class KeyEntity {\n    /**\n     * Unique identifier for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The key material.\n     */\n    @Column(\"json\")\n    key: JWK;\n\n    /**\n     * The usage type of the key.\n     */\n    @Column(\"varchar\", { default: \"sign\" })\n    usage: KeyUsage;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyImportDto.html":{"url":"classes/KeyImportDto.html","title":"class - KeyImportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyImportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for importing a key.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                crt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                privateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:38\n                        \n                    \n\n            \n                \n                    Optional certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:45\n                        \n                    \n\n            \n                \n                    Description of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Key\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:31\n                        \n                    \n\n            \n                \n                    The private key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsEnum, IsOptional, IsString, ValidateNested } from \"class-validator\";\nimport { JWK } from \"jose\";\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum([\"EC\"])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @ValidateNested()\n    @Type(() => Key)\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n\n    /**\n     * Description of the key.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeyModule.html":{"url":"modules/KeyModule.html","title":"module - KeyModule","body":"\n                   \n\n\n\n\n    Modules\n    KeyModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/key.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.module.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { HttpModule, HttpService } from \"@nestjs/axios\";\nimport { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { getRepositoryToken, TypeOrmModule } from \"@nestjs/typeorm\";\nimport * as Joi from \"joi\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { DBKeyService } from \"./adapters/db-key.service\";\nimport { VaultKeyService } from \"./adapters/vault-key.service\";\nimport { CryptoImplementatationModule } from \"./crypto-implementation/crypto-implementation.module\";\nimport { CryptoImplementationService } from \"./crypto-implementation/crypto-implementation.service\";\nimport { CertEntity } from \"./entities/cert.entity\";\nimport { KeyEntity } from \"./entities/keys.entity\";\n\nexport const KEY_VALIDATION_SCHEMA = {\n    KM_TYPE: Joi.string().valid(\"db\", \"vault\").default(\"db\"),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class KeyModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: KeyModule,\n            imports: [\n                HttpModule,\n                ConfigModule,\n                CryptoImplementatationModule,\n                TypeOrmModule.forFeature([CertEntity, KeyEntity]),\n            ],\n            providers: [\n                {\n                    provide: \"KeyService\",\n                    useFactory: (\n                        configService: ConfigService,\n                        httpService: HttpService,\n                        cryptoService: CryptoImplementationService,\n                        certRepository: Repository,\n                        keyRepository: Repository,\n                    ) => {\n                        const kmType = configService.get(\n                            \"KM_TYPE\",\n                        );\n                        if (kmType === \"vault\") {\n                            return new VaultKeyService(\n                                httpService,\n                                configService,\n                                cryptoService,\n                                certRepository,\n                            );\n                        }\n\n                        return new DBKeyService(\n                            configService,\n                            cryptoService,\n                            certRepository,\n                            keyRepository,\n                        );\n                    },\n                    inject: [\n                        ConfigService,\n                        HttpService,\n                        CryptoImplementationService,\n                        getRepositoryToken(CertEntity),\n                        getRepositoryToken(KeyEntity),\n                    ],\n                },\n            ],\n            exports: [\"KeyService\"],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyObj.html":{"url":"classes/KeyObj.html","title":"class - KeyObj","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyObj\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-object.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a key entity with its unique identifier, public key, and certificate.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crt\n                            \n                            \n                                id\n                            \n                            \n                                publicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:19\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:11\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publicKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EC_Public\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:15\n                        \n                    \n\n            \n                \n                    Public key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\n\n/**\n * Represents a key entity with its unique identifier, public key, and certificate.\n */\n\nexport class KeyObj {\n    /**\n     * Unique identifier for the key.\n     */\n    id: string;\n    /**\n     * Public key in JWK format.\n     */\n    publicKey: EC_Public;\n    /**\n     * Certificate in PEM format.\n     */\n    crt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyResponseDto.html":{"url":"classes/KeyResponseDto.html","title":"class - KeyResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EC_Public[]\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\n\nexport class KeyResponseDto {\n    keys: EC_Public[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyService.html":{"url":"classes/KeyService.html","title":"class - KeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface for a key service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                create\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                            \n                                    Abstract\n                                getKid\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                import\n                            \n                            \n                                    Abstract\n                                init\n                            \n                            \n                                    Abstract\n                                signer\n                            \n                            \n                                    Abstract\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, certRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/key.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKid(tenantId: string, type?: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Initialize the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the initialized key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Get the callback for the signer function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JoseHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JoseHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConflictException } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Signer } from \"@sd-jwt/types\";\nimport { JoseHeaderParameters, JWK, JWTPayload } from \"jose\";\nimport { Repository } from \"typeorm\";\nimport { KeyImportDto } from \"./dto/key-import.dto\";\nimport { CertEntity, CertificateType } from \"./entities/cert.entity\";\n\n/**\n * Generic interface for a key service\n */\nexport abstract class KeyService {\n    constructor(\n        protected configService: ConfigService,\n        protected certRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the key service\n     * @param tenantId\n     * @returns key id of the initialized key.\n     */\n    abstract init(tenantId): Promise;\n\n    /**\n     * Creates a new keypair\n     * @param tenantId\n     * @return key id of the generated key.\n     */\n    abstract create(tenantId): Promise;\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     */\n    abstract import(tenantId: string, body: KeyImportDto): Promise;\n\n    /**\n     * Get the callback for the signer function\n     * @param tenantId\n     */\n    abstract signer(tenantId: string, keyId?: string): Promise;\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    abstract getKid(tenantId: string, type?: CertificateType): Promise;\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    abstract getPublicKey(\n        type: \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: \"pem\" | \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    //TODO: this can be handled via the signer callback\n    abstract signJWT(\n        payload: JWTPayload,\n        header: JoseHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    /**\n     * Get the certificate for the given key id.\n     * @param tenantId\n     * @param keyId\n     * @returns\n     */\n    protected getCertificate(tenantId: string, keyId: string): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                id: keyId,\n            })\n            .then(\n                (cert) => cert.crt,\n                () => {\n                    throw new ConflictException(\"Certificate not found\");\n                },\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalFileStorage.html":{"url":"classes/LocalFileStorage.html","title":"class - LocalFileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalFileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/adapters/local.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            FileStorage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                exists\n                            \n                            \n                                getStream\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseDir: string)\n                    \n                \n                        \n                            \n                                Defined in src/storage/adapters/local.storage.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        baseDir\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    createReadStream,\n    createWriteStream,\n    existsSync,\n    mkdirSync,\n    rmSync,\n    statSync,\n} from \"fs\";\nimport { dirname, join } from \"path\";\nimport { Readable } from \"stream\";\nimport { FileStorage, PutOptions, StoredObject } from \"../storage.types\";\n\nexport class LocalFileStorage implements FileStorage {\n    constructor(private baseDir: string) {}\n\n    async put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise {\n        const fullPath = join(this.baseDir, key);\n        mkdirSync(dirname(fullPath), { recursive: true });\n\n        await new Promise((resolve, reject) => {\n            const write = createWriteStream(fullPath);\n            const src = body instanceof Readable ? body : Readable.from(body);\n            src.pipe(write)\n                .on(\"finish\", () => resolve())\n                .on(\"error\", reject);\n        });\n\n        const st = statSync(fullPath);\n\n        return { key, size: st.size, contentType: opts?.contentType };\n    }\n\n    getStream(key: string) {\n        const fullPath = join(this.baseDir, key);\n        return Promise.resolve({ stream: createReadStream(fullPath) });\n    }\n\n    delete(key: string) {\n        return Promise.resolve(rmSync(join(this.baseDir, key)));\n    }\n\n    exists(key: string) {\n        return Promise.resolve(existsSync(join(this.baseDir, key)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerConfigService.html":{"url":"injectables/LoggerConfigService.html","title":"injectable - LoggerConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing logger configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConfiguration\n                            \n                            \n                                getLogFormat\n                            \n                            \n                                getLogLevel\n                            \n                            \n                                isDebugModeEnabled\n                            \n                            \n                                isHttpLoggerEnabled\n                            \n                            \n                                isSessionLoggerEnabled\n                            \n                            \n                                    Private\n                                loadConfiguration\n                            \n                            \n                                    Private\n                                parseLogLevel\n                            \n                            \n                                reloadConfiguration\n                            \n                            \n                                shouldEnableAutoLogging\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConfiguration\n                        \n                    \n                \n            \n            \n                \ngetConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         LoggerConfiguration\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogFormat\n                        \n                    \n                \n            \n            \n                \ngetLogFormat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     \"json\" | \"pretty\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogLevel\n                        \n                    \n                \n            \n            \n                \ngetLogLevel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     LogLevel\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDebugModeEnabled\n                        \n                    \n                \n            \n            \n                \nisDebugModeEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHttpLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisHttpLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSessionLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisSessionLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseLogLevel\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLogLevel(level: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     LogLevel\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reloadConfiguration\n                        \n                    \n                \n            \n            \n                \nreloadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Hot reload configuration from environment\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shouldEnableAutoLogging\n                        \n                    \n                \n            \n            \n                \nshouldEnableAutoLogging()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if automatic HTTP request/response logging should be enabled\nThis is used by the LoggerModule configuration\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoggerConfiguration\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LogLevel } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: \"json\" | \"pretty\";\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get(\"LOG_LEVEL\", \"info\"),\n            ),\n            enableSessionLogger: this.configService.get(\n                \"LOG_ENABLE_SESSION_LOGGER\",\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                \"LOG_ENABLE_HTTP_LOGGER\",\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                \"LOG_DEBUG_MODE\",\n                false,\n            ),\n            logFormat: this.configService.get(\n                \"LOG_FORMAT\",\n                \"pretty\",\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: \"verbose\",\n            debug: \"debug\",\n            log: \"log\",\n            warn: \"warn\",\n            error: \"error\",\n            fatal: \"fatal\",\n        };\n        return levels[level.toLowerCase()] || \"log\";\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): \"json\" | \"pretty\" {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerConfiguration.html":{"url":"interfaces/LoggerConfiguration.html","title":"interface - LoggerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoggerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            enableDebugMode\n                                        \n                                \n                                \n                                        \n                                            enableHttpLogger\n                                        \n                                \n                                \n                                        \n                                            enableSessionLogger\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            logFormat\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableDebugMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDebugMode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableHttpLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableHttpLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableSessionLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableSessionLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:     LogLevel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LogLevel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logFormat:     \"json\" | \"pretty\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"json\" | \"pretty\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, LogLevel } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: \"json\" | \"pretty\";\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get(\"LOG_LEVEL\", \"info\"),\n            ),\n            enableSessionLogger: this.configService.get(\n                \"LOG_ENABLE_SESSION_LOGGER\",\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                \"LOG_ENABLE_HTTP_LOGGER\",\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                \"LOG_DEBUG_MODE\",\n                false,\n            ),\n            logFormat: this.configService.get(\n                \"LOG_FORMAT\",\n                \"pretty\",\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: \"verbose\",\n            debug: \"debug\",\n            log: \"log\",\n            warn: \"warn\",\n            error: \"error\",\n            fatal: \"fatal\",\n        };\n        return levels[level.toLowerCase()] || \"log\";\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): \"json\" | \"pretty\" {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetricModule.html":{"url":"modules/MetricModule.html","title":"module - MetricModule","body":"\n                   \n\n\n\n\n    Modules\n    MetricModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/metric/metric.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PrometheusModule } from \"@willsoto/nestjs-prometheus\";\n\n@Module({\n    imports: [\n        //TODO: add a guard to protect the metrics endpoint\n        PrometheusModule.register({\n            defaultMetrics: {\n                enabled: false,\n            },\n        }),\n    ],\n})\nexport class MetricModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoneTrustPolicy.html":{"url":"classes/NoneTrustPolicy.html","title":"class - NoneTrustPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoneTrustPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                none\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['none'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:54\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationRequestDto.html":{"url":"classes/NotificationRequestDto.html","title":"class - NotificationRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/notification-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                event\n                            \n                            \n                                    \n                                notification_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEvent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['credential_accepted', 'credential_revoked'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notification_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotificationEvent } from \"@openid4vc/openid4vci\";\nimport { IsEnum, IsString } from \"class-validator\";\n\nexport class NotificationRequestDto {\n    @IsString()\n    notification_id: string;\n\n    @IsEnum([\"credential_accepted\", \"credential_revoked\"])\n    event: NotificationEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OAuthController.html":{"url":"controllers/OAuthController.html","title":"controller - OAuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/oauth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                oauth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getToken(tokenRequest: TokenRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'OAuth 2.0 Token Endpoint', description: 'Obtain an access token using client credentials grant type.'})@Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/oauth/oauth.controller.ts:22\n                        \n                    \n\n\n            \n                \n                        OAuth 2.0 token endpoint for client credentials flow.\nThis endpoint allows clients to obtain access tokens using their client credentials.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tokenRequest\n                                            \n                                                            TokenRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from \"@nestjs/common\";\nimport { ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { TokenRequestDto } from \"./dto/token-request.dto\";\nimport { TokenResponseDto } from \"./dto/token-response.dto\";\nimport { OAuthService } from \"./oauth.service\";\n\n@ApiTags(\"OAuth 2.0\")\n@Controller(\"oauth\")\nexport class OAuthController {\n    constructor(private readonly oauthService: OAuthService) {}\n\n    /**\n     * OAuth 2.0 token endpoint for client credentials flow.\n     * This endpoint allows clients to obtain access tokens using their client credentials.\n     */\n    @ApiOperation({\n        summary: \"OAuth 2.0 Token Endpoint\",\n        description:\n            \"Obtain an access token using client credentials grant type.\",\n    })\n    @Post(\"token\")\n    async getToken(\n        @Body() tokenRequest: TokenRequestDto,\n    ): Promise {\n        return await this.oauthService.handleClientCredentialsGrant(\n            tokenRequest,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OAuthModule.html":{"url":"modules/OAuthModule.html","title":"module - OAuthModule","body":"\n                   \n\n\n\n\n    Modules\n    OAuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OAuthModule\n\n\n\ncluster_OAuthModule_imports\n\n\n\ncluster_OAuthModule_exports\n\n\n\ncluster_OAuthModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOAuthModule\n\nOAuthModule\n\nOAuthModule -->\n\nCryptoModule->OAuthModule\n\n\n\n\n\nOAuthService \n\nOAuthService \n\nOAuthService  -->\n\nOAuthModule->OAuthService \n\n\n\n\n\nOAuthService\n\nOAuthService\n\nOAuthModule -->\n\nOAuthService->OAuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/oauth/oauth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OAuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OAuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OAuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { OAuthController } from \"./oauth.controller\";\nimport { OAuthService } from \"./oauth.service\";\n\nexport const OAUTH_VALIDATION_SCHEMA = {\n    OAUTH_CLIENT_ID: Joi.string().optional(),\n    OAUTH_CLIENT_SECRET: Joi.string().optional(),\n};\n\n@Module({\n    imports: [CryptoModule],\n    controllers: [OAuthController],\n    providers: [OAuthService],\n    exports: [OAuthService],\n})\nexport class OAuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OAuthService.html":{"url":"injectables/OAuthService.html","title":"injectable - OAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/oauth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                clients\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addClient\n                            \n                            \n                                    Private\n                                    Async\n                                generateAccessToken\n                            \n                            \n                                    Async\n                                handleClientCredentialsGrant\n                            \n                            \n                                hasClient\n                            \n                            \n                                    Private\n                                initializeClients\n                            \n                            \n                                removeClient\n                            \n                            \n                                    Private\n                                validateClientCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/oauth/oauth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addClient\n                        \n                    \n                \n            \n            \n                \naddClient(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAccessToken(clientId: string, scope?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                scope\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleClientCredentialsGrant\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleClientCredentialsGrant(request: TokenRequestDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            TokenRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasClient\n                        \n                    \n                \n            \n            \n                \nhasClient(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeClient\n                        \n                    \n                \n            \n            \n                \nremoveClient(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validateClientCredentials\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateClientCredentials(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/oauth/oauth.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { TokenRequestDto } from \"./dto/token-request.dto\";\nimport { TokenResponseDto } from \"./dto/token-response.dto\";\n\n@Injectable()\nexport class OAuthService {\n    // In a real implementation, you'd store these securely in a database\n    private readonly clients = new Map();\n\n    constructor(\n        private readonly configService: ConfigService,\n        private readonly cryptoService: CryptoService,\n    ) {\n        // Initialize with some default clients - you can move this to configuration\n        this.initializeClients();\n    }\n\n    private initializeClients() {\n        // Add default client from environment variables if available\n        const defaultClientId =\n            this.configService.get(\"OAUTH_CLIENT_ID\");\n        const defaultClientSecret = this.configService.get(\n            \"OAUTH_CLIENT_SECRET\",\n        );\n\n        if (defaultClientId && defaultClientSecret) {\n            this.clients.set(defaultClientId, defaultClientSecret);\n        }\n    }\n\n    async handleClientCredentialsGrant(\n        request: TokenRequestDto,\n    ): Promise {\n        // Validate client credentials\n        if (\n            !this.validateClientCredentials(\n                request.client_id,\n                request.client_secret,\n            )\n        ) {\n            throw new UnauthorizedException(\"Invalid client credentials\");\n        }\n\n        // Generate access token\n        const accessToken = await this.generateAccessToken(\n            request.client_id,\n            request.scope,\n        );\n\n        return {\n            access_token: accessToken,\n            token_type: \"Bearer\",\n            expires_in: 3600, // 1 hour\n            scope: request.scope || \"openid\",\n        };\n    }\n\n    private validateClientCredentials(\n        clientId: string,\n        clientSecret: string,\n    ): boolean {\n        const storedSecret = this.clients.get(clientId);\n        return storedSecret === clientSecret;\n    }\n\n    private async generateAccessToken(\n        clientId: string,\n        scope?: string,\n    ): Promise {\n        const payload = {\n            sub: clientId,\n            aud: this.configService.getOrThrow(\"PUBLIC_URL\"),\n            iss: this.configService.getOrThrow(\"PUBLIC_URL\"),\n            scope: scope || \"openid\",\n            exp: Math.floor(Date.now() / 1000) + 3600, // 1 hour from now\n            iat: Math.floor(Date.now() / 1000),\n        };\n\n        // For now, we'll use the root tenant for signing\n        // In a real implementation, you might want to use a dedicated OAuth signing key\n        const tenantId = \"root\";\n        return await this.cryptoService.signJwt(\n            payload,\n            { alg: \"RS256\" },\n            tenantId,\n        );\n    }\n\n    // Methods to manage clients dynamically\n    addClient(clientId: string, clientSecret: string): void {\n        this.clients.set(clientId, clientSecret);\n    }\n\n    removeClient(clientId: string): void {\n        this.clients.delete(clientId);\n    }\n\n    hasClient(clientId: string): boolean {\n        return this.clients.has(clientId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Oauth2AuthorizationServerResponse.html":{"url":"classes/Oauth2AuthorizationServerResponse.html","title":"class - Oauth2AuthorizationServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Oauth2AuthorizationServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/oauth-authorization-server-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response from an OAuth2 authorization server.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_challenge_endpoint\n                            \n                            \n                                authorization_endpoint\n                            \n                            \n                                code_challenge_methods_supported\n                            \n                            \n                                dpop_signing_alg_values_supported\n                            \n                            \n                                issuer\n                            \n                            \n                                jwks_uri\n                            \n                            \n                                pushed_authorization_request_endpoint\n                            \n                            \n                                require_pushed_authorization_requests\n                            \n                            \n                                token_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_challenge_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:37\n                        \n                    \n\n            \n                \n                    The URL of the authorization challenge endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's authorization endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code_challenge_methods_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    List of supported algorithms to sign the challenge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dpop_signing_alg_values_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    List of supported algorithms for DPoP signing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwks_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:17\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushed_authorization_request_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The URL of the pushed authorization request endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require_pushed_authorization_requests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:29\n                        \n                    \n\n            \n                \n                    Indicates whether the server requires pushed authorization requests.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's token endpoint.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Oauth2AuthorizationServerResponse {\n    issuer: string;\n    /**\n     * The URL of the OAuth2 authorization server's token endpoint.\n     */\n    token_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's authorization endpoint.\n     */\n    authorization_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n     */\n    jwks_uri: string;\n    /**\n     * List of supported algorithms to sign the challenge\n     */\n    code_challenge_methods_supported: string[];\n    /**\n     * List of supported algorithms for DPoP signing.\n     */\n    dpop_signing_alg_values_supported: string[];\n    /**\n     * Indicates whether the server requires pushed authorization requests.\n     */\n    require_pushed_authorization_requests: boolean;\n    /**\n     * The URL of the pushed authorization request endpoint.\n     */\n    pushed_authorization_request_endpoint: string;\n    /**\n     * The URL of the authorization challenge endpoint.\n     */\n    authorization_challenge_endpoint: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferRequestDto.html":{"url":"classes/OfferRequestDto.html","title":"class - OfferRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationIds\n                            \n                            \n                                    \n                                issuanceId\n                            \n                            \n                                    \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                session\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record>\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'object', description: 'Override the default values for the credential claims.', properties: undefined, examples: undefined})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:58\n                        \n                    \n\n            \n                \n                    Override the default values for the credential claims.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:66\n                        \n                    \n\n            \n                \n                    Webhook configuration for claims\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:38\n                        \n                    \n\n            \n                \n                    Overrides the default values for the credential ids.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:31\n                        \n                    \n\n            \n                \n                    Issuance config id to reference the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({examples: undefined, description: 'The type of response expected for the offer request.'})@IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:73\n                        \n                    \n\n            \n                \n                    Pre defined session id\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUUID,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { ResponseType } from \"../../../verifier/oid4vp/dto/presentation-request.dto\";\n\nexport class OfferRequestDto {\n    @ApiProperty({\n        examples: [\n            {\n                value: \"qrcode\",\n            },\n        ],\n        description: \"The type of response expected for the offer request.\",\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Issuance config id to reference the issuance configuration.\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * Overrides the default values for the credential ids.\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    /**\n     * Override the default values for the credential claims.\n     */\n    @ApiProperty({\n        type: \"object\",\n        description: \"Override the default values for the credential claims.\",\n        properties: {},\n        examples: [\n            {\n                pid: {\n                    given_name: \"ERIKA\",\n                    family_name: \"MUSTERMANN\",\n                },\n            },\n        ],\n    })\n    @IsObject()\n    @IsOptional()\n    claims?: Record>;\n\n    /**\n     * Webhook configuration for claims\n     */\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @IsOptional()\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Pre defined session id\n     */\n    @IsUUID()\n    @IsOptional()\n    session?: string;\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferResponse.html":{"url":"classes/OfferResponse.html","title":"class - OfferResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                session\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:77\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUUID,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { ResponseType } from \"../../../verifier/oid4vp/dto/presentation-request.dto\";\n\nexport class OfferRequestDto {\n    @ApiProperty({\n        examples: [\n            {\n                value: \"qrcode\",\n            },\n        ],\n        description: \"The type of response expected for the offer request.\",\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Issuance config id to reference the issuance configuration.\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * Overrides the default values for the credential ids.\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    /**\n     * Override the default values for the credential claims.\n     */\n    @ApiProperty({\n        type: \"object\",\n        description: \"Override the default values for the credential claims.\",\n        properties: {},\n        examples: [\n            {\n                pid: {\n                    given_name: \"ERIKA\",\n                    family_name: \"MUSTERMANN\",\n                },\n            },\n        ],\n    })\n    @IsObject()\n    @IsOptional()\n    claims?: Record>;\n\n    /**\n     * Webhook configuration for claims\n     */\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @IsOptional()\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Pre defined session id\n     */\n    @IsUUID()\n    @IsOptional()\n    session?: string;\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vciController.html":{"url":"controllers/Oid4vciController.html","title":"controller - Oid4vciController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vciController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/vci\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credential\n                            \n                            \n                                    \n                                    \n                                nonce\n                            \n                            \n                                    \n                                    \n                                notifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credential\n                        \n                    \n                \n            \n            \n                \n                        \n                    credential(req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('credential')@SessionLogger('session', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:29\n                        \n                    \n\n\n            \n                \n                        Endpoint to issue credentials\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nonce\n                        \n                    \n                \n            \n            \n                \n                        \n                    nonce(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('nonce')@SessionLogger('nonce', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        notifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    notifications(body: NotificationRequestDto, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notification')@SessionLogger('notification_id', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Notification endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseInterceptors } from \"@nestjs/common\";\nimport { ApiExcludeController, ApiParam } from \"@nestjs/swagger\";\nimport type { CredentialResponse } from \"@openid4vc/openid4vci\";\nimport type { Request } from \"express\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionLogger } from \"../../utils/logger//session-logger.decorator\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { NotificationRequestDto } from \"./dto/notification-request.dto\";\n\n/**\n * Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n */\n@ApiParam({ name: \"session\", required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":session/vci\")\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vciController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Endpoint to issue credentials\n     * @param req\n     * @returns\n     */\n    @Post(\"credential\")\n    @SessionLogger(\"session\", \"OID4VCI\")\n    credential(\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        return this.oid4vciService.getCredential(req, session);\n    }\n\n    /**\n     * Notification endpoint\n     * @param body\n     * @returns\n     */\n    @Post(\"notification\")\n    @SessionLogger(\"notification_id\", \"OID4VCI\")\n    notifications(\n        @Body() body: NotificationRequestDto,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vciService.handleNotification(req, body, session);\n    }\n\n    @Post(\"nonce\")\n    @SessionLogger(\"nonce\", \"OID4VCI\")\n    nonce(@SessionEntity() session: Session) {\n        return this.oid4vciService.nonceRequest(session);\n    }\n\n    //TODO: this endpoint may be relevant for the wallet attestation.\n    /* @Get('session')\n  session() {\n    console.log('Session requested');\n    //TODO store session and created at\n    const session = randomUUID();\n    return {\n      session_id: session,\n    };\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vpController.html":{"url":"controllers/Oid4vpController.html","title":"controller - Oid4vpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/oid4vp\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getRequestWithSession\n                            \n                            \n                                    \n                                    \n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getRequestWithSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRequestWithSession(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Returns the authorization request for a given requestId and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Endpoint to receive the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseInterceptors } from \"@nestjs/common\";\nimport { ApiExcludeController, ApiParam } from \"@nestjs/swagger\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionLogger } from \"../../utils/logger/session-logger.decorator\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { AuthorizationResponse } from \"./dto/authorization-response.dto\";\nimport { Oid4vpService } from \"./oid4vp.service\";\n\n/**\n * Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n */\n@Controller(\":session/oid4vp\")\n@UseInterceptors(SessionLoggerInterceptor)\n@ApiParam({ name: \"session\", required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\nexport class Oid4vpController {\n    /**\n     * Constructor for the Oid4vpController.\n     * @param oid4vpService - Instance of Oid4vpService for handling OID4VP operations.\n     */\n    constructor(private readonly oid4vpService: Oid4vpService) {}\n\n    /**\n     * Returns the authorization request for a given requestId and session.\n     * @param requestId\n     * @param session\n     * @returns\n     */\n    @Get()\n    @SessionLogger(\"session\", \"OID4VP\")\n    getRequestWithSession(@SessionEntity() session: Session) {\n        return this.oid4vpService.createAuthorizationRequest(session);\n    }\n\n    /**\n     * Endpoint to receive the response from the wallet.\n     * @param body\n     * @returns\n     */\n    @Post()\n    @SessionLogger(\"session\", \"OID4VP\")\n    getResponse(\n        @Body() body: AuthorizationResponse,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vpService.getResponse(body, session);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Oid4vpModule.html":{"url":"modules/Oid4vpModule.html","title":"module - Oid4vpModule","body":"\n                   \n\n\n\n\n    Modules\n    Oid4vpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Oid4vpService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Oid4vpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { forwardRef, Module } from \"@nestjs/common\";\nimport { CryptoModule } from \"../../crypto/crypto.module\";\nimport { RegistrarModule } from \"../../registrar/registrar.module\";\nimport { SessionModule } from \"../../session/session.module\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { SessionLoggerService } from \"../../utils/logger/session-logger.service\";\nimport { WebhookService } from \"../../utils/webhook/webhook.service\";\nimport { PresentationsModule } from \"../presentations/presentations.module\";\nimport { Oid4vpController } from \"./oid4vp.controller\";\nimport { Oid4vpService } from \"./oid4vp.service\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        forwardRef(() => RegistrarModule),\n        forwardRef(() => PresentationsModule),\n        SessionModule,\n        HttpModule,\n    ],\n    controllers: [Oid4vpController],\n    providers: [\n        Oid4vpService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        WebhookService,\n    ],\n    exports: [Oid4vpService],\n})\nexport class Oid4vpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vpService.html":{"url":"injectables/Oid4vpService.html","title":"injectable - Oid4vpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuthorizationRequest\n                            \n                            \n                                    Async\n                                createRequest\n                            \n                            \n                                    Async\n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, encryptionService: EncryptionService, configService: ConfigService, registrarService: RegistrarService, presentationsService: PresentationsService, sessionService: SessionService, sessionLogger: SessionLoggerService, webhookService: WebhookService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/oid4vp/oid4vp.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webhookService\n                                                  \n                                                        \n                                                                        WebhookService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAuthorizationRequest(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Creates an authorization request for the OID4VP flow.\nThis method generates a JWT that includes the necessary parameters for the authorization request.\nIt initializes the session logging context and logs the start of the flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRequest(requestId: string, values: PresentationRequestOptions, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:205\n                        \n                    \n\n\n            \n                \n                        Creates a request for the OID4VP flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            PresentationRequestOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:264\n                        \n                    \n\n\n            \n                \n                        Processes the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { v4 } from \"uuid\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { EncryptionService } from \"../../crypto/encryption/encryption.service\";\nimport { OfferResponse } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport { RegistrarService } from \"../../registrar/registrar.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../../utils/logger/session-logger.service\";\nimport { SessionLogContext } from \"../../utils/logger/session-logger-context\";\nimport { WebhookService } from \"../../utils/webhook/webhook.service\";\nimport { AuthResponse } from \"../presentations/dto/auth-response.dto\";\nimport { PresentationsService } from \"../presentations/presentations.service\";\nimport { AuthorizationResponse } from \"./dto/authorization-response.dto\";\nimport { PresentationRequestOptions } from \"./dto/presentation-request-options.dto\";\n\n@Injectable()\nexport class Oid4vpService {\n    constructor(\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private configService: ConfigService,\n        private registrarService: RegistrarService,\n        private presentationsService: PresentationsService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n        private webhookService: WebhookService,\n    ) {}\n\n    /**\n     * Creates an authorization request for the OID4VP flow.\n     * This method generates a JWT that includes the necessary parameters for the authorization request.\n     * It initializes the session logging context and logs the start of the flow.\n     * @param requestId\n     * @param tenantId\n     * @param auth_session\n     * @returns\n     */\n    async createAuthorizationRequest(session: Session): Promise {\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId: session.tenantId,\n            flowType: \"OID4VP\",\n            stage: \"authorization_request\",\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            requestId: session.requestId,\n            action: \"create_authorization_request\",\n        });\n\n        try {\n            const host = this.configService.getOrThrow(\"PUBLIC_URL\");\n            const tenantHost = `${host}/${session.tenantId}`;\n\n            const presentationConfig =\n                await this.presentationsService.getPresentationConfig(\n                    session.requestId!,\n                    session.tenantId,\n                );\n            let regCert: string | undefined = undefined;\n\n            const dcql_query = JSON.parse(\n                JSON.stringify(presentationConfig.dcql_query).replace(\n                    //g,\n                    tenantHost,\n                ),\n            );\n\n            if (this.registrarService.isEnabled()) {\n                const registrationCert = JSON.parse(\n                    JSON.stringify(presentationConfig.registrationCert).replace(\n                        //g,\n                        tenantHost,\n                    ),\n                );\n                regCert =\n                    await this.registrarService.addRegistrationCertificate(\n                        registrationCert,\n                        dcql_query,\n                        session.requestId!,\n                        session.tenantId,\n                    );\n            }\n            const nonce = randomUUID();\n            await this.sessionService.add(session.id, {\n                vp_nonce: nonce,\n            });\n\n            this.sessionLogger.logAuthorizationRequest(logContext, {\n                requestId: session.requestId,\n                nonce,\n                regCert,\n                dcqlQueryCount: Array.isArray(dcql_query)\n                    ? dcql_query.length\n                    : 1,\n            });\n\n            const hostname = new URL(\n                this.configService.getOrThrow(\"PUBLIC_URL\"),\n            ).hostname;\n\n            const lifeTime = 60 * 60;\n\n            const request = {\n                payload: {\n                    response_type: \"vp_token\",\n                    client_id: \"x509_san_dns:\" + hostname,\n                    response_uri: `${host}/${session.id}/oid4vp`,\n                    response_mode: \"direct_post.jwt\",\n                    nonce,\n                    dcql_query,\n                    client_metadata: {\n                        jwks: {\n                            keys: [\n                                await this.encryptionService.getEncryptionPublicKey(\n                                    session.tenantId,\n                                ),\n                            ],\n                        },\n                        vp_formats: {\n                            mso_mdoc: {\n                                alg: [\"ES256\"],\n                            },\n                            \"dc+sd-jwt\": {\n                                \"kb-jwt_alg_values\": [\"ES256\"],\n                                \"sd-jwt_alg_values\": [\"ES256\"],\n                            },\n                        },\n                        authorization_encrypted_response_alg: \"ECDH-ES\",\n                        authorization_encrypted_response_enc: \"A128GCM\",\n                        client_name:\n                            this.configService.getOrThrow(\"RP_NAME\"),\n                        response_types_supported: [\"vp_token\"],\n                    },\n                    state: session.id,\n                    aud: host,\n                    exp: Math.floor(Date.now() / 1000) + lifeTime,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    verifier_attestations: regCert\n                        ? [\n                              {\n                                  format: \"jwt\",\n                                  data: regCert,\n                              },\n                          ]\n                        : undefined,\n                },\n                header: {\n                    typ: \"oauth-authz-req+jwt\",\n                },\n            };\n\n            const accessCert = await this.cryptoService.getCertChain(\n                \"access\",\n                session.tenantId,\n            );\n\n            const header = {\n                ...request.header,\n                alg: \"ES256\",\n                x5c: accessCert,\n            };\n\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"access\",\n            );\n            const signedJwt = await this.cryptoService.signJwt(\n                header,\n                request.payload,\n                session.tenantId,\n                keyId,\n            );\n\n            this.sessionLogger.logSession(\n                logContext,\n                \"Authorization request created successfully\",\n                {\n                    signedJwtLength: signedJwt.length,\n                    certificateChainLength: accessCert?.length || 0,\n                },\n            );\n\n            return signedJwt;\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                requestId: session.requestId,\n                action: \"create_authorization_request\",\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Creates a request for the OID4VP flow.\n     * @param requestId\n     * @param values\n     * @param tenantId\n     * @returns\n     */\n    async createRequest(\n        requestId: string,\n        values: PresentationRequestOptions,\n        tenantId: string,\n    ): Promise {\n        const presentationConfig =\n            await this.presentationsService.getPresentationConfig(\n                requestId,\n                tenantId,\n            );\n        const fresh = values.session === undefined;\n        values.session = values.session || v4();\n\n        const hostname = new URL(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n        ).hostname;\n        const params = {\n            client_id: `x509_san_dns:${hostname}`,\n            request_uri: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${values.session}/oid4vp`,\n        };\n        const queryString = Object.entries(params)\n            .map(\n                ([key, value]) =>\n                    `${encodeURIComponent(key)}=${encodeURIComponent(value)}`,\n            )\n            .join(\"&\");\n\n        const expiresAt = new Date(\n            Date.now() + (presentationConfig.lifeTime ?? 300) * 1000,\n        );\n\n        if (fresh) {\n            await this.sessionService.create({\n                id: values.session,\n                claimsWebhook: values.webhook ?? presentationConfig.webhook,\n                tenantId,\n                requestId,\n                requestUrl: `openid4vp://?${queryString}`,\n                expiresAt,\n            });\n        } else {\n            await this.sessionService.add(values.session, {\n                claimsWebhook: values.webhook ?? presentationConfig.webhook,\n                requestUrl: `openid4vp://?${queryString}`,\n                expiresAt,\n            });\n        }\n\n        return {\n            uri: queryString,\n            session: values.session,\n        };\n    }\n\n    /**\n     * Processes the response from the wallet.\n     * @param body\n     * @param tenantId\n     */\n    async getResponse(body: AuthorizationResponse, session: Session) {\n        const res = await this.encryptionService.decryptJwe(\n            body.response,\n            session.tenantId,\n        );\n        if (!res.state) {\n            throw new ConflictException(\"No state found in the response\");\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: res.state,\n            tenantId: session.tenantId,\n            flowType: \"OID4VP\",\n            stage: \"response_processing\",\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            action: \"process_presentation_response\",\n            hasWebhook: !!session.claimsWebhook,\n        });\n\n        try {\n            //TODO: load required fields from the config\n            const credentials = await this.presentationsService.parseResponse(\n                res,\n                [],\n                session.vp_nonce as string,\n            );\n\n            this.sessionLogger.logCredentialVerification(\n                logContext,\n                !!credentials && credentials.length > 0,\n                {\n                    credentialCount: credentials?.length || 0,\n                    nonce: session.vp_nonce,\n                },\n            );\n\n            //tell the auth server the result of the session.\n            await this.sessionService.add(res.state, {\n                //TODO: not clear why it has to be any\n                credentials: credentials as any,\n            });\n            // if there a a webook URL, send the response there\n            //TODO: move to dedicated service to reuse it also in the oid4vci flow.\n            if (session.claimsWebhook) {\n                await this.webhookService.sendWebhook(\n                    session,\n                    logContext,\n                    credentials,\n                    false,\n                );\n            }\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialCount: credentials?.length || 0,\n                webhookSent: !!session.claimsWebhook,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                action: \"process_presentation_response\",\n            });\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParResponseDto.html":{"url":"classes/ParResponseDto.html","title":"class - ParResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/par-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expires_in\n                            \n                            \n                                request_uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The expiration time for the request URI in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:5\n                        \n                    \n\n            \n                \n                    The request URI for the Pushed Authorization Request.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParResponseDto {\n    /**\n     * The request URI for the Pushed Authorization Request.\n     */\n    request_uri: string;\n    /**\n     * The expiration time for the request URI in seconds.\n     */\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html","title":"interface - ParsedAccessTokenAuthorizationCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenAuthorizationCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            grantType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     AuthorizationCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AuthorizationCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session.tenantId,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html","title":"interface - ParsedAccessTokenPreAuthorizedCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenPreAuthorizedCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            grantType\n                                        \n                                \n                                \n                                        \n                                            preAuthorizedCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            txCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     PreAuthorizedCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PreAuthorizedCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        preAuthorizedCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        preAuthorizedCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        txCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        txCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session.tenantId,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PolicyCredential.html":{"url":"classes/PolicyCredential.html","title":"class - PolicyCredential","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PolicyCredential\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                attestationBased\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                credential_sets\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                credentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClaimsQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        credential_sets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialSetQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:68\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationAttachment.html":{"url":"classes/PresentationAttachment.html","title":"class - PresentationAttachment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationAttachment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Attached attestations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credential_ids\n                            \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credential_ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsNotEmpty()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PresentationConfig.html":{"url":"entities/PresentationConfig.html","title":"entity - PresentationConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PresentationConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a configuration for a Verifiable Presentation (VP) request.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                attached\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                    \n                                dcql_query\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lifeTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                registrationCert\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        attached\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationAttachment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:199\n                        \n                    \n\n            \n                \n                    Attestation that should be attached\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:183\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        dcql_query\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DCQL\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:161\n                        \n                    \n\n            \n                \n                    The DCQL query to be used for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:145\n                        \n                    \n\n            \n                \n                    Description of the presentation configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:124\n                        \n                    \n\n            \n                \n                    Unique identifier for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lifeTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Column('int', {default: 300})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:153\n                        \n                    \n\n            \n                \n                    Lifetime how long the presentation request is valid after creation, in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        registrationCert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:169\n                        \n                    \n\n            \n                \n                    The registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:137\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:131\n                        \n                    \n\n            \n                \n                    The tenant ID for which the VP request is made.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:189\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@Validate(WebhookConfig)@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:177\n                        \n                    \n\n            \n                \n                    Optional webhook URL to receive the response.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsNotEmpty()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationConfigCreateDto.html":{"url":"classes/PresentationConfigCreateDto.html","title":"class - PresentationConfigCreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationConfigCreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/presentation-config-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(PresentationConfig, [\n    \"tenantId\",\n    \"createdAt\",\n    \"updatedAt\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { PresentationConfig } from \"../entities/presentation-config.entity\";\n\nexport class PresentationConfigCreateDto extends OmitType(PresentationConfig, [\n    \"tenantId\",\n    \"createdAt\",\n    \"updatedAt\",\n] as const) {\n    // Define the properties for the presentation config create DTO\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuanceConfig.html":{"url":"classes/PresentationDuringIssuanceConfig.html","title":"class - PresentationDuringIssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'presentationDuringIssuance'\nUsed for OID4VP flow where a credential presentation request is sent\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:41\n                        \n                    \n\n            \n                \n                    Link to the presentation configuration that is relevant for the issuance process\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PresentationManagementController.html":{"url":"controllers/PresentationManagementController.html","title":"controller - PresentationManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PresentationManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                presentation-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storePresentationConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Returns the presentation request configurations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:137\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation request configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: PresentationRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@UseGuards(JwtAuthGuard)@ApiSecurity('oauth2')@ApiBody({type: PresentationRequest, examples: undefined})@Post('request')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Create an presentation request that can be sent to the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PresentationRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storePresentationConfig(config: PresentationConfigCreateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:121\n                        \n                    \n\n\n            \n                \n                        Store a presentation request configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            PresentationConfigCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n    UseGuards,\n} from \"@nestjs/common\";\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { Response } from \"express\";\nimport * as QRCode from \"qrcode\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { OfferResponse } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport {\n    PresentationRequest,\n    ResponseType,\n} from \"../oid4vp/dto/presentation-request.dto\";\nimport { Oid4vpService } from \"../oid4vp/oid4vp.service\";\nimport { PresentationConfigCreateDto } from \"./dto/presentation-config-create.dto\";\nimport { PresentationsService } from \"./presentations.service\";\n\n@ApiTags(\"Presentation management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\", [\"api:read\", \"api:write\"])\n@Controller(\"presentation-management\")\nexport class PresentationManagementController {\n    constructor(\n        private readonly presentationsService: PresentationsService,\n        private readonly oid4vpService: Oid4vpService,\n    ) {}\n\n    /**\n     * Create an presentation request that can be sent to the user\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: \"JSON response\",\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            \"application/json\": { schema: { type: \"object\" } },\n            \"image/png\": { schema: { type: \"string\", format: \"binary\" } },\n        },\n    })\n    @ApiProduces(\"application/json\", \"image/png\")\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity(\"oauth2\")\n    @ApiBody({\n        type: PresentationRequest,\n        examples: {\n            qrcode: {\n                summary: \"QR-Code Example\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    requestId: \"pid\",\n                },\n            },\n            uri: {\n                summary: \"URI\",\n                value: {\n                    response_type: ResponseType.URI,\n                    requestId: \"pid\",\n                },\n            },\n        },\n    })\n    @Post(\"request\")\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: PresentationRequest,\n        @Token() user: TokenPayload,\n    ) {\n        const values = await this.oid4vpService.createRequest(\n            body.requestId,\n            {\n                webhook: body.webhook,\n            },\n            user.sub,\n        );\n        values.uri = `openid4vp://?${values.uri}`;\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader(\"Content-Type\", \"image/png\");\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the presentation request configurations.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.presentationsService.getPresentationConfigs(user.sub);\n    }\n\n    /**\n     * Store a presentation request configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storePresentationConfig(\n        @Body() config: PresentationConfigCreateDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.presentationsService.storePresentationConfig(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes a presentation request configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteConfiguration(@Param(\"id\") id: string, @Token() user: TokenPayload) {\n        return this.presentationsService.deletePresentationConfig(id, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationRequest.html":{"url":"classes/PresentationRequest.html","title":"class - PresentationRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the presentation request containing the response type and request ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                requestId\n                            \n                            \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:32\n                        \n                    \n\n            \n                \n                    Identifier of the presentation configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    The type of response expected from the presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:40\n                        \n                    \n\n            \n                \n                    Webhook configuration to receive the response.\nIf not provided, the configured webhook from the configuration will be used.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Enum for the type of response expected from the presentation request.\n */\nexport enum ResponseType {\n    /**\n     * Response type indicating a QR code will be returned.\n     */\n    QRCode = \"qrcode\",\n    /**\n     * Response type indicating a URI will be returned.\n     */\n    URI = \"uri\",\n}\n\n/**\n * DTO for the presentation request containing the response type and request ID.\n */\nexport class PresentationRequest {\n    /**\n     * The type of response expected from the presentation request.\n     */\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Identifier of the presentation configuration\n     */\n    @IsString()\n    requestId: string;\n\n    /**\n     * Webhook configuration to receive the response.\n     * If not provided, the configured webhook from the configuration will be used.\n     */\n    @IsObject()\n    @IsOptional()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentationRequestOptions.html":{"url":"interfaces/PresentationRequestOptions.html","title":"interface - PresentationRequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentationRequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PresentationRequestOptions DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            session\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhook\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional session identifier for tracking the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhook\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhook:         WebhookConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WebhookConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional webhook configuration to receive the response.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * PresentationRequestOptions DTO\n */\nexport interface PresentationRequestOptions {\n    /**\n     * Optional session identifier for tracking the request.\n     */\n    session?: string;\n    /**\n     * Optional webhook configuration to receive the response.\n     */\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PresentationsModule.html":{"url":"modules/PresentationsModule.html","title":"module - PresentationsModule","body":"\n                   \n\n\n\n\n    Modules\n    PresentationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/presentations/presentations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PresentationManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ResolverModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { forwardRef, Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Oid4vpModule } from \"../oid4vp/oid4vp.module\";\nimport { ResolverModule } from \"../resolver/resolver.module\";\nimport { PresentationConfig } from \"./entities/presentation-config.entity\";\nimport { PresentationManagementController } from \"./presentations.controller\";\nimport { PresentationsService } from \"./presentations.service\";\n\n@Module({\n    imports: [\n        ResolverModule,\n        HttpModule,\n        forwardRef(() => Oid4vpModule),\n        TypeOrmModule.forFeature([PresentationConfig]),\n    ],\n    controllers: [PresentationManagementController],\n    providers: [PresentationsService],\n    exports: [PresentationsService],\n})\nexport class PresentationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PresentationsService.html":{"url":"injectables/PresentationsService.html","title":"injectable - PresentationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PresentationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kbVerifier\n                            \n                            \n                                sdjwtInstance\n                            \n                            \n                                    Private\n                                statusListFetcher\n                            \n                            \n                                verifier\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deletePresentationConfig\n                            \n                            \n                                getPresentationConfig\n                            \n                            \n                                getPresentationConfigs\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                parseResponse\n                            \n                            \n                                storePresentationConfig\n                            \n                            \n                                    Public\n                                storeRCID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, resolverService: ResolverService, vpRequestRepository: Repository, configService: ConfigService, logger: PinoLogger)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/presentations/presentations.service.ts:33\n                            \n                        \n\n                \n                    \n                            Constructor for the PresentationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of HttpService for making HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        resolverService\n                                                  \n                                                        \n                                                                        ResolverService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ResolverService for resolving DID documents.\n\n\n                                                        \n                                                \n                                                \n                                                        vpRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for managing VP request configurations.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deletePresentationConfig\n                        \n                    \n                \n            \n            \n                \ndeletePresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:170\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to delete.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the deletion is complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Retrieves a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the requested PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfigs\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfigs(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:141\n                        \n                    \n\n\n            \n                \n                        Retrieves all presentation configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve configurations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of PresentationConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseResponse\n                        \n                    \n                \n            \n            \n                \nparseResponse(res: AuthResponse, requiredFields: string[], keyBindingNonce: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:269\n                        \n                    \n\n\n            \n                \n                        Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            AuthResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requiredFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyBindingNonce\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \nstorePresentationConfig(tenantId: string, vprequest: PresentationConfigCreateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:154\n                        \n                    \n\n\n            \n                \n                        Stores a new presentation configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the configuration.\n\n\n                                            \n                                        \n                                        \n                                                vprequest\n                                            \n                                                            PresentationConfigCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe PresentationConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        storeRCID\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRCID(registrationCertId: string, id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:201\n                        \n                    \n\n\n            \n                \n                        Stores the new registration certificate.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registrationCertId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the registration certificate to store.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to update.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the registration certificate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kbVerifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KbVerifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:252\n                        \n                    \n\n            \n                \n                    Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                            \n                                            \n                                                    signature\n                                            \n                                            \n                                                    payload\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sdjwtInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SDJwtVcInstance\n\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:33\n                        \n                    \n\n            \n                \n                    Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusListFetcher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:237\n                        \n                    \n\n            \n                \n                    Fetch the status list from the uri.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    uri\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Verifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:214\n                        \n                    \n\n            \n                \n                    Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                                    \n                                                            \nThe data part of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                            \n                                                    signature\n                                                    \n                                                            \nThe signature of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport {\n    ConflictException,\n    Injectable,\n    OnApplicationBootstrap,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { digest, ES256 } from \"@sd-jwt/crypto-nodejs\";\nimport { SDJwtVcInstance } from \"@sd-jwt/sd-jwt-vc\";\nimport { KbVerifier, Verifier } from \"@sd-jwt/types\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { importJWK, JWK, JWTPayload, jwtVerify } from \"jose\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { ResolverService } from \"../resolver/resolver.service\";\nimport { AuthResponse } from \"./dto/auth-response.dto\";\nimport { PresentationConfigCreateDto } from \"./dto/presentation-config-create.dto\";\nimport { PresentationConfig } from \"./entities/presentation-config.entity\";\n\n/**\n * Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n */\n@Injectable()\nexport class PresentationsService implements OnApplicationBootstrap {\n    /**\n     * Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n     */\n    sdjwtInstance: SDJwtVcInstance;\n\n    /**\n     * Constructor for the PresentationsService.\n     * @param httpService - Instance of HttpService for making HTTP requests.\n     * @param resolverService - Instance of ResolverService for resolving DID documents.\n     * @param vpRequestRepository - Repository for managing VP request configurations.\n     */\n    constructor(\n        private httpService: HttpService,\n        private resolverService: ResolverService,\n        @InjectRepository(PresentationConfig)\n        private vpRequestRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n    ) {}\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    async onApplicationBootstrap() {\n        this.sdjwtInstance = new SDJwtVcInstance({\n            hasher: digest,\n            verifier: this.verifier.bind(this),\n            kbVerifier: this.kbVerifier.bind(this),\n            statusListFetcher: this.statusListFetcher.bind(this),\n        });\n        await this.import();\n    }\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"presentation\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    const id = file.replace(\".json\", \"\");\n                    payload.id = id;\n                    const presentationExists = await this.getPresentationConfig(\n                        id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (presentationExists && !force) {\n                        continue; // Skip if config already exists and force is not set\n                    }\n\n                    // Validate the payload against PresentationConfig\n                    const config = plainToClass(\n                        PresentationConfigCreateDto,\n                        payload,\n                    );\n                    const validationErrors = await validate(config, {\n                        whitelist: true,\n                        forbidUnknownValues: false, // avoid false positives on plain objects\n                        forbidNonWhitelisted: false,\n                        stopAtFirstError: false,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for presentation config ${file} in tenant ${tenant.name}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n\n                    await this.storePresentationConfig(tenant.name, config);\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} presentation configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Retrieves all presentation configurations for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve configurations.\n     * @returns A promise that resolves to an array of PresentationConfig entities.\n     */\n    getPresentationConfigs(tenantId: string): Promise {\n        return this.vpRequestRepository.find({\n            where: { tenantId },\n            order: { createdAt: \"DESC\" },\n        });\n    }\n\n    /**\n     * Stores a new presentation configuration.\n     * @param tenantId - The ID of the tenant for which to store the configuration.\n     * @param vprequest - The PresentationConfig entity to store.\n     * @returns A promise that resolves to the stored PresentationConfig entity.\n     */\n    storePresentationConfig(\n        tenantId: string,\n        vprequest: PresentationConfigCreateDto,\n    ) {\n        return this.vpRequestRepository.save({\n            ...vprequest,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to delete.\n     * @param tenantId - The ID of the tenant for which to delete the configuration.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    deletePresentationConfig(id: string, tenantId: string) {\n        return this.vpRequestRepository.delete({ id, tenantId });\n    }\n\n    /**\n     * Retrieves a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to retrieve.\n     * @param tenantId - The ID of the tenant for which to retrieve the configuration.\n     * @returns A promise that resolves to the requested PresentationConfig entity.\n     */\n    getPresentationConfig(\n        id: string,\n        tenantId: string,\n    ): Promise {\n        return this.vpRequestRepository\n            .findOneByOrFail({\n                id,\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(`Request ID ${id} not found`);\n            });\n    }\n\n    /**\n     * Stores the new registration certificate.\n     * @param registrationCertId - The ID of the registration certificate to store.\n     * @param id - The ID of the presentation configuration to update.\n     * @param tenantId - The ID of the tenant for which to store the registration certificate.\n     * @returns\n     */\n    public storeRCID(registrationCertId: string, id: string, tenantId: string) {\n        return this.vpRequestRepository.update(\n            { id, tenantId },\n            { registrationCert: { id: registrationCertId } },\n        );\n    }\n\n    /**\n     * Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n     * @param data - The data part of the SD-JWT-VC.\n     * @param signature - The signature of the SD-JWT-VC.\n     * @returns\n     */\n    verifier: Verifier = async (data, signature) => {\n        const instance = new SDJwtVcInstance({\n            hasher: digest,\n        });\n        const decodedVC = await instance.decode(`${data}.${signature}`);\n        const payload = decodedVC.jwt?.payload as JWTPayload;\n        const header = decodedVC.jwt?.header as JWK;\n        const publicKey = await this.resolverService.resolvePublicKey(\n            payload,\n            header,\n        );\n        const verify = await ES256.getVerifier(publicKey);\n        return verify(data, signature).catch((err) => {\n            console.log(err);\n            return false;\n        });\n    };\n\n    /**\n     * Fetch the status list from the uri.\n     * @param uri\n     * @returns\n     */\n    private statusListFetcher: (uri: string) => Promise = (\n        uri: string,\n    ) => {\n        return firstValueFrom(this.httpService.get(uri)).then(\n            (res) => res.data,\n        );\n    };\n\n    /**\n     * Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n     * @param data\n     * @param signature\n     * @param payload\n     * @returns\n     */\n    private kbVerifier: KbVerifier = async (data, signature, payload) => {\n        if (!payload.cnf) {\n            throw new Error(\"No cnf found in the payload\");\n        }\n        const key = await importJWK(payload.cnf.jwk as JWK, \"ES256\");\n        return jwtVerify(`${data}.${signature}`, key).then(\n            () => true,\n            () => false,\n        );\n    };\n\n    /**\n     * Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n     * @param res\n     * @param requiredFields\n     * @returns\n     */\n    parseResponse(\n        res: AuthResponse,\n        requiredFields: string[],\n        keyBindingNonce: string,\n    ) {\n        const attestations = Object.keys(res.vp_token);\n        const att = attestations.map((att) =>\n            this.sdjwtInstance\n                .verify(res.vp_token[att], {\n                    requiredClaimKeys: requiredFields,\n                    keyBindingNonce,\n                })\n                .then(\n                    (result) => {\n                        return {\n                            id: att,\n                            values: {\n                                ...result.payload,\n                                cnf: undefined, // remove cnf for simplicity\n                                status: undefined, // remove status for simplicity\n                            },\n                        };\n                    },\n                    /* (err) => {\n                        throw new Error\n                        //(console.log(err);\n                        return {\n                            id: att,\n                            error: err.message,\n                        };\n                    }, */\n                ),\n        );\n        return Promise.all(att);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RegistrarEntity.html":{"url":"entities/RegistrarEntity.html","title":"entity - RegistrarEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RegistrarEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/entities/registrar.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessCertificateId\n                            \n                            \n                                    \n                                relyingPartyId\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessCertificateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        relyingPartyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:13\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../auth/entitites/tenant.entity\";\n\n@Entity()\nexport class RegistrarEntity {\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"varchar\")\n    relyingPartyId: string;\n\n    @Column(\"varchar\")\n    accessCertificateId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegistrarModule.html":{"url":"modules/RegistrarModule.html","title":"module - RegistrarModule","body":"\n                   \n\n\n\n\n    Modules\n    RegistrarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/registrar/registrar.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            RegistrarModule is responsible for managing the registrar service.\nIt provides the RegistrarService and imports necessary modules.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { PresentationsModule } from \"../verifier/presentations/presentations.module\";\nimport { RegistrarEntity } from \"./entities/registrar.entity\";\nimport { RegistrarService } from \"./registrar.service\";\n\n/**\n * Validation schema for the registrar module.\n * Defines the required environment variables and their types.\n */\nexport const REGISTRAR_VALIDATION_SCHEMA = {\n    REGISTRAR_URL: Joi.string(),\n    REGISTRAR_OIDC_URL: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n};\n\n/**\n * RegistrarModule is responsible for managing the registrar service.\n * It provides the RegistrarService and imports necessary modules.\n */\n@Module({\n    imports: [\n        CryptoModule,\n        PresentationsModule,\n        TypeOrmModule.forFeature([RegistrarEntity]),\n    ],\n    providers: [RegistrarService],\n    exports: [RegistrarService],\n})\nexport class RegistrarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegistrarService.html":{"url":"injectables/RegistrarService.html","title":"injectable - RegistrarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegistrarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarService is responsible for managing the interaction with the registrar,\nincluding adding relying parties, access certificates, and registration certificates.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessToken\n                            \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                oauth2Client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addAccessCertificate\n                            \n                            \n                                    Async\n                                addRegistrationCertificate\n                            \n                            \n                                addRp\n                            \n                            \n                                    Private\n                                getExistingRp\n                            \n                            \n                                isEnabled\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, presentationsService: PresentationsService, registrarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/registrar/registrar.service.ts:40\n                            \n                        \n\n                \n                    \n                            Constructor for the RegistrarService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ConfigService for accessing configuration values.\n\n\n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of CryptoService for cryptographic operations.\n\n\n                                                        \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of PresentationsService for handling presentations.\n\n\n                                                        \n                                                \n                                                \n                                                        registrarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addAccessCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAccessCertificate(tenantId: string, relyingPartyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:198\n                        \n                    \n\n\n            \n                \n                        Add a new access certificate to the registrar.\nThis is only needed once, when the access certificate is created.\nIf the access certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                relyingPartyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addRegistrationCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRegistrationCertificate(req: RegistrationCertificateRequest, dcql_query: any, requestId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:240\n                        \n                    \n\n\n            \n                \n                        Add a new registration certificate to the registrar.\nThis is only needed once, when the registration certificate is created.\nIf the registration certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RegistrationCertificateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dcql_query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRp\n                        \n                    \n                \n            \n            \n                \naddRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:158\n                        \n                    \n\n\n            \n                \n                        Adds a new relying party to the registrar.\nThis is only needed once, when the relying party is created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getExistingRp\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExistingRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:181\n                        \n                    \n\n\n            \n                \n                        Stores the existing relying party ID based on the name.\nThis is used when the relying party already exists in the registrar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the relying party.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The ID of the existing relying party.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnabled\n                        \n                    \n                \n            \n            \n                \nisEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Checks if the registrar service is enabled based on the configuration.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the registrar service is enabled, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:100\n                        \n                    \n\n\n            \n                \n                        This function is called when the application starts.\nIt will refresh the access token for the registrar.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Initializes the OAuth2 client and registrar client with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:133\n                        \n                    \n\n\n            \n                \n                        Deletes all registrar entries for a specific tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:111\n                        \n                    \n\n\n            \n                \n                        This function is called when a tenant is initialized.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshAccessToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:141\n                        \n                    \n\n\n            \n                \n                        Refreshes the access token for the registrar using client credentials.\nThis method is called periodically to ensure the access token is valid.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:40\n                        \n                    \n\n            \n                \n                    Access token for authenticating requests to the registrar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:36\n                        \n                    \n\n            \n                \n                    Client for interacting with the registrar API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauth2Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:32\n                        \n                    \n\n            \n                \n                    OAuth2 client for interacting with the OIDC provider.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { OAuth2Client } from \"@badgateway/oauth2-client\";\nimport {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { RegistrationCertificateRequest } from \"../verifier/presentations/dto/vp-request.dto\";\nimport { PresentationsService } from \"../verifier/presentations/presentations.service\";\nimport { RegistrarEntity } from \"./entities/registrar.entity\";\nimport {\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from \"./generated\";\nimport { client } from \"./generated/client.gen\";\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n        @InjectRepository(RegistrarEntity)\n        private registrarRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow(\"REGISTRAR_OIDC_URL\");\n        const clientId = this.configService.getOrThrow(\n            \"REGISTRAR_OIDC_CLIENT_ID\",\n        );\n        const clientSecret = this.configService.getOrThrow(\n            \"REGISTRAR_OIDC_CLIENT_SECRET\",\n        );\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow(\"REGISTRAR_URL\"),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get(\"REGISTRAR_URL\");\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get(\"REGISTRAR_URL\")) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        //TODO: pass name by call\n        const name = this.configService.getOrThrow(\"RP_NAME\");\n        const relyingPartyId = await this.addRp(name);\n        const accessCertificateId = await this.addAccessCertificate(\n            tenantId,\n            relyingPartyId,\n        );\n        await this.registrarRepository.save({\n            tenantId,\n            relyingPartyId,\n            accessCertificateId,\n        });\n    }\n\n    /**\n     * Deletes all registrar entries for a specific tenant.\n     * @param tenantId\n     */\n    async onTenantDelete(tenantId: string) {\n        await this.registrarRepository.delete({ tenantId });\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(name: string): Promise {\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            let rpId: string;\n            if (response.error) {\n                rpId = await this.getExistingRp(name);\n            } else {\n                rpId = response.data![\"id\"];\n            }\n            return rpId;\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private getExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id!;\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        tenantId: string,\n        relyingPartyId: string,\n    ): Promise {\n        const keyId = await this.cryptoService.keyService.getKid(tenantId);\n        const host = this.configService\n            .getOrThrow(\"PUBLIC_URL\")\n            .replace(\"https://\", \"\");\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    \"pem\",\n                    tenantId,\n                    keyId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: relyingPartyId,\n            },\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\"Error adding access certificate:\", res.error);\n                throw new Error(\"Error adding access certificate\");\n            }\n            //store the cert\n            await this.cryptoService.storeAccessCertificate(\n                res.data![\"crt\"],\n                tenantId,\n                keyId,\n            );\n            return res.data![\"id\"];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const entry = await this.registrarRepository.findOneByOrFail({\n            tenantId,\n        });\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp: entry.relyingPartyId,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp: entry.relyingPartyId,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    \"Error adding registration certificate:\",\n                    res.error,\n                );\n                throw new Error(\"Error adding registration certificate\");\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data![\"id\"],\n                requestId,\n                tenantId,\n            );\n            return res.data![\"jwt\"];\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationCertificateRequest.html":{"url":"classes/RegistrationCertificateRequest.html","title":"class - RegistrationCertificateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationCertificateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/vp-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrationCertificateRequest DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RegistrationCertificateCreation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:18\n                        \n                    \n\n            \n                \n                    The body of the registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:13\n                        \n                    \n\n            \n                \n                    Identifier of the registration certificate that got issued.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsOptional, IsString } from \"class-validator\";\nimport { RegistrationCertificateCreation } from \"../../../registrar/generated\";\n\n/**\n * RegistrationCertificateRequest DTO\n */\nexport class RegistrationCertificateRequest {\n    /**\n     * Identifier of the registration certificate that got issued.\n     */\n    @IsOptional()\n    @IsString()\n    id?: string;\n    /**\n     * The body of the registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    body: RegistrationCertificateCreation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResolverModule.html":{"url":"modules/ResolverModule.html","title":"module - ResolverModule","body":"\n                   \n\n\n\n\n    Modules\n    ResolverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_ResolverModule_exports\n\n\n\n\nResolverService \n\nResolverService \n\n\n\nResolverModule\n\nResolverModule\n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/resolver/resolver.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ResolverService } from \"./resolver.service\";\n\n@Module({\n    imports: [HttpModule],\n    providers: [ResolverService],\n    exports: [ResolverService],\n})\nexport class ResolverModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolverService.html":{"url":"injectables/ResolverService.html","title":"injectable - ResolverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/resolver.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for resolving public keys from JWT payloads and headers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolvePublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/resolver/resolver.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resolvePublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolvePublicKey(payload: JWTPayload, header: JWK)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/resolver/resolver.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWK\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { X509Certificate } from \"node:crypto\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { JWK, JWTPayload } from \"jose\";\nimport { firstValueFrom } from \"rxjs\";\nimport { IssuerMetadata } from \"./dto/issuer-metadata.dto\";\n\n/**\n * Service for resolving public keys from JWT payloads and headers.\n */\n@Injectable()\nexport class ResolverService {\n    constructor(private httpService: HttpService) {}\n\n    /**\n     * Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n     * @param payload\n     * @param header\n     * @returns\n     */\n    async resolvePublicKey(payload: JWTPayload, header: JWK): Promise {\n        if (!payload.iss) {\n            throw new Error(\"Issuer not found\");\n        }\n\n        if (header.x5c) {\n            //TODO: validate the certificate and the chain of trust!\n            const certs = header.x5c.map(\n                (cert) => new X509Certificate(Buffer.from(cert, \"base64\")),\n            );\n            const cert = certs[0];\n            if (!cert.subjectAltName?.includes(new URL(payload.iss).hostname)) {\n                throw new Error(\"Subject and issuer do not match\");\n            }\n            return cert.publicKey.export({ format: \"jwk\" }) as JWK;\n        }\n        //checl if the key is in the header as jwk\n        if (header[\"jwk\"]) {\n            return header[\"jwk\"] as JWK;\n        }\n\n        const response = await firstValueFrom(\n            this.httpService.get(\n                `${payload.iss}/.well-known/jwt-vc-issuer`,\n            ),\n        ).then(\n            (r) => r.data,\n            () => {\n                throw new ConflictException(\"Issuer not reachable\");\n            },\n        );\n        const key = response.jwks.keys.find((key) => key.kid === header.kid);\n        if (!key) {\n            throw new Error(\"Key not found\");\n        }\n        return key;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RootOfTrustPolicy.html":{"url":"classes/RootOfTrustPolicy.html","title":"class - RootOfTrustPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RootOfTrustPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                rootOfTrust\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['rootOfTrust'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/S3FileStorage.html":{"url":"classes/S3FileStorage.html","title":"class - S3FileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  S3FileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/adapters/s3.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            FileStorage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                getSignedUrl\n                            \n                            \n                                    Async\n                                getStream\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(s3: S3Client, bucket: string, publicBaseUrl?: string)\n                    \n                \n                        \n                            \n                                Defined in src/storage/adapters/s3.storage.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        s3\n                                                  \n                                                        \n                                                                    S3Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bucket\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publicBaseUrl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSignedUrl\n                        \n                    \n                \n            \n            \n                \ngetSignedUrl(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStream\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    DeleteObjectCommand,\n    GetObjectCommand,\n    HeadObjectCommand,\n    PutObjectCommand,\n    S3Client,\n} from \"@aws-sdk/client-s3\";\nimport { getSignedUrl as sign } from \"@aws-sdk/s3-request-presigner\";\nimport { Readable } from \"stream\";\nimport { FileStorage, PutOptions, StoredObject } from \"../storage.types\";\n\nexport class S3FileStorage implements FileStorage {\n    constructor(\n        private s3: S3Client,\n        private bucket: string,\n        private publicBaseUrl?: string, // e.g. CloudFront URL (optional)\n    ) {}\n\n    async put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise {\n        await this.s3.send(\n            new PutObjectCommand({\n                Bucket: this.bucket,\n                Key: key,\n                Body: body,\n                ContentType: opts?.contentType,\n                Metadata: opts?.metadata,\n                ACL: opts?.acl === \"public\" ? \"public-read\" : undefined,\n                ChecksumSHA256: opts?.checksum, // optional if you computed it\n            }),\n        );\n\n        const head = await this.s3.send(\n            new HeadObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n        const url =\n            opts?.acl === \"public\"\n                ? this.publicBaseUrl\n                    ? `${this.publicBaseUrl.replace(/\\/+$/, \"\")}/${encodeURI(key)}`\n                    : `https://${this.bucket}.s3.amazonaws.com/${encodeURI(key)}`\n                : undefined;\n\n        return {\n            key,\n            etag: head.ETag,\n            size: head.ContentLength,\n            url,\n            contentType: head.ContentType || opts?.contentType,\n        };\n    }\n\n    async getStream(key: string) {\n        const obj = await this.s3.send(\n            new GetObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n        const stream = obj.Body as Readable;\n        return {\n            stream,\n            contentType: obj.ContentType,\n            size: obj.ContentLength,\n        };\n    }\n\n    async delete(key: string) {\n        await this.s3.send(\n            new DeleteObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n    }\n\n    async exists(key: string) {\n        try {\n            await this.s3.send(\n                new HeadObjectCommand({ Bucket: this.bucket, Key: key }),\n            );\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    getSignedUrl(key: string) {\n        return Promise.resolve(\n            sign(\n                this.s3,\n                new GetObjectCommand({ Bucket: this.bucket, Key: key }),\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SchemaResponse.html":{"url":"classes/SchemaResponse.html","title":"class - SchemaResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/schema-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Schema to validate other json objects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                $schema\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                properties\n                            \n                            \n                                    \n                                    Optional\n                                required\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        $schema\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Equals('https://json-schema.org/draft/2020-12/schema')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Equals('object')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Equals,\n    IsArray,\n    IsObject,\n    IsOptional,\n    IsString,\n} from \"class-validator\";\n\n/**\n * Schema to validate other json objects.\n */\nexport class SchemaResponse {\n    @Equals(\"https://json-schema.org/draft/2020-12/schema\")\n    $schema: \"https://json-schema.org/draft/2020-12/schema\";\n    @Equals(\"object\")\n    type: \"object\";\n    @IsObject()\n    properties: Record;\n    @IsArray()\n    required?: string[];\n    @IsOptional()\n    @IsString()\n    title?: string;\n    @IsOptional()\n    @IsString()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user session in the application.\nIt includes various properties such as credentials, authorization code,\nrequest URI, authorization queries, and more.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                auth_queries\n                            \n                            \n                                    \n                                    Optional\n                                authorization_code\n                            \n                            \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                credentialPayload\n                            \n                            \n                                    \n                                    Optional\n                                credentials\n                            \n                            \n                                    \n                                    Optional\n                                expiresAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                issuanceId\n                            \n                            \n                                    \n                                    Optional\n                                nonce\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                    Optional\n                                offer\n                            \n                            \n                                    \n                                    Optional\n                                offerUrl\n                            \n                            \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    Optional\n                                requestId\n                            \n                            \n                                    \n                                    Optional\n                                requestUrl\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                vp_nonce\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        auth_queries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthorizeQueries\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:94\n                        \n                    \n\n            \n                \n                    Authorization queries associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        authorization_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:84\n                        \n                    \n\n            \n                \n                    Authorization code for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:143\n                        \n                    \n\n            \n                \n                    Webhook configuration to send result and may receive further information.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:111\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentialPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OfferRequestDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:138\n                        \n                    \n\n            \n                \n                    Credential payload containing the offer request details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VerificationResult[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:79\n                        \n                    \n\n            \n                \n                    Verified credentials from the verification process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('date', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:58\n                        \n                    \n\n            \n                \n                    Unique identifier for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:105\n                        \n                    \n\n            \n                \n                    Nonce used for the OID4VCI flow.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:153\n                        \n                    \n\n            \n                \n                    Notifications associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:148\n                        \n                    \n\n            \n                \n                    Webhook configuration to send the result of the notification response.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CredentialOfferObject\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:126\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offerUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:132\n                        \n                    \n\n            \n                \n                    Offer URL for the credential offer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:89\n                        \n                    \n\n            \n                \n                    Request URI from the authorization request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:67\n                        \n                    \n\n            \n                \n                    The ID of the presentation configuration associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:73\n                        \n                    \n\n            \n                \n                    The URL of the presentation auth request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SessionStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SessionStatus})@Column('varchar', {nullable: true, default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:171\n                        \n                    \n\n            \n                \n                    Status of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:164\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:158\n                        \n                    \n\n            \n                \n                    Tenant ID for multi-tenancy support.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:117\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        vp_nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:99\n                        \n                    \n\n            \n                \n                    Noncce from the Verifiable Presentation request.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n    CredentialOfferObject,\n    NotificationEvent,\n} from \"@openid4vc/openid4vci\";\nimport { VerificationResult } from \"@sd-jwt/sd-jwt-vc\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    PrimaryColumn,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../auth/entitites/tenant.entity\";\nimport { AuthorizeQueries } from \"../../issuer/authorize/dto/authorize-request.dto\";\nimport { OfferRequestDto } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\n\nexport enum SessionStatus {\n    Active = \"active\",\n    Fetched = \"fetched\",\n    Completed = \"completed\",\n    Expired = \"expired\",\n    Failed = \"failed\",\n}\n\n/**\n * Represents a session entity for managing user sessions in the application.\n */\nexport type Notification = {\n    /**\n     * Unique identifier for the notification.\n     */\n    id: string;\n    /**\n     * The type of notification.\n     */\n    event?: NotificationEvent;\n\n    /**\n     * The credential ID associated with the notification.\n     */\n    credentialConfigurationId: string;\n};\n\n/**\n * Entity representing a user session in the application.\n * It includes various properties such as credentials, authorization code,\n * request URI, authorization queries, and more.\n */\n@Entity()\nexport class Session {\n    /**\n     * Unique identifier for the session.\n     */\n    @PrimaryColumn(\"uuid\")\n    id: string;\n\n    @Column(\"varchar\", { nullable: true })\n    issuanceId?: string;\n\n    /**\n     * The ID of the presentation configuration associated with the session.\n     */\n    @Column(\"varchar\", { nullable: true })\n    requestId?: string;\n\n    /**\n     * The URL of the presentation auth request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    requestUrl?: string;\n\n    /**\n     * Verified credentials from the verification process.\n     */\n    @Column(\"json\", { nullable: true })\n    credentials?: VerificationResult[];\n    /**\n     * Authorization code for the session.\n     */\n    @Column(\"varchar\", { nullable: true })\n    authorization_code?: string;\n    /**\n     * Request URI from the authorization request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    request_uri?: string;\n    /**\n     * Authorization queries associated with the session.\n     */\n    @Column(\"json\", { nullable: true })\n    auth_queries?: AuthorizeQueries;\n    /**\n     * Noncce from the Verifiable Presentation request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    vp_nonce?: string;\n\n    /**\n     * Nonce used for the OID4VCI flow.\n     */\n    @Column(\"varchar\", { nullable: true })\n    nonce?: string;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    @Column(\"date\", { nullable: true })\n    expiresAt?: Date;\n\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column(\"json\", { nullable: true })\n    offer?: CredentialOfferObject;\n\n    /**\n     * Offer URL for the credential offer.\n     */\n    @Column(\"varchar\", { nullable: true })\n    offerUrl?: string;\n\n    /**\n     * Credential payload containing the offer request details.\n     */\n    @Column(\"json\", { nullable: true })\n    credentialPayload?: OfferRequestDto;\n    /**\n     * Webhook configuration to send result and may receive further information.\n     */\n    @Column(\"json\", { nullable: true })\n    claimsWebhook?: WebhookConfig;\n    /**\n     * Webhook configuration to send the result of the notification response.\n     */\n    @Column(\"json\", { nullable: true })\n    notifyWebhook?: WebhookConfig;\n    /**\n     * Notifications associated with the session.\n     */\n    @Column(\"json\", { default: JSON.stringify([]) })\n    notifications: Notification[];\n    /**\n     * Tenant ID for multi-tenancy support.\n     */\n    @Column(\"varchar\")\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Status of the session.\n     */\n    @ApiProperty({ enum: SessionStatus })\n    @Column(\"varchar\", { nullable: true, default: \"active\" })\n    status: SessionStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteSession\n                            \n                            \n                                    \n                                getAllSessions\n                            \n                            \n                                    \n                                getSession\n                            \n                            \n                                    \n                                revokeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSession(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Deletes a session by its ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllSessions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:33\n                        \n                    \n\n\n            \n                \n                        Retrieves all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:42\n                        \n                    \n\n\n            \n                \n                        Retrieves the session information for a given session ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Session\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revokeAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAll(value: StatusUpdateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('revoke')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:66\n                        \n                    \n\n\n            \n                \n                        Update the status of the credentials of a specific session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../auth/token.decorator\";\nimport { StatusUpdateDto } from \"../issuer/status-list/dto/status-update.dto\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionPipe } from \"./session.pipe\";\nimport { SessionService } from \"./session.service\";\n\n@ApiTags(\"Session management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"session\")\nexport class SessionController {\n    constructor(\n        private readonly sessionService: SessionService,\n        private readonly statusListService: StatusListService,\n    ) {}\n\n    /**\n     * Retrieves all sessions.\n     */\n    @Get()\n    getAllSessions(): Promise {\n        return this.sessionService.getAll();\n    }\n\n    /**\n     * Retrieves the session information for a given session ID.\n     * @param id - The identifier of the session.\n     */\n    @Get(\":id\")\n    getSession(@Param(\"id\", SessionPipe) session: Session): Session {\n        return session;\n    }\n\n    /**\n     * Deletes a session by its ID\n     * @param id\n     * @param user\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteSession(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ): Promise {\n        return this.sessionService.delete(id, user.sub);\n    }\n\n    /**\n     * Update the status of the credentials of a specific session.\n     * @param value\n     * @returns\n     */\n    @Post(\"revoke\")\n    revokeAll(@Body() value: StatusUpdateDto, @Token() user: TokenPayload) {\n        return this.statusListService.updateStatus(value, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionLogContext.html":{"url":"interfaces/SessionLogContext.html","title":"interface - SessionLogContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionLogContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Context for session logging, including session ID, tenant ID, flow type, and optional stage.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flowType\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stage\n                                        \n                                \n                                \n                                        \n                                            tenantId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger-context.ts:21\n                            \n                        \n                \n                    \n                        Additional context information for the session.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flowType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flowType:     \"OID4VCI\" | \"OID4VP\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"OID4VCI\" | \"OID4VP\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of flow being logged (e.g., OID4VCI, OID4VP).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for the session.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional stage of the flow, useful for tracking progress.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenantId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenantId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier for the tenant associated with the session.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SessionLogContext {\n    /**\n     * Unique identifier for the session.\n     */\n    sessionId: string;\n    /**\n     * Identifier for the tenant associated with the session.\n     */\n    tenantId: string;\n    /**\n     * Type of flow being logged (e.g., OID4VCI, OID4VP).\n     */\n    flowType: \"OID4VCI\" | \"OID4VP\";\n    /**\n     * Optional stage of the flow, useful for tracking progress.\n     */\n    stage?: string;\n    /**\n     * Additional context information for the session.\n     */\n    [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerInterceptor.html":{"url":"injectables/SessionLoggerInterceptor.html","title":"injectable - SessionLoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for logging session-related requests and responses.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerInterceptor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReflector instance for accessing metadata.\n\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:44\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and logs session-related information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCall handler to proceed with the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:136\n                        \n                    \n\n\n            \n                \n                        Sanitizes the request body to remove sensitive information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request body to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Sanitized body.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Reflector } from \"@nestjs/core\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { Observable } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { SESSION_LOGGER_KEY } from \"./session-logger.decorator\";\n\n/**\n * Interceptor for logging session-related requests and responses.\n */\n@Injectable()\nexport class SessionLoggerInterceptor implements NestInterceptor {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerInterceptor.\n     * @param reflector - Reflector instance for accessing metadata.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing configuration.\n     */\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.isEnabled = this.configService.get(\n            \"LOG_ENABLE_SESSION_LOGGER\",\n            false,\n        );\n    }\n\n    /**\n     * Intercepts the request and logs session-related information.\n     * @param context - Execution context of the request.\n     * @param next - Call handler to proceed with the request.\n     * @returns An observable that emits the response data.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const metadata = this.reflector.get(\n            SESSION_LOGGER_KEY,\n            context.getHandler(),\n        );\n\n        if (!metadata || !this.isEnabled) {\n            return next.handle();\n        }\n\n        const { sessionIdParam, flowType } = metadata;\n        const request = context.switchToHttp().getRequest();\n        const response = context.switchToHttp().getResponse();\n\n        const sessionId = request.params[sessionIdParam];\n\n        const tenantId = request.params?.tenantId;\n        const method = request.method;\n        const url = request.url;\n\n        // Set context for this logger instance\n        this.logger.setContext(\"SessionLogger\");\n\n        // Create log context\n        const logContext = {\n            sessionId,\n            tenantId,\n            flowType,\n            endpoint: `${method} ${url}`,\n        };\n\n        // Log the start of the request\n        this.logger.info(\n            {\n                ...logContext,\n                event: \"request_start\",\n                method,\n                url,\n                headers: {\n                    \"user-agent\": request.headers[\"user-agent\"],\n                    \"content-type\": request.headers[\"content-type\"],\n                },\n                body: this.sanitizeBody(request.body),\n            },\n            `[${flowType}] Starting ${method} ${url} for session ${sessionId}`,\n        );\n\n        const startTime = Date.now();\n\n        return next.handle().pipe(\n            tap((data) => {\n                const duration = Date.now() - startTime;\n                this.logger.info(\n                    {\n                        ...logContext,\n                        event: \"request_success\",\n                        method,\n                        url,\n                        statusCode: response.statusCode,\n                        duration,\n                        responseSize: JSON.stringify(data || {}).length,\n                    },\n                    `[${flowType}] Completed ${method} ${url} for session ${sessionId} in ${duration}ms`,\n                );\n            }),\n            catchError((error) => {\n                const duration = Date.now() - startTime;\n                this.logger.error(\n                    {\n                        ...logContext,\n                        event: \"request_error\",\n                        method,\n                        url,\n                        error: {\n                            name: error.name,\n                            message: error.message,\n                            stack: error.stack,\n                        },\n                        duration,\n                    },\n                    `[${flowType}] Error in ${method} ${url} for session ${sessionId}: ${error.message}`,\n                );\n                throw error;\n            }),\n        );\n    }\n\n    /**\n     * Sanitizes the request body to remove sensitive information.\n     * @param body - The request body to sanitize.\n     * @returns Sanitized body.\n     */\n    private sanitizeBody(body: any): any {\n        if (!body) return body;\n\n        // Create a copy to avoid modifying the original\n        const sanitized = { ...body };\n\n        // Remove sensitive fields\n        const sensitiveFields = [\n            \"password\",\n            \"token\",\n            \"secret\",\n            \"key\",\n            \"private_key\",\n            \"access_token\",\n            \"refresh_token\",\n        ];\n\n        sensitiveFields.forEach((field) => {\n            if (sanitized[field]) {\n                sanitized[field] = \"[REDACTED]\";\n            }\n        });\n\n        return sanitized;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerService.html":{"url":"injectables/SessionLoggerService.html","title":"injectable - SessionLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for logging session-related events and errors.\nUses PinoLogger for structured logging.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logAuthorizationRequest\n                            \n                            \n                                logCredentialIssuance\n                            \n                            \n                                logCredentialVerification\n                            \n                            \n                                logFlowComplete\n                            \n                            \n                                logFlowError\n                            \n                            \n                                logFlowStart\n                            \n                            \n                                logNotification\n                            \n                            \n                                logSession\n                            \n                            \n                                logSessionError\n                            \n                            \n                                logTokenExchange\n                            \n                            \n                                    Private\n                                shouldLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing environment configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \nlogAuthorizationRequest(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Log authorization request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialIssuance\n                        \n                    \n                \n            \n            \n                \nlogCredentialIssuance(context: SessionLogContext, credentialType: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Log credential issuance step\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialVerification\n                        \n                    \n                \n            \n            \n                \nlogCredentialVerification(context: SessionLogContext, verificationResult: boolean, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Log credential presentation verification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                verificationResult\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowComplete\n                        \n                    \n                \n            \n            \n                \nlogFlowComplete(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Log session flow completion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowError\n                        \n                    \n                \n            \n            \n                \nlogFlowError(context: SessionLogContext, error: Error, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Log session flow error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowStart\n                        \n                    \n                \n            \n            \n                \nlogFlowStart(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Log session flow start\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logNotification\n                        \n                    \n                \n            \n            \n                \nlogNotification(context: SessionLogContext, notificationEvent: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Log notification events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notificationEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSession\n                        \n                    \n                \n            \n            \n                \nlogSession(context: SessionLogContext, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Generic session log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSessionError\n                        \n                    \n                \n            \n            \n                \nlogSessionError(context: SessionLogContext, error: Error, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Generic session error log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logTokenExchange\n                        \n                    \n                \n            \n            \n                \nlogTokenExchange(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Log token exchange\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    shouldLog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { SessionLogContext } from \"./session-logger-context\";\n\n/**\n * Service for logging session-related events and errors.\n * Uses PinoLogger for structured logging.\n */\n@Injectable()\nexport class SessionLoggerService {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerService.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing environment configuration.\n     */\n    constructor(\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.logger.setContext(\"SessionLoggerService\");\n        this.isEnabled = this.configService.get(\n            \"LOG_ENABLE_SESSION_LOGGER\",\n            false,\n        );\n    }\n\n    private shouldLog(): boolean {\n        return this.isEnabled;\n    }\n\n    /**\n     * Log session flow start\n     */\n    logFlowStart(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow started for session ${context.sessionId} in tenant ${context.tenantId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"flow_start\",\n                stage: \"initialization\",\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow completion\n     */\n    logFlowComplete(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow completed for session ${context.sessionId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"flow_complete\",\n                stage: \"completion\",\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow error\n     */\n    logFlowError(\n        context: SessionLogContext,\n        error: Error,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow error for session ${context.sessionId}: ${error.message}`;\n\n        this.logger.error(\n            {\n                ...context,\n                event: \"flow_error\",\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log credential issuance step\n     */\n    logCredentialIssuance(\n        context: SessionLogContext,\n        credentialType: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"credential_issuance\",\n                stage: \"credential_creation\",\n                credentialType,\n                ...additionalData,\n            },\n            `[${context.flowType}] Issuing credential of type ${credentialType} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log credential presentation verification\n     */\n    logCredentialVerification(\n        context: SessionLogContext,\n        verificationResult: boolean,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"credential_verification\",\n                stage: \"verification\",\n                verificationResult,\n                ...additionalData,\n            },\n            `[${context.flowType}] Credential verification ${verificationResult ? \"succeeded\" : \"failed\"} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log authorization request\n     */\n    logAuthorizationRequest(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"authorization_request\",\n                stage: \"authorization\",\n                ...additionalData,\n            },\n            `[${context.flowType}] Authorization request created for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log token exchange\n     */\n    logTokenExchange(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"token_exchange\",\n                stage: \"token_exchange\",\n                ...additionalData,\n            },\n            `[${context.flowType}] Token exchange for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log notification events\n     */\n    logNotification(\n        context: SessionLogContext,\n        notificationEvent: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"notification\",\n                stage: \"notification\",\n                notificationEvent,\n                ...additionalData,\n            },\n            `[${context.flowType}] Notification ${notificationEvent} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Generic session log method\n     */\n    logSession(\n        context: SessionLogContext,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}`,\n        );\n    }\n\n    /**\n     * Generic session error log method\n     */\n    logSessionError(\n        context: SessionLogContext,\n        error: Error,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.error(\n            {\n                ...context,\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}: ${error.message}`,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_SessionModule_imports\n\n\n\ncluster_SessionModule_exports\n\n\n\n\nStatusListModule\n\nStatusListModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            SessionModule is responsible for managing user sessions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { makeGaugeProvider } from \"@willsoto/nestjs-prometheus\";\nimport * as Joi from \"joi\";\nimport { StatusListModule } from \"../issuer/status-list/status-list.module\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionController } from \"./session.controller\";\nimport { SessionService } from \"./session.service\";\n\n/**\n * Module for managing user sessions.\n */\nexport const SESSION_VALIDATION_SCHEMA = {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n};\n\n/**\n * SessionModule is responsible for managing user sessions.\n */\n@Module({\n    imports: [TypeOrmModule.forFeature([Session]), StatusListModule],\n    providers: [\n        SessionService,\n        makeGaugeProvider({\n            name: \"sessions\",\n            help: \"Total number of sessions by status\",\n            labelNames: [\"tenant_id\", \"session_type\", \"status\"],\n        }),\n    ],\n    exports: [SessionService],\n    controllers: [SessionController],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionPipe.html":{"url":"injectables/SessionPipe.html","title":"injectable - SessionPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.pipe.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(sessionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.pipe.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, PipeTransform } from \"@nestjs/common\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionService } from \"./session.service\";\n\n@Injectable()\nexport class SessionPipe implements PipeTransform> {\n    constructor(private readonly sessionService: SessionService) {}\n\n    async transform(sessionId: string): Promise {\n        if (!sessionId) {\n            throw new NotFoundException(\n                \"Session ID not found in request parameters\",\n            );\n        }\n\n        const session = await this.sessionService.get(sessionId);\n        if (!session) {\n            throw new NotFoundException(\n                `Session with ID ${sessionId} not found`,\n            );\n        }\n\n        // Return the entity so the controller parameter receives it\n        return session;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                getBy\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                setState\n                            \n                            \n                                tidyUpSessions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository, configService: ConfigService, schedulerRegistry: SchedulerRegistry, sessionsCounter: Gauge)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionsCounter\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(issuer_state: string, values: QueryDeepPartialEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:144\n                        \n                    \n\n\n            \n                \n                        Update an existing session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            QueryDeepPartialEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(session: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Create a new session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, sub: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:192\n                        \n                    \n\n\n            \n                \n                        Deletes a session by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Get a session by its state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:152\n                        \n                    \n\n\n            \n                \n                        Get all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBy\n                        \n                    \n                \n            \n            \n                \ngetBy(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:172\n                        \n                    \n\n\n            \n                \n                        Get a session by a specific condition.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Register the tidy up cron job on application bootstrap.\nThis will run every hour by default, but can be configured via the SESSION_TIDY_UP_INTERVAL config variable.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Deletes all sessions for a specific tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setState\n                        \n                    \n                \n            \n            \n                \n                        \n                    setState(session: Session, status: SessionStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Marks the session as successful or failed.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            SessionStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tidyUpSessions\n                        \n                    \n                \n            \n            \n                \ntidyUpSessions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:179\n                        \n                    \n\n\n            \n                \n                        Tidy up sessions that are older than 1 day.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { SchedulerRegistry } from \"@nestjs/schedule\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus/dist/injector\";\nimport { Gauge } from \"prom-client\";\nimport {\n    DeepPartial,\n    FindOptionsWhere,\n    IsNull,\n    LessThan,\n    Not,\n    Repository,\n} from \"typeorm\";\nimport { QueryDeepPartialEntity } from \"typeorm/query-builder/QueryPartialEntity\";\nimport { Session, SessionStatus } from \"./entities/session.entity\";\n\n@Injectable()\nexport class SessionService implements OnApplicationBootstrap {\n    constructor(\n        @InjectRepository(Session)\n        private sessionRepository: Repository,\n        private readonly configService: ConfigService,\n        private readonly schedulerRegistry: SchedulerRegistry,\n        @InjectMetric(\"sessions\")\n        private sessionsCounter: Gauge,\n    ) {}\n\n    /**\n     * Register the tidy up cron job on application bootstrap.\n     * This will run every hour by default, but can be configured via the `SESSION_TIDY_UP_INTERVAL` config variable.\n     * @returns\n     */\n    async onApplicationBootstrap() {\n        const callback = () => {\n            void this.tidyUpSessions();\n        };\n        const intervalTime =\n            this.configService.getOrThrow(\"SESSION_TIDY_UP_INTERVAL\") *\n            1000;\n        const interval = setInterval(callback, intervalTime);\n        this.schedulerRegistry.addInterval(\"tidyUpSessions\", interval);\n\n        //set default values for session metrics\n        const tenantId = \"root\";\n        const states: SessionStatus[] = [\n            SessionStatus.Active,\n            SessionStatus.Fetched,\n            SessionStatus.Completed,\n            SessionStatus.Expired,\n            SessionStatus.Failed,\n        ];\n        for (const state of states) {\n            const issuanceCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: Not(IsNull()),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: \"issuance\",\n                    status: state,\n                },\n                issuanceCounter,\n            );\n            const verificationCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: IsNull(),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: \"verification\",\n                    status: state,\n                },\n                verificationCounter,\n            );\n        }\n\n        return this.tidyUpSessions();\n    }\n\n    /**\n     * Deletes all sessions for a specific tenant.\n     * @param tenantId\n     */\n    async onTenantDelete(tenantId: string) {\n        await this.sessionRepository.delete({ tenantId });\n    }\n\n    /**\n     * Create a new session.\n     * @param session\n     * @returns\n     */\n    async create(session: DeepPartial) {\n        const createdSession = await this.sessionRepository.save(session);\n\n        // Count total sessions created\n        this.sessionsCounter.inc({\n            tenant_id: createdSession.tenantId,\n            session_type: createdSession.issuanceId\n                ? \"issuance\"\n                : \"verification\",\n            status: \"active\",\n        });\n\n        return createdSession;\n    }\n\n    /**\n     * Marks the session as successful or failed.\n     * @param session\n     * @param status\n     */\n    async setState(session: Session, status: SessionStatus) {\n        const sessionType = session.issuanceId ? \"issuance\" : \"verification\";\n\n        await this.sessionRepository.update({ id: session.id }, { status });\n\n        // Count completed sessions (success or failure)\n        this.sessionsCounter.inc({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status,\n        });\n\n        // Decrease active sessions count\n        this.sessionsCounter.dec({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status: \"active\",\n        });\n    }\n\n    /**\n     * Update an existing session.\n     * @param issuer_state\n     * @param values\n     * @returns\n     */\n    add(issuer_state: string, values: QueryDeepPartialEntity) {\n        return this.sessionRepository.update({ id: issuer_state }, values);\n    }\n\n    /**\n     * Get all sessions.\n     * @returns\n     */\n    getAll(): Promise {\n        return this.sessionRepository.find({\n            order: { updatedAt: \"DESC\" },\n        });\n    }\n\n    /**\n     * Get a session by its state.\n     * @param state\n     * @returns\n     */\n    get(state: string) {\n        return this.sessionRepository.findOneByOrFail({ id: state });\n    }\n\n    /**\n     * Get a session by a specific condition.\n     * @param where\n     * @returns\n     */\n    getBy(where: FindOptionsWhere) {\n        return this.sessionRepository.findOneByOrFail(where);\n    }\n\n    /**\n     * Tidy up sessions that are older than 1 day.\n     */\n    tidyUpSessions() {\n        const ttl = this.configService.getOrThrow(\"SESSION_TTL\") * 1000;\n        return this.sessionRepository.delete({\n            createdAt: LessThan(new Date(Date.now() - ttl)),\n        });\n    }\n\n    /**\n     * Deletes a session by its ID and tenant ID.\n     * @param id\n     * @param sub\n     * @returns\n     */\n    delete(id: string, sub: string): Promise {\n        return this.sessionRepository.delete({ id, tenantId: sub });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatusListController.html":{"url":"controllers/StatusListController.html","title":"controller - StatusListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatusListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/status-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status-list')@Header('Content-Type', 'application/statuslist+jwt')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.controller.ts:17\n                        \n                    \n\n\n            \n                \n                        Get the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from \"@nestjs/common\";\nimport { ApiExcludeController, ApiTags } from \"@nestjs/swagger\";\nimport { StatusListService } from \"./status-list.service\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiTags(\"Status management\")\n@Controller(\":tenantId/status-management\")\nexport class StatusListController {\n    constructor(private statusListService: StatusListService) {}\n\n    /**\n     * Get the status list\n     * @returns\n     */\n    @Get(\"status-list\")\n    @Header(\"Content-Type\", \"application/statuslist+jwt\")\n    getList(@Param(\"tenantId\") tenantId: string) {\n        return this.statusListService.getList(tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusListEntity.html":{"url":"entities/StatusListEntity.html","title":"entity - StatusListEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusListEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-list.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing the status list for a tenant.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                bits\n                            \n                            \n                                    \n                                elements\n                            \n                            \n                                    \n                                    Optional\n                                jwt\n                            \n                            \n                                    \n                                stack\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bits\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BitsPerStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:38\n                        \n                    \n\n            \n                \n                    The number of bits used for each status in the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        elements\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:26\n                        \n                    \n\n            \n                \n                    The elements of the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        jwt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:44\n                        \n                    \n\n            \n                \n                    The JSON Web Token (JWT) for the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        stack\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:32\n                        \n                    \n\n            \n                \n                    The stack of available indexes for the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:20\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:14\n                        \n                    \n\n            \n                \n                    The ID of the tenant to which the status list belongs.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { BitsPerStatus } from \"@sd-jwt/jwt-status-list\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\n/**\n * Entity representing the status list for a tenant.\n */\n@Entity()\nexport class StatusListEntity {\n    /**\n     * The ID of the tenant to which the status list belongs.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The elements of the status list.\n     */\n    @Column(\"json\")\n    elements: number[];\n\n    /**\n     * The stack of available indexes for the status list.\n     */\n    @Column(\"json\")\n    stack: number[];\n\n    /**\n     * The number of bits used for each status in the status list.\n     */\n    @Column(\"int\")\n    bits: BitsPerStatus;\n\n    /**\n     * The JSON Web Token (JWT) for the status list.\n     */\n    @Column(\"varchar\", { nullable: true })\n    jwt?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatusListModule.html":{"url":"modules/StatusListModule.html","title":"module - StatusListModule","body":"\n                   \n\n\n\n\n    Modules\n    StatusListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_imports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/status-list/status-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatusListController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoModule } from \"../../crypto/crypto.module\";\nimport { StatusListEntity } from \"./entities/status-list.entity\";\nimport { StatusMapping } from \"./entities/status-mapping.entity\";\nimport { StatusListController } from \"./status-list.controller\";\nimport { StatusListService } from \"./status-list.service\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        TypeOrmModule.forFeature([StatusMapping, StatusListEntity]),\n    ],\n    controllers: [StatusListController],\n    providers: [StatusListService],\n    exports: [StatusListService],\n})\nexport class StatusListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatusListService.html":{"url":"injectables/StatusListService.html","title":"injectable - StatusListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatusListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                createList\n                            \n                            \n                                getList\n                            \n                            \n                                onTenantDelete\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Private\n                                    Async\n                                setEntry\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, statusMappingRepository: Repository, statusListRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/status-list/status-list.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusMappingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEntry(session: Session, credentialConfigurationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Get the next free entry in the status list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                        \n                    createList(entry: StatusListEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Create a new status list and stored it in the file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            StatusListEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getList\n                        \n                    \n                \n            \n            \n                \ngetList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:114\n                        \n                    \n\n\n            \n                \n                        Get the JWT for the status list of a tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The JWT for the status list.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \nonTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Delete the status list for a specific tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Initialize the status list service by checking if the status list file exists.\nIf it does not exist, create a new status list with 10,000 entries and a stack\nof 10,000 indexes. The stack is shuffled to ensure randomness in the order of\nentries. The status list is stored in the file system as a JSON file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        setEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    setEntry(id: number, value: number, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:167\n                        \n                    \n\n\n            \n                \n                        Update the value of an entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(value: StatusUpdateDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:183\n                        \n                    \n\n\n            \n                \n                        Update the status of a session and its credential configuration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport {\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from \"@sd-jwt/jwt-status-list\";\nimport { JwtPayload } from \"@sd-jwt/types\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { StatusUpdateDto } from \"./dto/status-update.dto\";\nimport { StatusListEntity } from \"./entities/status-list.entity\";\nimport { StatusMapping } from \"./entities/status-mapping.entity\";\n\n@Injectable()\nexport class StatusListService {\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n        @InjectRepository(StatusListEntity)\n        private statusListRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    async onTenantInit(tenantId: string) {\n        const size = 10000;\n        // create an empty array with the size of 1000\n        const elements = new Array(size).fill(0).map(() => 0);\n        // create a list of 1000 indexes and shuffel them\n        const stack = new Array(size)\n            .fill(0)\n            .map((_, i) => i)\n            .sort(() => 0.5 - Math.random());\n\n        const entry = await this.statusListRepository.save({\n            tenantId,\n            elements,\n            stack,\n            bits: 1,\n        });\n\n        await this.createList(entry);\n    }\n\n    /**\n     * Delete the status list for a specific tenant.\n     * @param tenantId The ID of the tenant.\n     */\n    onTenantDelete(tenantId: string) {\n        this.statusListRepository.delete({ tenantId });\n        this.statusMappingRepository.delete({ tenantId });\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(entry: StatusListEntity) {\n        const list = new StatusList(entry.elements, entry.bits);\n        const iss = `${this.configService.getOrThrow(\"PUBLIC_URL\")}`;\n\n        const sub = join(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n            entry.tenantId,\n            \"status-management\",\n            \"status-list\",\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: \"ES256\",\n            typ: \"statuslist+jwt\",\n            x5c: await this.cryptoService.getCertChain(\n                \"signing\",\n                entry.tenantId,\n            ),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(\n            header,\n            payload,\n            entry.tenantId,\n        );\n        await this.statusListRepository.update(\n            { tenantId: entry.tenantId },\n            { jwt },\n        );\n    }\n\n    /**\n     * Get the JWT for the status list of a tenant.\n     * @param tenantId The ID of the tenant.\n     * @returns The JWT for the status list.\n     */\n    getList(tenantId: string) {\n        return this.statusListRepository\n            .findOneByOrFail({ tenantId })\n            .then((file) => file.jwt);\n    }\n\n    /**\n     * Get the next free entry in the status list.\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = await this.statusListRepository.findOneByOrFail({\n            tenantId: session.tenantId,\n        });\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error(\"Stack for status list is empty!!!\");\n        }\n        const sub = join(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n            session.tenantId,\n            \"status-management\",\n            \"status-list\",\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            tenantId: session.tenantId,\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private async setEntry(id: number, value: number, tenantId: string) {\n        const entry = await this.statusListRepository.findOneByOrFail({\n            tenantId,\n        });\n        entry.elements[id] = value;\n        await this.statusListRepository.update(\n            { tenantId },\n            { elements: entry.elements },\n        );\n        return this.createList(entry);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusMapping.html":{"url":"entities/StatusMapping.html","title":"entity - StatusMapping","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-mapping.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigurationId\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                list\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:13\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\n@Entity()\nexport class StatusMapping {\n    @Column({ type: \"varchar\", primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column({ type: \"varchar\", primary: true })\n    sessionId: string;\n\n    @Column({ type: \"varchar\", primary: true })\n    list: string;\n\n    @Column({ type: \"int\", primary: true })\n    index: number;\n\n    @Column({ type: \"varchar\", primary: true })\n    credentialConfigurationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusUpdateDto.html":{"url":"classes/StatusUpdateDto.html","title":"class - StatusUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/dto/status-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationId\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:16\n                        \n                    \n\n            \n                \n                    The ID of the credential configuration\nThis is optional, if not provided, all credentials will be revoked of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:8\n                        \n                    \n\n            \n                \n                    The session ID of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsIn(['0', '1'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:24\n                        \n                    \n\n            \n                \n                    The status of the credential\n0 = valid, 1 = revoked\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNumber, IsOptional, IsString } from \"class-validator\";\n\nexport class StatusUpdateDto {\n    /**\n     * The session ID of the user\n     */\n    @IsString()\n    sessionId: string;\n\n    /**\n     * The ID of the credential configuration\n     * This is optional, if not provided, all credentials will be revoked of the session.\n     */\n    @IsString()\n    @IsOptional()\n    credentialConfigurationId?: string;\n\n    /**\n     * The status of the credential\n     * 0 = valid, 1 = revoked\n     */\n    @IsNumber()\n    @IsIn([0, 1])\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StorageController.html":{"url":"controllers/StorageController.html","title":"controller - StorageController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StorageController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/storage.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                storage\n            \n\n\n            \n                Description\n            \n            \n                Storage Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                download\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        download\n                        \n                    \n                \n            \n            \n                \n                        \n                    download(key: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':key')\n                \n            \n\n                    \n                        \n                            Defined in src/storage/storage.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(user: TokenPayload, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@UseGuards(JwtAuthGuard)@ApiSecurity('oauth2')@ApiConsumes('multipart/form-data')@ApiBody({description: 'List of cats', type: FileUploadDto})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/storage/storage.controller.ts:44\n                        \n                    \n\n\n            \n                \n                        Upload files that belong to a tenant like images\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Param,\n    Post,\n    StreamableFile,\n    UploadedFile,\n    UseGuards,\n    UseInterceptors,\n} from \"@nestjs/common\";\nimport { FileInterceptor } from \"@nestjs/platform-express\";\nimport { ApiBody, ApiConsumes, ApiSecurity } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../auth/token.decorator\";\nimport { FileUploadDto } from \"./dto/file-upload.dto\";\nimport { FilesService } from \"./files.service\";\n\n/**\n * Storage Controller\n */\n@Controller(\"storage\")\nexport class StorageController {\n    /**\n     * Constructor\n     * @param filesService The files service\n     */\n    constructor(private filesService: FilesService) {}\n\n    /**\n     * Upload files that belong to a tenant like images\n     * @param user\n     * @param file\n     * @returns\n     */\n    @UseInterceptors(FileInterceptor(\"file\"))\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity(\"oauth2\")\n    @ApiConsumes(\"multipart/form-data\")\n    @ApiBody({\n        description: \"List of cats\",\n        type: FileUploadDto,\n    })\n    @Post()\n    upload(\n        @Token() user: TokenPayload,\n        @UploadedFile() file: Express.Multer.File,\n    ) {\n        return this.filesService.saveUserUpload(user.sub, file, true);\n    }\n\n    @Get(\":key\")\n    download(@Param(\"key\") key: string) {\n        return this.filesService.getStream(key).then(\n            (stream) =>\n                new StreamableFile(stream.stream, {\n                    disposition: \"attachment\",\n                    type: stream.contentType,\n                    length: stream.size,\n                }),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StorageModule.html":{"url":"modules/StorageModule.html","title":"module - StorageModule","body":"\n                   \n\n\n\n\n    Modules\n    StorageModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/storage/storage.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.module.ts:55\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { S3Client } from \"@aws-sdk/client-s3\";\nimport { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport * as Joi from \"joi\";\nimport { join } from \"path\";\nimport { LocalFileStorage } from \"./adapters/local.storage\";\nimport { S3FileStorage } from \"./adapters/s3.storage\";\nimport { FileEntity } from \"./entities/files.entity\";\nimport { FilesService } from \"./files.service\";\nimport { StorageController } from \"./storage.controller\";\nimport { FILE_STORAGE, FileStorage } from \"./storage.types\";\n\ntype Driver = \"local\" | \"s3\";\n\nexport const CONFIG_STORAGE_SCHEMA = {\n    STORAGE_DRIVER: Joi.string().valid(\"local\", \"s3\").default(\"local\"),\n    LOCAL_STORAGE_DIR: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"local\",\n        then: Joi.string().default((parent) => join(parent.FOLDER, \"uploads\")),\n    }),\n    S3_REGION: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_BUCKET: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ACCESS_KEY_ID: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_SECRET_ACCESS_KEY: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ENDPOINT: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.optional(),\n    }),\n    S3_FORCE_PATH_STYLE: Joi.boolean().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.boolean().default(false),\n    }),\n    S3_PUBLIC_BASE_URL: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class StorageModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: StorageModule,\n            imports: [TypeOrmModule.forFeature([FileEntity])],\n            controllers: [StorageController],\n            providers: [\n                FilesService,\n                {\n                    provide: FILE_STORAGE,\n                    inject: [ConfigService],\n                    useFactory: (cfg: ConfigService): FileStorage => {\n                        const driver = cfg.get(\"STORAGE_DRIVER\");\n                        if (driver === \"s3\") {\n                            return new S3FileStorage(\n                                new S3Client({\n                                    region: cfg.get(\"S3_REGION\"),\n                                    endpoint: cfg.get(\"S3_ENDPOINT\"),\n                                    forcePathStyle: cfg.get(\n                                        \"S3_FORCE_PATH_STYLE\",\n                                    ),\n                                    credentials: {\n                                        accessKeyId:\n                                            cfg.get(\n                                                \"S3_ACCESS_KEY_ID\",\n                                            )!,\n                                        secretAccessKey: cfg.get(\n                                            \"S3_SECRET_ACCESS_KEY\",\n                                        )!,\n                                    },\n                                }),\n                                cfg.get(\"S3_BUCKET\")!,\n                                cfg.get(\"S3_PUBLIC_BASE_URL\"),\n                            );\n                        }\n                        // local\n                        return new LocalFileStorage(\n                            cfg.getOrThrow(\"LOCAL_STORAGE_DIR\"),\n                        );\n                    },\n                },\n            ],\n            exports: [FilesService],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TenantController.html":{"url":"controllers/TenantController.html","title":"controller - TenantController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TenantController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant/tenant.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tenant\n            \n\n\n            \n                Description\n            \n            \n                Tenant management controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteTenant\n                            \n                            \n                                    \n                                initTenant\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTenant(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.controller.ts:44\n                        \n                    \n\n\n            \n                \n                        Deletes a tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant to delete\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        initTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    initTenant(user: TokenPayload, values: ClientInitDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.controller.ts:31\n                        \n                    \n\n\n            \n                \n                        Initialize a tenant for the given user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user to initialize the tenant for\n\n                                            \n                                        \n                                        \n                                                values\n                                            \n                                                            ClientInitDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    ConflictException,\n    Controller,\n    Delete,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity } from \"@nestjs/swagger\";\nimport { AdminAuthGuard } from \"../admin.guard\";\nimport { ClientInitDto } from \"../dto/client-init.dto\";\nimport { TenantService } from \"../tenant.service\";\nimport { Token, TokenPayload } from \"../token.decorator\";\n\n/**\n * Tenant management controller\n */\n@UseGuards(AdminAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"tenant\")\nexport class TenantController {\n    constructor(private readonly tenantService: TenantService) {}\n\n    /**\n     * Initialize a tenant for the given user.\n     * @param user The user to initialize the tenant for\n     * @returns\n     */\n    @Post()\n    initTenant(@Token() user: TokenPayload, @Body() values: ClientInitDto) {\n        //only the admin is allowed to init new users. Or the user by itself.\n        if (values.id && !user.admin) {\n            throw new ConflictException(\"User is not an admin\");\n        }\n        return this.tenantService.initTenant(values.id || user.sub);\n    }\n\n    /**\n     * Deletes a tenant by ID\n     * @param id The ID of the tenant to delete\n     */\n    @Delete(\":id\")\n    deleteTenant(@Param(\"id\") id: string, @Token() user: TokenPayload) {\n        // either self delete or the user needs to be an admin.\n        if (id !== user.sub && !user.admin) {\n            throw new ConflictException(\n                \"User is not allowed to delete this tenant\",\n            );\n        }\n\n        return this.tenantService.deleteTenant(id, user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TenantEntity.html":{"url":"entities/TenantEntity.html","title":"entity - TenantEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TenantEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entitites/tenant.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a tenant in the system.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/tenant.entity.ts:12\n                        \n                    \n\n            \n                \n                    The unique identifier for the tenant.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Entity, PrimaryColumn } from \"typeorm\";\n\n/**\n * Represents a tenant in the system.\n */\n@Entity()\nexport class TenantEntity {\n    /**\n     * The unique identifier for the tenant.\n     */\n    @PrimaryColumn()\n    id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TenantService.html":{"url":"injectables/TenantService.html","title":"injectable - TenantService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TenantService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                tenants\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteTenant\n                            \n                            \n                                findTenantById\n                            \n                            \n                                    Private\n                                getTenants\n                            \n                            \n                                    Async\n                                initTenant\n                            \n                            \n                                    Private\n                                loadTenants\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                setUpTenant\n                            \n                            \n                                validateTenant\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, encryptionService: EncryptionService, statusListService: StatusListService, registrarService: RegistrarService, oid4vciService: Oid4vciService, tenantRepository: Repository, tenantTotal: Gauge, filesService: FilesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/tenant.service.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantTotal\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTenant(tenantId: string, user: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:139\n                        \n                    \n\n\n            \n                \n                        Deletes a tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant to delete\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user requesting the deletion\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findTenantById\n                        \n                    \n                \n            \n            \n                \nfindTenantById(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Find tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Tenants | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getTenants\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTenants()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:79\n                        \n                    \n\n\n            \n                \n                        Get tenants from configuration\n\n\n                        \n                            Returns :         Tenants[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        initTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    initTenant(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:70\n                        \n                    \n\n\n            \n                \n                        Initialize a tenant for the given user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadTenants\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadTenants()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Load tenants from configuration\n\n\n                        \n                            Returns :         Tenants[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:46\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setUpTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUpTenant(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:126\n                        \n                    \n\n\n            \n                \n                        Sends an event to set up a tenant, allowing all other services to listen and react accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateTenant\n                        \n                    \n                \n            \n            \n                \nvalidateTenant(tenantId: string, tenantSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:105\n                        \n                    \n\n\n            \n                \n                        Validate tenant credentials (OAuth2 Tenant Credentials flow)\nThis is the primary authentication method for service integration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Tenants | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        tenants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tenants[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/auth/tenant.service.ts:30\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    ForbiddenException,\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus\";\nimport { readdirSync } from \"fs\";\nimport { Gauge } from \"prom-client\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { EncryptionService } from \"../crypto/encryption/encryption.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { RegistrarService } from \"../registrar/registrar.service\";\nimport { FilesService } from \"../storage/files.service\";\nimport { TenantEntity } from \"./entitites/tenant.entity\";\nimport { TokenPayload } from \"./token.decorator\";\n\n// Tenant interface for service integration\nexport interface Tenants {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class TenantService implements OnApplicationBootstrap, OnModuleInit {\n    private tenants: Tenants[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statusListService: StatusListService,\n        private registrarService: RegistrarService,\n        private oid4vciService: Oid4vciService,\n        @InjectRepository(TenantEntity)\n        private tenantRepository: Repository,\n        @InjectMetric(\"tenant_total\")\n        private tenantTotal: Gauge,\n        private filesService: FilesService,\n    ) {}\n\n    async onModuleInit() {\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n            if (this.configService.get(\"CONFIG_IMPORT\")) {\n                const tenantFolders = readdirSync(configPath, {\n                    withFileTypes: true,\n                }).filter((tenant) => tenant.isDirectory());\n                for (const tenant of tenantFolders) {\n                    await this.tenantRepository.save({ id: tenant.name });\n                }\n            }\n        }\n    }\n\n    async onApplicationBootstrap() {\n        // Initialize the tenant metrics\n        const count = await this.tenantRepository.count();\n        this.tenantTotal.set({}, count);\n    }\n\n    /**\n     * Initialize a tenant for the given user.\n     * @param user The user to initialize the tenant for\n     */\n    async initTenant(id: string) {\n        await this.tenantRepository.save({ id });\n        return this.setUpTenant(id);\n    }\n\n    /**\n     * Get tenants from configuration\n     * @returns\n     */\n    private getTenants(): Tenants[] {\n        if (!this.tenants) {\n            this.tenants = this.loadTenants();\n        }\n        return this.tenants;\n    }\n\n    /**\n     * Load tenants from configuration\n     */\n    private loadTenants(): Tenants[] {\n        // Default tenants for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow(\"AUTH_CLIENT_ID\"),\n                secret: this.configService.getOrThrow(\n                    \"AUTH_CLIENT_SECRET\",\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate tenant credentials (OAuth2 Tenant Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateTenant(tenantId: string, tenantSecret: string): Tenants | null {\n        const tenant = this.getTenants().find((c) => c.id === tenantId);\n\n        if (!tenant || tenant.secret !== tenantSecret) {\n            return null;\n        }\n\n        return tenant;\n    }\n\n    /**\n     * Find tenant by ID\n     */\n    findTenantById(tenantId: string): Tenants | null {\n        return this.getTenants().find((c) => c.id === tenantId) || null;\n    }\n\n    /**\n     * Sends an event to set up a tenant, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    async setUpTenant(id: string) {\n        await this.cryptoService.onTenantInit(id);\n        await this.encryptionService.onTenantInit(id);\n        await this.statusListService.onTenantInit(id);\n        await this.registrarService.onTenantInit(id);\n        await this.oid4vciService.onTenantInit(id);\n    }\n\n    /**\n     * Deletes a tenant by ID\n     * @param tenantId The ID of the tenant to delete\n     * @param user The user requesting the deletion\n     */\n    async deleteTenant(tenantId: string, user: TokenPayload) {\n        if (tenantId !== user.sub) {\n            throw new ForbiddenException(\n                `User ${user.sub} is not allowed to delete tenant ${tenantId}`,\n            );\n        }\n        //delete all files associated with the tenant\n        await this.filesService.deleteByTenant(tenantId);\n        //because of cascading, all related entities will be deleted.\n        await this.tenantRepository.delete({ id: tenantId });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tenants.html":{"url":"interfaces/Tenants.html","title":"interface - Tenants","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Tenants\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    ForbiddenException,\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus\";\nimport { readdirSync } from \"fs\";\nimport { Gauge } from \"prom-client\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { EncryptionService } from \"../crypto/encryption/encryption.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { RegistrarService } from \"../registrar/registrar.service\";\nimport { FilesService } from \"../storage/files.service\";\nimport { TenantEntity } from \"./entitites/tenant.entity\";\nimport { TokenPayload } from \"./token.decorator\";\n\n// Tenant interface for service integration\nexport interface Tenants {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class TenantService implements OnApplicationBootstrap, OnModuleInit {\n    private tenants: Tenants[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statusListService: StatusListService,\n        private registrarService: RegistrarService,\n        private oid4vciService: Oid4vciService,\n        @InjectRepository(TenantEntity)\n        private tenantRepository: Repository,\n        @InjectMetric(\"tenant_total\")\n        private tenantTotal: Gauge,\n        private filesService: FilesService,\n    ) {}\n\n    async onModuleInit() {\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n            if (this.configService.get(\"CONFIG_IMPORT\")) {\n                const tenantFolders = readdirSync(configPath, {\n                    withFileTypes: true,\n                }).filter((tenant) => tenant.isDirectory());\n                for (const tenant of tenantFolders) {\n                    await this.tenantRepository.save({ id: tenant.name });\n                }\n            }\n        }\n    }\n\n    async onApplicationBootstrap() {\n        // Initialize the tenant metrics\n        const count = await this.tenantRepository.count();\n        this.tenantTotal.set({}, count);\n    }\n\n    /**\n     * Initialize a tenant for the given user.\n     * @param user The user to initialize the tenant for\n     */\n    async initTenant(id: string) {\n        await this.tenantRepository.save({ id });\n        return this.setUpTenant(id);\n    }\n\n    /**\n     * Get tenants from configuration\n     * @returns\n     */\n    private getTenants(): Tenants[] {\n        if (!this.tenants) {\n            this.tenants = this.loadTenants();\n        }\n        return this.tenants;\n    }\n\n    /**\n     * Load tenants from configuration\n     */\n    private loadTenants(): Tenants[] {\n        // Default tenants for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow(\"AUTH_CLIENT_ID\"),\n                secret: this.configService.getOrThrow(\n                    \"AUTH_CLIENT_SECRET\",\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate tenant credentials (OAuth2 Tenant Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateTenant(tenantId: string, tenantSecret: string): Tenants | null {\n        const tenant = this.getTenants().find((c) => c.id === tenantId);\n\n        if (!tenant || tenant.secret !== tenantSecret) {\n            return null;\n        }\n\n        return tenant;\n    }\n\n    /**\n     * Find tenant by ID\n     */\n    findTenantById(tenantId: string): Tenants | null {\n        return this.getTenants().find((c) => c.id === tenantId) || null;\n    }\n\n    /**\n     * Sends an event to set up a tenant, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    async setUpTenant(id: string) {\n        await this.cryptoService.onTenantInit(id);\n        await this.encryptionService.onTenantInit(id);\n        await this.statusListService.onTenantInit(id);\n        await this.registrarService.onTenantInit(id);\n        await this.oid4vciService.onTenantInit(id);\n    }\n\n    /**\n     * Deletes a tenant by ID\n     * @param tenantId The ID of the tenant to delete\n     * @param user The user requesting the deletion\n     */\n    async deleteTenant(tenantId: string, user: TokenPayload) {\n        if (tenantId !== user.sub) {\n            throw new ForbiddenException(\n                `User ${user.sub} is not allowed to delete tenant ${tenantId}`,\n            );\n        }\n        //delete all files associated with the tenant\n        await this.filesService.deleteByTenant(tenantId);\n        //because of cascading, all related entities will be deleted.\n        await this.tenantRepository.delete({ id: tenantId });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Values of the user token\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            admin\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        admin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        admin:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from \"@nestjs/common\";\n\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    sub: string; // Subject (client_id for client credentials)\n    admin: boolean; // Admin flag\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenRequestDto.html":{"url":"classes/TokenRequestDto.html","title":"class - TokenRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/dto/token-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                client_id\n                            \n                            \n                                    \n                                    \n                                client_secret\n                            \n                            \n                                    \n                                    \n                                    \n                                grant_type\n                            \n                            \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The client identifier', examples: undefined})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The client secret', examples: undefined})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        grant_type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The grant type', enum: undefined, examples: undefined})@IsString()@IsIn(['client_credentials'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The scope of the access request', examples: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsString } from \"class-validator\";\n\nexport class TokenRequestDto {\n    @ApiProperty({\n        description: \"The grant type\",\n        enum: [\"client_credentials\"],\n        examples: [\"client_credentials\"],\n    })\n    @IsString()\n    @IsIn([\"client_credentials\"])\n    grant_type: \"client_credentials\";\n\n    @ApiProperty({\n        description: \"The client identifier\",\n        examples: [\"my-client-id\"],\n    })\n    @IsString()\n    client_id: string;\n\n    @ApiProperty({\n        description: \"The client secret\",\n        examples: [\"my-client-secret\"],\n    })\n    @IsString()\n    client_secret: string;\n\n    @ApiProperty({\n        description: \"The scope of the access request\",\n        examples: [\"openid\"],\n        required: false,\n    })\n    scope?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponse.html":{"url":"classes/TokenResponse.html","title":"class - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                expires_in\n                            \n                            \n                                    Optional\n                                refresh_token\n                            \n                            \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenResponse {\n    access_token: string;\n    refresh_token?: string;\n    token_type: \"Bearer\";\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponseDto.html":{"url":"classes/TokenResponseDto.html","title":"class - TokenResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                access_token\n                            \n                            \n                                    \n                                expires_in\n                            \n                            \n                                    \n                                    Optional\n                                scope\n                            \n                            \n                                    \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The access token', examples: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The lifetime in seconds of the access token', examples: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The scope of the access token', examples: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token_type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The type of the token', examples: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class TokenResponseDto {\n    @ApiProperty({\n        description: \"The access token\",\n        examples: [\"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...\"],\n    })\n    access_token: string;\n\n    @ApiProperty({\n        description: \"The type of the token\",\n        examples: [\"Bearer\"],\n    })\n    token_type: \"Bearer\";\n\n    @ApiProperty({\n        description: \"The lifetime in seconds of the access token\",\n        examples: [3600],\n    })\n    expires_in: number;\n\n    @ApiProperty({\n        description: \"The scope of the access token\",\n        examples: [\"openid\"],\n        required: false,\n    })\n    scope?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrustedAuthorityQuery.html":{"url":"classes/TrustedAuthorityQuery.html","title":"class - TrustedAuthorityQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrustedAuthorityQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                type\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['aki', 'etsi_tl', 'openid_federation'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsNotEmpty()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateKeyDto.html":{"url":"classes/UpdateKeyDto.html","title":"class - UpdateKeyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateKeyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-update.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        OmitType(KeyImportDto, [\n    \"privateKey\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { KeyImportDto } from \"./key-import.dto\";\n\nexport class UpdateKeyDto extends OmitType(KeyImportDto, [\n    \"privateKey\",\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VCT.html":{"url":"classes/VCT.html","title":"class - VCT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VCT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/vct.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                extends\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                extends#integrity\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                schema_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                schema_uri#integrity\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        extends\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        extends#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        schema_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        schema_uri#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmpty, IsOptional, IsString } from \"class-validator\";\n\nexport class VCT {\n    @ApiProperty({\n        required: false,\n    })\n    @IsEmpty()\n    vct?: string;\n    @IsOptional()\n    @IsString()\n    name?: string;\n    @IsOptional()\n    @IsString()\n    description?: string;\n    @IsOptional()\n    @IsString()\n    extends?: string;\n    @IsOptional()\n    @IsString()\n    \"extends#integrity\"?: string;\n    @IsOptional()\n    @IsString()\n    schema_uri?: string;\n    @IsOptional()\n    @IsString()\n    \"schema_uri#integrity\"?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VerifierModule.html":{"url":"modules/VerifierModule.html","title":"module - VerifierModule","body":"\n                   \n\n\n\n\n    Modules\n    VerifierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VerifierModule\n\n\n\ncluster_VerifierModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/verifier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { RegistrarModule } from \"../registrar/registrar.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { Oid4vpModule } from \"./oid4vp/oid4vp.module\";\nimport { PresentationsModule } from \"./presentations/presentations.module\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        SessionModule,\n        HttpModule,\n        PresentationsModule,\n        Oid4vpModule,\n    ],\n})\nexport class VerifierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfig.html":{"url":"classes/WebHookAuthConfig.html","title":"class - WebHookAuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(AuthConfig)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:65\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfigHeader.html":{"url":"classes/WebHookAuthConfigHeader.html","title":"class - WebHookAuthConfigHeader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfigHeader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhook authentication.\n\n            \n\n\n            \n                Implements\n            \n            \n                            WebHookAuthConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApiKeyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:51\n                        \n                    \n\n            \n                \n                    Configuration for API key authentication.\nThis is required if the type is 'apiKey'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig.API_KEY\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['undefined'])@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:44\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfigNone.html":{"url":"classes/WebHookAuthConfigNone.html","title":"class - WebHookAuthConfigNone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfigNone\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            WebHookAuthConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig.NONE\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['undefined'])@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:60\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookConfig.html":{"url":"classes/WebhookConfig.html","title":"class - WebhookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhooks used in various services.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                auth\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebHookAuthConfigNone | WebHookAuthConfigHeader\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@ApiProperty({oneOf: undefined})@Type(undefined, {discriminator: undefined, keepDiscriminatorProperty: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:105\n                        \n                    \n\n            \n                \n                    Optional authentication configuration for the webhook.\nIf not provided, no authentication will be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:77\n                        \n                    \n\n            \n                \n                    The URL to which the webhook will send notifications.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookResponse.html":{"url":"classes/WebhookResponse.html","title":"class - WebhookResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Response from a webhook to receive credentials.\n\n            \n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    Record\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:12\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { Injectable } from \"@nestjs/common\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Notification, Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../logger/session-logger.service\";\nimport { SessionLogContext } from \"../logger/session-logger-context\";\n\n/**\n * Response from a webhook to receive credentials.\n */\nexport class WebhookResponse {\n    [key: string]: Record;\n}\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the optional provided credentials, return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     * @param expectResponse Whether to expect a response from the webhook\n     */\n    sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials?: any[],\n        expectResponse = true,\n    ) {\n        const headers: Record = {};\n        if (\n            session.claimsWebhook!.auth &&\n            session.claimsWebhook!.auth.type === \"apiKey\"\n        ) {\n            headers[session.claimsWebhook!.auth.config.headerName] =\n                session.claimsWebhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, \"Sending webhook\", {\n            webhookUrl: session.claimsWebhook!.url,\n            authType: session.claimsWebhook!.auth?.type || \"none\",\n        });\n\n        return firstValueFrom(\n            this.httpService.post(\n                session.claimsWebhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data && expectResponse) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n                return webhookResponse.data;\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === \"apiKey\") {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            \"Sending webhook notification\",\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || \"none\",\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook notification sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebhookService.html":{"url":"injectables/WebhookService.html","title":"injectable - WebhookService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WebhookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling webhooks in the application.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendWebhook\n                            \n                            \n                                    Async\n                                sendWebhookNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, sessionService: SessionService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor for WebhookService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendWebhook\n                        \n                    \n                \n            \n            \n                \nsendWebhook(session: Session, logContext: SessionLogContext, credentials?: any[], expectResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Sends a webhook with the optional provided credentials, return the response data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                credentials\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                expectResponse\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    Whether to expect a response from the webhook\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendWebhookNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWebhookNotification(session: Session, logContext: SessionLogContext, notification: Notification)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:111\n                        \n                    \n\n\n            \n                \n                        Sends a webhook notification for a session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notification\n                                            \n                                                            Notification\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { Injectable } from \"@nestjs/common\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Notification, Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../logger/session-logger.service\";\nimport { SessionLogContext } from \"../logger/session-logger-context\";\n\n/**\n * Response from a webhook to receive credentials.\n */\nexport class WebhookResponse {\n    [key: string]: Record;\n}\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the optional provided credentials, return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     * @param expectResponse Whether to expect a response from the webhook\n     */\n    sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials?: any[],\n        expectResponse = true,\n    ) {\n        const headers: Record = {};\n        if (\n            session.claimsWebhook!.auth &&\n            session.claimsWebhook!.auth.type === \"apiKey\"\n        ) {\n            headers[session.claimsWebhook!.auth.config.headerName] =\n                session.claimsWebhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, \"Sending webhook\", {\n            webhookUrl: session.claimsWebhook!.url,\n            authType: session.claimsWebhook!.auth?.type || \"none\",\n        });\n\n        return firstValueFrom(\n            this.httpService.post(\n                session.claimsWebhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data && expectResponse) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n                return webhookResponse.data;\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === \"apiKey\") {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            \"Sending webhook notification\",\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || \"none\",\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook notification sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WellKnownController.html":{"url":"controllers/WellKnownController.html","title":"controller - WellKnownController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WellKnownController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/.well-known\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI well-known endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authzMetadata\n                            \n                            \n                                    \n                                    \n                                getJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                issuerMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    authzMetadata(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('oauth-authorization-server')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:57\n                        \n                    \n\n\n            \n                \n                        Authorization Server Metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJwks(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Header('Content-Type', 'application/jwk-set+json')@Get('jwks.json')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:69\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for the authorization server.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get OpenID4VCI issuer metadata', description: 'Returns the OpenID4VCI issuer metadata.'})@ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)@Get('openid-credential-issuer')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Retrieves the OpenID4VCI issuer metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header } from \"@nestjs/common\";\nimport {\n    ApiExcludeController,\n    ApiOperation,\n    ApiParam,\n    ApiProduces,\n} from \"@nestjs/swagger\";\nimport { Session } from \"../session/entities/session.entity\";\nimport { SessionEntity } from \"../session/session.decorator\";\nimport { ContentType } from \"../utils/mediaType/media-type.decorator\";\nimport { MediaType } from \"../utils/mediaType/media-type.enum\";\nimport { JwksResponseDto } from \"./dto/jwks-response.dto\";\nimport { Oauth2AuthorizationServerResponse } from \"./dto/oauth-authorization-server-response.dto\";\nimport { WellKnownService } from \"./well-known.service\";\n\n/**\n * Controller for the OpenID4VCI well-known endpoints.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiParam({\n    name: \"session\",\n    required: true,\n})\n@Controller(\":session/.well-known\")\nexport class WellKnownController {\n    /**\n     * Constructor for WellKnownController.\n     * @param wellKnownService\n     */\n    constructor(private readonly wellKnownService: WellKnownService) {}\n\n    /**\n     * Retrieves the OpenID4VCI issuer metadata for a given tenant.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    @ApiOperation({\n        summary: \"Get OpenID4VCI issuer metadata\",\n        description: \"Returns the OpenID4VCI issuer metadata.\",\n    })\n    //we can not set the accept in the apiheader via swagger.\n    @ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)\n    @Get(\"openid-credential-issuer\")\n    issuerMetadata(\n        @SessionEntity() session: Session,\n        @ContentType() contentType: MediaType,\n    ) {\n        return this.wellKnownService.getIssuerMetadata(session, contentType);\n    }\n\n    /**\n     * Authorization Server Metadata\n     * @returns\n     */\n    @Get(\"oauth-authorization-server\")\n    authzMetadata(\n        @SessionEntity() session: Session,\n    ): Oauth2AuthorizationServerResponse {\n        return this.wellKnownService.getAuthzMetadata(session);\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for the authorization server.\n     * @returns\n     */\n    @Header(\"Content-Type\", \"application/jwk-set+json\")\n    @Get(\"jwks.json\")\n    getJwks(@SessionEntity() session: Session): Promise {\n        return this.wellKnownService.getJwks(session.tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WellKnownService.html":{"url":"injectables/WellKnownService.html","title":"injectable - WellKnownService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WellKnownService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle well-known endpoints and metadata retrieval.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAuthzMetadata\n                            \n                            \n                                    Async\n                                getIssuerMetadata\n                            \n                            \n                                getJwks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(oid4vciService: Oid4vciService, cryptoService: CryptoService, authorizeService: AuthorizeService, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/well-known/well-known.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor for WellKnownService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authorizeService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthzMetadata\n                        \n                    \n                \n            \n            \n                \ngetAuthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIssuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Retrieves the issuer metadata for a given tenant for the specified content type.\nThe metadata can be returned in two formats:\n\nan unsigned JSON document using the media type application/json, or\na signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwks\n                        \n                    \n                \n            \n            \n                \ngetJwks(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { CryptoImplementationService } from \"../crypto/key/crypto-implementation/crypto-implementation.service\";\nimport { AuthorizeService } from \"../issuer/authorize/authorize.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { Session } from \"../session/entities/session.entity\";\nimport { MediaType } from \"../utils/mediaType/media-type.enum\";\nimport { CredentialIssuerMetadataDto } from \"./dto/credential-issuer-metadata.dto\";\nimport { JwksResponseDto } from \"./dto/jwks-response.dto\";\nimport { Oauth2AuthorizationServerResponse } from \"./dto/oauth-authorization-server-response.dto\";\n\n/**\n * Service to handle well-known endpoints and metadata retrieval.\n */\n@Injectable()\nexport class WellKnownService {\n    /**\n     * Constructor for WellKnownService.\n     * @param oid4vciService\n     * @param cryptoService\n     * @param authorizeService\n     */\n    constructor(\n        private readonly oid4vciService: Oid4vciService,\n        private readonly cryptoService: CryptoService,\n        private readonly authorizeService: AuthorizeService,\n        private readonly cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Retrieves the issuer metadata for a given tenant for the specified content type.\n     * The metadata can be returned in two formats:\n     * - an unsigned JSON document using the media type application/json, or\n     * - a signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    async getIssuerMetadata(session: Session, contentType: MediaType) {\n        const metadata = (await this.oid4vciService.issuerMetadata(session))\n            .credentialIssuer as unknown as CredentialIssuerMetadataDto;\n\n        if (contentType === MediaType.APPLICATION_JWT) {\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"access\",\n            );\n            return this.cryptoService.signJwt(\n                {\n                    typ: \"openidvci-issuer-metadata+jwt\",\n                    alg: this.cryptoImplementationService.getAlg(),\n                    x5c: await this.cryptoService.getCertChain(\n                        \"access\",\n                        session.tenantId,\n                    ),\n                },\n                {\n                    ...metadata,\n                    iss: metadata.credential_issuer,\n                    sub: metadata.credential_issuer,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    // [Review]: should we add `exp` value here?\n                    //MM: the value makes sense when we cache the issuer metadata so it must not be signed on every request. Like when it is issued every hour, its lifetime is 1 hour and the jwt is in the cache.\n                },\n                session.tenantId,\n                keyId,\n            );\n        }\n\n        return metadata;\n    }\n\n    /**\n     * Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n     * @returns\n     */\n    getAuthzMetadata(session: Session): Oauth2AuthorizationServerResponse {\n        return this.authorizeService.authzMetadata(\n            session,\n        ) as Oauth2AuthorizationServerResponse;\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for a given tenant.\n     * @returns\n     */\n    getJwks(tenantId: string): Promise {\n        return this.cryptoService.getJwks(tenantId).then((key) => ({\n            keys: [key],\n        }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/dto/oidc-discovery.dto.ts\n            \n            interface\n            OidcDiscoveryDto\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/auth/admin.guard.ts\n            \n            injectable\n            AdminAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            AUTH_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_AUTH_CLIENT_ID\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_AUTH_CLIENT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_JWT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/client-credentials.dto.ts\n            \n            class\n            ClientCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/client-init.dto.ts\n            \n            class\n            ClientInitDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/oidc-discovery.dto.ts\n            \n            interface\n            OidcDiscoveryDto\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/auth/dto/token-response.dto.ts\n            \n            class\n            TokenResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/entitites/tenant.entity.ts\n            \n            entity\n            TenantEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            injectable\n            JwtService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            interface\n            GenerateTokenOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/tenant.service.ts\n            \n            injectable\n            TenantService\n            \n                58 %\n                (7/12)\n            \n        \n        \n            \n                \n                src/auth/tenant.service.ts\n            \n            interface\n            Tenants\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/tenant/tenant.controller.ts\n            \n            controller\n            TenantController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/token.decorator.ts\n            \n            interface\n            TokenPayload\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                        src/auth/token.decorator.ts\n            \n            variable\n            Token\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/crypto.service.ts\n            \n            injectable\n            CryptoService\n            \n                90 %\n                (20/22)\n            \n        \n        \n            \n                \n                        src/crypto/crypto.service.ts\n            \n            variable\n            ECDSA_P256\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/encryption/encryption.service.ts\n            \n            injectable\n            EncryptionService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/crypto/key/adapters/db-key.service.ts\n            \n            class\n            DBKeyService\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                src/crypto/key/adapters/vault-key.service.ts\n            \n            class\n            VaultKeyService\n            \n                47 %\n                (9/19)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n            \n            variable\n            CRYPTO_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n            \n            injectable\n            CryptoImplementationService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n            \n            type alias\n            CryptoType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            interface\n            CryptoImplementation\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            KeyPair\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            Signer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            Verifier\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/ed25519.ts\n            \n            variable\n            ED25519\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            Key\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            KeyImportDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-object.dto.ts\n            \n            class\n            KeyObj\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-response.dto.ts\n            \n            class\n            KeyResponseDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-update.dto.ts\n            \n            class\n            UpdateKeyDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/entities/cert.entity.ts\n            \n            entity\n            CertEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/cert.entity.ts\n            \n            type alias\n            CertificateType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/entities/keys.entity.ts\n            \n            entity\n            KeyEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/keys.entity.ts\n            \n            type alias\n            KeyUsage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/crypto/key/key.controller.ts\n            \n            controller\n            KeyController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/crypto/key/key.module.ts\n            \n            variable\n            KEY_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/key.service.ts\n            \n            class\n            KeyService\n            \n                66 %\n                (8/12)\n            \n        \n        \n            \n                \n                        src/database/database.module.ts\n            \n            variable\n            DB_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.controller.ts\n            \n            controller\n            AuthorizeController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            injectable\n            AuthorizeService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenAuthorizationCodeRequestGrant\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenPreAuthorizedCodeRequestGrant\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/authorize-request.dto.ts\n            \n            class\n            AuthorizeQueries\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/par-response.dto.ts\n            \n            class\n            ParResponseDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/credentials-metadata.controller.ts\n            \n            controller\n            CredentialsMetadataController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/schema-response.dto.ts\n            \n            class\n            SchemaResponse\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/vct.dto.ts\n            \n            class\n            VCT\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credential-config/credential-config.service.ts\n            \n            injectable\n            CredentialConfigService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.controller.ts\n            \n            controller\n            CredentialsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.service.ts\n            \n            injectable\n            CredentialsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/issuer/credentials/dto/credential-config-create.dto.ts\n            \n            class\n            CredentialConfigCreate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            entity\n            CredentialConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            CredentialConfig\n            \n                11 %\n                (2/17)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            AllowListPolicy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            AttestationBasedPolicy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            EmbeddedDisclosurePolicy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            NoneTrustPolicy\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            PolicyCredential\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            RootOfTrustPolicy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/policies.dto.ts\n            \n            type alias\n            PolicyType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/display/display.controller.ts\n            \n            controller\n            DisplayController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/display/display.service.ts\n            \n            injectable\n            DisplayService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/issuer/display/dto/display-create.dto.ts\n            \n            class\n            DisplayCreateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/display/entities/display.entity.ts\n            \n            entity\n            DisplayEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/display/entities/display.entity.ts\n            \n            class\n            DisplayInfo\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/display/entities/display.entity.ts\n            \n            class\n            DisplayLogo\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationMethodAuth\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationMethodNone\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationMethodPresentation\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationUrlConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            PresentationDuringIssuanceConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            interface\n            AuthenticationMethodInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            CredentialConfigMapping\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            IssuanceDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/issuance-config.entity.ts\n            \n            entity\n            IssuanceConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/issuance-config.entity.ts\n            \n            class\n            IssuanceConfig\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.controller.ts\n            \n            controller\n            IssuanceController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.service.ts\n            \n            injectable\n            IssuanceService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/issuer/issuer-management/issuer-management.controller.ts\n            \n            controller\n            IssuerManagementController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuer.module.ts\n            \n            variable\n            ISSUER_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/notification-request.dto.ts\n            \n            class\n            NotificationRequestDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferRequestDto\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.controller.ts\n            \n            controller\n            Oid4vciController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.service.ts\n            \n            injectable\n            Oid4vciService\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/util.ts\n            \n            function\n            getHeadersFromRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/dto/status-update.dto.ts\n            \n            class\n            StatusUpdateDto\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/status-list/entities/status-list.entity.ts\n            \n            entity\n            StatusListEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/entities/status-mapping.entity.ts\n            \n            entity\n            StatusMapping\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.controller.ts\n            \n            controller\n            StatusListController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.service.ts\n            \n            injectable\n            StatusListService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/oauth/dto/token-request.dto.ts\n            \n            class\n            TokenRequestDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/oauth/dto/token-response.dto.ts\n            \n            class\n            TokenResponseDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/oauth/oauth.controller.ts\n            \n            controller\n            OAuthController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/oauth/oauth.module.ts\n            \n            variable\n            OAUTH_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/oauth/oauth.service.ts\n            \n            injectable\n            OAuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/registrar/dto/access-certificate-response.ts\n            \n            interface\n            AccessCertificateResponse\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/registrar/entities/registrar.entity.ts\n            \n            entity\n            RegistrarEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/registrar/registrar.module.ts\n            \n            variable\n            REGISTRAR_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/registrar/registrar.service.ts\n            \n            injectable\n            RegistrarService\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/session/entities/session.entity.ts\n            \n            entity\n            Session\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/session/entities/session.entity.ts\n            \n            type alias\n            Notification\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/session/session.controller.ts\n            \n            controller\n            SessionController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/session/session.decorator.ts\n            \n            function\n            SessionEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/session/session.module.ts\n            \n            variable\n            SESSION_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/session/session.pipe.ts\n            \n            injectable\n            SessionPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/session/session.service.ts\n            \n            injectable\n            SessionService\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                src/storage/adapters/local.storage.ts\n            \n            class\n            LocalFileStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/storage/adapters/s3.storage.ts\n            \n            class\n            S3FileStorage\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/storage/dto/file-upload.dto.ts\n            \n            class\n            FileUploadDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/storage/entities/files.entity.ts\n            \n            entity\n            FileEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/storage/files.service.ts\n            \n            injectable\n            FilesService\n            \n                57 %\n                (4/7)\n            \n        \n        \n            \n                \n                src/storage/storage.controller.ts\n            \n            controller\n            StorageController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                        src/storage/storage.module.ts\n            \n            variable\n            CONFIG_STORAGE_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.module.ts\n            \n            type alias\n            Driver\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/storage/storage.types.ts\n            \n            interface\n            FileStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            variable\n            FILE_STORAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            type alias\n            PutOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            type alias\n            StoredObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            injectable\n            LoggerConfigService\n            \n                23 %\n                (3/13)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            interface\n            LoggerConfiguration\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger-context.ts\n            \n            interface\n            SessionLogContext\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SESSION_LOGGER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SessionLogger\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.interceptor.ts\n            \n            injectable\n            SessionLoggerInterceptor\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.service.ts\n            \n            injectable\n            SessionLoggerService\n            \n                85 %\n                (12/14)\n            \n        \n        \n            \n                \n                        src/utils/mediaType/media-type.decorator.ts\n            \n            variable\n            ContentType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            ApiKeyConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfigHeader\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfigNone\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebhookConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.service.ts\n            \n            class\n            WebhookResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.service.ts\n            \n            injectable\n            WebhookService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/authorization-response.dto.ts\n            \n            class\n            AuthorizationResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n            \n            interface\n            PresentationRequestOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request.dto.ts\n            \n            class\n            PresentationRequest\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.controller.ts\n            \n            controller\n            Oid4vpController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.service.ts\n            \n            injectable\n            Oid4vpService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/auth-response.dto.ts\n            \n            interface\n            AuthResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/presentation-config-create.dto.ts\n            \n            class\n            PresentationConfigCreateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/vp-request.dto.ts\n            \n            class\n            RegistrationCertificateRequest\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            entity\n            PresentationConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            ClaimsQuery\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            CredentialQuery\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            CredentialSetQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            DCQL\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            PresentationAttachment\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            TrustedAuthorityQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.controller.ts\n            \n            controller\n            PresentationManagementController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.service.ts\n            \n            injectable\n            PresentationsService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/verifier/resolver/dto/issuer-metadata.dto.ts\n            \n            interface\n            IssuerMetadata\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/resolver/resolver.service.ts\n            \n            injectable\n            ResolverService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/well-known/dto/credential-issuer-metadata.dto.ts\n            \n            class\n            CredentialIssuerMetadataDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            EC_Public\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            JwksResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/well-known/dto/oauth-authorization-server-response.dto.ts\n            \n            class\n            Oauth2AuthorizationServerResponse\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/well-known/well-known.controller.ts\n            \n            controller\n            WellKnownController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/well-known/well-known.service.ts\n            \n            injectable\n            WellKnownService\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.864.0\n        \n            @aws-sdk/s3-request-presigner : ^3.864.0\n        \n            @badgateway/oauth2-client : ^3.3.0\n        \n            @nestjs/axios : ^4.0.1\n        \n            @nestjs/common : ^11.1.6\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.6\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.6\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/serve-static : ^5.0.3\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @openid4vc/oauth2 : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/openid4vci : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/openid4vp : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/utils : 0.3.0-alpha-20250714110838\n        \n            @peculiar/x509 : ^1.13.0\n        \n            @sd-jwt/crypto-nodejs : ^0.14.0\n        \n            @sd-jwt/jwt-status-list : ^0.14.0\n        \n            @sd-jwt/sd-jwt-vc : ^0.14.1\n        \n            @sd-jwt/types : ^0.14.0\n        \n            @willsoto/nestjs-prometheus : ^6.0.2\n        \n            axios : ^1.11.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            joi : ^18.0.0\n        \n            jose : ^6.0.12\n        \n            jwks-rsa : ^3.2.0\n        \n            multer : ^2.0.2\n        \n            mysql2 : ^3.14.3\n        \n            nestjs-pino : ^4.4.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.16.3\n        \n            pino-http : ^10.5.0\n        \n            pino-pretty : ^13.1.1\n        \n            prom-client : ^15.1.3\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            sqlite3 : ^5.1.7\n        \n            typeorm : ^0.3.25\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthConfig   (src/.../webhook.dto.ts)\n                        \n                        \n                            AuthenticationMethod   (src/.../authentication-config.dto.ts)\n                        \n                        \n                            MediaType   (src/.../media-type.enum.ts)\n                        \n                        \n                            ResponseType   (src/.../presentation-request.dto.ts)\n                        \n                        \n                            SessionStatus   (src/.../session.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/webhook/webhook.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthConfig\n                    \n                \n                    \n                        \n                            Enum for the type of authentication used in webhooks.\n\n                        \n                    \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : apiKey\n                            \n                        \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n            \n        \n\n    src/issuer/issuance/dto/authentication-config.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthenticationMethod\n                    \n                \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n                        \n                            \n                                 AUTH\n                            \n                        \n                        \n                            \n                                Value : auth\n                            \n                        \n                        \n                            \n                                 PRESENTATION_DURING_ISSUANCE\n                            \n                        \n                        \n                            \n                                Value : presentationDuringIssuance\n                            \n                        \n            \n        \n\n    src/utils/mediaType/media-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        MediaType\n                    \n                \n                    \n                        \n                            Represents the media types used in the application.\n\n                        \n                    \n                        \n                            \n                                 APPLICATION_JSON\n                            \n                        \n                        \n                            \n                                Value : application/json\n                            \n                        \n                        \n                            \n                                 APPLICATION_JWT\n                            \n                        \n                        \n                            \n                                Value : application/jwt\n                            \n                        \n            \n        \n\n    src/verifier/oid4vp/dto/presentation-request.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ResponseType\n                    \n                \n                    \n                        \n                            Enum for the type of response expected from the presentation request.\n\n                        \n                    \n                        \n                            \n                                 QRCode\n                            \n                        \n                        \n                            \n                                Value : qrcode\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n                        \n                            \n                                Value : uri\n                            \n                        \n            \n        \n\n    src/session/entities/session.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        SessionStatus\n                    \n                \n                        \n                            \n                                 Active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 Fetched\n                            \n                        \n                        \n                            \n                                Value : fetched\n                            \n                        \n                        \n                            \n                                 Completed\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 Expired\n                            \n                        \n                        \n                            \n                                Value : expired\n                            \n                        \n                        \n                            \n                                 Failed\n                            \n                        \n                        \n                            \n                                Value : failed\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getHeadersFromRequest   (src/.../util.ts)\n                        \n                        \n                            SessionEntity   (src/.../session.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function to initialize the NestJS application.\n\n\n                \n            \n        \n    \n    src/issuer/oid4vci/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to extract headers from an Express request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/session/session.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SessionEntity\n                        \n                    \n                \n            \n            \n                \nSessionEntity()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     ParameterDecorator\n\n                        \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CryptoImplementatationModule\n\n\n\ncluster_CryptoImplementatationModule_exports\n\n\n\ncluster_CryptoImplementatationModule_providers\n\n\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_OAuthModule\n\n\n\ncluster_OAuthModule_exports\n\n\n\ncluster_OAuthModule_providers\n\n\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAuthModule -->\n\nCryptoModule->AuthModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nCryptoService \n\nCryptoService \n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nOAuthModule\n\nOAuthModule\n\nOAuthModule -->\n\nCryptoModule->OAuthModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAuthModule -->\n\nIssuerModule->AuthModule\n\n\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nCredentialConfigService \n\nCredentialConfigService \n\nCredentialConfigService  -->\n\nIssuerModule->CredentialConfigService \n\n\n\n\n\nIssuanceService \n\nIssuanceService \n\nIssuanceService  -->\n\nIssuerModule->IssuanceService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\nAuthModule -->\n\nRegistrarModule->AuthModule\n\n\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAuthModule -->\n\nSessionModule->AuthModule\n\n\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\nAuthModule -->\n\nStatusListModule->AuthModule\n\n\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTenantService\n\nTenantService\n\nAuthModule -->\n\nTenantService->AuthModule\n\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\n\n\nCryptoImplementatationModule\n\nCryptoImplementatationModule\n\nCryptoImplementationService  -->\n\nCryptoImplementatationModule->CryptoImplementationService \n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoImplementatationModule -->\n\nCryptoImplementationService->CryptoImplementatationModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nDisplayService\n\nDisplayService\n\nIssuerModule -->\n\nDisplayService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\nOAuthService \n\nOAuthService \n\nOAuthService  -->\n\nOAuthModule->OAuthService \n\n\n\n\n\nOAuthService\n\nOAuthService\n\nOAuthModule -->\n\nOAuthService->OAuthModule\n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nResolverService \n\nResolverService \n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        18 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    19 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    28 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    63 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    16 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoImplementatationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssuerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeyModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetricModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OAuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Oid4vpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PresentationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegistrarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResolverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatusListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StorageModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VerifierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : a middleware to interact with the EUDI Wallet\n        \n            Bugs : https://github.com/openwallet-foundation-labs/eudiplo/issues\n        \n            License : Apache-2.0\n        \n            Repository : https://github.com/openwallet-foundation-labs/eudiplo.git\n        \n            Author : Mirko Mollik \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CertificateType   (src/.../cert.entity.ts)\n                        \n                        \n                            CryptoType   (src/.../crypto-implementation.service.ts)\n                        \n                        \n                            Driver   (src/.../storage.module.ts)\n                        \n                        \n                            KeyPair   (src/.../crypto-implementation.ts)\n                        \n                        \n                            KeyUsage   (src/.../keys.entity.ts)\n                        \n                        \n                            Notification   (src/.../session.entity.ts)\n                        \n                        \n                            PolicyType   (src/.../policies.dto.ts)\n                        \n                        \n                            PutOptions   (src/.../storage.types.ts)\n                        \n                        \n                            Signer   (src/.../crypto-implementation.ts)\n                        \n                        \n                            StoredObject   (src/.../storage.types.ts)\n                        \n                        \n                            Verifier   (src/.../crypto-implementation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/crypto/key/entities/cert.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CertificateType\n                \n            \n            \n                \n                        \"access\" | \"signing\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n    \n    \n        \n            \n                \n                    \n                    CryptoType\n                \n            \n            \n                \n                        \"ES256\" | \"Ed25519\"\n\n                \n            \n        \n    \n    src/storage/storage.module.ts\n    \n    \n        \n            \n                \n                    \n                    Driver\n                \n            \n            \n                \n                        \"local\" | \"s3\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto-implementation/crypto-implementation.ts\n    \n    \n        \n            \n                \n                    \n                    KeyPair\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Signer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Verifier\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/crypto/key/entities/keys.entity.ts\n    \n    \n        \n            \n                \n                    \n                    KeyUsage\n                \n            \n            \n                \n                    Key usage types.\n\n                \n            \n            \n                \n                        \"sign\" | \"encrypt\"\n\n                \n            \n        \n    \n    src/session/entities/session.entity.ts\n    \n    \n        \n            \n                \n                    \n                    Notification\n                \n            \n            \n                \n                    Represents a session entity for managing user sessions in the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/issuer/credentials/entities/policies.dto.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyType\n                \n            \n            \n                \n                        \"none\" | \"allowList\" | \"rootOfTrust\" | \"attestationBased\"\n\n                \n            \n        \n    \n    src/storage/storage.types.ts\n    \n    \n        \n            \n                \n                    \n                    PutOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoredObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_VALIDATION_SCHEMA   (src/.../auth.module.ts)\n                        \n                        \n                            CONFIG_STORAGE_SCHEMA   (src/.../storage.module.ts)\n                        \n                        \n                            ContentType   (src/.../media-type.decorator.ts)\n                        \n                        \n                            CRYPTO_VALIDATION_SCHEMA   (src/.../crypto-implementation.module.ts)\n                        \n                        \n                            DB_VALIDATION_SCHEMA   (src/.../database.module.ts)\n                        \n                        \n                            DEFAULT_AUTH_CLIENT_ID   (src/.../auth.module.ts)\n                        \n                        \n                            DEFAULT_AUTH_CLIENT_SECRET   (src/.../auth.module.ts)\n                        \n                        \n                            DEFAULT_JWT_SECRET   (src/.../auth.module.ts)\n                        \n                        \n                            ECDSA_P256   (src/.../crypto.service.ts)\n                        \n                        \n                            ED25519   (src/.../ed25519.ts)\n                        \n                        \n                            FILE_STORAGE   (src/.../storage.types.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            ISSUER_VALIDATION_SCHEMA   (src/.../issuer.module.ts)\n                        \n                        \n                            KEY_VALIDATION_SCHEMA   (src/.../key.module.ts)\n                        \n                        \n                            OAUTH_VALIDATION_SCHEMA   (src/.../oauth.module.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            REGISTRAR_VALIDATION_SCHEMA   (src/.../registrar.module.ts)\n                        \n                        \n                            SESSION_LOGGER_KEY   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            SESSION_VALIDATION_SCHEMA   (src/.../session.module.ts)\n                        \n                        \n                            SessionLogger   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            Token   (src/.../token.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    OIDC: Joi.string().optional(),\n    OIDC_INTERNAL_ISSUER_URL: Joi.when(\"OIDC\", {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    OIDC_SUB: Joi.when(\"OIDC\", {\n        then: Joi.string().default(\"azp\"),\n        otherwise: Joi.string().optional(),\n    }),\n    OIDC_ALGORITHM: Joi.when(\"OIDC\", {\n        then: Joi.string().default(\"RS256\"),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_JWT_SECRET),\n    }),\n    JWT_ISSUER: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default(\"eudiplo-service\"),\n    }),\n    JWT_EXPIRES_IN: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(\"24h\"),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_SECRET),\n    }),\n    AUTH_CLIENT_ID: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_ID),\n    }),\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_AUTH_CLIENT_ID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"root\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_AUTH_CLIENT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"root\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"supersecret\"\n                    \n                \n\n\n        \n    \n\n    src/storage/storage.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CONFIG_STORAGE_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    STORAGE_DRIVER: Joi.string().valid(\"local\", \"s3\").default(\"local\"),\n    LOCAL_STORAGE_DIR: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"local\",\n        then: Joi.string().default((parent) => join(parent.FOLDER, \"uploads\")),\n    }),\n    S3_REGION: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_BUCKET: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ACCESS_KEY_ID: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_SECRET_ACCESS_KEY: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ENDPOINT: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.optional(),\n    }),\n    S3_FORCE_PATH_STYLE: Joi.boolean().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.boolean().default(false),\n    }),\n    S3_PUBLIC_BASE_URL: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mediaType/media-type.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ContentType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.headers[\"accept\"] as string | undefined;\n    },\n)\n                    \n                \n\n            \n                \n                    Decorator to extract the content type from the request headers.\nThis decorator can be used to determine the media type of the request.\n\n                \n            \n\n        \n    \n\n    src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CRYPTO_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    CRYPTO_ALG: Joi.string().valid(\"ES256\").default(\"ES256\"),\n}\n                    \n                \n\n\n        \n    \n\n    src/database/database.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DB_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    DB_TYPE: Joi.string().valid(\"sqlite\", \"postgres\").default(\"sqlite\"),\n    DB_HOST: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/crypto.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ECDSA_P256\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    name: \"ECDSA\",\n    namedCurve: \"P-256\",\n    hash: \"SHA-256\" as const,\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/crypto-implementation/ed25519.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ED25519\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                \n                    \n                        Default value : {\n    alg: \"EdDSA\",\n    async generateKeyPair() {\n        const keyPair = await crypto.webcrypto.subtle.generateKey(\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            true,\n            [\"sign\", \"verify\"],\n        );\n\n        const publicKey = await crypto.webcrypto.subtle.exportKey(\n            \"jwk\",\n            keyPair.publicKey,\n        );\n        const privateKey = await crypto.webcrypto.subtle.exportKey(\n            \"jwk\",\n            keyPair.privateKey,\n        );\n\n        return { publicKey, privateKey };\n    },\n    async getSigner(privateKeyJWK: object) {\n        const privateKey = await crypto.webcrypto.subtle.importKey(\n            \"jwk\",\n            privateKeyJWK,\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            false,\n            [\"sign\"],\n        );\n\n        return async (data: string) => {\n            const signature = await crypto.webcrypto.subtle.sign(\n                \"EdDSA\",\n                privateKey,\n                new TextEncoder().encode(data),\n            );\n\n            return Buffer.from(signature).toString(\"base64url\");\n        };\n    },\n    async getVerifier(publicKeyJWK: object) {\n        const publicKey = await crypto.webcrypto.subtle.importKey(\n            \"jwk\",\n            publicKeyJWK,\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            false,\n            [\"verify\"],\n        );\n\n        return async (data: string, signatureBase64url: string) => {\n            const signature = Buffer.from(signatureBase64url, \"base64url\");\n            const isVerified = await crypto.webcrypto.subtle.verify(\n                \"EdDSA\",\n                publicKey,\n                signature,\n                new TextEncoder().encode(data),\n            );\n\n            return isVerified;\n        };\n    },\n}\n                    \n                \n\n\n        \n    \n\n    src/storage/storage.types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FILE_STORAGE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol(\"FILE_STORAGE\")\n                    \n                \n\n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"isPublic\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/issuer/issuer.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ISSUER_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    PUBLIC_URL: Joi.string().default(\"http://localhost:3000\"),\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/key.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        KEY_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    KM_TYPE: Joi.string().valid(\"db\", \"vault\").default(\"db\"),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/oauth/oauth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OAUTH_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    OAUTH_CLIENT_ID: Joi.string().optional(),\n    OAUTH_CLIENT_SECRET: Joi.string().optional(),\n}\n                    \n                \n\n\n        \n    \n\n    src/registrar/registrar.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REGISTRAR_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    REGISTRAR_URL: Joi.string(),\n    REGISTRAR_OIDC_URL: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n}\n                    \n                \n\n            \n                \n                    Validation schema for the registrar module.\nDefines the required environment variables and their types.\n\n                \n            \n\n        \n    \n\n    src/utils/logger/session-logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_LOGGER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"session-logger\"\n                    \n                \n\n            \n                \n                    Key for session logger metadata.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SessionLogger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n    sessionIdParam: string,\n    flowType: \"OID4VCI\" | \"OID4VP\",\n) => SetMetadata(SESSION_LOGGER_KEY, { sessionIdParam, flowType })\n                    \n                \n\n            \n                \n                    Decorator to mark methods that should have session-based logging\n\n                \n            \n\n        \n    \n\n    src/session/session.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n}\n                    \n                \n\n            \n                \n                    Module for managing user sessions.\n\n                \n            \n\n        \n    \n\n    src/auth/token.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Token\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
