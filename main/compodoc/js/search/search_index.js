var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/AccessCertificateResponse.html",[0,1.422,1,3.864]],["body/interfaces/AccessCertificateResponse.html",[0,1.976,1,6.562,2,3.286,3,0.085,4,0.085,5,0.075,6,5.84,7,4.152,8,5.84,9,0.831,10,6.555,11,4.765,12,1.689,13,0.26,14,0.996,15,6.512,16,2.028,17,0.904,18,8.379,19,0.628,20,0.33,21,0.007,22,3.304,23,1.961,24,5.044,25,3.232,26,3.713,27,3.035,28,3.568,29,6.562,30,0.085,31,0.005,32,0.005]],["title/injectables/AdminAuthGuard.html",[33,1.009,34,3.611]],["body/injectables/AdminAuthGuard.html",[3,0.09,4,0.09,5,0.08,13,0.278,17,0.789,20,0.267,21,0.007,30,0.09,31,0.005,32,0.005,33,1.782,34,6.374,35,2.647,36,6.227,37,3.958,38,7.419,39,1.938,40,7.419,41,7.419,42,6.654,43,0.429,44,6.989,45,1.74,46,1.263,47,4.4,48,1.599,49,0.203,50,1.2,51,6.227,52,5.05,53,0.305,54,1.47,55,6.227]],["title/classes/AllowListPolicy.html",[53,0.206,56,2.581]],["body/classes/AllowListPolicy.html",[3,0.069,4,0.069,5,0.061,9,0.673,13,0.211,14,0.871,19,0.557,20,0.346,21,0.007,30,0.117,31,0.005,32,0.005,37,4.121,43,0.431,49,0.191,53,0.402,56,3.834,57,1.044,58,3.342,59,4.712,60,4.969,61,5.307,62,3.353,63,1.123,64,5.309,65,3.836,66,5.309,67,5.309,68,1.781,69,5.309,70,1.572,71,4.018,72,5.69,73,2.053,74,2.543,75,2.334,76,2.76,77,1.256,78,3.931,79,3.931,80,3.931,81,3.646,82,2.46,83,3.342,84,2.797,85,4.431,86,4.431,87,3.646,88,5.728,89,4.469,90,2.905,91,3.646,92,3.646,93,2.905,94,3.342,95,2.401,96,3.484,97,2.905,98,2.905,99,4.937,100,2.59,101,1.517,102,3.646,103,2.905,104,3.646]],["title/classes/ApiKeyConfig.html",[53,0.206,105,3.096]],["body/classes/ApiKeyConfig.html",[3,0.062,4,0.062,5,0.055,9,0.61,13,0.191,14,0.815,17,0.543,19,0.56,20,0.361,21,0.007,23,2.168,30,0.112,31,0.004,32,0.004,43,0.403,46,1.448,49,0.182,53,0.387,57,0.946,63,1.051,68,0.962,70,1.424,73,1.86,75,2.283,76,2.087,77,1.138,84,2.339,105,5.259,106,3.157,107,2.229,108,6.083,109,4.134,110,5.045,111,5.391,112,2.576,113,4.81,114,4.017,115,4.131,116,4.81,117,2.811,118,2.646,119,2.811,120,1.158,121,2.718,122,2.484,123,3.287,124,2.877,125,3.973,126,3.304,127,4.128,128,2.991,129,5.259,130,2.59,131,5.259,132,3.475,133,4.738,134,1.785,135,1.45,136,4.897,137,3.475,138,4.738,139,3.475,140,3.304,141,3.157,142,3.475,143,1.75,144,2.166,145,2.811,146,3.157,147,2.411,148,2.811,149,3.832,150,3.475,151,3.475,152,2.811,153,2.553,154,2.811,155,2.811,156,2.124]],["title/controllers/AppController.html",[157,1.397,158,3.611]],["body/controllers/AppController.html",[3,0.091,4,0.091,5,0.081,13,0.279,19,0.558,21,0.007,30,0.091,31,0.006,32,0.006,39,1.942,43,0.431,48,1.606,49,0.204,50,1.205,53,0.306,54,1.476,63,1.125,120,1.689,157,2.472,158,6.39,159,2.455,160,6.253,161,9.222,162,7.018,163,5.256,164,6.253,165,5.071,166,7.018,167,6.253,168,3.84,169,6.253,170,5.748,171,6.253]],["title/modules/AppModule.html",[172,1.448,173,3.611]],["body/modules/AppModule.html",[3,0.083,4,0.048,5,0.063,20,0.208,21,0.007,22,2.246,30,0.048,31,0.004,32,0.004,49,0.234,50,0.636,53,0.162,54,1.146,68,1.293,93,2.026,144,1.223,158,4.946,159,1.905,172,1.983,173,7.442,174,1.597,175,1.807,176,1.909,177,1.909,178,1.76,179,3.153,180,1.807,181,3.299,182,3.299,183,3.299,184,5.738,185,4.346,186,6.212,187,5.738,188,5.455,189,5.487,190,5.738,191,5,192,4.811,193,5.487,194,5.738,195,5.455,196,2.808,197,1.909,198,1.909,199,3.703,200,4.946,201,3.146,202,4.669,203,2.817,204,1.223,205,3.703,206,3.033,207,2.092,208,3.703,209,3.033,210,3.703,211,3.299,212,2.675,213,3.078,214,5.448,215,3.299,216,3.033,217,2.331,218,3.575,219,3.703,220,2.243,221,1.76,222,3.703,223,4.169,224,3.703,225,2.331,226,4.169,227,3.033,228,2.092,229,3.299,230,4.169,231,3.703,232,3.703,233,3.703,234,4.169,235,3.299,236,3.703,237,4.169,238,2.834,239,4.169,240,2.675,241,4.169,242,3.703,243,3.703,244,3.741,245,4.169,246,3.703,247,3.299,248,3.703,249,3.703,250,3.703,251,4.946,252,3.703,253,3.703,254,3.703,255,3.703,256,4.462,257,3.703,258,4.462,259,4.462,260,1.674,261,3.033,262,1.766,263,5.448,264,4.462,265,3.703,266,6.22,267,3.703,268,3.703,269,3.703,270,4.462,271,2.675,272,3.033,273,3.033,274,3.703,275,4.946,276,1.807,277,3.703,278,3.703,279,3.703,280,3.741,281,4.169,282,1.43,283,4.462,284,3.033,285,2.297,286,1.462,287,1.856,288,3.429,289,3.703,290,3.703,291,3.703,292,3.703,293,3.703,294,2.834,295,3.703,296,3.703,297,3.703,298,3.703,299,2.026,300,3.703,301,3.703,302,3.703,303,3.703,304,3.299,305,3.703,306,3.703,307,3.703,308,3.703,309,3.703,310,3.915,311,3.429,312,5.448,313,3.703,314,1.76,315,2.834,316,3.703,317,2.092,318,1.432,319,4.853,320,3.703,321,2.543,322,3.703,323,0.876,324,3.703,325,3.078,326,3.299,327,3.703,328,3.703,329,3.703,330,3.033,331,3.703,332,3.703,333,3.299,334,5.448,335,3.703,336,3.703,337,3.703,338,3.703]],["title/classes/AttestationBasedPolicy.html",[53,0.206,103,2.581]],["body/classes/AttestationBasedPolicy.html",[3,0.069,4,0.069,5,0.061,13,0.212,14,0.873,19,0.525,20,0.347,21,0.007,30,0.117,31,0.005,32,0.005,37,4.125,43,0.431,49,0.192,53,0.403,56,2.914,57,1.047,58,3.353,59,4.438,60,4.973,61,5.311,62,3.356,63,1.125,65,3.848,68,1.736,70,1.577,71,4.022,72,5.696,73,2.059,74,2.547,75,2.336,76,2.762,77,1.26,78,3.937,79,3.937,80,3.937,81,3.658,82,2.468,83,3.353,84,2.801,85,4.438,86,4.438,87,3.658,88,5.735,89,4.474,90,2.914,91,3.658,92,3.658,93,2.914,94,3.353,95,2.408,96,3.495,97,2.914,98,2.914,99,5.257,100,2.598,101,1.522,102,3.658,103,3.842,104,3.658,339,5.326,340,5.326,341,4.745,342,4.076,343,5.326]],["title/controllers/AuthController.html",[157,1.397,344,3.611]],["body/controllers/AuthController.html",[3,0.038,4,0.038,5,0.034,9,1.082,11,1.524,12,1.637,13,0.118,16,1.268,17,0.334,19,0.307,20,0.263,21,0.007,22,1.219,23,1.976,25,1.193,30,0.038,31,0.003,32,0.003,39,1.069,43,0.346,45,0.736,46,0.535,48,1.798,49,0.201,50,0.508,53,0.129,54,1.337,63,0.903,68,0.919,93,1.618,100,1.443,101,2.604,107,2.025,109,2.078,112,1.337,114,3.45,120,0.712,134,1.098,147,1.482,156,2.806,157,1.361,159,1.034,163,1.862,164,4.094,169,2.635,170,2.422,171,2.635,203,1.934,204,0.977,276,3.835,282,1.786,286,1.815,287,1.482,317,4.116,344,3.517,345,2.635,346,6.355,347,1.897,348,5.636,349,6.355,350,4.595,351,2.957,352,4.762,353,3.122,354,3.058,355,2.957,356,7.286,357,2.957,358,4.314,359,2.686,360,4.561,361,4.666,362,3.643,363,5.205,364,4.595,365,3.764,366,4.072,367,2.991,368,4.314,369,2.957,370,2.957,371,4.314,372,4.171,373,4.595,374,4.333,375,1.827,376,4.314,377,4.094,378,4.314,379,2.957,380,4.595,381,4.595,382,4.035,383,6.355,384,3.188,385,1.547,386,4.595,387,2.957,388,5.399,389,7.861,390,4.727,391,6.355,392,2.957,393,2.957,394,4.595,395,4.616,396,4.094,397,3.184,398,3.871,399,4.616,400,5.021,401,1.524,402,6.132,403,3.32,404,4.616,405,5.637,406,1.862,407,2.957,408,2.184,409,2.635,410,2.957,411,2.957,412,2.957,413,2.422,414,3.699,415,2.635,416,2.893,417,2.422,418,2.078,419,1.941,420,1.941,421,2.957,422,0.845,423,1.794,424,2.957,425,1.361,426,2.957,427,6.132,428,4.592,429,2.635,430,3.32,431,2.806,432,2.635,433,2.635,434,4.072,435,2.957,436,3.517,437,3.517,438,3.156,439,4.595,440,2.957,441,2.777,442,2.191,443,2.031,444,3.764,445,3.517,446,1.57,447,2.263,448,2.957,449,2.031,450,2.422,451,4.727,452,5.637,453,3.016,454,2.263,455,4.595,456,2.957,457,2.957,458,4.595,459,2.957,460,2.957,461,2.422,462,2.957,463,2.893,464,2.957,465,1.618,466,2.957,467,2.957,468,2.957,469,2.957,470,2.957,471,2.635,472,4.094,473,1.034,474,2.263,475,2.957,476,2.957,477,1.371,478,3.016,479,2.957,480,2.263,481,2.957,482,4.616,483,2.957,484,1.547,485,4.595,486,2.957,487,3.156,488,1.607,489,3.764,490,2.957,491,2.422,492,2.422,493,1.728,494,4.595,495,4.595,496,1.862,497,1.337,498,2.137,499,2.957,500,2.137,501,2.957,502,3.517,503,2.635,504,2.957,505,2.263,506,2.957,507,2.957,508,2.957,509,2.957,510,1.671,511,2.957,512,2.957,513,2.137,514,2.422,515,2.137,516,2.031,517,2.957,518,2.031,519,2.031,520,2.635,521,2.957,522,2.905,523,0.736,524,1.792,525,2.957,526,2.635,527,1.728]],["title/modules/AuthModule.html",[172,1.448,184,3.408]],["body/modules/AuthModule.html",[3,0.058,4,0.058,5,0.051,21,0.007,30,0.105,31,0.004,32,0.004,46,0.806,49,0.234,50,0.766,52,3.223,53,0.195,159,2.177,172,2.201,174,1.924,175,2.176,176,2.299,177,2.299,178,2.12,179,3.499,180,3.499,184,7.072,185,4.627,188,5.808,191,5.323,192,5.122,196,3.209,197,2.299,198,2.299,201,2.749,202,4.498,204,1.474,213,3.517,223,3.414,225,2.808,235,3.974,238,3.414,240,3.223,282,1.717,344,5.489,388,3.064,414,6.095,415,3.974,416,5.323,417,3.653,430,4.498,488,1.56,528,3.974,529,3.974,530,3.974,531,3.974,532,5.549,533,4.929,534,6.71,535,3.653,536,5.489,537,7.171,538,2.607,539,1.839,540,5.546,541,2.927,542,3.064,543,3.223,544,2.52,545,3.653,546,4.461,547,4.461,548,1.656,549,3.653,550,4.461,551,4.461,552,3.223,553,3.974,554,3.653,555,3.653,556,7.365,557,3.974,558,7.886,559,3.974,560,6.396,561,3.974,562,3.974,563,3.974,564,3.974,565,3.974,566,3.974,567,3.653,568,3.974,569,3.974,570,3.974,571,3.414,572,3.974,573,3.974,574,3.974,575,4.461,576,4.461,577,3.974,578,3.653,579,1.761,580,3.223]],["title/interfaces/AuthResponse.html",[0,1.422,581,3.408]],["body/interfaces/AuthResponse.html",[0,1.98,2,3.292,3,0.085,4,0.085,5,0.076,9,0.832,12,2.066,13,0.261,14,0.998,19,0.618,20,0.344,21,0.007,23,1.963,30,0.085,31,0.005,32,0.005,112,1.91,354,3.28,581,6.257,582,5.851,583,3.711,584,3.838,585,6.606,586,7.387,587,7.146,588,8.021,589,8.021,590,6.57,591,6.139,592,4.596,593,3.913,594,3.102,595,3.916,596,6.568,597,3.711]],["title/classes/AuthenticationMethodAuth.html",[53,0.206,598,2.858]],["body/classes/AuthenticationMethodAuth.html",[0,1.588,3,0.068,4,0.068,5,0.061,12,1.357,13,0.209,14,0.867,17,0.595,19,0.466,20,0.339,21,0.007,30,0.117,31,0.005,32,0.005,43,0.428,49,0.191,53,0.396,57,1.036,63,1.117,70,1.56,73,2.037,74,2.26,75,2.25,76,2.646,77,1.246,84,2.965,98,2.882,107,2.142,109,3.91,115,2.715,122,2.959,123,2.64,124,2.68,128,2.486,130,3.283,135,2.506,143,2.842,144,2.581,156,3.818,314,4.374,318,2.037,362,3.62,594,2.695,598,4.223,599,4.918,600,3.316,601,5.444,602,5.234,603,4.693,604,5.267,605,5.267,606,5.267,607,2.221,608,3.814,609,4.787,610,3.593,611,4.787,612,3.457,613,3.191,614,4.859,615,2.796,616,1.677,617,4.918,618,3.618,619,3.457,620,2.037,621,3.316,622,3.191,623,3.618,624,3.618,625,3.191,626,3.316,627,3.457]],["title/interfaces/AuthenticationMethodInterface.html",[0,1.422,601,2.97]],["body/interfaces/AuthenticationMethodInterface.html",[0,1.603,2,2.665,3,0.069,4,0.069,5,0.061,12,1.37,13,0.211,14,0.872,17,0.6,19,0.468,20,0.34,21,0.007,30,0.117,31,0.005,32,0.005,49,0.192,53,0.396,70,1.574,73,2.056,74,2.274,75,2.256,76,2.656,77,1.258,84,3.177,98,2.909,107,2.15,109,3.923,115,2.741,122,2.973,123,2.665,124,2.693,128,2.501,130,3.099,135,2.114,143,2.855,144,2.593,156,4.011,314,4.434,318,2.056,362,3.637,594,2.712,598,3.221,599,3.347,600,3.347,601,5.461,602,4.941,607,2.242,608,3.838,609,4.817,610,3.615,611,4.817,612,3.489,613,3.221,614,5.206,615,2.822,616,1.692,617,4.941,618,3.652,619,3.489,620,2.056,621,3.347,622,3.221,623,3.652,624,3.652,625,3.221,626,3.347,627,3.489]],["title/classes/AuthenticationMethodNone.html",[53,0.206,625,2.858]],["body/classes/AuthenticationMethodNone.html",[0,1.615,3,0.069,4,0.069,5,0.062,12,1.38,13,0.213,14,0.877,17,0.605,19,0.471,20,0.332,21,0.007,30,0.117,31,0.005,32,0.005,43,0.329,49,0.192,53,0.397,57,1.054,63,0.859,70,1.587,73,2.072,74,2.286,75,2.261,76,2.664,77,1.268,84,2.986,98,2.932,107,2.156,109,3.933,115,2.763,122,2.984,123,2.686,124,2.703,128,2.515,130,3.306,135,2.125,143,2.866,144,2.603,156,3.84,314,4.39,318,2.072,362,3.651,594,2.726,598,3.247,599,4.438,600,3.374,601,5.475,602,4.96,607,2.26,608,3.858,609,4.842,610,3.634,611,4.842,612,3.517,613,3.247,614,4.892,615,2.844,616,1.706,617,4.96,618,3.681,619,3.517,620,2.072,621,3.374,622,3.247,623,3.681,624,3.681,625,4.271,626,3.374,627,3.517,628,4.775,629,5.359]],["title/classes/AuthenticationMethodPresentation.html",[53,0.206,622,2.858]],["body/classes/AuthenticationMethodPresentation.html",[0,1.588,3,0.068,4,0.068,5,0.061,12,1.357,13,0.209,14,0.867,17,0.595,19,0.466,20,0.339,21,0.007,30,0.117,31,0.005,32,0.005,43,0.428,49,0.191,53,0.396,57,1.036,63,1.117,70,1.56,73,2.037,74,2.26,75,2.25,76,2.646,77,1.246,84,2.965,98,2.882,107,2.142,109,3.91,115,2.715,122,2.959,123,2.64,124,2.68,128,2.486,130,3.283,135,2.506,143,2.842,144,2.581,156,3.818,314,4.374,318,2.037,362,3.62,594,2.695,598,3.191,599,4.918,600,3.316,601,5.444,602,4.918,603,4.693,607,2.221,608,3.814,609,4.787,610,3.593,611,4.787,612,3.457,613,3.191,614,4.859,615,2.796,616,1.677,617,5.234,618,3.618,619,3.457,620,2.037,621,3.316,622,4.223,623,3.618,624,3.618,625,3.191,626,3.316,627,3.457,630,5.267,631,5.267,632,5.267]],["title/classes/AuthenticationUrlConfig.html",[53,0.206,602,2.97]],["body/classes/AuthenticationUrlConfig.html",[0,1.515,3,0.065,4,0.065,5,0.058,9,0.637,12,1.294,13,0.2,14,0.84,17,0.921,19,0.51,20,0.342,21,0.007,30,0.116,31,0.004,32,0.004,43,0.415,49,0.186,53,0.391,57,0.988,63,1.082,70,1.488,73,1.943,74,2.19,75,2.268,76,2.597,77,1.189,84,2.91,98,2.749,107,2.258,109,4.171,115,2.59,122,2.89,123,2.518,124,2.921,128,3.036,130,3.013,135,2.036,143,2.968,144,2.959,156,3.87,314,4.257,318,2.612,362,3.945,594,2.612,598,3.044,599,4.803,600,3.163,601,5.136,602,5.136,607,2.118,608,4.464,609,5.604,610,4.206,611,5.604,612,4.433,613,4.092,614,4.768,615,2.667,616,1.599,617,4.803,618,3.451,619,3.297,620,1.943,621,3.163,622,3.044,623,3.451,624,3.451,625,3.044,626,3.163,627,3.297,633,5.025,634,5.025,635,5.025]],["title/classes/AuthorizationResponse.html",[53,0.206,636,3.408]],["body/classes/AuthorizationResponse.html",[3,0.088,4,0.088,5,0.078,9,0.863,13,0.27,14,1.019,19,0.61,20,0.26,21,0.007,30,0.088,31,0.005,32,0.005,43,0.418,49,0.166,53,0.358,57,1.339,63,1.091,75,2.227,77,1.611,354,3.105,375,3.112,382,4.845,583,3.845,584,4.79,592,4.35,593,4.454,636,5.922,637,7.302,638,6.064,639,4.79]],["title/controllers/AuthorizeController.html",[157,1.397,640,3.611]],["body/controllers/AuthorizeController.html",[3,0.053,4,0.053,5,0.047,9,0.741,11,3.015,12,2.355,13,0.162,17,0.842,20,0.323,21,0.007,30,0.053,31,0.004,32,0.004,39,1.361,43,0.458,45,1.857,46,1.348,48,1.936,49,0.218,50,0.701,53,0.178,54,1.569,63,1.196,68,0.817,120,0.983,124,2.006,157,2.338,159,1.428,163,2.571,207,2.307,282,0.903,286,1.612,310,5.125,325,5.164,347,2.3,354,3.337,360,5.051,375,2.743,382,4.931,384,3.714,385,2.511,401,2.105,403,4.225,408,1.941,420,2.68,422,1.167,423,1.861,425,2.505,438,2.805,473,3.29,484,1.374,610,3.015,640,4.476,641,3.638,642,1.941,643,4.083,644,5.21,645,4.476,646,5.848,647,4.896,648,5.23,649,6.833,650,7.461,651,3.638,652,5.696,653,4.083,654,4.083,655,5.21,656,4.083,657,4.083,658,5.39,659,4.937,660,4.083,661,4.083,662,6.111,663,4.083,664,4.083,665,4.083,666,4.083,667,4.083,668,2.78,669,5.21,670,2.68,671,2.805,672,2.474,673,2.167,674,4.693,675,3.125,676,3.522,677,2.68,678,4.139,679,4.083,680,3.125,681,1.761,682,3.125,683,4.083,684,4.083,685,1.647,686,4.083,687,4.083,688,4.083,689,4.083,690,4.697,691,4.083,692,3.638,693,3.344,694,3.344,695,3.125,696,3.638,697,4.083,698,3.638,699,4.083,700,3.638,701,3.125,702,4.083,703,4.083,704,4.083]],["title/classes/AuthorizeQueries.html",[53,0.206,652,2.97]],["body/classes/AuthorizeQueries.html",[3,0.068,4,0.068,5,0.061,13,0.209,14,0.867,17,1.114,19,0.659,20,0.362,21,0.007,30,0.068,31,0.005,32,0.005,43,0.582,49,0.129,53,0.304,57,1.036,63,1.519,74,3.093,75,2.416,77,1.246,398,5.366,652,4.388,690,4.918,705,8.5,706,3.191,707,5.644,708,7.812,709,7.812,710,7.812,711,5.644,712,7.812,713,7.812,714,5.127,715,4.918,716,6.509,717,5.267,718,4.693,719,5.267,720,5.267,721,5.267,722,4.693,723,5.267,724,4.693,725,4.693,726,4.693,727,5.267]],["title/injectables/AuthorizeService.html",[33,1.009,678,2.858]],["body/injectables/AuthorizeService.html",[0,1.231,3,0.033,4,0.033,5,0.029,12,2.034,13,0.101,17,0.869,19,0.578,20,0.318,21,0.007,22,1.05,30,0.053,31,0.003,32,0.003,33,0.874,35,0.965,39,0.95,43,0.473,45,1.916,46,1.391,48,1.707,49,0.204,50,0.437,53,0.111,54,1.438,62,1.579,68,0.509,84,0.908,101,0.728,107,1.052,109,2.312,112,0.741,125,3.097,128,2.437,134,2.171,135,0.768,143,2.128,144,1.932,147,2.563,156,2.582,203,2.345,204,0.841,207,1.439,260,2.312,262,0.826,282,2.012,286,2.019,287,1.277,310,3.097,314,3.043,315,3.913,317,2.889,323,1.821,325,4.216,347,2.966,361,1.313,362,1.18,367,1.352,375,2.706,384,3.04,385,1.375,397,1.439,422,1.167,423,2.375,441,2.896,442,2.45,446,1.352,449,2.805,451,1.749,465,1.394,473,3.249,484,2.882,487,1.749,496,1.603,497,2.312,498,1.84,500,1.84,502,1.949,505,1.949,510,2.307,519,1.749,585,2.805,594,2.476,607,1.074,610,3.3,613,2.474,614,1.489,615,1.352,616,1.3,620,1.977,648,3.913,651,2.269,652,4.971,658,1.84,659,3.694,670,3.355,671,1.749,673,1.352,676,3.7,677,1.672,678,2.474,680,1.949,681,1.099,690,3.219,707,4.226,711,4.226,728,1.949,729,3.639,730,4.084,731,4.188,732,4.084,733,4.188,734,4.084,735,4.188,736,1.439,737,3.246,738,4.195,739,4.349,740,2.547,741,2.547,742,3.126,743,2.547,744,5.597,745,3.345,746,2.547,747,5.244,748,2.547,749,2.547,750,1.439,751,2.235,752,3.345,753,2.547,754,2.547,755,2.547,756,3.345,757,2.547,758,2.547,759,2.547,760,3.742,761,4.791,762,4.791,763,2.78,764,2.086,765,4.791,766,1.84,767,1.352,768,2.086,769,1.949,770,1.84,771,2.086,772,2.951,773,3.345,774,2.951,775,2.086,776,2.086,777,3.345,778,2.086,779,3.345,780,2.571,781,4.791,782,4.031,783,2.086,784,2.086,785,1.949,786,2.086,787,2.086,788,1.949,789,1.672,790,1.949,791,1.949,792,2.086,793,1.949,794,2.086,795,1.949,796,2.086,797,2.086,798,3.345,799,2.086,800,1.949,801,2.086,802,2.086,803,3.739,804,2.086,805,2.086,806,2.086,807,2.086,808,2.086,809,4.188,810,3.913,811,2.047,812,3.345,813,3.126,814,2.086,815,4.791,816,3.345,817,5.187,818,2.086,819,3.345,820,3.345,821,3.345,822,3.345,823,3.345,824,2.047,825,3.345,826,2.086,827,2.086,828,2.086,829,2.086,830,2.086,831,2.086,832,2.086,833,3.345,834,2.086,835,2.086,836,1.543,837,1.277,838,2.086,839,1.949,840,1.672,841,2.086,842,1.439,843,2.086,844,2.086,845,1.949,846,1.603,847,3.345,848,1.439,849,2.086,850,4.188,851,2.086,852,2.086,853,2.086,854,2.086,855,2.086,856,1.949,857,3.345,858,2.086,859,3.345,860,2.168,861,2.086,862,4.188,863,1.949,864,2.086,865,2.086,866,2.086,867,2.086,868,1.672,869,2.571,870,1.749,871,2.086,872,1.949,873,2.086,874,3.913,875,2.086,876,2.086,877,2.086,878,4.188,879,2.086,880,2.086,881,3.913,882,2.086,883,2.086,884,2.086]],["title/entities/CertEntity.html",[885,1.372,886,2.581]],["body/entities/CertEntity.html",[3,0.062,4,0.062,5,0.055,7,3.534,9,1.096,11,3.84,12,2.062,13,0.191,14,0.814,15,5.383,16,1.885,17,0.739,19,0.602,20,0.363,21,0.007,23,2.116,24,4.12,25,2.641,26,3.033,27,2.479,30,0.084,31,0.004,32,0.004,43,0.554,49,0.16,53,0.209,63,1.444,68,1.848,262,2.122,323,1.763,522,3.374,523,2.203,527,4.896,548,2.971,592,4.248,885,2.328,886,3.581,887,2.28,888,3.928,889,5.361,890,5.831,891,3.734,892,3.84,893,4.38,894,4.354,895,4.796,896,4.678,897,3.111,898,5.498,899,4.796,900,3.193,901,4.796,902,3.565,903,4.796,904,2.71,905,3.375,906,2.76,907,4.796,908,2.76,909,2.334,910,4.796,911,5.383,912,4.796,913,4.354,914,4.796,915,3.698,916,3.698,917,1.978,918,2.76,919,1.615,920,2.022,921,3.614]],["title/classes/ClaimsQuery.html",[53,0.206,78,2.364]],["body/classes/ClaimsQuery.html",[3,0.049,4,0.049,5,0.044,7,1.671,9,0.702,12,2.184,13,0.15,14,0.689,16,1.801,17,0.739,19,0.617,20,0.353,21,0.007,25,2.234,26,1.754,27,1.434,28,2.283,30,0.107,31,0.004,32,0.004,43,0.402,49,0.202,53,0.377,57,0.745,62,2.785,63,1.049,68,1.802,70,1.121,71,4.073,73,1.464,74,2.921,75,2.256,76,2.632,77,0.896,78,2.775,79,3.281,80,3.281,89,3.95,95,2.504,101,1.082,107,1.426,118,2.234,120,0.911,122,2.097,124,1.299,128,1.975,134,1.405,143,2.381,144,1.251,221,3.111,262,1.227,286,2.844,299,2.071,323,0.896,353,1.464,375,1.227,493,2.212,523,1.63,548,2.429,579,1.495,592,4.248,593,1.847,594,2.531,595,1.712,597,2.139,607,1.596,616,1.762,639,2.212,668,1.799,672,4.363,681,1.633,842,2.139,848,2.139,860,2.009,885,1.904,891,1.898,892,1.951,893,3.03,894,3.236,896,3.236,897,1.799,900,3.514,902,2.283,905,2.334,906,1.596,908,1.596,909,1.35,913,3.236,915,2.139,916,2.139,917,1.561,918,2.334,919,1.274,920,1.596,921,2.823,922,4.534,923,2.212,924,3.786,925,3.373,926,3.373,927,3.786,928,2.775,929,3.582,930,3.634,931,2.939,932,3.698,933,2.485,934,4.296,935,2.383,936,3.965,937,2.485,938,4.727,939,4.727,940,4.727,941,4.067,942,4.209,943,4.296,944,2.485,945,2.485,946,3.965,947,2.485,948,2.485,949,2.485,950,2.485,951,2.485,952,2.485,953,2.485,954,3.634,955,4.363,956,2.485,957,2.009,958,2.485,959,2.775,960,2.485,961,2.485,962,2.009,963,3.338,964,2.293,965,2.212,966,2.139,967,2.293,968,1.951,969,2.485]],["title/classes/ClientCredentialsDto.html",[53,0.206,371,3.611]],["body/classes/ClientCredentialsDto.html",[3,0.091,4,0.091,5,0.081,13,0.279,14,1.038,19,0.616,20,0.318,21,0.006,30,0.091,31,0.006,32,0.006,43,0.513,49,0.171,53,0.364,57,1.38,63,1.338,75,2.385,77,1.661,371,6.39,398,6.121,399,7.299,970,7.299,971,6.253,972,7.018,973,7.018]],["title/classes/ClientInitDto.html",[53,0.206,974,3.611]],["body/classes/ClientInitDto.html",[3,0.093,4,0.093,5,0.083,13,0.285,14,1.051,16,2.023,17,0.954,19,0.565,20,0.273,21,0.006,30,0.093,31,0.006,32,0.006,43,0.44,49,0.175,53,0.369,57,1.41,63,1.149,74,2.741,75,2.14,77,1.696,970,6.923,974,6.47,975,6.385,976,5.87,977,7.167]],["title/entities/CredentialConfig.html",[885,1.372,978,2.581]],["body/entities/CredentialConfig.html",[3,0.041,4,0.041,5,0.037,9,0.837,13,0.126,14,0.604,16,1.327,17,1.046,19,0.603,20,0.359,21,0.007,23,1.444,25,1.283,28,2.723,30,0.085,31,0.003,32,0.003,43,0.555,46,1.286,49,0.205,53,0.367,56,3.227,59,1.797,60,4.104,61,4.384,63,1.448,68,1.832,70,1.746,74,2.775,75,2.198,76,2.562,77,1.396,82,1.474,84,1.134,85,1.797,86,1.797,90,3.227,97,3.227,100,2.878,101,1.389,103,3.613,112,1.921,117,2.84,118,1.961,119,1.858,120,0.765,122,2.234,135,1.778,148,1.858,149,3.859,152,3.859,153,1.688,154,1.858,155,2.84,262,2.141,285,2.049,323,1.396,408,1.511,523,1.771,548,2.451,579,1.919,616,1.012,620,1.879,715,2.002,716,2.184,811,3.31,885,1.414,886,3.613,887,1.511,900,4.332,902,2.723,904,2.746,905,3.393,906,2.784,908,2.049,909,1.733,917,1.311,918,2.487,919,1.07,920,1.341,921,2.544,923,1.858,928,2.436,929,3.227,931,2.579,959,2.956,962,1.688,963,3.476,978,2.659,979,2.298,980,4.262,981,4.262,982,4.262,983,3.332,984,3.332,985,4.514,986,4.728,987,3.404,988,3.511,989,4.86,990,3.18,991,4.536,992,2.833,993,3.18,994,4.33,995,3.18,996,3.18,997,3.18,998,2.605,999,2.371,1000,3.18,1001,3.18,1002,3.72,1003,3.72,1004,3.72,1005,3.72,1006,3.511,1007,3.72,1008,3.72,1009,3.72,1010,3.72,1011,3.72,1012,3.72,1013,3.18,1014,2.833,1015,3.72,1016,3.18,1017,3.18,1018,4.86,1019,4.86,1020,3.18,1021,3.18,1022,3.18,1023,3.18,1024,3.18,1025,4.157,1026,3.98,1027,3.18,1028,3.18,1029,3.18,1030,2.434,1031,3.18,1032,3.18,1033,3.511,1034,2.434,1035,2.087,1036,2.298,1037,2.184,1038,2.434,1039,4.886,1040,1.594,1041,3.613,1042,2.087,1043,2.434,1044,2.434,1045,2.434,1046,2.087,1047,3.511,1048,2.434,1049,2.434,1050,2.434,1051,2.434,1052,2.434,1053,1.926,1054,2.087]],["title/classes/CredentialConfigCreate.html",[53,0.206,1055,3.408]],["body/classes/CredentialConfigCreate.html",[3,0.093,4,0.093,5,0.083,21,0.007,23,2.072,30,0.093,31,0.006,32,0.006,37,4.023,49,0.207,53,0.313,57,1.413,120,1.728,135,2.165,323,2.003,523,2.107,978,3.93,981,6.115,1055,6.115,1056,6.399,1057,5.497,1058,8.463,1059,4.933,1060,5.883]],["title/classes/CredentialConfigMapping.html",[53,0.206,1061,3.611]],["body/classes/CredentialConfigMapping.html",[3,0.081,4,0.081,5,0.073,9,0.798,13,0.25,14,0.972,16,1.912,19,0.568,20,0.24,21,0.007,26,3.623,27,2.961,30,0.101,31,0.005,32,0.005,37,2.994,43,0.387,49,0.208,53,0.371,57,1.239,63,1.009,71,3.623,75,2.152,77,1.49,82,2.919,107,2.19,120,1.516,282,1.393,323,1.49,523,1.568,584,4.968,616,2.909,620,3.437,811,3.157,891,3.157,892,3.247,1059,4.326,1061,5.983,1062,5.159,1063,6.962,1064,5.022,1065,6.299,1066,5.159,1067,4.326,1068,5.611,1069,4.821,1070,4.821,1071,4.134,1072,5.611]],["title/injectables/CredentialConfigService.html",[33,1.009,1073,3.096]],["body/injectables/CredentialConfigService.html",[3,0.037,4,0.037,5,0.092,7,1.249,9,0.854,13,0.112,16,2.096,17,0.807,19,0.611,20,0.273,21,0.007,22,2.259,23,1.086,30,0.037,31,0.003,32,0.003,33,0.949,35,1.071,39,1.033,43,0.476,45,1.78,46,1.293,48,1.864,49,0.221,50,0.486,53,0.239,54,1.305,68,0.888,70,0.838,72,1.856,77,0.669,95,2.007,101,1.565,107,1.995,112,0.823,135,2.64,147,1.418,153,1.501,201,1.96,203,2.566,204,0.934,217,1.781,218,1.856,220,1.714,221,2.11,251,2.165,260,1.279,282,1.917,285,2.842,287,1.418,323,2.072,347,2.407,353,1.094,378,3.397,385,2.407,395,2.317,422,1.773,423,1.975,425,2.293,453,1.856,454,2.165,465,2.429,477,2.538,484,2.407,488,1.916,523,2.278,539,1.166,616,2.644,668,2.11,685,1.141,737,3.382,767,1.501,885,2.252,887,2.11,919,0.952,978,4.619,983,2.508,1055,4.87,1060,2.317,1064,3.505,1073,4.071,1074,6.899,1075,5.595,1076,2.165,1077,2.225,1078,3.302,1079,4.438,1080,3.048,1081,3.625,1082,2.829,1083,3.489,1084,2.907,1085,4.482,1086,2.829,1087,5.478,1088,4.438,1089,2.829,1090,2.288,1091,3.992,1092,5.858,1093,3.207,1094,4.438,1095,3.954,1096,2.829,1097,3.758,1098,4.438,1099,2.829,1100,2.829,1101,3.958,1102,3.048,1103,2.829,1104,4.438,1105,2.829,1106,3.207,1107,3.958,1108,4.37,1109,4.438,1110,3.207,1111,1.548,1112,3.635,1113,2.044,1114,2.317,1115,1.943,1116,2.317,1117,1.943,1118,2.52,1119,2.044,1120,2.044,1121,3.635,1122,2.829,1123,5.081,1124,2.317,1125,2.044,1126,3.207,1127,2.044,1128,2.044,1129,2.044,1130,2.044,1131,4.486,1132,2.794,1133,2.317,1134,2.317,1135,3.762,1136,2.317,1137,6.001,1138,2.913,1139,2.317,1140,2.165,1141,2.317,1142,2.317,1143,2.317,1144,2.317,1145,2.829,1146,4.486,1147,4.486,1148,2.317,1149,2.165,1150,2.317,1151,2.317,1152,5.478,1153,2.317,1154,3.635,1155,2.52,1156,2.317,1157,2.317,1158,2.165,1159,2.317,1160,2.317,1161,2.165,1162,2.317,1163,2.317,1164,5.478,1165,4.192,1166,2.829,1167,3.958,1168,3.758,1169,3.635,1170,3.207,1171,3.635,1172,1.943,1173,2.794,1174,3.595,1175,2.829,1176,2.317,1177,2.52,1178,2.829,1179,2.52,1180,2.829,1181,2.829,1182,2.829,1183,2.829,1184,2.044,1185,2.317,1186,2.829,1187,2.52,1188,2.829,1189,2.829]],["title/classes/CredentialIssuerMetadataDto.html",[53,0.206,1190,3.611]],["body/classes/CredentialIssuerMetadataDto.html",[3,0.066,4,0.066,5,0.059,9,0.652,13,0.205,14,0.854,19,0.625,20,0.354,21,0.007,27,2.6,30,0.066,31,0.005,32,0.005,43,0.563,53,0.225,57,1.012,95,3.104,101,2.354,144,3.024,168,4.508,360,4.654,366,4.959,367,3.643,382,4.372,447,5.254,450,5.622,497,4.383,579,2.033,591,3.939,616,2.95,620,3.413,909,2.448,1041,4.696,1064,3.878,1135,3.535,1190,5.254,1191,6.083,1192,8.258,1193,4.216,1194,3.118,1195,2.816,1196,7.723,1197,7.723,1198,7.723,1199,6.881,1200,7.723,1201,7.723,1202,7.723,1203,5.147,1204,6.864,1205,5.147,1206,3.878,1207,6.864,1208,5.147,1209,6.881,1210,5.147,1211,5.147,1212,5.147,1213,6.115,1214,5.147,1215,6.864,1216,5.147,1217,4.158,1218,4.586,1219,5.147]],["title/classes/CredentialQuery.html",[53,0.206,79,2.364]],["body/classes/CredentialQuery.html",[3,0.048,4,0.048,5,0.042,7,1.626,9,0.688,12,2.167,13,0.146,14,0.675,16,1.783,17,0.855,19,0.614,20,0.355,21,0.007,25,2.867,26,1.707,27,1.395,28,2.656,30,0.106,31,0.004,32,0.004,43,0.466,49,0.2,53,0.375,57,0.724,62,2.098,63,1.214,68,1.792,70,1.09,71,3.979,73,1.424,74,2.905,75,2.269,76,2.609,77,0.871,78,1.846,79,3.562,80,3.229,89,3.906,95,2.453,101,1.052,107,1.398,118,2.189,120,0.886,122,2.44,124,1.263,128,1.935,134,1.367,143,2.343,144,1.217,221,1.75,262,1.194,286,2.807,299,2.015,323,0.871,342,2.819,353,1.424,375,1.194,493,2.152,523,1.604,548,2.391,579,1.454,592,4.207,593,1.797,594,2.491,595,1.665,597,2.081,607,1.553,616,1.727,639,2.152,668,1.75,672,4.306,681,1.588,842,2.081,848,2.081,860,1.955,885,1.874,891,1.846,892,1.898,893,2.969,894,3.171,896,3.171,897,1.75,900,3.468,902,2.237,905,2.288,906,1.553,908,1.553,909,1.313,913,3.171,915,2.081,916,2.081,917,1.519,918,2.288,919,1.24,920,1.553,921,2.779,922,4.99,923,2.152,928,2.719,929,3.525,930,3.561,931,2.88,932,3.639,933,2.417,934,4.228,935,2.318,936,3.902,937,2.417,938,4.664,939,4.664,940,4.664,941,4.021,942,4.154,943,4.228,944,2.417,945,2.417,946,4.306,947,2.417,948,2.417,949,2.417,950,4.228,951,4.228,952,4.228,953,2.417,954,3.561,955,4.306,956,2.417,957,1.955,958,2.417,959,2.719,960,2.417,961,2.417,962,1.955,963,3.294,964,2.231,965,2.152,966,2.081,967,2.231,968,1.898,969,2.417,1220,3.683,1221,3.683,1222,3.683,1223,3.683,1224,3.281,1225,3.281,1226,3.683]],["title/classes/CredentialSetQuery.html",[53,0.206,80,2.364]],["body/classes/CredentialSetQuery.html",[3,0.049,4,0.049,5,0.044,7,1.685,9,0.706,12,2.188,13,0.152,14,0.693,16,1.626,17,0.742,19,0.613,20,0.35,21,0.007,25,2.247,26,1.768,27,1.445,28,2.711,30,0.107,31,0.004,32,0.004,43,0.342,49,0.202,53,0.378,57,0.751,62,2.153,63,0.892,68,1.805,70,1.13,71,4.015,73,1.475,74,2.925,75,2.229,76,2.638,77,0.903,78,1.913,79,3.296,80,3.623,89,3.963,95,2.973,101,1.091,107,1.434,118,2.247,120,0.918,122,2.109,124,1.309,128,1.986,134,2.44,143,2.392,144,1.26,221,1.814,262,1.237,286,2.855,299,3.598,323,0.903,353,1.475,375,1.237,493,2.23,523,1.637,548,2.44,579,1.507,592,4.26,593,1.862,594,2.543,595,1.725,597,2.156,607,1.609,616,1.772,639,2.23,668,1.814,672,4.379,681,1.646,842,2.156,848,2.156,860,2.025,885,1.913,891,1.913,892,1.967,893,3.047,894,3.254,896,3.254,897,1.814,900,3.527,902,2.296,905,2.348,906,1.609,908,1.609,909,1.361,913,3.254,915,2.156,916,2.156,917,1.573,918,2.348,919,1.284,920,1.609,921,2.836,922,4.14,923,2.23,928,2.791,929,3.598,930,3.655,931,2.955,932,3.715,933,2.504,934,4.315,935,2.402,936,3.983,937,2.504,938,4.744,939,4.744,940,4.744,941,4.08,942,4.225,943,4.315,944,2.504,945,2.504,946,3.983,947,2.504,948,2.504,949,2.504,950,2.504,951,2.504,952,2.504,953,2.504,954,4.315,955,4.379,956,2.504,957,2.025,958,2.504,959,2.791,960,2.504,961,2.504,962,2.025,963,3.35,964,2.312,965,2.23,966,2.156,967,2.312,968,1.967,969,2.504,1227,3.125,1228,3.816,1229,3.816,1230,3.816,1231,3.816]],["title/controllers/CredentialsController.html",[157,1.397,1232,3.611]],["body/controllers/CredentialsController.html",[3,0.066,4,0.066,5,0.059,9,0.647,13,0.203,16,1.848,17,0.868,19,0.514,20,0.294,21,0.007,30,0.066,31,0.005,32,0.005,39,1.589,43,0.473,45,1.915,46,1.391,48,2.091,49,0.215,50,0.877,53,0.223,54,1.618,63,1.233,107,2.116,120,1.229,135,2.58,157,2.278,159,1.787,318,3.534,354,2.914,384,2.697,401,3.966,406,3.216,418,4.228,425,2.432,497,2.31,523,2.045,533,2.711,616,2.946,642,2.428,685,2.061,1055,5.934,1064,4.64,1073,5.049,1075,3.691,1077,3.423,1078,2.255,1090,3.52,1106,4.934,1116,4.184,1117,3.508,1232,5.889,1233,4.551,1234,6.83,1235,6.301,1236,6.83,1237,7.694,1238,4.551,1239,3.508,1240,5.108,1241,5.108,1242,5.108,1243,5.108,1244,5.108,1245,3.094,1246,3.094,1247,3.216,1248,3.216,1249,4.184,1250,4.184,1251,3.094,1252,3.216,1253,3.094,1254,4.184,1255,3.91,1256,4.482,1257,2.154,1258,5.108,1259,5.108,1260,5.108,1261,3.508,1262,3.91,1263,5.108]],["title/controllers/CredentialsMetadataController.html",[157,1.397,1264,3.611]],["body/controllers/CredentialsMetadataController.html",[3,0.074,4,0.074,5,0.066,9,0.723,13,0.227,16,2.043,17,0.829,19,0.645,20,0.327,21,0.007,27,2.781,30,0.074,31,0.005,32,0.005,39,1.708,43,0.451,45,1.828,46,1.327,48,1.858,49,0.198,50,0.979,53,0.249,54,1.544,63,1.176,68,1.141,101,2.098,107,1.891,120,1.373,157,1.689,159,1.995,163,3.59,323,2.214,420,3.743,425,2.404,488,2.568,524,4.447,616,2.89,642,2.711,685,2.301,941,3.896,984,4.843,986,5.193,1097,5.193,1195,4.017,1256,5.328,1257,2.405,1264,5.619,1265,6.214,1266,6.65,1267,5.081,1268,5.703,1269,5.703,1270,5.703,1271,5.703,1272,5.703,1273,5.703,1274,5.703,1275,5.081,1276,5.703,1277,5.703,1278,5.703,1279,7.342,1280,5.703,1281,5.703,1282,5.703,1283,5.703]],["title/injectables/CredentialsService.html",[33,1.009,1256,3.096]],["body/injectables/CredentialsService.html",[3,0.036,4,0.036,5,0.032,9,0.353,13,0.111,16,1.599,17,0.756,19,0.583,20,0.294,21,0.007,23,1.074,30,0.036,31,0.003,32,0.003,33,0.939,35,1.056,39,1.021,43,0.437,45,1.667,46,1.21,48,1.857,49,0.217,50,0.479,53,0.122,54,1.295,68,0.558,82,1.292,100,3.003,101,1.759,107,2.198,112,0.811,114,1.398,134,2.014,135,1.636,147,3.085,203,2.644,204,0.921,227,2.284,228,1.576,262,0.904,282,1.911,323,1.991,347,2.832,353,1.078,385,2.393,408,1.326,422,1.759,423,2.131,425,2.526,431,3.284,441,2.701,442,2.263,446,2.33,453,1.83,465,1.526,472,2.485,473,3.11,484,2.504,488,1.535,496,2.763,513,2.015,515,3.922,516,3.728,524,4.055,527,2.565,539,1.15,544,1.576,579,1.101,608,2.402,616,2.78,673,1.48,737,3.364,750,1.576,751,1.526,760,4.155,763,3.768,766,2.015,767,1.48,782,3.875,803,3.663,811,4.277,824,2.72,836,1.689,837,1.398,919,0.939,941,2.33,959,1.398,978,3.368,980,3.171,983,2.48,984,3.066,986,4.055,987,3.173,999,2.648,1025,1.756,1035,1.83,1036,2.015,1037,1.916,1060,2.284,1064,2.48,1077,2.2,1078,1.231,1083,3.003,1097,3.729,1101,3.171,1110,2.015,1111,1.526,1118,2.485,1199,4.836,1206,1.576,1251,1.689,1256,4.04,1284,2.485,1285,5.428,1286,5.428,1287,5.428,1288,4.389,1289,2.485,1290,4.503,1291,6.156,1292,4.668,1293,2.789,1294,2.789,1295,6.694,1296,2.789,1297,4.389,1298,3.171,1299,5.863,1300,2.789,1301,2.789,1302,2.789,1303,2.789,1304,4.389,1305,2.789,1306,6.156,1307,5.428,1308,1.916,1309,3.911,1310,4.389,1311,3.597,1312,2.135,1313,2.135,1314,3.911,1315,2.135,1316,3.911,1317,2.135,1318,2.015,1319,2.015,1320,1.916,1321,2.789,1322,1.576,1323,4.389,1324,3.911,1325,2.789,1326,2.789,1327,5.484,1328,2.789,1329,2.789,1330,2.789,1331,4.389,1332,4.389,1333,4.389,1334,6.694,1335,2.789,1336,4.389,1337,2.789,1338,5.428,1339,2.789,1340,2.789,1341,2.789,1342,4.389,1343,2.485,1344,4.389,1345,4.389,1346,2.789,1347,2.789,1348,2.789,1349,2.789,1350,2.789,1351,2.284,1352,2.789,1353,2.789,1354,2.789,1355,2.789,1356,2.485,1357,2.789,1358,2.485,1359,2.284,1360,2.789,1361,2.789,1362,3.171,1363,1.526,1364,2.284,1365,2.789,1366,2.789,1367,2.789,1368,2.284,1369,1.83,1370,2.485,1371,2.485,1372,4.389,1373,5.484,1374,2.789,1375,2.789,1376,2.789,1377,2.015,1378,2.135,1379,2.789,1380,1.916,1381,4.389,1382,2.135,1383,2.789,1384,2.789,1385,2.789,1386,2.789,1387,4.389]],["title/modules/CryptoImplementatationModule.html",[172,1.448,1388,3.408]],["body/modules/CryptoImplementatationModule.html",[3,0.085,4,0.085,5,0.076,21,0.007,30,0.104,31,0.005,32,0.005,49,0.22,50,1.128,53,0.287,172,2.658,174,2.833,175,3.204,176,3.386,177,3.386,178,3.122,179,4.225,180,4.225,196,4.135,197,3.386,198,3.386,201,2.9,202,5.795,204,2.17,213,4.532,226,5.027,228,3.711,282,1.453,358,6.139,1172,4.511,1292,5.958,1319,4.745,1388,6.883,1389,5.851,1390,5.851,1391,5.851,1392,4.511,1393,5.379,1394,5.851,1395,5.851]],["title/interfaces/CryptoImplementation.html",[0,1.422,1396,3.24]],["body/interfaces/CryptoImplementation.html",[0,2.441,2,2.844,3,0.073,4,0.073,5,0.065,9,0.719,13,0.225,14,0.91,17,0.826,19,0.606,20,0.346,21,0.007,23,2.094,30,0.073,31,0.005,32,0.005,39,1.703,43,0.498,45,1.822,46,1.464,48,1.853,228,4.834,385,3.147,425,2.167,442,2.329,595,3.309,836,4.906,837,4.289,1298,6.182,1343,7.623,1392,5.877,1396,5.026,1397,4.648,1398,5.993,1399,7.318,1400,5.993,1401,5.287,1402,7.008,1403,7.318,1404,7.318,1405,5.674,1406,6.519,1407,5.563,1408,6.519,1409,9.348,1410,5.674,1411,6.549,1412,5.993,1413,6.519,1414,5.674,1415,6.199,1416,6.519,1417,3.897,1418,3.724,1419,4.648,1420,3.724]],["title/injectables/CryptoImplementationService.html",[33,1.009,1292,2.858]],["body/injectables/CryptoImplementationService.html",[3,0.073,4,0.073,5,0.065,13,0.224,17,0.822,20,0.278,21,0.007,30,0.094,31,0.005,32,0.005,33,1.557,35,2.131,39,1.693,43,0.496,45,1.812,46,1.316,48,2.07,49,0.216,50,0.966,53,0.246,54,1.858,112,1.637,124,2.497,203,2.926,204,1.859,228,4.819,262,2.36,422,1.608,425,1.666,441,2.27,442,1.791,510,4.819,527,4.253,837,4.427,872,4.307,874,5.571,1172,6.067,1257,2.373,1292,4.409,1298,5.259,1311,3.289,1312,4.307,1313,4.307,1392,5.858,1396,5.541,1420,5.797,1421,4.609,1422,8.53,1423,8.067,1424,5.627,1425,5.627,1426,7.278,1427,5.627,1428,5.571,1429,6.986,1430,5.627,1431,5.627,1432,6.607,1433,5.259,1434,8.067,1435,6.761,1436,5.627]],["title/modules/CryptoModule.html",[172,1.448,185,2.581]],["body/modules/CryptoModule.html",[3,0.081,4,0.081,5,0.072,21,0.007,30,0.081,31,0.005,32,0.005,49,0.23,50,1.078,53,0.274,159,2.728,172,2.604,174,2.707,175,3.061,176,3.235,177,3.235,178,2.983,179,4.14,180,4.14,185,5.296,196,4.02,197,3.235,198,3.235,201,2.771,538,3.667,539,2.587,737,4.421,886,3.434,1437,5.591,1438,5.591,1439,5.591,1440,6.156,1441,6.275,1442,6.495,1443,5.591,1444,6.275,1445,6.275,1446,5.118,1447,5.591,1448,6.275,1449,5.591]],["title/classes/DBKeyService.html",[53,0.206,1450,3.611]],["body/classes/DBKeyService.html",[3,0.032,4,0.032,5,0.073,7,1.101,9,0.316,13,0.099,14,0.499,16,1.719,17,0.937,19,0.649,20,0.348,21,0.007,22,3.052,23,2.329,24,4.26,30,0.065,31,0.003,32,0.003,37,1.908,39,0.934,43,0.517,45,2.066,46,1.5,48,2.007,49,0.214,53,0.109,54,1.65,57,0.49,65,5.348,68,0.803,112,0.725,114,2.526,203,2.322,204,0.823,228,2.268,244,1.712,260,1.815,262,0.808,282,1.807,323,2.166,347,2.868,384,2.281,385,2.977,408,1.185,422,1.147,423,2.815,425,1.875,441,1.619,442,1.604,477,1.86,484,2.572,488,2.589,497,1.815,522,3.668,523,1.685,524,2.432,527,2.346,692,3.576,736,1.408,737,2.279,750,3.823,751,1.364,763,3.382,836,3.836,886,1.364,911,4.174,983,5.194,1054,2.634,1077,2.012,1078,1.772,1083,3.472,1091,1.285,1108,2.346,1172,4.35,1292,3.499,1311,1.457,1319,1.801,1322,1.408,1363,3.161,1380,2.757,1396,3.461,1407,2.757,1411,3.072,1412,2.042,1417,4.35,1418,5.262,1432,2.042,1446,1.636,1450,3.072,1451,6.34,1452,2.221,1453,2.757,1454,5.507,1455,4.489,1456,4.014,1457,4.014,1458,6.595,1459,3.288,1460,4.421,1461,3.576,1462,3.576,1463,4.731,1464,4.127,1465,4.014,1466,3.288,1467,2.493,1468,4.014,1469,4.421,1470,3.288,1471,2.221,1472,2.493,1473,4.014,1474,3.288,1475,4.014,1476,2.493,1477,2.757,1478,4.731,1479,4.014,1480,6.333,1481,2.493,1482,3.791,1483,5.147,1484,2.493,1485,2.493,1486,2.493,1487,3.576,1488,3.637,1489,2.493,1490,4.014,1491,2.493,1492,2.432,1493,3.576,1494,2.493,1495,3.576,1496,4.174,1497,5.777,1498,2.493,1499,2.221,1500,2.493,1501,1.801,1502,5.777,1503,3.576,1504,2.493,1505,4.127,1506,1.285,1507,1.712,1508,3.288,1509,1.908,1510,1.712,1511,2.042,1512,1.908,1513,1.908,1514,2.221,1515,2.042,1516,2.493,1517,2.493,1518,2.493,1519,2.493,1520,4.489,1521,6.333,1522,2.042,1523,2.493,1524,4.014,1525,2.493,1526,2.493,1527,2.493,1528,2.493,1529,2.493,1530,2.493,1531,2.493,1532,2.493,1533,2.042,1534,2.493,1535,2.493,1536,2.493,1537,2.493,1538,2.493,1539,5.039,1540,2.493,1541,2.493,1542,2.493,1543,2.493,1544,2.493,1545,2.221,1546,2.493,1547,2.221,1548,2.493,1549,2.221,1550,5.039,1551,4.014,1552,3.576,1553,4.014,1554,2.493,1555,2.493,1556,2.493,1557,2.493,1558,2.493,1559,2.493]],["title/classes/DCQL.html",[53,0.206,955,2.858]],["body/classes/DCQL.html",[3,0.049,4,0.049,5,0.044,7,1.687,9,0.706,12,2.189,13,0.152,14,0.693,16,1.627,17,0.743,19,0.608,20,0.351,21,0.007,25,2.248,26,1.77,27,1.447,28,2.298,30,0.107,31,0.004,32,0.004,43,0.342,49,0.202,53,0.378,57,0.751,62,2.155,63,0.893,68,1.805,70,1.131,71,4.017,73,1.477,74,2.926,75,2.23,76,2.639,77,0.904,78,1.915,79,3.625,80,3.625,89,3.965,95,2.52,101,1.88,107,1.436,118,2.248,120,0.919,122,2.111,124,1.311,128,1.988,134,1.418,143,2.394,144,1.262,221,1.816,262,1.239,286,2.856,299,2.09,323,0.904,342,4.266,353,1.477,375,1.239,493,2.232,523,1.638,548,2.442,579,1.509,592,4.262,593,1.864,594,2.544,595,1.727,597,2.158,607,1.611,616,1.774,639,2.232,668,1.816,672,4.382,681,1.648,842,2.158,848,2.158,860,2.027,885,1.914,891,1.915,892,1.969,893,3.05,894,3.257,896,3.257,897,1.816,900,3.529,902,2.298,905,2.35,906,1.611,908,1.611,909,1.362,913,3.257,915,2.158,916,2.158,917,1.575,918,2.35,919,1.286,920,1.611,921,2.838,922,4.142,923,2.232,928,2.793,929,3.6,930,3.658,931,2.958,932,3.717,933,2.507,934,4.318,935,2.405,936,3.986,937,2.507,938,4.747,939,4.747,940,4.747,941,4.082,942,4.227,943,4.318,944,2.507,945,2.507,946,3.986,947,2.507,948,2.507,949,2.507,950,2.507,951,2.507,952,2.507,953,2.507,954,3.658,955,4.659,956,4.318,957,2.027,958,2.507,959,2.793,960,2.507,961,2.507,962,2.027,963,3.352,964,2.314,965,2.232,966,2.158,967,2.314,968,1.969,969,2.507,1225,3.403,1560,3.82,1561,3.82,1562,3.82]],["title/modules/DatabaseModule.html",[172,1.448,186,3.408]],["body/modules/DatabaseModule.html",[3,0.075,4,0.075,5,0.067,20,0.283,21,0.007,30,0.096,31,0.005,32,0.005,49,0.217,50,0.993,53,0.252,54,1.558,68,1.481,172,2.273,174,2.494,186,5.351,201,3.27,202,5.351,203,2.956,204,1.91,213,4.184,220,4.486,221,2.748,280,3.971,281,4.425,282,1.808,284,4.735,333,5.151,538,3.379,539,2.384,560,6.436,1382,4.425,1563,4.735,1564,7.406,1565,4.735,1566,6.598,1567,5.151,1568,5.151,1569,5.151,1570,7.677,1571,8.119,1572,6.818,1573,6.436,1574,5.151,1575,5.151,1576,5.151,1577,5.151,1578,5.151,1579,5.781,1580,7.406,1581,8.171,1582,5.781,1583,5.781,1584,7.406,1585,5.781,1586,5.781,1587,5.781,1588,5.781,1589,5.781,1590,5.151,1591,5.781,1592,6.066,1593,5.781,1594,5.781]],["title/classes/Display.html",[53,0.206,1041,2.581]],["body/classes/Display.html",[3,0.049,4,0.049,5,0.043,9,0.91,13,0.149,14,0.685,16,0.846,17,0.955,19,0.624,20,0.352,21,0.007,23,0.92,25,1.517,28,2.272,30,0.093,31,0.004,32,0.004,43,0.507,46,1.491,49,0.214,53,0.369,56,3.568,57,0.74,59,2.125,60,3.568,61,4.196,63,1.322,68,1.779,70,1.631,74,2.884,75,2.366,76,2.693,77,1.304,82,1.743,84,1.341,85,2.125,86,2.125,90,3.568,97,3.568,100,1.835,101,1.575,103,3.928,112,2.088,117,3.22,118,2.223,119,2.198,120,0.905,122,2.47,135,1.134,148,2.198,149,4.196,152,3.22,153,1.996,154,2.198,155,2.198,262,1.786,285,2.323,323,0.89,408,1.787,523,1.372,548,2.42,579,1.485,620,1.454,715,2.367,811,3.268,885,1.603,886,3.568,900,4.025,902,2.272,905,3.027,906,2.323,908,1.586,909,1.341,917,1.551,918,2.749,919,1.266,920,1.586,921,2.813,928,2.762,929,3.568,931,2.924,959,1.885,962,1.996,963,3.701,978,2.058,979,2.717,980,2.717,981,2.717,982,2.717,983,2.125,984,2.125,985,2.878,986,4.349,987,2.84,991,4.479,1002,2.878,1003,2.878,1004,2.878,1005,2.878,1006,2.717,1007,2.878,1008,2.878,1009,2.878,1010,2.878,1011,2.878,1012,2.878,1015,2.878,1025,4.105,1033,3.981,1034,2.878,1035,2.468,1036,2.717,1037,2.583,1038,2.878,1039,5.667,1040,1.885,1041,4.182,1042,4.279,1043,4.991,1044,4.991,1045,4.991,1046,4.279,1047,3.981,1048,2.878,1049,2.878,1050,2.878,1051,2.878,1052,2.878,1053,2.278,1054,2.468,1595,3.761,1596,4.217,1597,3.761,1598,3.761,1599,3.761,1600,3.761,1601,3.761,1602,3.761]],["title/controllers/DisplayController.html",[157,1.397,1603,3.611]],["body/controllers/DisplayController.html",[3,0.069,4,0.069,5,0.062,9,0.999,13,0.213,17,0.796,20,0.269,21,0.007,30,0.069,31,0.005,32,0.005,39,1.64,43,0.433,45,1.755,46,1.274,48,1.915,49,0.218,50,0.92,53,0.234,54,1.483,63,1.13,120,1.29,157,2.479,159,1.874,168,4.885,318,3.737,354,3.382,384,2.784,401,4.061,418,4.116,425,2.479,442,2.244,477,3.879,533,2.844,595,3.188,642,2.547,685,2.162,897,3.351,1041,5.288,1117,3.681,1245,3.247,1246,3.247,1247,3.374,1248,3.374,1252,3.374,1253,3.247,1257,2.26,1363,4.58,1603,5.396,1604,4.775,1605,7.879,1606,7.05,1607,5.359,1608,7.748,1609,6.048,1610,5.359,1611,5.359,1612,5.359,1613,5.75,1614,5.359,1615,4.775,1616,5.359,1617,5.359,1618,5.359,1619,5.359]],["title/classes/DisplayCreateDto.html",[53,0.206,1609,3.408]],["body/classes/DisplayCreateDto.html",[3,0.094,4,0.094,5,0.084,21,0.007,30,0.094,31,0.006,32,0.006,37,4.048,49,0.208,53,0.317,57,1.428,120,1.747,282,1.884,523,2.12,1057,5.556,1059,4.986,1609,6.153,1620,6.468,1621,8.517,1622,4.57,1623,6.468]],["title/entities/DisplayEntity.html",[885,1.372,1622,2.97]],["body/entities/DisplayEntity.html",[3,0.075,4,0.075,5,0.067,13,0.232,14,0.926,19,0.596,20,0.348,21,0.007,30,0.096,31,0.005,32,0.005,43,0.504,46,1.054,49,0.218,53,0.39,63,1.315,68,1.729,70,1.727,75,2.189,76,2.611,77,1.38,112,2.386,120,1.403,144,1.926,168,4.075,323,1.941,523,2.224,548,3.208,885,2.166,887,2.772,902,3.071,904,3.294,905,3.645,906,3.14,908,3.14,909,2.656,917,2.404,918,3.14,919,1.963,920,2.459,921,2.515,928,3.732,963,2.702,1030,4.463,1041,4.075,1042,3.827,1046,3.827,1622,4.688,1624,4.463,1625,5.831,1626,5.831,1627,6.245,1628,5.831,1629,5.831,1630,5.928]],["title/classes/DisplayImage.html",[53,0.206,1039,3.24]],["body/classes/DisplayImage.html",[3,0.053,4,0.053,5,0.047,9,0.739,13,0.162,14,0.725,16,0.915,19,0.615,20,0.336,21,0.007,23,0.996,25,1.641,28,2.405,30,0.096,31,0.004,32,0.004,43,0.25,46,1.425,49,0.218,53,0.377,56,3.731,57,0.8,59,2.299,60,3.731,61,4.353,63,0.652,68,1.809,70,1.727,74,2.932,75,2.333,76,2.752,77,1.38,82,1.885,84,1.451,85,2.299,86,2.299,90,3.731,97,3.731,100,1.985,101,1.667,103,4.075,112,2.167,117,3.409,118,2.353,119,2.378,120,0.979,122,2.583,135,1.226,148,2.378,149,4.353,152,3.409,153,2.159,154,2.378,155,2.378,262,1.891,285,2.459,323,0.963,408,1.934,523,1.452,548,2.531,579,1.607,620,1.573,715,2.561,811,3.418,885,1.697,886,3.731,900,4.123,902,2.405,905,3.14,906,2.459,908,1.715,909,1.451,917,1.678,918,2.875,919,1.37,920,1.715,921,2.941,928,2.924,929,3.731,931,3.096,959,2.039,962,2.159,963,3.803,978,2.226,979,2.94,980,2.94,981,2.94,982,2.94,983,2.299,984,2.299,985,3.114,986,4.512,987,3.007,991,4.683,1002,3.114,1003,3.114,1004,3.114,1005,3.114,1006,2.94,1007,3.114,1008,3.114,1009,3.114,1010,3.114,1011,3.114,1012,3.114,1015,3.114,1025,4.293,1033,4.214,1034,3.114,1035,2.67,1036,2.94,1037,2.794,1038,3.114,1039,5.636,1040,3.418,1041,4.075,1042,2.67,1043,3.114,1044,3.114,1045,3.114,1046,2.67,1047,4.214,1048,3.114,1049,3.114,1050,3.114,1051,3.114,1052,3.114,1053,2.465,1054,2.67,1631,4.069]],["title/classes/DisplayInfo.html",[53,0.206,1627,3.408]],["body/classes/DisplayInfo.html",[3,0.077,4,0.077,5,0.068,13,0.236,14,0.937,19,0.613,20,0.35,21,0.007,30,0.097,31,0.005,32,0.005,43,0.509,46,1.496,49,0.219,53,0.392,57,1.169,63,1.327,68,1.508,70,1.76,75,2.324,76,2.635,77,1.407,112,1.729,120,1.43,144,1.963,168,3.252,323,1.407,523,1.877,548,3.072,885,2.193,902,2.451,905,3.178,906,2.506,908,2.506,909,2.12,917,2.451,918,3.178,919,2.001,920,2.506,921,2.564,928,3.778,963,2.755,1041,3.252,1042,5.433,1046,5.433,1596,4.549,1622,3.742,1624,4.549,1627,6.29,1630,6.29,1632,5.944,1633,5.944,1634,5.944]],["title/classes/DisplayLogo.html",[53,0.206,1630,3.408]],["body/classes/DisplayLogo.html",[3,0.08,4,0.08,5,0.071,13,0.245,14,0.959,19,0.606,20,0.336,21,0.007,30,0.1,31,0.005,32,0.005,43,0.379,46,1.114,49,0.222,53,0.396,57,1.212,63,0.987,68,1.542,70,1.824,75,2.299,76,2.679,77,1.458,112,1.792,120,1.483,144,2.78,168,3.371,323,1.458,523,1.919,548,3.123,885,2.243,902,2.54,905,3.251,906,2.598,908,2.598,909,2.197,917,2.54,918,3.251,919,2.074,920,2.598,921,2.657,928,3.864,963,2.855,1041,3.371,1042,4.043,1046,4.043,1622,3.878,1624,4.715,1627,6.08,1630,6.372,1635,6.161]],["title/injectables/DisplayService.html",[33,1.009,1613,3.24]],["body/injectables/DisplayService.html",[3,0.069,4,0.069,5,0.061,9,0.995,13,0.211,16,1.877,17,0.886,19,0.595,20,0.299,21,0.007,30,0.069,31,0.005,32,0.005,33,1.5,35,2.014,39,1.632,43,0.482,45,1.954,46,1.419,48,1.909,49,0.212,50,0.913,53,0.232,54,1.475,168,4.875,282,1.176,318,3.227,323,2.15,385,2.809,422,2.004,423,1.692,425,2.471,442,2.232,488,2.919,523,2.218,539,2.192,595,3.172,685,2.145,897,3.334,919,1.79,1041,5.282,1083,4.071,1095,6.249,1111,2.909,1117,3.652,1363,4.971,1466,4.355,1608,7.728,1609,6.03,1613,4.817,1615,4.737,1622,4.415,1623,4.737,1636,4.737,1637,5.317,1638,5.317,1639,7.849,1640,5.317,1641,5.317,1642,5.317,1643,5.317,1644,5.317,1645,5.317]],["title/classes/EC_Public.html",[53,0.206,1482,3.096]],["body/classes/EC_Public.html",[3,0.069,4,0.069,5,0.062,9,0.679,13,0.213,14,0.877,19,0.596,20,0.332,21,0.007,22,3.889,23,2.354,25,3.179,30,0.091,31,0.005,32,0.005,43,0.514,49,0.131,53,0.365,57,1.054,95,3.563,124,2.419,130,2.784,276,3.844,352,4.773,353,2.072,359,3.132,375,1.738,446,3.742,510,3.983,522,4.692,583,3.028,593,2.615,638,4.775,701,5.396,763,4.134,870,4.842,1191,5.707,1194,4.773,1420,4.627,1482,4.627,1506,2.763,1510,5.973,1646,7.458,1647,6.407,1648,7.362,1649,7.02,1650,5.693,1651,6.03,1652,6.656,1653,6.656,1654,5.359,1655,6.281,1656,5.775,1657,6.281,1658,5.359,1659,6.407,1660,4.775,1661,3.681]],["title/classes/EmbeddedDisclosurePolicy.html",[53,0.206,60,2.581]],["body/classes/EmbeddedDisclosurePolicy.html",[3,0.07,4,0.07,5,0.062,13,0.216,14,0.884,19,0.562,20,0.348,21,0.007,30,0.118,31,0.005,32,0.005,37,3.999,43,0.334,49,0.194,53,0.404,56,2.97,57,1.068,58,3.417,59,4.479,60,4.903,61,5.336,62,3.066,63,0.87,68,1.747,70,1.607,71,4.047,72,5.731,73,2.099,74,2.571,75,2.372,76,2.78,77,1.284,78,3.974,79,3.974,80,3.974,81,3.728,82,2.516,83,3.417,84,2.828,85,4.479,86,4.479,87,3.728,88,5.778,89,4.501,90,2.97,91,3.728,92,3.728,93,2.97,94,3.417,95,2.455,96,3.562,97,2.97,98,2.97,99,4.991,100,2.648,101,1.551,102,3.728,103,2.97,104,3.728,1662,5.428]],["title/injectables/EncryptionService.html",[33,1.009,1440,2.97]],["body/injectables/EncryptionService.html",[3,0.053,4,0.053,5,0.047,9,1.001,13,0.162,16,1.982,17,0.891,19,0.631,20,0.313,21,0.007,22,3.388,23,2.071,30,0.053,31,0.004,32,0.004,33,1.251,35,1.547,39,1.361,43,0.485,45,2.045,46,1.427,48,1.88,49,0.201,50,0.701,53,0.178,54,1.437,68,0.817,203,1.401,276,2.853,282,1.512,323,2.198,325,2.307,347,2.966,352,3.543,375,2.898,385,2.658,397,3.304,422,2.132,423,1.3,425,2.433,463,2.571,484,2.511,488,2.045,522,4.461,523,2.313,539,1.684,694,4.79,763,3.248,1078,3.017,1080,4.017,1083,3.64,1090,3.015,1091,4.235,1097,3.543,1102,4.017,1111,2.234,1255,4.476,1359,3.344,1380,4.017,1402,3.344,1418,3.838,1428,4.476,1440,4.697,1446,3.838,1447,3.638,1464,4.79,1492,3.543,1503,3.638,1505,3.344,1506,2.105,1507,2.805,1508,4.79,1509,3.125,1520,5.21,1552,3.638,1650,2.95,1663,3.638,1664,3.838,1665,9.141,1666,5.848,1667,5.848,1668,5.848,1669,4.79,1670,4.083,1671,4.083,1672,5.848,1673,4.083,1674,4.083,1675,5.848,1676,7.461,1677,6.929,1678,5.848,1679,5.848,1680,4.083,1681,4.083,1682,4.79,1683,4.083,1684,4.083,1685,4.083,1686,4.083,1687,5.21,1688,3.638,1689,3.638,1690,4.083,1691,4.083,1692,5.596,1693,4.083,1694,5.848,1695,4.083,1696,3.638,1697,4.083,1698,4.083,1699,4.083,1700,4.083,1701,4.083]],["title/entities/FileEntity.html",[885,1.372,1702,3.408]],["body/entities/FileEntity.html",[3,0.081,4,0.081,5,0.073,13,0.251,14,0.973,16,2.057,19,0.594,20,0.325,21,0.007,23,1.916,30,0.081,31,0.005,32,0.005,43,0.523,49,0.191,53,0.275,63,1.363,68,1.779,323,2.013,523,2.352,548,3.301,885,2.276,887,2.999,898,4.141,902,3.227,904,3.565,905,3.75,906,3.3,908,3.3,909,2.791,917,2.602,918,3.3,919,2.124,920,2.661,921,2.722,1702,5.655,1703,5.622,1704,6.968,1705,6.31,1706,6.31,1707,6.31]],["title/interfaces/FileStorage.html",[0,1.422,1708,3.096]],["body/interfaces/FileStorage.html",[0,1.621,2,2.695,3,0.069,4,0.069,5,0.062,13,0.214,17,1.043,19,0.659,20,0.348,21,0.007,22,2.913,23,2.288,30,0.108,31,0.005,32,0.005,39,1.644,43,0.535,45,2.167,46,1.574,48,1.992,49,0.131,144,2.607,282,1.189,384,3.116,385,3.176,423,1.711,461,4.404,474,5.407,579,2.123,750,3.038,987,3.642,1078,3.119,1108,4.129,1195,3.866,1708,4.637,1709,4.115,1710,6.294,1711,6.04,1712,6.04,1713,5.407,1714,5.376,1715,5.787,1716,5.376,1717,4.79,1718,5.376,1719,4.115,1720,5.376,1721,4.404,1722,5.702,1723,6.415,1724,6.463,1725,6.056,1726,5.376,1727,3.885,1728,4.448,1729,4.404,1730,4.79,1731,5.376,1732,3.693,1733,5.376,1734,5.376,1735,4.79,1736,4.115,1737,5.376,1738,5.376,1739,5.376,1740,4.115,1741,3.885,1742,4.79]],["title/classes/FileUploadDto.html",[53,0.206,1743,3.611]],["body/classes/FileUploadDto.html",[3,0.092,4,0.092,5,0.107,13,0.284,14,1.05,19,0.564,20,0.322,21,0.006,25,3.406,30,0.092,31,0.006,32,0.006,43,0.439,49,0.175,53,0.312,57,1.407,63,1.146,118,3.406,120,1.721,1227,5.858,1743,6.461,1744,7.521,1745,6.372,1746,6.915,1747,7.152]],["title/injectables/FilesService.html",[33,1.009,1748,3.096]],["body/injectables/FilesService.html",[3,0.049,4,0.049,5,0.112,9,0.915,13,0.151,16,1.727,17,0.905,19,0.618,20,0.306,21,0.007,22,1.568,23,2.153,26,3.345,27,2.734,30,0.049,31,0.004,32,0.004,33,1.188,35,1.44,39,1.292,43,0.493,45,1.996,46,1.449,48,1.942,49,0.207,50,0.653,53,0.166,54,1.615,94,2.394,112,1.106,144,1.835,203,2.841,204,1.256,221,1.808,262,1.233,280,2.612,282,1.774,285,2.342,286,1.502,318,2.148,323,2.008,330,6.567,347,2.699,375,1.233,385,2.699,422,1.588,423,2.297,425,2.374,442,1.21,484,2.699,523,1.996,524,3.365,539,1.568,670,2.496,919,1.28,1071,4.737,1078,2.453,1083,3.521,1090,3.72,1091,2.863,1092,5.912,1097,3.365,1110,4.014,1111,2.081,1138,5.038,1172,2.612,1195,3.591,1322,2.149,1702,2.748,1708,4.737,1711,4.252,1713,4.252,1719,4.252,1723,5.524,1727,5.215,1728,2.394,1729,3.115,1730,4.949,1732,2.612,1741,2.748,1748,3.646,1749,3.388,1750,5.555,1751,5.555,1752,6.563,1753,3.803,1754,6.563,1755,3.803,1756,3.803,1757,5.912,1758,5.555,1759,3.803,1760,5.555,1761,5.555,1762,3.803,1763,3.803,1764,3.803,1765,5.847,1766,6.288,1767,3.803,1768,5.555,1769,5.555,1770,5.555,1771,4.949,1772,4.014,1773,5.555,1774,5.555,1775,3.803,1776,3.803,1777,3.388,1778,3.803,1779,3.803,1780,5.555,1781,3.803,1782,3.803,1783,3.803,1784,3.803,1785,3.803,1786,3.803,1787,3.803,1788,3.803,1789,3.803,1790,3.803,1791,3.803,1792,3.803,1793,3.803,1794,3.803,1795,3.803,1796,3.803,1797,3.803,1798,3.803,1799,3.803,1800,3.803,1801,3.803,1802,3.115,1803,3.803,1804,3.803,1805,3.803,1806,3.803,1807,3.803]],["title/interfaces/GenerateTokenOptions.html",[0,1.422,1808,3.611]],["body/interfaces/GenerateTokenOptions.html",[0,1.444,2,2.401,3,0.062,4,0.062,5,0.055,13,0.19,14,0.813,17,0.976,19,0.617,20,0.284,21,0.007,28,1.975,30,0.084,31,0.004,32,0.004,33,1.399,49,0.204,50,0.822,53,0.209,54,1.566,93,2.621,203,2.554,204,1.582,260,3.367,262,1.553,264,3.923,282,2.02,287,2.401,299,2.621,347,2.201,354,3.274,367,2.542,374,3.015,385,2.201,388,5.494,397,4.206,414,3.143,418,3.367,419,3.143,441,3.004,442,2.751,443,3.29,444,6.552,445,6.123,446,2.542,453,3.143,463,4.687,465,2.621,477,3.881,482,6.858,484,2.201,487,5.494,488,1.675,497,3.367,518,3.29,552,4.724,789,3.143,824,4.009,837,2.401,840,5.25,999,2.337,1173,3.015,1257,2.019,1401,3.46,1460,5.005,1477,3.29,1506,2.469,1808,5.698,1809,3.923,1810,3.923,1811,4.267,1812,4.267,1813,4.267,1814,4.267,1815,4.267,1816,3.923,1817,4.267,1818,5.825,1819,5.825,1820,5.825,1821,5.825,1822,4.267,1823,4.267,1824,6.633,1825,5.825,1826,4.267,1827,5.355,1828,4.267,1829,4.267,1830,4.267,1831,3.923,1832,4.267,1833,4.267,1834,4.267,1835,4.267,1836,3.923,1837,4.267,1838,3.923,1839,4.267,1840,4.267,1841,3.666,1842,4.267,1843,3.923]],["title/controllers/HealthController.html",[157,1.397,1844,3.611]],["body/controllers/HealthController.html",[3,0.082,4,0.082,5,0.073,9,0.807,13,0.253,21,0.007,30,0.082,31,0.005,32,0.005,39,1.832,43,0.391,48,1.801,49,0.192,50,1.094,53,0.278,54,1.34,63,1.021,157,1.886,159,2.228,287,4.793,360,4.447,422,1.82,423,2.506,488,2.753,642,3.028,645,6.025,1453,5.407,1592,6.447,1844,6.83,1845,5.675,1846,9.34,1847,7.872,1848,7.013,1849,8.924,1850,7.872,1851,7.013,1852,7.872,1853,6.37,1854,6.37,1855,7.872,1856,7.872,1857,5.217,1858,6.37,1859,6.37,1860,6.37,1861,6.37]],["title/modules/HealthModule.html",[172,1.448,187,3.408]],["body/modules/HealthModule.html",[3,0.094,4,0.094,5,0.084,21,0.007,30,0.094,31,0.006,32,0.006,49,0.221,50,1.247,53,0.317,159,2.979,172,2.614,174,3.131,187,6.153,201,3.205,1844,6.918,1857,5.946,1862,7.26,1863,8.517,1864,7.26]],["title/entities/IssuanceConfig.html",[811,2.364,885,1.372]],["body/entities/IssuanceConfig.html",[3,0.043,4,0.043,5,0.039,9,0.97,12,1.746,13,0.133,14,0.628,16,1.637,17,0.963,19,0.511,20,0.348,21,0.007,26,2.341,27,1.914,28,2.083,29,4.138,30,0.043,31,0.003,32,0.003,43,0.539,46,1.1,49,0.2,53,0.266,63,1.407,68,1.847,70,0.991,74,2.481,75,1.541,76,2.158,77,0.792,100,2.465,101,1.444,107,2.106,109,2.285,112,2.31,117,2.953,118,2.038,119,1.956,120,0.805,128,2.418,134,1.875,135,2.043,143,2.889,145,2.953,148,1.956,149,3.557,152,2.953,153,1.776,154,1.956,155,2.953,262,2.651,314,1.591,323,1.44,366,3.65,375,1.638,523,1.977,548,2.516,579,1.995,592,3.598,598,4.408,607,1.411,616,2.158,620,3.525,621,4.817,622,4.408,625,4.635,626,2.107,811,2.532,817,3.65,885,1.972,887,1.591,889,4.138,891,3.05,892,3.137,893,3.709,894,3.557,896,3.962,897,2.401,900,3.733,902,2.795,904,1.891,905,2.858,906,2.13,908,2.13,909,1.802,913,3.557,915,2.854,916,2.854,917,1.38,918,2.13,919,1.127,920,1.411,921,2.625,923,1.956,925,2.982,928,2.532,929,2.764,931,2.681,962,1.776,963,2.82,968,2.604,978,3.709,994,2.982,998,2.741,999,1.633,1014,2.982,1026,4.138,1030,2.562,1033,3.65,1047,2.418,1069,4.658,1093,3.65,1101,3.65,1209,4.501,1217,3.061,1218,4.501,1224,2.982,1772,3.65,1865,7.912,1866,6.086,1867,6.086,1868,4.397,1869,6.086,1870,5.422,1871,3.347,1872,3.347,1873,2.982,1874,4.449,1875,3.347,1876,4.501,1877,3.347,1878,3.347,1879,3.347,1880,5.052,1881,5.052,1882,5.052,1883,3.347,1884,3.347,1885,3.347,1886,3.347,1887,3.347,1888,3.347,1889,3.347,1890,3.347,1891,5.052,1892,2.741,1893,3.347,1894,3.347,1895,3.347,1896,3.347,1897,3.347,1898,3.347,1899,3.347,1900,3.347,1901,3.347]],["title/controllers/IssuanceController.html",[157,1.397,1902,3.611]],["body/controllers/IssuanceController.html",[3,0.068,4,0.068,5,0.061,13,0.21,16,1.874,17,0.884,19,0.523,20,0.299,21,0.007,30,0.068,31,0.005,32,0.005,39,1.627,43,0.481,45,1.949,46,1.415,48,2.107,49,0.217,50,0.909,53,0.231,54,1.647,63,1.255,107,2.146,120,1.274,135,2.511,157,1.567,159,1.851,318,3.562,354,2.966,384,2.761,401,4.036,406,3.332,418,4.255,425,2.318,497,2.393,523,2.074,533,2.809,620,3.44,642,2.515,685,2.135,739,4.743,1064,3.95,1067,5.721,1078,2.337,1090,3.604,1106,5.052,1235,6.413,1238,4.715,1239,3.635,1245,3.206,1246,3.206,1247,3.332,1248,3.332,1250,4.335,1251,3.206,1252,3.332,1253,3.206,1254,4.335,1257,2.231,1261,3.635,1262,4.05,1902,5.351,1903,4.715,1904,6.992,1905,6.992,1906,6.976,1907,5.292,1908,5.292,1909,5.292,1910,5.292,1911,5.292,1912,4.715,1913,5.292,1914,5.292,1915,5.292,1916,5.292,1917,3.473,1918,5.292]],["title/classes/IssuanceDto.html",[53,0.206,1067,3.24]],["body/classes/IssuanceDto.html",[3,0.08,4,0.08,5,0.071,9,0.782,13,0.245,14,0.96,16,1.389,19,0.562,20,0.235,21,0.007,26,2.86,27,2.338,30,0.1,31,0.005,32,0.005,37,3.669,43,0.379,49,0.206,53,0.368,57,1.214,63,0.989,71,3.903,75,1.955,77,1.46,82,2.86,107,2.17,120,1.485,282,1.708,323,1.827,523,1.922,584,4.922,616,2.809,620,3.513,811,3.094,891,3.869,892,3.979,1059,4.239,1061,4.724,1062,5.055,1063,6.898,1064,5.133,1066,5.055,1067,5.302,1068,6.877,1069,5.908,1070,5.908,1071,5.066,1072,7.504,1919,6.172]],["title/injectables/IssuanceService.html",[33,1.009,739,2.858]],["body/injectables/IssuanceService.html",[3,0.036,4,0.036,5,0.077,9,0.353,13,0.111,16,1.783,17,0.802,19,0.616,20,0.271,21,0.007,22,2.236,30,0.036,31,0.003,32,0.003,33,0.938,35,1.055,39,1.431,43,0.473,45,1.769,46,1.284,48,1.997,49,0.226,50,0.478,53,0.237,54,1.494,68,0.877,70,0.824,77,0.659,82,1.29,101,1.253,107,1.584,112,2.066,130,1.1,135,2.141,153,1.478,203,2.55,204,0.92,217,1.753,218,1.827,220,2.656,221,2.084,251,5.12,260,1.259,282,2.019,285,2.82,287,1.396,294,2.131,299,1.523,323,2.12,347,2.831,353,1.077,363,3.59,378,2.131,385,1.476,422,1.758,423,2.451,425,2.346,465,1.523,477,2.513,484,2.73,488,1.533,523,1.851,539,1.148,616,2.261,620,3.339,668,2.577,737,3.361,739,3.726,751,1.523,767,1.478,811,2.718,919,0.937,978,2.399,987,1.435,1064,4.751,1066,2.28,1067,5.106,1069,4.15,1073,4.036,1075,2.012,1077,2.197,1078,2.394,1080,3.011,1081,3.594,1083,3,1084,2.878,1085,4.443,1090,2.26,1091,2.26,1101,3.167,1102,3.011,1107,3.917,1108,3.594,1111,1.523,1112,2.28,1113,2.012,1114,2.28,1115,1.912,1119,2.012,1120,2.012,1121,3.59,1123,5.037,1124,2.28,1125,2.012,1126,3.167,1127,2.012,1128,2.012,1129,2.012,1130,2.012,1131,4.441,1132,3.872,1133,2.28,1134,2.28,1135,3.011,1136,2.28,1137,5.371,1138,2.877,1139,2.28,1140,2.131,1141,2.28,1142,2.28,1143,2.28,1144,4.441,1146,3.59,1147,3.59,1148,2.28,1149,2.131,1150,2.28,1151,2.28,1153,2.28,1154,3.59,1156,2.28,1157,2.28,1158,2.131,1159,2.28,1160,2.28,1161,2.131,1162,2.28,1163,2.28,1167,2.012,1168,2.656,1169,2.28,1170,2.012,1171,4.441,1173,1.753,1174,1.827,1176,2.28,1179,2.481,1184,2.012,1185,2.28,1187,3.905,1235,3.59,1249,2.28,1322,2.477,1400,2.28,1433,4.443,1478,4.441,1892,2.28,1906,3.905,1912,2.481,1920,2.481,1921,4.384,1922,5.422,1923,4.879,1924,2.784,1925,6.15,1926,2.784,1927,5.422,1928,4.384,1929,2.784,1930,4.384,1931,2.784,1932,2.784,1933,2.784,1934,6.15,1935,2.784,1936,2.784,1937,2.784,1938,4.384,1939,2.784,1940,4.384,1941,2.481,1942,2.784,1943,2.784,1944,2.784,1945,2.481,1946,2.784,1947,2.784,1948,5.422,1949,2.784,1950,2.784,1951,2.784,1952,2.784,1953,5.422,1954,2.481,1955,4.83,1956,4.384,1957,2.784,1958,2.784,1959,4.384,1960,2.784,1961,2.784,1962,2.784,1963,4.384,1964,2.784,1965,2.784,1966,2.784,1967,4.83,1968,2.784,1969,2.481,1970,2.481,1971,2.784,1972,2.784,1973,2.784,1974,4.384,1975,2.784,1976,2.784,1977,2.784,1978,2.784]],["title/controllers/IssuerManagementController.html",[157,1.397,1979,3.611]],["body/controllers/IssuerManagementController.html",[3,0.057,4,0.057,5,0.051,9,0.556,13,0.174,17,0.496,19,0.293,20,0.342,21,0.007,25,1.772,30,0.057,31,0.004,32,0.004,39,1.433,43,0.27,45,1.093,46,0.794,48,1.005,49,0.219,50,0.754,53,0.192,62,1.698,63,0.704,84,1.566,93,2.403,100,2.142,112,2.242,120,1.057,145,2.566,156,1.939,157,1.3,159,1.536,168,2.403,207,2.481,276,3.469,282,1.362,286,1.734,318,3.138,321,4.884,325,4.585,347,2.394,353,1.698,354,2.332,362,2.035,372,4.041,375,2.905,384,3.482,401,2.263,403,4.449,405,5.043,406,2.764,418,3.485,425,1.823,428,5.569,431,2.719,446,2.33,473,2.154,484,2.073,488,2.154,497,1.986,519,3.016,526,3.912,533,2.33,610,3.665,616,1.96,642,2.087,681,2.656,685,1.772,693,3.597,714,5.058,856,3.361,868,4.041,869,4.852,909,1.566,984,3.479,1040,3.086,1245,2.66,1246,2.66,1247,2.764,1248,2.764,1250,3.597,1251,4.308,1252,2.764,1253,2.66,1254,3.597,1257,1.851,1363,3.369,1477,3.016,1722,3.173,1746,3.597,1917,2.882,1979,4.713,1980,5.486,1981,5.043,1982,3.912,1983,6.335,1984,3.912,1985,6.236,1986,3.912,1987,5.486,1988,4.667,1989,3.912,1990,4.391,1991,4.391,1992,4.391,1993,3.597,1994,4.667,1995,4.476,1996,3.173,1997,3.016,1998,3.597,1999,4.391,2000,3.912,2001,3.912,2002,5.486,2003,3.361,2004,6.867,2005,3.912,2006,5.824,2007,3.912,2008,6.867,2009,6.212,2010,3.912,2011,4.391,2012,4.391,2013,4.391,2014,4.391,2015,4.391,2016,4.391,2017,4.391,2018,4.713,2019,3.597,2020,4.391,2021,4.391,2022,3.912,2023,3.912,2024,4.391,2025,3.912,2026,4.391,2027,3.912,2028,3.912,2029,3.912,2030,3.912,2031,3.912,2032,3.912,2033,3.912]],["title/interfaces/IssuerMetadata.html",[0,1.422,2034,3.408]],["body/interfaces/IssuerMetadata.html",[0,2.586,2,3.223,3,0.083,4,0.083,5,0.074,9,0.815,13,0.255,14,0.985,19,0.573,20,0.342,21,0.007,22,3.265,23,1.938,27,2.999,30,0.083,31,0.005,32,0.005,49,0.157,144,2.616,276,3.863,352,4.796,353,3.062,359,5.543,497,4.393,522,4.615,591,6.06,593,3.863,597,4.473,763,3.763,1193,5.267,1195,4.332,1206,3.633,1213,7.054,1506,3.315,2034,5.721,2035,5.729]],["title/classes/IssuerMetadataCredentialConfig.html",[53,0.206,991,3.24]],["body/classes/IssuerMetadataCredentialConfig.html",[3,0.051,4,0.051,5,0.046,9,0.725,13,0.157,14,0.712,16,0.892,17,0.646,19,0.617,20,0.343,21,0.007,23,0.97,25,2.711,28,2.36,30,0.095,31,0.004,32,0.004,43,0.413,46,1.411,49,0.217,53,0.375,56,3.677,57,0.78,59,2.239,60,3.677,61,4.301,63,1.077,68,1.799,70,1.695,74,2.916,75,2.323,76,2.733,77,1.355,82,1.837,84,1.414,85,2.239,86,2.239,90,3.677,97,3.677,100,1.934,101,1.636,103,4.027,112,2.141,117,3.345,118,2.309,119,2.316,120,0.954,122,2.545,135,1.195,148,2.316,149,4.301,152,3.345,153,2.104,154,2.316,155,2.316,262,1.856,285,2.414,323,0.938,408,1.884,523,1.425,548,2.494,579,1.565,620,1.533,715,4.23,716,2.722,811,3.368,885,1.665,886,3.677,900,4.091,902,2.36,905,3.103,906,2.414,908,1.671,909,1.414,917,1.634,918,2.833,919,1.334,920,1.671,921,2.898,928,2.869,929,3.677,931,3.038,959,1.987,962,2.104,963,3.769,978,2.169,979,2.864,980,2.864,981,2.864,982,2.864,983,2.239,984,2.239,985,3.034,986,4.458,987,2.951,991,5.054,1002,3.034,1003,3.034,1004,3.034,1005,3.034,1006,2.864,1007,3.034,1008,3.034,1009,3.034,1010,3.034,1011,3.034,1012,3.034,1015,3.034,1025,4.23,1033,4.136,1034,3.034,1035,2.601,1036,2.864,1037,2.722,1038,3.034,1039,5.361,1040,1.987,1041,4.588,1042,2.601,1043,3.034,1044,3.034,1045,3.034,1046,2.601,1047,4.136,1048,3.034,1049,3.034,1050,3.034,1051,3.034,1052,3.034,1053,2.401,1054,2.601,1596,3.034,2036,3.964,2037,3.964,2038,3.964]],["title/modules/IssuerModule.html",[172,1.448,188,3.24]],["body/modules/IssuerModule.html",[3,0.054,4,0.054,5,0.048,21,0.007,30,0.077,31,0.004,32,0.004,49,0.239,50,0.715,53,0.182,82,1.93,101,1.19,159,2.074,172,2.12,174,1.796,175,2.031,176,2.146,177,2.146,178,1.979,179,3.37,180,3.37,185,4.525,188,6.781,192,5.009,196,3.057,197,2.146,198,2.146,201,2.618,203,2.37,204,1.375,213,3.351,225,2.621,234,3.187,240,3.008,282,1.312,431,1.838,497,1.883,532,5.427,538,2.433,539,1.717,544,2.352,545,3.41,640,5.287,678,5.557,736,2.352,739,5.557,769,3.187,811,2.972,978,3.245,1037,2.86,1073,6.02,1075,3.008,1232,5.287,1249,3.41,1256,5.427,1264,5.287,1266,3.41,1275,3.71,1308,2.86,1603,5.287,1613,5.68,1622,3.733,1892,3.41,1902,5.287,1941,3.71,1979,5.287,1981,3.41,1995,5.775,2039,3.71,2040,3.71,2041,3.71,2042,3.71,2043,5.427,2044,5.206,2045,5.009,2046,5.206,2047,3.41,2048,5.287,2049,4.073,2050,2.352,2051,5.93,2052,4.285,2053,3.187,2054,3.008,2055,3.41,2056,4.164,2057,4.164,2058,4.164,2059,4.164,2060,4.164,2061,4.164,2062,4.164,2063,4.164,2064,4.164,2065,4.164,2066,4.164,2067,4.164,2068,3.71,2069,3.71,2070,4.164,2071,5.93,2072,3.71,2073,4.164,2074,4.164]],["title/classes/JwksResponseDto.html",[53,0.206,1661,3.24]],["body/classes/JwksResponseDto.html",[3,0.075,4,0.075,5,0.067,9,0.738,13,0.231,14,0.925,19,0.547,20,0.284,21,0.007,22,3.875,23,2.3,25,3.307,30,0.096,31,0.005,32,0.005,43,0.358,49,0.142,53,0.358,57,1.145,95,4.128,124,1.997,130,2.299,276,3.999,352,4.966,353,2.876,359,4.347,375,2.412,446,3.089,510,3.289,522,4.891,583,3.289,593,3.629,701,4.455,763,4.106,870,3.998,1191,4.882,1194,4.966,1420,3.82,1482,3.82,1506,3.001,1510,5.109,1646,6.627,1647,5.693,1648,7.32,1649,6.627,1650,4.206,1651,4.455,1652,5.693,1653,5.693,1655,5.186,1656,4.768,1657,5.186,1659,5.693,1661,5.109,2075,5.186]],["title/injectables/JwtAuthGuard.html",[33,1.009,533,2.504]],["body/injectables/JwtAuthGuard.html",[3,0.083,4,0.083,5,0.074,13,0.256,17,0.895,20,0.302,21,0.007,30,0.083,31,0.005,32,0.005,33,1.696,35,2.44,37,3.768,38,7.062,39,1.844,40,7.062,41,7.062,42,6.473,43,0.487,45,1.974,46,1.433,47,4.056,48,1.474,49,0.219,50,1.106,51,5.74,52,4.655,53,0.281,54,1.668,55,5.74,68,1.289,282,1.425,422,1.841,533,4.207,1257,2.716,1766,6.493,2076,5.74,2077,5.74,2078,8.344,2079,6.443,2080,6.443,2081,5.277,2082,6.493,2083,6.443,2084,6.443,2085,6.443,2086,5.74,2087,6.443]],["title/injectables/JwtService.html",[33,1.009,414,3.096]],["body/injectables/JwtService.html",[0,1.341,3,0.057,4,0.057,5,0.051,13,0.177,17,0.808,19,0.564,20,0.273,21,0.007,28,2.562,30,0.08,31,0.004,32,0.004,33,1.329,35,1.685,39,1.446,43,0.476,45,1.783,46,1.294,48,1.638,49,0.199,50,0.764,53,0.194,54,1.506,93,3.4,112,1.294,203,2.899,204,1.47,260,3.238,262,2.015,264,3.644,282,1.988,287,3.115,299,3.918,347,2.844,354,3.404,367,3.298,374,3.912,385,2.609,388,5.601,397,4.379,414,4.078,418,3.688,419,2.92,422,1.271,441,2.889,442,2.689,443,3.056,444,6.68,445,6.242,446,2.361,453,2.92,463,4.508,465,2.434,477,3.915,482,5.09,484,2.092,487,3.056,488,2.173,497,3.238,518,3.056,552,4.49,736,2.514,789,4.078,824,4.235,837,2.23,840,2.92,999,2.17,1173,3.912,1257,1.876,1401,3.214,1460,4.756,1477,4.268,1506,2.293,1808,5.933,1809,3.644,1810,3.644,1811,3.964,1812,3.964,1813,3.964,1814,3.964,1815,3.964,1816,5.09,1817,6.38,1818,5.536,1819,5.536,1820,5.536,1821,5.536,1822,3.964,1823,3.964,1824,6.38,1825,5.536,1826,3.964,1827,5.09,1828,3.964,1829,3.964,1830,3.964,1831,3.644,1832,3.964,1833,3.964,1834,3.964,1835,3.964,1836,5.09,1837,5.536,1838,3.644,1839,3.964,1840,3.964,1841,3.405,1842,6.906,1843,3.644,2088,6.214,2089,4.449,2090,4.449,2091,4.449,2092,4.449,2093,4.449]],["title/injectables/JwtStrategy.html",[33,1.009,534,3.408]],["body/injectables/JwtStrategy.html",[3,0.055,4,0.055,5,0.049,9,0.54,13,0.169,17,0.906,19,0.285,20,0.306,21,0.007,23,1.713,30,0.055,31,0.004,32,0.004,33,1.29,35,1.615,37,2.867,39,1.403,43,0.493,45,1.998,46,1.451,48,1.837,49,0.203,50,0.732,52,3.081,53,0.186,54,1.753,68,1.4,96,2.798,135,2.293,165,4.357,203,3.229,204,1.408,212,6.021,260,3.63,282,1.936,285,2.543,287,3.023,299,4.163,310,2.583,353,2.332,359,3.525,361,3.109,365,3.492,374,2.684,377,3.799,396,6.234,397,2.409,418,3.44,419,2.798,422,1.219,423,2.653,425,1.262,441,1.72,442,1.357,477,4.125,478,4.592,480,3.263,497,3.768,527,2.492,534,4.357,567,3.492,668,3.616,736,2.409,750,2.409,824,4.294,999,2.08,1170,3.081,1173,2.684,1257,1.798,1322,3.407,1401,5.056,1433,3.081,1816,3.492,1827,3.492,1831,3.492,1843,3.492,2018,3.263,2094,3.799,2095,6.031,2096,6.031,2097,6.998,2098,4.264,2099,6.031,2100,4.264,2101,6.031,2102,4.264,2103,6.031,2104,6.998,2105,4.264,2106,4.264,2107,6.031,2108,4.264,2109,6.031,2110,4.264,2111,6.031,2112,3.799,2113,4.264,2114,4.264,2115,3.799,2116,7.608,2117,4.264,2118,4.264,2119,4.264,2120,4.264,2121,4.264,2122,4.264,2123,4.264,2124,4.264,2125,6.031,2126,4.264,2127,6.998,2128,4.264,2129,4.264,2130,3.799,2131,4.264,2132,4.264,2133,4.264,2134,4.264,2135,5.356,2136,6.031,2137,3.799,2138,6.031,2139,3.799,2140,4.264,2141,6.031,2142,4.264,2143,4.264,2144,4.264,2145,4.264,2146,4.264,2147,3.492,2148,4.264,2149,4.264,2150,4.264,2151,4.264,2152,4.264,2153,4.264]],["title/classes/Key.html",[23,1.155,53,0.206]],["body/classes/Key.html",[3,0.068,4,0.068,5,0.06,7,2.318,9,0.882,13,0.209,14,0.865,15,3.794,16,1.181,17,0.593,19,0.649,20,0.359,21,0.007,23,2.319,24,3.306,25,2.806,30,0.068,31,0.005,32,0.005,43,0.556,46,0.949,49,0.19,53,0.362,57,1.033,63,1.451,70,1.555,74,2.529,75,2.451,76,2.214,77,1.243,112,1.527,121,2.967,124,1.802,130,2.747,423,2.214,522,4.281,584,3.069,763,3.947,837,3.91,1418,3.446,1420,3.446,1488,3.306,1506,2.707,1522,6.389,1647,4.019,1648,6.356,1650,5.636,1651,5.97,1652,6.356,1653,6.356,1659,5.324,2154,6.316,2155,4.301,2156,6.949,2157,5.251,2158,5.251,2159,5.251,2160,5.251,2161,5.251,2162,5.251,2163,5.251,2164,5.251,2165,4.678,2166,4.678]],["title/controllers/KeyController.html",[157,1.397,1442,3.611]],["body/controllers/KeyController.html",[3,0.056,4,0.056,5,0.05,9,0.554,13,0.174,16,2.082,17,0.868,19,0.561,20,0.294,21,0.007,22,1.804,23,2.283,30,0.056,31,0.004,32,0.004,39,1.429,43,0.473,45,1.916,46,1.391,48,1.923,49,0.219,50,0.751,53,0.191,54,1.493,63,1.233,120,1.053,157,1.295,159,1.53,280,3.004,282,1.702,323,1.679,347,2.829,354,3.578,384,3.684,385,2.829,401,3.658,418,4.218,422,1.25,423,1.392,425,2.651,442,1.955,484,2.067,488,2.939,522,3.966,523,1.529,533,2.321,642,2.079,685,1.765,737,3.209,886,2.393,1077,3.078,1078,3.133,1239,3.004,1245,2.65,1246,2.65,1247,2.754,1248,2.754,1252,2.754,1253,2.65,1261,3.004,1262,4.7,1322,3.469,1442,5.889,1443,3.897,1453,4.218,1454,4.874,1469,4.7,1488,4.844,1511,5.029,1512,3.348,1513,3.348,1515,3.583,1712,3.348,2167,3.897,2168,7.096,2169,6.141,2170,6.141,2171,7.096,2172,4.374,2173,4.374,2174,4.374,2175,4.374,2176,4.374,2177,4.374,2178,4.374,2179,5.889,2180,4.374,2181,4.374,2182,6.141,2183,5.029,2184,3.583,2185,4.374,2186,4.374,2187,4.374,2188,7.096,2189,4.374,2190,4.374,2191,4.374,2192,4.374,2193,4.374,2194,4.374]],["title/entities/KeyEntity.html",[885,1.372,1446,3.096]],["body/entities/KeyEntity.html",[3,0.071,4,0.071,5,0.063,13,0.218,14,0.891,16,1.972,19,0.564,20,0.354,21,0.007,23,2.35,26,3.319,27,2.713,30,0.092,31,0.005,32,0.005,43,0.539,49,0.195,53,0.24,63,1.405,68,1.798,262,2.322,323,1.886,523,2.279,548,3.136,763,3.789,885,2.083,887,2.609,898,5.232,902,3.484,904,3.102,905,3.563,906,3.02,908,3.02,909,2.555,917,2.264,918,3.02,919,1.848,920,2.315,921,3.439,963,2.544,988,3.967,1446,4.701,1506,2.83,1677,4.497,1692,7.362,2195,4.497,2196,5.49,2197,5.49,2198,7.163,2199,5.49,2200,5.49,2201,6.529,2202,5.76,2203,5.49,2204,3.967]],["title/classes/KeyImportDto.html",[53,0.206,1488,2.97]],["body/classes/KeyImportDto.html",[3,0.071,4,0.071,5,0.063,7,3.162,9,1.139,13,0.218,14,0.891,15,5.76,16,1.235,17,1.014,19,0.637,20,0.343,21,0.007,23,2.373,24,4.509,25,3.409,30,0.071,31,0.005,32,0.005,43,0.49,46,0.992,49,0.195,53,0.369,57,1.08,63,1.278,70,1.626,74,2.585,75,2.377,76,2.28,77,1.299,112,1.597,121,3.102,124,1.884,130,2.168,423,2.537,522,4.355,584,4.186,763,4.016,837,2.752,976,5.866,1418,5.232,1420,3.603,1488,4.509,1506,2.83,1522,4.497,1596,4.202,1647,4.202,1648,6.467,1650,3.967,1651,4.202,1652,5.482,1653,5.482,1659,5.482,2154,5.803,2155,4.497,2156,4.891,2165,4.891,2166,6.381,2205,5.49,2206,5.49,2207,5.49]],["title/modules/KeyModule.html",[172,1.448,189,3.408]],["body/modules/KeyModule.html",[3,0.069,4,0.069,5,0.062,21,0.007,30,0.091,31,0.005,32,0.005,39,1.245,43,0.329,48,1.224,49,0.233,50,0.919,53,0.234,54,1.656,135,1.613,172,2.416,174,2.308,179,2.611,180,2.611,189,5.688,201,2.362,202,5.089,203,3.062,204,1.768,212,5.089,213,3.979,228,3.979,229,4.767,230,4.095,280,3.675,281,4.095,282,1.558,284,4.383,358,5.391,442,2.242,538,3.127,539,2.206,560,5.089,737,3.56,886,2.928,1083,3.841,1172,4.837,1292,4.769,1319,3.866,1388,5.089,1446,4.622,1449,4.767,1450,5.391,1454,4.837,1463,6.448,1464,5.769,1507,3.675,1513,4.095,1514,4.767,1515,5.769,1572,5.391,1573,5.089,2049,4.837,2050,3.023,2208,4.383,2209,7.014,2210,5.351,2211,7.014,2212,6.28,2213,5.351,2214,5.351,2215,6.275,2216,5.351,2217,6.275,2218,4.767,2219,4.767,2220,7.453,2221,3.675,2222,4.767,2223,4.767,2224,4.767,2225,4.767,2226,4.767,2227,7.043,2228,5.351,2229,5.351]],["title/classes/KeyObj.html",[53,0.206,2230,3.864]],["body/classes/KeyObj.html",[3,0.082,4,0.082,5,0.073,7,3.932,9,0.803,13,0.252,14,0.975,15,6.157,16,1.917,19,0.595,20,0.325,21,0.007,22,3.672,23,2.338,24,4.938,25,3.593,26,4.127,27,3.373,30,0.082,31,0.005,32,0.005,43,0.524,49,0.155,53,0.276,57,1.246,244,4.35,408,3.011,763,3.728,885,2.282,1194,4.752,1417,5.853,1482,5.593,1510,4.35,2154,6.117,2230,6.425,2231,5.643,2232,6.334,2233,6.334,2234,6.334]],["title/classes/KeyResponseDto.html",[53,0.206,368,3.611]],["body/classes/KeyResponseDto.html",[3,0.094,4,0.094,5,0.084,13,0.289,14,1.06,20,0.278,21,0.006,30,0.094,31,0.006,32,0.006,43,0.447,49,0.178,53,0.318,57,1.431,244,4.997,368,6.527,408,3.458,522,4.663,583,4.11,1482,5.937,1510,4.997,2154,5.857,2235,6.481]],["title/classes/KeyService.html",[53,0.206,1454,3.24]],["body/classes/KeyService.html",[0,1.574,3,0.045,4,0.045,5,0.04,7,2.305,9,0.443,13,0.139,16,1.905,17,0.988,19,0.657,20,0.355,21,0.007,22,2.152,23,2.316,24,4.362,30,0.045,31,0.003,32,0.003,39,1.215,43,0.538,45,2.179,46,1.582,48,2.069,49,0.214,50,0.6,53,0.153,54,1.098,57,0.688,114,3.131,203,2.668,204,1.155,286,1.381,323,2.255,384,2.736,385,3.16,422,1.492,425,2.386,441,1.41,442,1.988,477,2.419,488,2.72,590,5.117,695,2.676,736,1.975,750,4.394,760,2.043,763,3.524,803,1.913,836,4.711,886,1.913,911,5.006,919,1.177,983,5.303,1083,3.38,1091,2.691,1165,2.676,1311,2.043,1363,2.856,1380,2.401,1398,4.276,1407,3.585,1411,3.995,1454,3.585,1455,4.651,1458,7.545,1459,4.276,1460,4.781,1461,6.605,1462,4.651,1463,5.117,1466,4.276,1470,4.276,1471,4.651,1483,5.566,1487,4.651,1488,4.362,1492,3.162,1493,4.651,1495,3.115,1496,5.006,1499,4.651,1501,2.526,1506,1.802,1511,2.863,1512,2.676,1513,2.676,1545,3.115,1838,2.863,2236,3.115,2237,9.631,2238,3.496,2239,3.496,2240,3.496,2241,3.496,2242,3.496,2243,3.496,2244,3.496,2245,3.496,2246,5.22,2247,3.496,2248,4.651,2249,3.496,2250,3.426,2251,6.929,2252,3.496,2253,3.496,2254,3.496]],["title/classes/LocalFileStorage.html",[53,0.206,2255,3.611]],["body/classes/LocalFileStorage.html",[3,0.066,4,0.066,5,0.059,13,0.203,17,0.966,19,0.644,20,0.326,21,0.007,23,2.288,30,0.066,31,0.005,32,0.005,39,1.587,43,0.526,45,2.13,46,1.546,48,1.878,49,0.2,53,0.223,54,1.727,57,1.003,68,1.02,130,2.694,220,3.09,221,2.424,282,1.893,347,2.588,384,3.379,385,2.297,422,1.458,442,1.623,484,1.717,750,2.882,1078,3.012,1108,3.987,1115,3.503,1257,2.15,1708,5.045,1711,5.222,1712,5.884,1713,5.222,1715,5.588,1719,5.222,1721,4.177,1722,5.555,1723,6.548,1724,6.297,1725,5.931,1727,4.929,1728,3.211,1732,3.503,1736,3.904,1802,4.177,2139,4.544,2255,5.222,2256,4.544,2257,5.1,2258,5.1,2259,6.823,2260,5.1,2261,5.1,2262,5.1,2263,5.1,2264,5.1,2265,5.1,2266,5.1,2267,5.1,2268,5.1,2269,5.1,2270,5.1,2271,4.177,2272,6.823,2273,6.823,2274,5.1,2275,5.1,2276,5.1,2277,6.823,2278,4.544,2279,5.1,2280,5.1,2281,5.1,2282,5.1,2283,5.1,2284,4.544,2285,5.1,2286,5.1,2287,5.1,2288,5.1,2289,4.544,2290,5.1,2291,5.1,2292,5.1]],["title/injectables/LoggerConfigService.html",[33,1.009,2293,3.611]],["body/injectables/LoggerConfigService.html",[0,1.317,3,0.079,4,0.056,5,0.05,9,0.554,13,0.174,14,0.763,17,0.692,19,0.474,20,0.271,21,0.007,28,3.781,30,0.079,31,0.004,32,0.004,33,1.312,35,1.655,39,1.427,43,0.569,45,1.527,46,1.109,48,2.075,49,0.15,50,0.75,53,0.191,54,1.852,107,2.164,124,2.105,135,2.137,203,2.882,204,1.443,216,5.025,258,5.025,259,5.025,260,2.774,261,5.025,270,3.578,271,3.156,272,3.578,273,3.578,275,5.886,276,3.459,282,0.966,283,5.025,285,2.99,287,3.075,288,3.862,294,5.427,422,1.248,423,2.849,488,2.146,685,1.762,736,2.468,987,2.252,1076,3.343,1077,3.075,1084,3.256,1257,1.842,1362,4.433,2293,4.696,2294,7.639,2295,6.851,2296,6.851,2297,6.851,2298,6.851,2299,6.851,2300,6.851,2301,6.851,2302,6.135,2303,6.851,2304,6.851,2305,6.135,2306,4.368,2307,6.2,2308,4.368,2309,4.368,2310,7.483,2311,4.368,2312,4.368,2313,4.368,2314,4.368,2315,5.047,2316,5.466,2317,4.368,2318,4.368,2319,5.466,2320,5.466,2321,4.214,2322,4.368,2323,5.466,2324,4.696,2325,5.466,2326,5.466,2327,5.466,2328,5.466,2329,5.466,2330,5.466,2331,3.892,2332,3.892,2333,5.556,2334,3.892,2335,5.466,2336,5.427,2337,3.892,2338,3.892,2339,3.892,2340,3.892,2341,3.892,2342,3.892,2343,3.892]],["title/interfaces/LoggerConfiguration.html",[0,1.422,2307,3.611]],["body/interfaces/LoggerConfiguration.html",[0,1.53,2,2.545,3,0.088,4,0.066,5,0.058,13,0.202,14,0.846,19,0.339,20,0.326,21,0.007,28,3.936,30,0.088,31,0.004,32,0.004,33,1.455,49,0.166,50,0.872,53,0.222,54,1.92,107,1.976,124,1.742,135,1.53,203,2.632,204,1.677,216,4.159,258,5.571,259,5.571,260,3.076,261,5.571,270,4.159,271,3.669,272,4.159,273,4.159,275,6.539,276,3.997,282,1.123,283,6.997,285,3.234,287,2.545,288,3.196,294,6.539,423,2.441,488,1.776,685,2.048,987,2.617,1076,3.886,1077,2.545,1084,2.695,1257,2.141,1362,3.669,2293,3.886,2294,4.159,2295,4.524,2296,4.524,2297,4.524,2298,4.524,2299,4.524,2300,4.524,2301,4.524,2303,4.524,2304,4.524,2307,6.271,2310,7.834,2315,4.464,2316,4.524,2319,4.524,2320,4.524,2321,3.487,2323,4.524,2324,3.886,2325,4.524,2326,7.611,2327,7.611,2328,7.611,2329,6.06,2330,6.06,2331,4.524,2332,4.524,2333,5.92,2334,4.524,2335,6.06,2336,5.871,2337,4.524,2338,4.524,2339,4.524,2340,4.524,2341,4.524,2342,4.524,2343,4.524]],["title/modules/MetricModule.html",[172,1.448,190,3.408]],["body/modules/MetricModule.html",[3,0.093,4,0.093,5,0.083,21,0.007,30,0.093,31,0.006,32,0.006,49,0.206,50,1.231,53,0.313,172,2.594,174,3.091,190,6.107,201,3.164,285,3.022,286,2.83,360,4.049,541,4.704,542,4.923,1322,4.049,1362,5.178,2344,7.167,2345,7.167,2346,7.167,2347,7.167,2348,5.485,2349,7.167,2350,7.167]],["title/classes/NoneTrustPolicy.html",[53,0.206,97,2.581]],["body/classes/NoneTrustPolicy.html",[3,0.07,4,0.07,5,0.062,9,0.685,13,0.215,14,0.881,19,0.528,20,0.341,21,0.007,30,0.118,31,0.005,32,0.005,37,4.144,43,0.332,49,0.193,53,0.404,56,2.956,57,1.063,58,3.401,59,4.469,60,4.99,61,5.329,62,3.059,63,0.866,65,3.903,68,1.744,70,1.6,71,4.041,72,5.722,73,2.089,74,2.565,75,2.343,76,2.775,77,1.278,78,3.965,79,3.965,80,3.965,81,3.71,82,2.504,83,3.401,84,2.995,85,4.469,86,4.469,87,3.71,88,5.767,89,4.495,90,2.956,91,3.71,92,3.71,93,2.956,94,3.401,95,2.443,96,3.545,97,3.878,98,2.956,99,4.98,100,2.636,101,1.544,102,3.71,103,2.956,104,3.71,628,4.813,2351,5.402]],["title/classes/NotificationRequestDto.html",[53,0.206,2352,3.611]],["body/classes/NotificationRequestDto.html",[3,0.089,4,0.089,5,0.079,13,0.274,14,1.028,19,0.552,20,0.315,21,0.007,30,0.089,31,0.005,32,0.005,43,0.508,49,0.202,53,0.361,57,1.358,63,1.325,75,2.241,77,1.634,121,3.9,706,4.182,722,6.15,726,6.15,1168,5.361,1308,4.742,2352,6.327,2353,7.884,2354,8.849,2355,7.248,2356,6.904,2357,8.267,2358,6.904]],["title/controllers/OAuthController.html",[157,1.397,2359,3.611]],["body/controllers/OAuthController.html",[3,0.074,4,0.074,5,0.066,9,0.935,11,4.433,13,0.229,17,0.649,20,0.282,21,0.007,30,0.074,31,0.005,32,0.005,39,1.718,43,0.353,45,1.432,46,1.04,48,1.316,49,0.217,50,0.988,53,0.251,54,1.21,63,0.922,101,2.601,120,1.384,157,1.703,159,2.012,347,2.744,354,3.447,360,5.142,361,4.691,362,3.421,365,6.046,384,2.915,385,2.485,397,4.859,401,2.965,404,6.046,406,3.621,408,2.734,413,6.046,428,4.156,449,5.07,484,1.936,642,2.734,681,2.481,685,2.32,700,5.124,1257,2.425,2359,5.65,2360,5.124,2361,6.807,2362,8.152,2363,5.752,2364,6.214,2365,5.124,2366,7.284,2367,8.6,2368,5.752,2369,5.752,2370,7.382,2371,6.576,2372,8.152,2373,4.156,2374,5.599,2375,5.124,2376,5.752,2377,5.752,2378,5.752]],["title/modules/OAuthModule.html",[172,1.448,2379,3.611]],["body/modules/OAuthModule.html",[3,0.082,4,0.082,5,0.073,21,0.007,30,0.102,31,0.005,32,0.005,49,0.224,50,1.096,53,0.279,159,2.756,172,2.624,174,2.753,175,3.114,176,3.29,177,3.29,178,3.033,179,4.171,180,4.171,185,5.113,196,4.062,197,3.29,198,3.29,201,3.48,213,4.453,225,4.018,282,1.412,556,6.455,2359,6.544,2374,6.73,2375,5.686,2379,7.38,2380,5.686,2381,5.686,2382,5.686,2383,6.382,2384,5.227,2385,6.382,2386,5.227,2387,5.686,2388,5.227]],["title/injectables/OAuthService.html",[33,1.009,2374,3.24]],["body/injectables/OAuthService.html",[3,0.051,4,0.051,5,0.045,11,2.022,12,1.463,13,0.156,14,0.706,17,0.943,19,0.644,20,0.319,21,0.007,23,0.96,28,3.02,30,0.051,31,0.004,32,0.004,33,1.215,35,1.486,39,1.554,43,0.536,45,2.081,46,1.511,48,1.912,49,0.19,50,0.674,53,0.171,54,1.541,94,2.469,101,1.624,107,1.01,112,1.141,203,2.78,204,1.296,262,2.166,282,1.793,323,1.344,347,2.728,354,1.486,361,3.443,385,2.465,390,3.902,402,3.494,408,1.864,413,4.653,422,1.624,423,2.937,430,4.105,434,2.834,436,3.002,437,3.002,438,2.694,441,1.582,442,2.126,443,2.694,446,3.015,451,5.88,452,7.011,471,3.494,477,2.633,478,2.574,484,1.912,496,3.576,513,2.834,514,3.212,515,2.834,516,2.694,519,3.902,523,0.976,527,3.32,668,1.864,681,1.692,685,3.136,715,5.102,736,2.216,737,3.78,750,2.216,767,2.082,837,1.966,889,3.212,1081,2.292,1322,2.216,1369,3.728,1432,4.653,1477,2.694,1492,2.376,1592,3.212,1874,3.728,2022,3.494,2315,5.101,2321,2.694,2333,2.834,2361,3.002,2364,5.291,2371,6.925,2373,2.834,2374,3.902,2388,3.212,2389,3.494,2390,5.681,2391,6.68,2392,6.68,2393,5.681,2394,7.323,2395,5.681,2396,6.68,2397,5.681,2398,5.681,2399,3.922,2400,3.922,2401,3.922,2402,3.922,2403,3.922,2404,5.681,2405,3.922,2406,3.922,2407,5.681,2408,3.922,2409,3.922,2410,3.922,2411,5.061,2412,5.681,2413,3.922,2414,3.922,2415,3.494,2416,3.922,2417,3.002,2418,5.681,2419,3.922,2420,6.68,2421,3.922,2422,3.922,2423,5.681,2424,3.922,2425,5.061,2426,3.922,2427,5.681,2428,5.061,2429,4.105,2430,5.681,2431,3.922,2432,4.653,2433,3.494,2434,3.002,2435,3.922,2436,3.922,2437,3.922,2438,3.922,2439,3.922]],["title/classes/Oauth2AuthorizationServerResponse.html",[53,0.206,2440,3.408]],["body/classes/Oauth2AuthorizationServerResponse.html",[3,0.063,4,0.063,5,0.056,9,0.617,12,1.704,13,0.194,14,0.823,19,0.643,20,0.35,21,0.007,23,1.619,28,2.728,29,5.418,30,0.063,31,0.004,32,0.004,43,0.563,53,0.213,57,0.958,144,3.062,276,3.228,352,4.008,353,2.558,354,2.506,359,3.866,360,5.236,367,5.035,374,5.594,375,1.58,382,5.234,450,6.599,497,3.396,498,5.427,500,5.427,527,3.866,583,2.753,647,4.342,655,7.178,662,6.599,785,5.749,788,5.749,790,5.749,791,5.749,793,5.749,795,5.749,817,4.78,1191,6.082,1194,2.952,1206,4.552,1401,5.821,1772,4.78,2075,4.341,2202,4.78,2440,4.78,2441,8.257,2442,4.872,2443,4.872,2444,8.688,2445,4.872,2446,4.872,2447,3.991,2448,4.872,2449,4.872,2450,6.616,2451,4.341]],["title/classes/OfferRequestDto.html",[53,0.206,1985,3.24]],["body/classes/OfferRequestDto.html",[3,0.062,4,0.062,5,0.055,9,1.013,12,1.23,13,0.19,14,0.994,16,1.798,17,1.016,19,0.601,20,0.356,21,0.007,30,0.084,31,0.004,32,0.004,43,0.553,49,0.204,53,0.349,57,0.939,62,3.339,63,1.384,70,1.414,71,3.024,74,2.712,75,1.883,76,2.077,77,1.13,100,4.453,107,2.058,112,1.389,118,2.999,120,1.149,121,2.698,122,2.472,128,2.328,135,1.967,143,2.907,262,2.8,372,4.879,375,2.116,473,3.02,607,2.014,616,2.749,620,3.09,681,2.06,706,2.893,714,4.879,868,4.283,869,4.68,909,2.328,926,4.255,987,3.364,999,3.184,1040,2.394,1070,4.995,1227,3.912,1533,5.345,1868,5.371,1985,4.482,1988,3.134,1994,3.134,1997,5.106,1998,3.912,2009,3.655,2018,6.115,2019,3.912,2452,7.24,2453,6.623,2454,4.776,2455,4.776,2456,4.776,2457,4.776,2458,4.776,2459,5.814,2460,4.776,2461,4.776,2462,4.995,2463,4.776,2464,4.776,2465,4.776,2466,4.776,2467,5.814,2468,5.814,2469,3.912,2470,4.255,2471,4.255,2472,4.255]],["title/classes/OfferResponse.html",[53,0.206,1988,3.096]],["body/classes/OfferResponse.html",[3,0.072,4,0.072,5,0.064,9,0.914,12,1.43,13,0.221,14,0.997,16,1.623,19,0.613,20,0.344,21,0.007,30,0.093,31,0.005,32,0.005,43,0.493,49,0.215,53,0.37,57,1.092,62,3.1,70,1.644,71,3.344,74,2.852,75,1.827,76,2.297,77,1.314,100,4.14,107,1.859,112,1.615,118,3.234,120,1.336,121,3.137,122,2.733,128,1.981,135,1.674,143,2.916,262,2.599,372,4.736,375,1.8,473,3.077,607,2.341,616,2.552,620,2.79,681,2.395,706,3.364,714,3.644,868,3.644,869,3.496,909,1.981,987,2.862,1040,4.018,1070,4.25,1533,4.548,1868,4.012,1985,3.814,1988,4.736,1994,3.644,1997,4.956,1998,4.548,2009,4.25,2018,5.523,2019,4.548,2452,6.566,2453,4.947,2459,4.947,2462,4.25,2467,4.947,2468,6.429,2469,4.548,2470,4.947,2471,4.947,2472,4.947,2473,5.553,2474,5.553]],["title/controllers/Oid4vciController.html",[157,1.397,2048,3.611]],["body/controllers/Oid4vciController.html",[3,0.061,4,0.061,5,0.055,9,0.6,12,2.272,13,0.188,17,0.835,20,0.318,21,0.007,30,0.061,31,0.004,32,0.004,39,1.51,43,0.455,45,1.843,46,1.439,48,1.908,49,0.225,50,0.813,53,0.207,54,1.675,63,1.186,68,1.298,101,1.854,120,1.14,134,1.758,146,4.857,157,2.191,159,1.656,163,2.981,207,2.676,282,1.048,286,2.562,310,5.519,360,4.712,384,3.401,385,2.184,390,4.456,401,2.441,420,3.108,425,1.921,473,3.441,608,4.914,616,2.655,619,3.108,620,2.509,642,2.251,647,4.258,670,3.108,673,2.513,674,5.084,675,3.625,681,2.043,685,1.911,846,2.981,848,2.676,897,2.251,941,3.444,1081,2.768,1217,3.931,1257,1.997,1308,3.253,1664,4.258,1995,4.66,1996,3.422,2044,2.981,2048,4.966,2052,3.422,2053,3.625,2352,6.094,2475,4.219,2476,4.736,2477,5.314,2478,4.736,2479,4.736,2480,4.736,2481,6.489,2482,4.736,2483,4.736,2484,4.736,2485,4.736,2486,4.736,2487,4.736,2488,3.879,2489,4.966,2490,4.736,2491,3.108,2492,4.736,2493,3.879,2494,4.736,2495,4.736,2496,4.219,2497,4.736,2498,4.219,2499,4.736,2500,4.736,2501,4.736,2502,4.736,2503,4.736,2504,4.736,2505,4.736,2506,4.736,2507,4.736,2508,4.736,2509,3.879,2510,4.736]],["title/controllers/Oid4vpController.html",[157,1.397,2511,3.611]],["body/controllers/Oid4vpController.html",[3,0.067,4,0.067,5,0.06,9,0.66,12,1.783,13,0.207,17,0.781,20,0.264,21,0.007,30,0.067,31,0.005,32,0.005,39,1.61,43,0.425,45,1.723,46,1.404,48,2.027,49,0.224,50,0.895,53,0.227,54,1.456,63,1.109,68,1.384,120,1.254,134,1.934,157,2.301,159,1.822,163,3.28,360,3.91,375,2.244,382,3.673,384,3.403,390,4.753,401,3.567,408,2.477,420,3.42,422,1.489,425,2.451,473,3.407,615,4.797,636,5.981,642,2.477,647,4.542,673,2.765,674,4.753,675,3.988,685,2.102,738,5.036,846,4.357,941,3.673,942,4.044,968,3.567,1053,3.156,1091,3.567,1257,2.197,1428,3.988,1664,5.099,2044,3.28,2052,5,2053,3.988,2488,4.268,2489,5.297,2491,3.42,2493,4.268,2496,4.642,2498,6.165,2511,5.947,2512,4.642,2513,5.211,2514,6.921,2515,6.923,2516,5.211,2517,5.211,2518,5.211,2519,5.337,2520,4.642,2521,5.211,2522,5.211,2523,4.642,2524,4.642,2525,5.211,2526,5.211,2527,5.211,2528,5.211]],["title/modules/Oid4vpModule.html",[172,1.448,2043,3.096]],["body/modules/Oid4vpModule.html",[3,0.073,4,0.073,5,0.065,21,0.007,30,0.073,31,0.005,32,0.005,49,0.234,50,0.973,53,0.247,159,2.557,172,2.484,174,2.443,175,2.764,176,2.92,177,2.92,178,2.693,179,3.948,180,3.948,185,4.96,191,4.602,192,5.491,196,3.768,197,2.92,198,2.92,201,3.227,225,3.566,238,4.336,240,4.093,738,5.635,2043,6.449,2044,5.706,2045,5.491,2046,5.706,2049,5.021,2050,3.201,2052,5.281,2053,4.336,2054,4.093,2055,4.64,2511,6.194,2524,5.047,2529,5.047,2530,5.665,2531,5.047,2532,5.047,2533,5.665,2534,7.21,2535,4.797,2536,5.047,2537,5.665]],["title/injectables/Oid4vpService.html",[33,1.009,738,2.757]],["body/injectables/Oid4vpService.html",[3,0.034,4,0.034,5,0.03,11,2.138,12,1.995,13,0.103,16,0.584,17,0.667,19,0.502,20,0.226,21,0.007,23,0.635,25,1.047,30,0.034,31,0.003,32,0.003,33,0.887,35,0.983,39,0.965,43,0.363,45,1.716,46,1.069,47,4.069,48,1.479,49,0.214,50,0.446,53,0.113,54,0.872,62,2.287,101,1.847,112,0.755,114,2.595,134,0.963,135,0.783,144,1.71,145,1.517,156,1.146,203,2.482,204,0.858,220,1.573,260,3.397,282,2.018,285,1.095,286,2.045,288,3.723,311,2.611,314,1.971,323,1.88,325,2.343,347,2.607,359,1.517,362,3.352,367,1.378,375,1.917,382,3.431,384,1.638,385,1.99,398,2.848,408,1.971,422,1.185,423,2.391,425,2.225,441,2.089,442,1.882,453,2.721,465,2.269,473,3.093,477,1.203,484,2.861,488,0.908,496,3.26,503,2.313,510,3.341,514,2.126,515,1.876,516,1.783,522,1.338,581,1.876,585,2.848,586,3.397,595,1.174,608,1.42,615,3.658,636,4.272,670,2.721,671,1.783,673,1.378,676,3.729,677,1.704,681,1.12,690,1.634,707,1.876,714,1.704,737,3.116,738,2.423,760,1.517,767,1.378,780,2.611,782,4.877,803,1.42,824,2.964,837,2.079,842,1.467,846,2.611,893,1.42,897,1.234,957,2.201,959,2.079,964,3.137,966,2.343,967,2.512,983,2.343,999,2.885,1040,1.301,1084,1.378,1093,1.876,1132,3.723,1140,3.174,1177,2.313,1255,3.174,1289,2.313,1311,1.517,1324,2.313,1351,2.126,1363,2.269,1368,2.126,1369,3.398,1377,1.876,1378,1.987,1382,3.174,1406,3.695,1411,4.526,1440,4.554,1508,3.397,1509,1.987,1687,2.313,1696,2.313,1868,2.996,1874,1.704,1988,1.704,2045,3.582,2046,4.554,2052,2.996,2054,1.876,2055,2.126,2361,1.987,2411,2.313,2415,2.313,2432,2.126,2433,2.313,2434,1.987,2477,5.294,2491,3.398,2515,3.695,2519,5.32,2520,3.695,2523,2.313,2538,2.313,2539,4.147,2540,5.178,2541,4.554,2542,4.554,2543,2.596,2544,4.147,2545,2.596,2546,3.695,2547,3.695,2548,3.397,2549,2.596,2550,4.526,2551,2.596,2552,2.596,2553,4.147,2554,2.126,2555,2.126,2556,2.126,2557,3.398,2558,2.596,2559,2.596,2560,2.126,2561,2.596,2562,4.947,2563,3.174,2564,3.397,2565,2.313,2566,4.147,2567,6.464,2568,5.913,2569,4.147,2570,5.178,2571,2.596,2572,4.147,2573,6.464,2574,2.596,2575,4.147,2576,2.596,2577,2.596,2578,2.596,2579,2.126,2580,2.313,2581,2.596,2582,2.596,2583,2.596,2584,2.596,2585,6.464,2586,3.174,2587,2.596,2588,2.596,2589,2.596,2590,2.596,2591,2.596,2592,2.596,2593,2.596,2594,2.596,2595,2.596,2596,2.596,2597,4.147,2598,2.596,2599,2.596,2600,2.596,2601,2.596,2602,2.313,2603,2.313,2604,2.596,2605,2.126,2606,2.596,2607,2.596,2608,4.147,2609,2.596,2610,4.147,2611,2.596,2612,2.126,2613,2.126,2614,2.596,2615,2.596,2616,2.596,2617,2.596,2618,4.147,2619,4.147,2620,6.464,2621,2.596,2622,2.596,2623,2.596,2624,4.147,2625,2.596,2626,2.596,2627,4.613,2628,2.313,2629,2.596,2630,2.596,2631,4.147,2632,4.147,2633,3.695,2634,4.147,2635,2.596,2636,2.596,2637,2.596,2638,4.147,2639,2.596,2640,2.596,2641,4.147,2642,2.596,2643,5.178,2644,2.126,2645,2.126,2646,2.596,2647,4.147,2648,2.596,2649,2.596,2650,4.147,2651,4.147,2652,2.596,2653,2.596,2654,2.596,2655,2.596,2656,2.596,2657,2.596,2658,2.596]],["title/classes/ParResponseDto.html",[53,0.206,682,3.611]],["body/classes/ParResponseDto.html",[3,0.088,4,0.088,5,0.079,12,2.448,13,0.272,14,1.023,19,0.549,20,0.314,21,0.007,30,0.088,31,0.005,32,0.005,43,0.505,53,0.299,57,1.347,382,4.366,438,6.057,493,4.808,579,3.249,583,3.869,662,6.738,682,6.296,690,5.551,1040,4.585,1370,7.329,1371,7.329,2447,5.608,2451,6.101,2659,7.856]],["title/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.422,772,3.408]],["body/interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html",[0,1.385,2,1.482,3,0.038,4,0.038,5,0.034,12,2.025,13,0.118,14,0.571,19,0.551,20,0.278,21,0.007,22,1.219,30,0.059,31,0.003,32,0.003,33,0.983,49,0.211,50,0.508,53,0.129,54,1.533,62,1.777,68,0.592,84,1.055,101,0.845,107,1.184,109,2.548,112,0.86,125,3.414,128,2.267,134,2.359,135,0.891,143,1.672,144,2.099,147,2.825,156,2.806,203,1.934,204,0.977,207,1.671,260,2.548,262,0.959,282,2.057,286,2.226,287,1.482,310,1.792,314,3.271,315,4.314,317,3.184,323,1.724,325,3.591,347,2.452,361,1.524,362,1.371,367,1.57,375,2.465,384,2.718,385,0.995,397,1.671,422,0.845,423,2.319,441,3.068,442,2.57,446,1.57,449,3.156,451,2.031,465,1.618,473,3.144,484,2.975,487,2.031,496,1.862,497,2.548,498,2.137,500,2.137,502,2.263,505,2.263,510,2.596,519,2.031,585,3.156,594,2.661,607,1.247,610,4.052,613,2.784,614,1.728,615,1.57,616,1.463,620,2.179,648,2.263,652,4.001,658,2.137,659,3.32,670,3.699,671,2.031,673,1.57,676,2.905,677,1.941,678,1.792,680,2.263,681,1.276,690,3.548,707,4.592,711,2.137,728,2.263,731,2.422,733,2.422,735,2.422,737,2.548,738,3.294,739,3.414,742,2.263,744,5.637,745,2.422,747,5.205,752,2.422,756,2.422,760,4.022,761,5.967,762,5.205,763,3.021,764,2.422,765,5.205,766,2.137,767,1.57,768,2.422,769,2.263,770,2.137,771,2.422,772,4.072,773,5.637,774,3.32,775,2.422,776,2.422,777,3.764,778,2.422,779,3.764,780,2.893,781,5.205,782,4.333,783,2.422,784,2.422,785,2.263,786,2.422,787,2.422,788,2.263,789,1.941,790,2.263,791,2.263,792,2.422,793,2.263,794,2.422,795,2.263,796,2.422,797,2.422,798,3.764,799,2.422,800,2.263,801,2.422,802,2.422,803,3.986,804,2.422,805,2.422,806,2.422,807,2.422,808,2.422,809,4.616,810,4.314,811,2.303,812,3.764,813,3.517,814,2.422,815,5.205,816,3.764,817,5.494,818,2.422,819,3.764,820,3.764,821,3.764,822,3.764,823,3.764,824,2.303,825,3.764,826,2.422,827,2.422,828,2.422,829,2.422,830,2.422,831,2.422,832,2.422,833,3.764,834,2.422,835,2.422,836,1.792,837,1.482,838,2.422,839,2.263,840,1.941,841,2.422,842,1.671,843,2.422,844,2.422,845,2.263,846,1.862,847,3.764,848,1.671,849,2.422,850,4.616,851,2.422,852,2.422,853,2.422,854,2.422,855,2.422,856,2.263,857,3.764,858,2.422,859,3.764,860,2.439,861,2.422,862,4.616,863,2.263,864,2.422,865,2.422,866,2.422,867,2.422,868,1.941,869,2.893,870,2.031,871,2.422,872,2.263,873,2.422,874,4.314,875,2.422,876,2.422,877,2.422,878,4.616,879,2.422,880,2.422,881,4.314,882,2.422,883,2.422,884,2.422]],["title/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.422,774,3.408]],["body/interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html",[0,1.377,2,1.471,3,0.038,4,0.038,5,0.034,12,2.02,13,0.117,14,0.568,17,0.516,19,0.569,20,0.289,21,0.007,22,1.21,30,0.059,31,0.003,32,0.003,33,0.977,49,0.211,50,0.504,53,0.128,54,1.528,62,1.766,68,0.587,84,1.047,101,0.839,107,1.176,109,2.536,112,0.854,125,3.397,128,2.257,134,2.349,135,0.884,143,1.661,144,2.091,147,2.811,156,2.794,203,1.924,204,0.969,207,1.658,260,2.536,262,0.951,282,2.055,286,2.214,287,1.471,310,1.778,314,3.259,315,4.292,317,3.168,323,1.718,325,3.576,347,2.445,361,1.513,362,1.36,367,1.557,375,2.458,384,2.708,385,0.988,397,1.658,422,0.839,423,2.311,441,3.059,442,2.564,446,1.557,449,3.137,451,2.015,465,1.606,473,3.139,484,2.97,487,2.015,496,1.847,497,2.536,498,2.12,500,2.12,502,2.246,505,2.246,510,2.58,519,2.015,585,3.137,594,2.652,607,1.237,610,3.535,613,2.767,614,1.715,615,1.557,616,1.454,620,2.168,648,2.246,652,3.984,658,2.12,659,3.3,670,3.68,671,2.015,673,1.557,676,2.891,677,1.926,678,1.778,680,2.246,681,1.266,690,3.53,707,4.572,711,2.12,728,2.246,731,2.403,733,2.403,735,2.403,737,2.536,738,3.277,739,3.397,742,2.246,744,5.617,745,2.403,747,5.183,752,2.403,756,2.403,760,4.008,761,5.183,762,5.183,763,3.008,764,2.403,765,5.948,766,2.12,767,1.557,768,2.403,769,2.246,770,2.12,771,2.403,772,3.3,773,5.617,774,4.052,775,5.183,776,5.183,777,3.741,778,2.403,779,3.741,780,2.875,781,5.183,782,4.317,783,2.403,784,2.403,785,2.246,786,2.403,787,2.403,788,2.246,789,1.926,790,2.246,791,2.246,792,2.403,793,2.246,794,2.403,795,2.246,796,2.403,797,2.403,798,3.741,799,2.403,800,2.246,801,2.403,802,2.403,803,3.974,804,2.403,805,2.403,806,2.403,807,2.403,808,2.403,809,4.593,810,4.292,811,2.289,812,3.741,813,3.496,814,2.403,815,5.183,816,3.741,817,5.478,818,2.403,819,3.741,820,3.741,821,3.741,822,3.741,823,3.741,824,2.289,825,3.741,826,2.403,827,2.403,828,2.403,829,2.403,830,2.403,831,2.403,832,2.403,833,3.741,834,2.403,835,2.403,836,1.778,837,1.471,838,2.403,839,2.246,840,1.926,841,2.403,842,1.658,843,2.403,844,2.403,845,2.246,846,1.847,847,3.741,848,1.658,849,2.403,850,4.593,851,2.403,852,2.403,853,2.403,854,2.403,855,2.403,856,2.246,857,3.741,858,2.403,859,3.741,860,2.424,861,2.403,862,4.593,863,2.246,864,2.403,865,2.403,866,2.403,867,2.403,868,1.926,869,2.875,870,2.015,871,2.403,872,2.246,873,2.403,874,4.292,875,2.403,876,2.403,877,2.403,878,4.593,879,2.403,880,2.403,881,4.292,882,2.403,883,2.403,884,2.403]],["title/classes/PolicyCredential.html",[53,0.206,99,2.97]],["body/classes/PolicyCredential.html",[3,0.067,4,0.067,5,0.06,9,0.657,13,0.206,14,0.858,17,0.933,19,0.518,20,0.354,21,0.007,30,0.117,31,0.005,32,0.005,37,3.928,43,0.476,49,0.189,53,0.4,56,2.838,57,1.02,58,3.265,59,4.38,60,4.708,61,5.028,62,2.998,63,1.242,68,1.721,70,1.536,71,3.987,72,5.646,73,2.006,74,2.514,75,2.322,76,2.739,77,1.227,78,4.142,79,4.142,80,4.142,81,3.562,82,2.404,83,3.265,84,2.765,85,4.38,86,4.669,87,3.562,88,5.676,89,4.435,90,2.838,91,3.562,92,3.562,93,2.838,94,3.265,95,2.345,96,3.404,97,2.838,98,2.838,99,5.202,100,3.782,101,2.216,102,5.325,103,2.838,104,3.562,341,4.621,342,5.934,2660,6.899,2661,5.187,2662,5.187,2663,5.187]],["title/classes/PresentationAttachment.html",[53,0.206,936,2.858]],["body/classes/PresentationAttachment.html",[3,0.049,4,0.049,5,0.043,7,1.664,9,0.827,12,2.181,13,0.15,14,0.686,16,1.617,17,0.737,19,0.617,20,0.352,21,0.007,25,2.899,26,1.747,27,1.428,28,2.276,30,0.107,31,0.004,32,0.004,43,0.401,49,0.202,53,0.377,57,0.741,62,2.134,63,1.046,68,1.818,70,1.116,71,4.003,73,1.457,74,2.918,75,2.253,76,2.628,77,0.892,78,1.889,79,3.272,80,3.272,89,3.943,95,2.495,101,1.077,107,1.422,118,2.226,120,0.907,122,2.09,124,1.293,128,1.968,134,1.399,143,2.375,144,1.245,221,1.791,262,1.222,286,2.838,299,2.062,323,0.892,353,1.457,375,1.222,493,2.203,523,1.625,548,2.423,579,1.488,592,4.242,593,1.839,594,2.525,595,2.952,597,2.129,607,1.589,616,1.757,639,2.203,668,1.791,672,4.354,681,1.626,842,2.129,848,2.129,860,2,885,1.899,891,1.889,892,1.943,893,3.02,894,3.225,896,3.225,897,1.791,900,3.506,902,2.276,905,2.327,906,1.589,908,1.589,909,1.344,913,3.225,915,2.129,916,2.129,917,1.554,918,2.327,919,1.269,920,1.589,921,2.816,922,4.524,923,2.203,928,2.766,929,3.572,930,4.285,931,2.929,932,3.689,933,2.473,934,4.717,935,3.474,936,4.354,937,4.285,938,4.717,939,4.717,940,4.717,941,4.06,942,4.2,943,4.285,944,2.473,945,2.473,946,3.955,947,2.473,948,2.473,949,2.473,950,2.473,951,2.473,952,2.473,953,2.473,954,3.622,955,4.354,956,2.473,957,2,958,2.473,959,2.766,960,2.473,961,2.473,962,2,963,3.331,964,2.283,965,2.203,966,2.129,967,2.283,968,1.943,969,2.473,2664,3.769,2665,3.769,2666,3.769,2667,3.769]],["title/entities/PresentationConfig.html",[885,1.372,957,2.504]],["body/entities/PresentationConfig.html",[3,0.041,4,0.041,5,0.037,7,2.143,9,0.95,12,2.327,13,0.126,14,0.603,16,1.755,17,0.979,19,0.603,20,0.358,21,0.007,25,1.958,26,2.249,27,1.838,28,2.001,30,0.101,31,0.003,32,0.003,43,0.526,49,0.19,53,0.36,62,1.876,63,1.371,68,1.807,70,0.94,71,3.821,73,1.227,74,2.813,75,2.13,76,2.482,77,0.751,78,1.591,79,2.953,80,2.953,89,3.664,95,2.194,101,0.907,107,1.699,118,1.958,120,0.764,122,1.838,124,1.665,128,2.535,134,1.178,143,2.4,144,1.603,221,1.509,262,1.573,286,2.605,299,1.737,323,1.394,353,1.227,375,1.573,493,2.836,523,1.942,548,2.449,579,1.916,592,4.605,593,2.368,594,2.898,595,1.435,597,2.742,607,1.338,616,1.545,639,2.836,668,1.509,672,4.306,681,1.369,842,2.742,848,2.742,860,2.576,885,1.919,887,1.509,891,2.953,892,3.037,893,3.61,894,3.443,896,3.856,897,2.307,898,3.185,900,3.924,902,2.72,904,1.793,905,2.782,906,2.046,908,2.046,909,1.731,913,3.443,915,2.742,916,2.742,917,1.309,918,2.046,919,1.068,920,1.338,921,2.541,922,5.463,923,1.855,928,2.432,929,3.224,930,3.185,931,2.576,932,3.727,933,2.083,934,4.919,935,1.998,936,3.997,937,2.083,938,4.33,939,4.33,940,4.33,941,3.978,942,3.856,943,3.866,944,2.083,945,2.083,946,3.569,947,2.083,948,2.083,949,2.083,950,2.083,951,2.083,952,2.083,953,2.083,954,3.185,955,4.541,956,2.083,957,2.576,958,3.185,959,3.563,960,3.185,961,3.185,962,1.685,963,3.057,964,3.569,965,2.836,966,2.742,967,3.569,968,2.501,969,2.083,988,2.293,992,2.828,1026,2.6,1030,2.429,1873,2.828,2668,3.174,2669,3.174,2670,3.174,2671,3.174,2672,3.174,2673,3.174,2674,3.174,2675,3.174,2676,3.174,2677,3.174,2678,3.174,2679,3.174,2680,3.174,2681,3.174,2682,3.174]],["title/classes/PresentationConfigCreateDto.html",[53,0.206,2683,3.408]],["body/classes/PresentationConfigCreateDto.html",[3,0.091,4,0.091,5,0.081,14,0.876,21,0.007,30,0.091,31,0.006,32,0.006,37,3.978,49,0.204,53,0.308,57,1.386,82,3.266,120,1.696,135,2.523,282,1.851,323,1.98,584,4.119,594,2.725,701,5.394,891,4.195,892,4.314,957,3.74,1057,5.394,1059,4.84,1363,3.856,2683,6.047,2684,6.279,2685,8.369,2686,5.772]],["title/classes/PresentationDuringIssuanceConfig.html",[53,0.206,617,2.97]],["body/classes/PresentationDuringIssuanceConfig.html",[0,1.568,3,0.067,4,0.067,5,0.06,9,0.659,12,1.781,13,0.207,14,0.86,17,0.587,19,0.519,20,0.35,21,0.007,30,0.117,31,0.005,32,0.005,43,0.32,49,0.19,53,0.394,57,1.023,63,0.834,70,1.54,73,2.012,74,2.242,75,2.288,76,2.633,77,1.231,84,2.951,98,2.847,107,2.281,109,4.004,115,3.564,122,2.941,123,2.608,124,2.839,128,2.466,130,3.066,135,2.084,143,2.824,144,2.565,156,3.803,314,4.295,318,2.012,362,3.834,594,3.199,598,3.152,599,4.352,600,3.275,601,5.209,602,4.888,607,2.194,608,3.783,609,4.748,610,3.564,611,4.748,612,3.414,613,3.152,614,5.033,615,3.669,616,2.2,617,5.209,618,4.748,619,4.537,620,2.673,621,4.352,622,3.152,623,3.573,624,3.573,625,3.152,626,3.275,627,3.414,2687,5.203]],["title/controllers/PresentationManagementController.html",[157,1.397,2688,3.611]],["body/controllers/PresentationManagementController.html",[3,0.049,4,0.049,5,0.044,9,0.482,12,2.187,13,0.151,16,1.728,17,0.815,19,0.482,20,0.344,21,0.007,25,1.536,30,0.049,31,0.004,32,0.004,39,1.294,43,0.444,45,1.798,46,1.305,48,1.981,49,0.218,50,0.654,53,0.166,54,1.381,62,1.472,63,1.157,107,2.066,112,1.617,115,2.866,120,0.916,128,1.358,135,2.315,145,2.225,157,1.127,159,1.332,207,2.151,276,3.204,282,1.23,286,1.503,318,3.521,321,4.51,325,4.339,347,2.211,353,1.472,354,2.735,372,3.649,375,2.808,384,3.271,401,3.385,403,4.017,405,4.554,406,2.397,418,4.118,422,1.088,423,1.77,425,2.274,428,4.017,431,2.455,446,2.021,484,1.871,533,2.021,594,3.348,610,3.385,642,1.81,681,2.398,685,2.243,693,3.118,714,3.649,738,3.838,909,1.358,916,3.141,984,3.141,1040,2.787,1064,3.141,1078,1.681,1081,3.249,1090,2.866,1107,4.017,1108,3.249,1117,2.615,1239,2.615,1245,2.306,1246,2.306,1247,2.397,1248,2.397,1251,3.978,1252,3.5,1253,3.368,1261,2.615,1363,3.042,1477,2.615,1722,2.751,1746,3.118,1917,4.31,1983,5.851,1984,3.392,1986,3.392,1987,4.953,1988,4.31,1989,3.392,1993,3.118,1994,4.31,1997,2.615,2000,3.392,2001,3.392,2002,4.953,2003,2.914,2004,6.434,2005,3.392,2006,5.379,2007,3.392,2008,4.953,2009,4.255,2010,3.392,2027,3.392,2028,3.392,2029,3.392,2030,3.392,2031,3.392,2032,3.392,2033,3.392,2519,3.818,2542,4.134,2555,3.118,2560,3.118,2683,5.218,2688,4.255,2689,3.392,2690,5.56,2691,5.851,2692,3.807,2693,3.807,2694,3.807,2695,3.807,2696,6.139,2697,3.807,2698,3.807,2699,3.807,2700,3.807,2701,3.807,2702,3.807,2703,3.807,2704,3.392,2705,3.807,2706,3.807,2707,3.807,2708,3.807,2709,3.807,2710,3.807,2711,3.807,2712,3.807,2713,3.807,2714,3.807,2715,3.807,2716,3.807,2717,3.807,2718,3.807,2719,3.807]],["title/classes/PresentationRequest.html",[53,0.206,2696,3.611]],["body/classes/PresentationRequest.html",[3,0.072,4,0.072,5,0.064,9,0.705,12,2.365,13,0.221,14,0.898,16,1.625,17,0.815,19,0.482,20,0.362,21,0.007,27,2.736,30,0.093,31,0.005,32,0.005,43,0.493,49,0.176,53,0.315,57,1.094,63,1.286,74,2.342,75,2.032,77,1.316,107,2.323,121,3.143,122,2.736,123,3.621,124,2.478,128,3.275,143,2.918,147,3.621,375,3.051,584,4.222,593,3.524,594,3.551,607,2.345,610,2.867,706,3.37,714,5.265,968,3.724,1040,4.021,1433,5.219,1994,4.741,1997,5.51,2006,4.556,2462,6.14,2469,5.917,2519,5.51,2696,5.529,2720,6.5,2721,5.562,2722,4.956,2723,5.562,2724,5.562,2725,7.224,2726,5.917]],["title/interfaces/PresentationRequestOptions.html",[0,1.422,2550,3.611]],["body/interfaces/PresentationRequestOptions.html",[0,1.999,2,3.324,3,0.086,4,0.086,5,0.076,9,0.841,12,2.24,13,0.264,14,1.003,17,1.087,19,0.581,20,0.308,21,0.007,27,3.056,30,0.086,31,0.005,32,0.005,49,0.162,107,2.079,128,3.364,143,3.292,375,2.616,473,3.299,584,4.716,607,2.796,968,4.159,2550,6.926,2720,5.076,2727,5.909,2728,7.189]],["title/modules/PresentationsModule.html",[172,1.448,2535,3.096]],["body/modules/PresentationsModule.html",[3,0.08,4,0.08,5,0.071,21,0.007,30,0.08,31,0.005,32,0.005,49,0.232,50,1.066,53,0.271,82,2.876,159,2.709,172,2.591,174,2.677,175,3.028,176,3.199,177,3.199,178,2.95,179,4.119,180,4.119,196,3.993,197,3.199,198,3.199,201,3.42,538,3.627,539,2.559,957,3.294,2043,5.083,2049,5.32,2050,3.506,2534,6.9,2535,6.298,2542,6.147,2686,5.083,2688,6.462,2704,5.529,2729,5.529,2730,5.529,2731,5.529,2732,5.529,2733,6.705,2734,6.206,2735,5.529,2736,6.206,2737,6.206,2738,6.206]],["title/injectables/PresentationsService.html",[33,1.009,2542,2.97]],["body/injectables/PresentationsService.html",[3,0.024,4,0.024,5,0.063,7,2.613,9,0.839,12,0.824,13,0.075,14,0.398,16,2.117,17,0.711,19,0.61,20,0.28,21,0.007,22,1.712,23,0.463,30,0.024,31,0.002,32,0.002,33,0.684,35,0.717,39,0.744,43,0.472,45,1.775,46,1.289,48,1.868,49,0.214,50,0.325,53,0.181,54,1.738,62,0.732,68,1.26,70,0.56,77,0.448,82,0.877,95,1.446,107,2.128,112,1.419,114,1.603,130,0.747,135,1.784,153,1.004,201,2.154,203,2.162,204,0.625,217,1.191,218,1.242,220,1.146,221,1.52,251,1.448,260,1.446,262,1.346,282,1.896,285,2.657,323,2.043,325,2.757,347,2.229,353,0.732,375,1.037,378,1.448,385,2.584,408,0.899,422,1.395,423,2.489,425,2.517,431,2.154,441,1.675,442,2.195,465,1.749,477,3.196,484,2.321,488,1.118,510,1.806,523,2.078,539,0.78,581,3.526,586,2.619,592,1.697,594,3.287,595,2.995,647,2.098,668,1.52,694,4.847,760,1.106,763,1.973,789,4.135,803,1.749,824,3.983,846,2.013,860,2.59,870,3.352,885,1.721,887,1.52,891,0.948,935,2.614,941,1.697,942,1.868,957,3.785,965,3.458,967,1.146,982,2.31,999,1.56,1040,2.966,1053,3.817,1054,2.098,1064,4.029,1077,2.446,1078,2.408,1081,3.87,1083,2.887,1084,2.203,1085,3.526,1090,1.648,1091,1.648,1092,5.424,1093,1.367,1097,2.956,1101,1.367,1106,3.526,1107,1.367,1108,1.106,1110,2.31,1111,1.035,1112,2.619,1113,1.367,1114,1.55,1115,1.3,1117,1.3,1119,1.367,1120,1.367,1121,2.619,1123,3.997,1124,1.55,1125,1.367,1126,2.31,1127,1.367,1128,1.367,1129,1.367,1130,1.367,1131,3.4,1132,2.013,1133,1.55,1134,1.55,1135,2.196,1136,1.55,1137,4.276,1138,2.098,1139,1.55,1140,1.448,1141,1.55,1142,1.55,1143,1.55,1144,1.55,1146,2.619,1147,2.619,1148,1.55,1149,1.448,1150,1.55,1151,1.55,1153,1.55,1154,1.55,1155,1.686,1156,1.55,1157,1.55,1158,1.448,1159,1.55,1160,1.55,1161,1.448,1162,1.55,1163,1.55,1167,1.367,1168,1.937,1169,1.55,1170,1.367,1171,1.55,1173,1.191,1174,1.242,1176,1.55,1184,1.367,1185,1.55,1206,1.806,1309,3.699,1311,4.772,1312,1.448,1313,1.448,1316,5.614,1317,1.448,1318,4.552,1356,2.848,1373,3.699,1380,1.3,1415,5.615,1417,1.3,1419,6.157,1496,2.31,1501,1.367,1505,1.55,1506,0.975,1507,1.3,1664,3.202,1810,1.55,1923,4.065,1945,1.686,1955,1.686,1967,1.686,1969,1.686,1970,1.686,2050,1.069,2135,1.448,2212,4.982,2250,1.242,2324,2.447,2509,2.619,2542,3.072,2560,1.55,2683,3.94,2686,1.55,2691,3.699,2739,1.686,2740,3.197,2741,6.622,2742,6.301,2743,4.152,2744,4.88,2745,3.197,2746,4.152,2747,3.197,2748,4.152,2749,3.197,2750,1.55,2751,4.898,2752,4.88,2753,3.197,2754,3.197,2755,2.848,2756,3.197,2757,3.197,2758,1.892,2759,2.619,2760,3.197,2761,1.892,2762,1.892,2763,3.197,2764,1.892,2765,1.892,2766,4.88,2767,4.88,2768,1.892,2769,1.892,2770,5.454,2771,4.88,2772,1.892,2773,3.197,2774,3.197,2775,1.892,2776,5.454,2777,1.892,2778,3.197,2779,1.892,2780,4.152,2781,2.447,2782,1.892,2783,3.197,2784,1.892,2785,3.197,2786,1.892,2787,3.197,2788,1.448,2789,1.3,2790,1.892,2791,1.892,2792,1.892,2793,3.197,2794,1.892,2795,1.892,2796,1.892,2797,4.152,2798,1.892,2799,3.197,2800,1.892,2801,1.892,2802,1.55,2803,1.686,2804,1.892,2805,1.892,2806,1.892,2807,1.892,2808,1.892,2809,1.892,2810,1.892,2811,1.892,2812,1.892,2813,1.892,2814,1.892,2815,1.892,2816,3.197,2817,1.892,2818,1.892,2819,1.892,2820,1.892,2821,1.892,2822,1.892,2823,1.892,2824,1.892,2825,4.152,2826,1.892,2827,1.892,2828,1.892,2829,1.892,2830,3.197,2831,1.55,2832,1.892]],["title/entities/RegistrarEntity.html",[885,1.372,2833,3.408]],["body/entities/RegistrarEntity.html",[3,0.081,4,0.081,5,0.072,13,0.249,14,0.97,19,0.621,20,0.339,21,0.007,30,0.081,31,0.005,32,0.005,43,0.545,49,0.19,53,0.274,63,1.423,68,1.776,323,2.008,523,2.273,548,3.295,885,2.269,887,2.983,898,5.569,902,3.216,904,3.545,905,3.743,906,3.288,908,3.288,909,2.782,917,2.587,918,3.288,919,2.112,920,2.646,921,3.66,2833,5.635,2834,5.591,2835,7.56,2836,7.56,2837,6.275,2838,6.275,2839,6.275,2840,6.275]],["title/modules/RegistrarModule.html",[172,1.448,191,2.97]],["body/modules/RegistrarModule.html",[3,0.073,4,0.073,5,0.065,9,0.713,21,0.007,30,0.094,31,0.005,32,0.005,49,0.225,50,0.966,53,0.246,134,2.088,172,2.618,174,3.48,175,2.745,176,2.901,177,2.901,178,2.675,179,3.936,180,3.936,185,4.951,191,6.095,196,3.752,197,2.901,198,2.901,201,3.766,213,4.112,225,3.542,237,4.307,256,4.609,282,1.245,363,5.961,488,2.546,538,3.289,539,2.32,966,4.112,984,3.179,1077,3.648,1173,3.542,1453,4.999,1573,5.829,2204,4.066,2321,3.865,2417,4.307,2535,5.938,2541,6.121,2833,4.066,2841,5.013,2842,5.013,2843,5.013,2844,5.627,2845,4.609,2846,6.607,2847,5.627,2848,5.013,2849,5.627,2850,5.013,2851,5.013,2852,5.013,2853,7.187,2854,7.187,2855,4.609,2856,4.609,2857,5.627]],["title/injectables/RegistrarService.html",[33,1.009,2541,2.97]],["body/injectables/RegistrarService.html",[3,0.028,4,0.028,5,0.025,7,3.805,9,0.584,11,4.479,13,0.087,14,0.449,16,1.33,17,0.76,19,0.607,20,0.278,21,0.007,24,1.377,28,0.902,30,0.028,31,0.002,32,0.003,33,0.772,35,0.829,39,0.84,43,0.5,45,1.676,46,1.544,48,1.863,49,0.188,50,0.376,53,0.095,54,1.686,62,1.395,68,0.722,93,3.483,101,1.031,107,1.523,108,2.479,124,1.238,130,0.864,135,0.659,156,0.966,203,2.503,204,0.723,221,2.189,260,1.632,282,1.741,285,1.522,286,2.111,287,1.809,310,2.186,314,1.715,323,1.979,325,2.039,347,2.875,353,0.846,354,2.666,361,4.544,367,1.161,374,3.365,375,0.709,384,1.819,385,1.799,388,2.479,395,2.956,397,2.039,422,1.528,423,2.743,425,1.885,441,1.858,442,2.505,445,2.762,446,2.445,451,2.479,452,2.956,484,2.698,488,1.869,523,1.331,524,2.186,539,0.902,560,2.607,579,0.864,647,2.368,672,1.325,681,0.944,736,1.236,737,3.398,751,1.197,767,1.161,839,1.674,840,1.436,860,1.915,890,4.762,893,1.975,897,3.026,919,0.736,932,3.02,942,2.109,964,3.238,965,4.502,966,2.039,983,2.602,1053,3.856,1064,2.039,1077,1.809,1080,2.479,1081,1.278,1083,2.608,1090,1.86,1102,2.479,1106,2.607,1107,4.599,1108,3.72,1111,1.197,1132,1.377,1165,2.762,1255,2.762,1298,3.862,1322,3.02,1362,3.862,1364,1.792,1369,1.436,1382,2.762,1400,1.792,1417,1.502,1420,1.436,1428,2.762,1453,2.479,1470,1.792,1474,1.792,1547,1.949,1664,2.368,1669,2.956,1682,2.956,1689,4.104,1851,3.215,1923,4.372,2023,1.949,2072,1.949,2137,1.949,2147,2.956,2183,4.378,2248,3.215,2250,3.508,2278,1.949,2315,1.436,2425,4.104,2509,1.792,2519,3.671,2541,4.007,2542,4.73,2602,1.949,2645,1.792,2726,4.378,2833,1.581,2835,3.215,2836,5.999,2846,7.418,2848,1.949,2855,1.792,2856,1.792,2858,1.949,2859,3.609,2860,3.215,2861,6.366,2862,8.143,2863,3.609,2864,6.733,2865,4.606,2866,4.606,2867,3.609,2868,3.609,2869,4.378,2870,5.214,2871,5.345,2872,4.606,2873,3.609,2874,2.956,2875,3.609,2876,2.188,2877,2.188,2878,6.366,2879,2.188,2880,2.188,2881,3.609,2882,2.188,2883,3.609,2884,7.869,2885,3.609,2886,2.188,2887,2.188,2888,2.188,2889,6.366,2890,2.272,2891,3.609,2892,3.609,2893,2.188,2894,2.188,2895,3.215,2896,2.188,2897,2.188,2898,3.609,2899,3.609,2900,3.609,2901,2.188,2902,5.345,2903,2.188,2904,1.949,2905,2.188,2906,2.188,2907,3.609,2908,3.609,2909,3.609,2910,3.609,2911,3.609,2912,2.188,2913,2.188,2914,2.188,2915,2.956,2916,2.188,2917,2.188,2918,2.956,2919,2.188,2920,2.188,2921,2.188,2922,2.188,2923,2.188,2924,2.188,2925,6.366,2926,2.188,2927,2.188,2928,2.188,2929,3.609,2930,3.609,2931,3.609,2932,1.949,2933,2.188,2934,2.188,2935,2.188,2936,2.188,2937,2.188,2938,2.188,2939,2.188,2940,2.188,2941,2.188,2942,2.188,2943,2.188,2944,1.792,2945,2.188,2946,2.188,2947,2.188,2948,2.188,2949,2.188,2950,2.188,2951,2.188,2952,5.345,2953,2.188,2954,2.188,2955,2.188,2956,2.188,2957,2.188,2958,2.188,2959,2.188,2960,2.188,2961,2.188,2962,2.188,2963,2.188,2964,4.606,2965,5.345,2966,2.188,2967,3.609,2968,2.188,2969,2.188,2970,3.609,2971,2.188,2972,2.188,2973,2.188,2974,2.188,2975,2.188,2976,1.949,2977,3.609,2978,2.188,2979,2.188,2980,2.188,2981,1.792,2982,2.188,2983,2.188,2984,2.188,2985,2.188,2986,3.609,2987,2.188,2988,2.188,2989,2.188,2990,2.188,2991,2.188,2992,2.188]],["title/classes/RegistrationCertificateRequest.html",[53,0.206,932,2.665]],["body/classes/RegistrationCertificateRequest.html",[3,0.083,4,0.083,5,0.074,7,3.948,9,0.812,12,2.035,13,0.255,14,0.982,16,1.927,17,0.892,19,0.528,20,0.301,21,0.007,27,2.992,30,0.083,31,0.005,32,0.005,43,0.485,49,0.193,53,0.345,57,1.26,63,1.266,74,2.561,75,2,77,1.516,122,3.244,366,5.707,384,3.627,584,4.616,593,3.854,639,4.616,706,3.881,716,4.4,725,5.707,932,5.052,965,5.225,966,4.463,2993,7.631,2994,8.565,2995,6.406,2996,6.406]],["title/modules/ResolverModule.html",[172,1.448,2733,3.408]],["body/modules/ResolverModule.html",[3,0.088,4,0.088,5,0.078,21,0.007,30,0.088,31,0.005,32,0.005,49,0.215,50,1.166,53,0.296,172,2.697,174,2.93,175,3.314,176,3.501,177,3.501,178,3.228,179,4.287,180,4.287,196,4.22,197,3.501,198,3.501,201,2.999,2049,5.623,2050,3.838,2733,6.931,2751,6.783,2997,6.051,2998,6.051,2999,6.051,3000,6.793,3001,6.793]],["title/injectables/ResolverService.html",[33,1.009,2751,3.24]],["body/injectables/ResolverService.html",[3,0.065,4,0.065,5,0.058,7,2.209,9,0.634,13,0.199,17,0.76,20,0.257,21,0.007,22,3.358,23,2.143,25,2.018,30,0.065,31,0.004,32,0.004,33,1.441,35,1.895,39,1.567,43,0.414,45,1.677,46,1.217,48,1.541,49,0.214,50,0.859,53,0.218,54,1.601,114,4.484,282,1.802,286,1.975,287,3.375,317,3.805,347,2.563,375,1.622,385,2.267,422,1.43,425,1.994,441,3.286,442,2.706,461,4.097,477,3.121,484,1.684,488,2.355,497,3.959,522,3.471,668,2.378,671,3.436,760,2.923,763,4.323,803,3.685,824,3.375,1165,5.154,1195,3.685,1257,2.109,1318,3.614,1377,4.866,1496,5.884,1506,2.578,1549,6,2034,3.614,2050,2.826,2212,6.326,2250,4.419,2284,6,2750,4.097,2751,4.625,2755,6,2788,5.154,2789,3.436,2976,4.457,3002,4.457,3003,6.734,3004,6.734,3005,5.002,3006,6.734,3007,5.002,3008,6,3009,6.734,3010,5.002,3011,5.002,3012,4.457,3013,5.002,3014,5.002,3015,5.002,3016,5.002,3017,5.002,3018,5.002,3019,5.002,3020,5.002,3021,5.002,3022,5.002,3023,5.002,3024,5.002,3025,5.002,3026,5.002,3027,6.734,3028,5.002,3029,5.002,3030,5.002,3031,5.002,3032,5.002,3033,5.002,3034,5.002,3035,5.002,3036,5.002,3037,5.002,3038,5.002]],["title/classes/RootOfTrustPolicy.html",[53,0.206,90,2.581]],["body/classes/RootOfTrustPolicy.html",[3,0.069,4,0.069,5,0.061,9,0.674,13,0.211,14,0.872,19,0.557,20,0.347,21,0.007,30,0.117,31,0.005,32,0.005,37,4.123,43,0.431,49,0.192,53,0.402,56,2.909,57,1.046,58,3.347,59,4.434,60,4.971,61,5.309,62,3.354,63,1.124,65,3.842,68,1.735,70,1.574,71,4.02,72,5.693,73,2.056,74,2.545,75,2.335,76,2.761,77,1.258,78,3.934,79,3.934,80,3.934,81,3.652,82,2.464,83,3.347,84,2.799,85,4.715,86,4.434,87,3.652,88,5.732,89,4.471,90,3.838,91,3.652,92,3.652,93,2.909,94,3.347,95,2.404,96,3.489,97,2.909,98,2.909,99,4.941,100,2.594,101,1.52,102,3.652,103,2.909,104,3.652,3039,5.317,3040,5.317,3041,5.317,3042,5.317]],["title/classes/S3FileStorage.html",[53,0.206,3043,3.611]],["body/classes/S3FileStorage.html",[3,0.055,4,0.055,5,0.049,12,1.098,13,0.169,17,0.988,19,0.644,20,0.318,21,0.007,22,2.885,23,2.346,30,0.055,31,0.004,32,0.004,39,1.403,43,0.512,45,2.075,46,1.506,48,1.837,49,0.186,53,0.186,54,1.689,57,0.839,68,0.853,130,2.382,144,2.312,282,1.683,285,1.798,347,3.101,384,3.17,385,2.03,422,1.724,423,2.227,442,2.653,453,2.798,465,2.333,474,3.263,484,2.702,750,3.407,751,3.3,999,2.942,1078,2.663,1108,3.525,1195,2.333,1708,4.592,1710,6.234,1711,4.616,1712,5.356,1713,4.616,1715,4.94,1717,5.373,1719,4.616,1721,3.492,1722,5.056,1723,6.144,1724,5.732,1725,5.497,1727,5.056,1728,4.405,1729,3.492,1732,2.928,1735,3.799,1736,4.616,1802,3.492,2202,4.357,2271,3.492,2289,5.373,3043,4.616,3044,3.799,3045,4.264,3046,6.778,3047,8.9,3048,6.998,3049,4.264,3050,5.056,3051,4.264,3052,4.264,3053,4.264,3054,4.264,3055,4.264,3056,6.031,3057,6.998,3058,6.998,3059,6.031,3060,4.94,3061,3.492,3062,3.799,3063,3.799,3064,4.264,3065,8.027,3066,8.334,3067,4.264,3068,6.031,3069,4.264,3070,4.264,3071,4.264,3072,4.264,3073,4.264,3074,4.264,3075,4.264,3076,4.264,3077,4.264,3078,4.264,3079,4.264,3080,4.264,3081,4.264,3082,4.264,3083,4.264,3084,4.264,3085,4.264]],["title/classes/SchemaResponse.html",[53,0.206,1025,2.97]],["body/classes/SchemaResponse.html",[3,0.077,4,0.077,5,0.068,9,1.103,13,0.236,14,1.117,17,1.036,19,0.613,20,0.356,21,0.007,30,0.077,31,0.005,32,0.005,43,0.564,49,0.145,53,0.329,57,1.169,63,1.471,71,3.836,74,2.684,75,2.096,77,1.407,122,3.135,134,3.072,276,3.678,583,3.358,668,3.583,716,5.177,909,2.12,984,5.076,987,3.886,1025,4.745,1035,6.119,1161,5.769,1265,7.137,1660,5.296,3086,8.278,3087,5.944,3088,8.278,3089,8.278,3090,5.296,3091,5.944,3092,5.944,3093,5.296,3094,5.944,3095,5.944,3096,5.944,3097,5.944,3098,5.944,3099,5.944]],["title/entities/Session.html",[473,1.65,885,1.372]],["body/entities/Session.html",[3,0.034,4,0.034,5,0.03,9,0.336,12,2.286,13,0.105,14,0.744,16,1.754,17,1.061,19,0.608,20,0.351,21,0.007,26,2.432,27,1.988,30,0.068,31,0.003,32,0.003,43,0.559,49,0.185,53,0.116,63,1.459,68,1.899,101,2.084,107,1.791,118,1.7,120,0.637,123,2.112,124,1.446,128,2.133,140,2.894,143,2.375,144,1.976,145,3.495,146,4.285,156,1.861,167,3.754,168,2.306,262,1.939,318,2.029,323,1.242,362,1.953,375,1.366,382,4.242,431,2.883,447,3.225,473,3.079,477,1.953,518,2.894,523,1.815,548,2.22,592,3.174,593,2.918,594,2.926,597,2.381,607,1.117,608,2.306,610,3.083,616,2.482,621,2.653,639,3.495,652,3.304,659,4.322,681,1.818,690,3.304,698,4.675,824,1.328,868,5.531,869,3.304,881,4.016,885,1.899,887,1.259,891,2.63,892,2.705,893,3.805,894,3.067,896,3.495,897,2.003,898,5.117,900,4.609,904,1.497,905,2.522,906,1.777,908,1.777,909,2.133,913,3.067,915,2.381,916,2.381,917,1.092,918,1.777,919,0.892,920,1.117,921,3.447,941,2.237,963,3.379,968,2.172,988,5.268,999,1.292,1040,2.998,1071,4.785,1077,1.328,1093,4.322,1168,1.605,1174,2.766,1194,1.605,1217,4.585,1299,1.914,1308,1.819,1311,1.548,1317,2.027,1318,1.914,1656,3.452,1704,2.17,1868,3.792,1870,4.675,1985,3.604,2355,3.452,2477,5.347,2519,3.604,2546,3.754,2555,2.17,2580,4.675,2627,4.675,2633,4.675,2890,3.304,3100,2.027,3101,4.298,3102,5.248,3103,2.649,3104,2.649,3105,2.649,3106,4.214,3107,2.649,3108,2.649,3109,4.675,3110,2.649,3111,4.214,3112,2.649,3113,2.649,3114,2.649,3115,2.649,3116,2.649,3117,2.649,3118,2.649,3119,2.649,3120,5.248,3121,2.649,3122,2.649,3123,2.649,3124,2.649,3125,2.649,3126,4.899,3127,2.649,3128,2.649,3129,4.322,3130,2.649,3131,2.649,3132,2.649,3133,4.214,3134,4.214,3135,2.649,3136,2.649,3137,4.214,3138,2.649,3139,3.754,3140,3.045,3141,3.754,3142,1.819,3143,2.649,3144,2.649,3145,2.649]],["title/controllers/SessionController.html",[157,1.397,3146,3.611]],["body/controllers/SessionController.html",[3,0.061,4,0.061,5,0.054,9,0.821,13,0.188,16,2.11,17,0.834,19,0.531,20,0.318,21,0.007,27,1.789,30,0.061,31,0.004,32,0.004,39,1.507,43,0.489,45,1.84,46,1.437,48,1.969,49,0.222,50,0.811,53,0.206,54,1.673,63,1.274,101,1.851,112,2.15,120,1.137,157,1.398,159,1.652,168,3.543,318,3.408,354,2.799,384,1.865,385,2.677,401,2.434,406,2.973,418,3.985,422,1.35,423,2.061,425,2.467,431,2.859,473,3.411,524,3.923,533,2.506,543,4.679,544,2.668,642,2.245,676,3.81,685,2.613,1078,2.085,1090,3.338,1091,3.338,1097,4.817,1239,3.244,1245,2.861,1246,2.861,1247,2.973,1248,2.973,1251,2.861,1252,2.973,1253,2.861,1261,3.244,1262,3.615,1290,4.319,1320,3.244,1917,4.25,2184,3.868,2489,4.957,2781,4.957,3142,4.448,3146,4.957,3147,4.207,3148,7.391,3149,7.952,3150,6.476,3151,6.476,3152,4.723,3153,4.723,3154,4.723,3155,4.723,3156,4.723,3157,4.723,3158,4.723,3159,4.723,3160,5.746,3161,4.723,3162,4.723,3163,3.868,3164,3.615,3165,4.957,3166,4.723,3167,3.868,3168,4.723,3169,4.723,3170,4.723,3171,4.723,3172,4.723,3173,4.723,3174,4.723,3175,4.723,3176,4.723]],["title/interfaces/SessionLogContext.html",[0,1.422,2557,3.096]],["body/interfaces/SessionLogContext.html",[0,1.764,2,2.933,3,0.076,4,0.076,5,0.067,9,0.742,13,0.232,14,0.928,16,1.679,17,1.009,19,0.643,20,0.354,21,0.007,23,1.827,26,3.459,27,3.278,30,0.076,31,0.005,32,0.005,43,0.36,47,5.173,168,4.084,288,3.684,311,5.449,323,2.048,362,4.143,473,3.29,474,5.712,523,2.046,608,4.892,615,4.745,1071,4.898,1084,3.961,1836,6.113,2557,4.898,2563,6.624,2564,7.61,2728,6.649,2860,5.213,3177,5.392,3178,5.213,3179,5.213,3180,5.851,3181,7.463,3182,7.463,3183,7.463,3184,7.463]],["title/injectables/SessionLoggerInterceptor.html",[33,1.009,2044,2.97]],["body/injectables/SessionLoggerInterceptor.html",[3,0.046,4,0.046,5,0.041,9,0.887,12,2.292,13,0.142,14,0.659,17,0.713,20,0.299,21,0.007,23,0.873,28,2.185,30,0.046,31,0.003,32,0.003,33,1.133,35,1.351,39,1.233,42,5.055,43,0.43,45,1.574,46,1.265,47,4.932,48,1.601,49,0.198,50,0.612,53,0.156,54,1.472,107,1.365,130,1.408,144,2.753,168,3.829,203,2.973,204,1.178,217,2.245,218,2.34,260,2.858,271,2.577,282,2.008,285,1.504,288,4.405,311,4.707,314,3.961,317,2.015,318,1.379,319,4.72,321,2.449,323,1.254,326,3.177,353,1.379,354,1.351,360,2.015,375,2.05,384,3.515,422,2,423,2.71,425,2.32,434,2.577,441,1.439,463,2.245,473,2.915,489,2.921,595,2.396,647,3.477,685,3.161,1053,4.529,1054,4.148,1084,3.968,1085,5.661,1158,2.729,1167,2.577,1168,3.829,1184,3.828,1195,4.091,1363,2.899,1590,3.177,1841,4.055,2044,4.405,2077,3.177,2078,7.585,2081,2.921,2086,3.177,2221,4.806,2333,2.577,2336,4.055,2493,2.921,2547,4.72,2548,2.921,2562,5.355,2563,5.722,2628,5.632,2645,2.921,2789,2.449,2869,5.177,2874,5.731,2915,4.339,2932,4.72,2944,5.731,3140,2.577,3177,5.402,3185,3.177,3186,5.298,3187,5.298,3188,5.298,3189,5.298,3190,5.298,3191,5.298,3192,6.997,3193,3.566,3194,5.298,3195,5.298,3196,5.298,3197,5.298,3198,7.477,3199,5.298,3200,5.298,3201,3.566,3202,5.298,3203,6.321,3204,5.298,3205,6.997,3206,5.298,3207,3.566,3208,3.566,3209,3.566,3210,4.339,3211,3.566,3212,3.566,3213,3.177,3214,3.566,3215,3.566,3216,3.566,3217,3.566,3218,3.566,3219,3.566,3220,3.566,3221,3.566,3222,3.566,3223,3.566,3224,3.566,3225,3.566,3226,6.321,3227,3.566,3228,3.566,3229,6.997,3230,3.566,3231,3.566,3232,3.566,3233,3.566,3234,3.177,3235,3.566,3236,3.566,3237,3.566,3238,3.177,3239,3.177,3240,2.729,3241,3.177,3242,3.566,3243,3.566,3244,3.566,3245,3.566,3246,3.566,3247,3.566,3248,5.298,3249,3.566]],["title/injectables/SessionLoggerService.html",[33,1.009,2045,2.858]],["body/injectables/SessionLoggerService.html",[3,0.036,4,0.036,5,0.032,9,0.558,12,1.403,13,0.111,14,0.548,17,0.935,19,0.563,20,0.326,21,0.007,28,3.073,30,0.036,31,0.003,32,0.003,33,0.943,35,1.062,39,1.025,43,0.525,45,2.063,46,1.544,47,5.9,48,1.896,49,0.151,50,0.481,53,0.122,54,1.743,107,1.135,203,2.788,204,0.926,217,1.764,218,1.839,260,4.083,271,2.025,282,1.205,285,1.182,288,4.485,314,2.934,354,2.062,362,3.68,382,3.276,422,1.764,423,2.457,425,1.305,473,3.196,488,1.541,518,4.239,523,0.698,594,1.704,616,2.268,620,1.704,669,4.851,685,2.707,696,3.926,750,4.591,897,1.332,1053,2.669,1084,3.276,1085,5.577,1167,3.184,1168,4.676,1170,3.184,1174,1.839,1184,5.577,1217,4.065,1398,5.056,1841,4.724,1848,3.926,2045,3.739,2221,3.027,2315,5.333,2321,3.027,2333,2.025,2336,6.954,2355,5.496,2548,3.609,2557,6.223,2564,6.104,2565,2.497,2869,4.46,2874,3.609,2915,3.609,3109,5.978,3140,2.025,3177,6.248,3238,3.926,3239,7.862,3240,3.373,3241,3.926,3250,2.497,3251,6.173,3252,4.407,3253,4.407,3254,5.445,3255,5.445,3256,4.407,3257,5.445,3258,4.407,3259,5.445,3260,5.445,3261,5.445,3262,4.407,3263,6.173,3264,2.803,3265,4.407,3266,4.407,3267,9.655,3268,2.803,3269,2.803,3270,6.71,3271,2.803,3272,2.803,3273,2.803,3274,4.407,3275,2.803,3276,5.445,3277,2.803,3278,2.803,3279,4.407,3280,2.803,3281,2.803,3282,2.803,3283,2.803,3284,2.803,3285,2.803,3286,2.803,3287,4.407,3288,2.803,3289,2.803,3290,2.803,3291,8.127,3292,8.127,3293,2.803,3294,7.719,3295,2.803,3296,2.803,3297,2.803,3298,2.803,3299,2.803,3300,2.803,3301,2.803,3302,2.803,3303,2.803,3304,2.803,3305,4.407]],["title/modules/SessionModule.html",[172,1.448,192,2.858]],["body/modules/SessionModule.html",[3,0.073,4,0.073,5,0.065,9,0.717,21,0.007,30,0.094,31,0.005,32,0.005,46,1.022,49,0.228,50,0.971,53,0.247,159,2.554,172,2.623,174,2.439,175,2.759,176,2.915,177,2.915,178,2.688,179,3.945,180,3.945,192,5.806,196,3.764,197,2.915,198,2.915,201,3.224,213,4.125,239,4.328,262,2.367,282,1.251,318,3.127,431,3.224,473,1.978,491,4.632,492,4.632,532,5.946,538,3.305,539,2.332,540,6.505,541,3.711,542,3.884,543,4.086,544,3.195,545,4.632,577,5.038,578,4.632,579,2.233,676,4.969,1077,4.053,1453,5.015,2429,4.086,2586,6.189,3142,6.077,3146,6.189,3164,4.328,3167,4.632,3306,5.038,3307,5.038,3308,5.655,3309,5.038,3310,4.632,3311,5.655,3312,4.632,3313,5.038,3314,5.038,3315,5.038,3316,5.655,3317,5.655,3318,5.038,3319,5.038]],["title/injectables/SessionPipe.html",[33,1.009,3165,3.611]],["body/injectables/SessionPipe.html",[3,0.08,4,0.08,5,0.072,12,1.602,13,0.247,16,1.745,17,0.875,19,0.564,20,0.296,21,0.007,30,0.08,31,0.005,32,0.005,33,1.659,35,2.355,39,1.804,43,0.476,45,2.104,46,1.402,48,1.422,49,0.206,50,1.068,53,0.271,54,1.631,130,2.455,157,1.841,282,1.375,311,5.32,347,2.845,385,2.61,422,1.777,441,3.128,442,2.468,473,3.247,484,2.093,587,5.539,676,4.786,685,2.508,803,4.243,885,1.809,1257,2.621,3164,4.759,3165,5.935,3167,5.092,3320,5.539,3321,7.754,3322,6.218,3323,6.218,3324,7.754,3325,6.218,3326,6.921,3327,7.754,3328,6.218,3329,6.218]],["title/injectables/SessionService.html",[33,1.009,676,2.432]],["body/injectables/SessionService.html",[3,0.039,4,0.039,5,0.035,13,0.121,16,1.871,17,0.895,19,0.593,20,0.303,21,0.007,30,0.039,31,0.003,32,0.003,33,1.004,35,1.151,39,1.092,43,0.52,45,1.975,46,1.434,48,2.066,49,0.199,50,0.522,53,0.133,54,1.669,62,2.849,130,1.2,135,1.415,165,4.66,178,2.231,203,2.635,204,1.004,209,2.49,262,1.859,282,1.872,323,1.926,347,2.892,353,1.175,361,1.567,385,2.171,422,1.342,423,2.053,425,2.462,430,2.196,431,3.793,432,2.708,433,4.182,442,1.494,473,3.235,478,4.575,484,2.346,518,3.939,523,1.606,524,3.907,539,1.253,541,1.995,578,2.49,585,5.711,590,2.49,620,2.217,676,2.42,685,1.894,695,3.593,711,4.143,751,2.569,780,1.914,782,2.955,800,3.593,813,2.327,869,2.955,891,1.524,892,1.567,897,1.445,919,1.023,1078,2.073,1080,3.224,1083,3.146,1090,3.324,1102,3.224,1111,1.663,1174,3.081,1322,2.652,1363,3.529,1369,3.081,1433,3.392,1874,3.081,1923,5.06,2183,3.845,2315,1.995,2348,2.327,2429,3.392,2781,3.593,2802,2.49,2803,2.708,2890,2.955,3126,5.709,3129,4.143,3140,2.196,3142,5.591,3164,2.327,3312,3.845,3318,6.21,3319,6.21,3330,2.708,3331,6.45,3332,4.694,3333,6.45,3334,3.04,3335,7.68,3336,5.735,3337,5.282,3338,3.04,3339,4.694,3340,4.694,3341,6.45,3342,3.04,3343,4.694,3344,6.45,3345,3.04,3346,4.694,3347,3.04,3348,4.694,3349,3.04,3350,3.04,3351,4.694,3352,6.45,3353,3.04,3354,4.694,3355,3.04,3356,4.694,3357,6.45,3358,4.694,3359,4.694,3360,4.694,3361,4.182,3362,3.04,3363,4.694,3364,3.04,3365,4.694,3366,3.04,3367,4.694,3368,4.694,3369,2.49,3370,3.04,3371,2.327,3372,4.694,3373,3.04,3374,3.04,3375,3.04,3376,3.04,3377,3.04,3378,4.694,3379,4.694,3380,3.04,3381,4.694,3382,3.04,3383,3.04,3384,4.694,3385,3.04,3386,3.04,3387,3.04,3388,3.04,3389,3.04,3390,4.694,3391,4.694,3392,3.04,3393,4.694,3394,4.694,3395,5.735,3396,4.694,3397,3.04,3398,4.697,3399,4.694,3400,3.04,3401,3.04,3402,5.735,3403,4.694,3404,3.04,3405,3.04,3406,3.04,3407,3.04,3408,3.04,3409,3.04,3410,4.694,3411,3.04,3412,3.04,3413,3.04]],["title/controllers/StatusListController.html",[157,1.397,3414,3.611]],["body/controllers/StatusListController.html",[3,0.083,4,0.083,5,0.074,13,0.255,17,0.726,19,0.573,20,0.327,21,0.007,30,0.083,31,0.005,32,0.005,39,1.842,43,0.395,45,1.601,46,1.162,48,1.812,49,0.209,50,1.104,53,0.281,54,1.353,63,1.03,68,1.286,114,3.223,120,1.548,157,1.904,159,2.249,163,4.048,323,1.874,406,4.048,420,4.22,425,1.904,431,3.788,544,4.473,642,3.056,1206,4.847,1251,5.197,1257,2.711,1290,5.014,1320,4.417,3414,6.06,3415,5.196,3416,5.729,3417,6.431,3418,7.054,3419,5.729,3420,5.729,3421,6.431,3422,7.918,3423,6.431,3424,6.431,3425,6.431,3426,5.729,3427,5.729,3428,6.431,3429,6.431]],["title/entities/StatusListEntity.html",[885,1.372,3430,3.408]],["body/entities/StatusListEntity.html",[3,0.065,4,0.065,5,0.058,9,0.634,13,0.199,14,0.837,16,1.515,17,0.76,19,0.544,20,0.334,21,0.007,30,0.065,31,0.004,32,0.004,43,0.538,49,0.186,53,0.218,63,1.403,68,1.751,89,3.471,124,2.31,276,3.285,323,1.801,352,4.079,354,2.551,431,4.248,443,4.625,523,2.294,548,3.023,579,3.457,597,3.805,824,4.26,885,2.369,887,2.378,898,4.419,900,3.285,902,2.777,904,2.826,905,3.434,906,2.839,908,2.839,909,2.402,917,2.063,918,2.839,919,1.684,920,2.109,921,2.905,962,2.655,963,3.121,988,4.866,1135,5.838,1206,5.381,1311,2.923,1315,3.829,3240,6.506,3415,5.871,3430,4.866,3431,7.328,3432,4.457,3433,7.573,3434,7.613,3435,5.002,3436,5.002,3437,5.002,3438,5.002,3439,5.002,3440,6,3441,5.002,3442,5.002,3443,6.734]],["title/modules/StatusListModule.html",[172,1.448,532,3.096]],["body/modules/StatusListModule.html",[3,0.081,4,0.081,5,0.072,21,0.007,30,0.081,31,0.005,32,0.005,49,0.23,50,1.074,53,0.273,159,2.722,172,2.6,174,2.697,175,3.05,176,3.223,177,3.223,178,2.972,179,4.133,180,4.133,185,5.087,196,4.011,197,3.223,198,3.223,201,3.435,225,3.936,431,3.435,532,6.306,538,3.654,539,2.578,544,3.532,1290,5.711,1320,4.294,3414,6.484,3415,4.103,3430,5.622,3444,5.57,3445,5.57,3446,5.57,3447,6.252,3448,6.252,3449,6.932,3450,5.57,3451,4.517,3452,5.57,3453,6.252,3454,6.252]],["title/injectables/StatusListService.html",[33,1.009,1290,2.757]],["body/injectables/StatusListService.html",[3,0.036,4,0.036,5,0.093,9,0.551,13,0.214,16,1.592,17,0.866,19,0.597,20,0.293,21,0.007,30,0.036,31,0.003,32,0.003,33,0.931,35,1.044,39,1.012,43,0.472,45,1.911,46,1.387,48,1.807,49,0.205,50,0.473,53,0.12,54,1.133,84,0.983,95,1.247,107,1.388,112,2.298,114,2.18,203,2.427,204,0.911,220,3.263,221,1.31,276,2.122,282,1.963,286,1.089,311,2.738,323,2.168,347,2.932,385,1.464,422,1.243,423,2.357,425,1.971,431,4.179,441,1.755,442,2.514,473,2.763,477,2.016,478,4.369,484,2.777,488,1.521,496,3.391,510,1.558,513,3.143,516,1.894,520,4.8,523,1.911,524,2.635,527,1.611,539,1.137,544,4.463,579,2.794,616,1.715,673,1.463,736,1.558,737,3.349,751,1.509,760,2.542,767,1.463,780,1.736,782,3.851,803,2.38,824,3.546,837,1.382,915,1.558,919,0.928,999,1.345,1040,1.382,1063,3.563,1078,1.92,1080,2.988,1081,1.611,1083,3.613,1102,2.988,1108,2.542,1110,4.419,1111,1.509,1132,2.738,1135,3.7,1149,2.11,1206,5.301,1251,2.635,1290,2.542,1299,4.81,1311,2.542,1314,2.456,1315,2.11,1363,4.052,1364,6.287,1369,3.535,1377,1.992,1378,2.11,1380,2.988,1469,3.329,1474,2.258,1478,3.563,1492,2.635,1496,3.143,1501,1.992,1669,3.563,1682,3.563,1736,3.329,1874,1.809,2147,3.563,2184,2.258,2315,1.809,2432,2.258,2434,2.11,2605,2.258,2781,4.681,2802,3.563,2895,6.303,2944,3.563,3160,4.419,3240,5.875,3415,5.184,3418,3.875,3419,3.875,3430,4.419,3433,2.456,3440,4.8,3449,3.875,3450,2.456,3451,1.992,3452,2.456,3455,2.456,3456,5.387,3457,4.35,3458,4.35,3459,4.35,3460,5.387,3461,5.387,3462,2.757,3463,2.757,3464,2.757,3465,4.35,3466,4.35,3467,2.757,3468,2.757,3469,2.757,3470,2.757,3471,4.35,3472,6.117,3473,4.35,3474,4.35,3475,4.35,3476,2.757,3477,4.35,3478,2.757,3479,4.35,3480,2.757,3481,4.35,3482,2.757,3483,2.757,3484,2.757,3485,2.757,3486,2.757,3487,2.757,3488,2.757,3489,2.757,3490,2.757,3491,2.757,3492,2.757,3493,2.757,3494,2.757,3495,4.35,3496,2.757,3497,2.757,3498,2.757,3499,2.757,3500,6.117,3501,4.35,3502,4.35,3503,2.757,3504,4.35,3505,4.35,3506,2.757,3507,2.757,3508,2.757,3509,4.35,3510,6.658,3511,2.757,3512,2.757,3513,2.757,3514,2.757,3515,2.757,3516,2.757,3517,2.757,3518,4.35,3519,4.35,3520,2.757,3521,2.757,3522,2.757]],["title/entities/StatusMapping.html",[885,1.372,3451,3.408]],["body/entities/StatusMapping.html",[3,0.071,4,0.071,5,0.064,13,0.336,14,0.894,19,0.621,20,0.364,21,0.007,30,0.071,31,0.005,32,0.005,43,0.553,49,0.175,53,0.241,63,1.442,68,1.922,311,5.031,323,1.891,523,2.185,548,3.142,579,2.837,885,2.09,887,2.622,902,3.908,904,3.117,905,3.569,906,3.03,908,3.03,909,2.563,917,3.711,918,3.03,919,1.857,920,2.326,1206,4.515,1299,5.774,3415,6.015,3431,7.507,3451,5.191,3523,4.915,3524,8.778,3525,9.293,3526,5.517,3527,7.185,3528,5.517,3529,5.517,3530,5.517,3531,5.517,3532,5.517]],["title/classes/StatusUpdateDto.html",[53,0.206,3160,3.408]],["body/classes/StatusUpdateDto.html",[3,0.078,4,0.078,5,0.07,13,0.241,14,0.949,16,1.972,17,0.99,18,7.811,19,0.586,20,0.319,21,0.007,30,0.078,31,0.005,32,0.005,43,0.513,49,0.148,53,0.333,57,1.192,63,1.339,73,2.344,74,2.474,75,2.22,77,1.434,101,2.181,107,1.966,147,3.825,311,5.259,318,2.951,431,3.99,473,3.067,579,3.014,616,2.791,860,4.05,931,4.05,976,4.964,1132,4.804,1299,6.035,1874,5.754,3160,5.514,3163,7.181,3415,5.754,3533,4.964,3534,6.061,3535,6.061,3536,6.061,3537,6.061,3538,6.061]],["title/controllers/StorageController.html",[157,1.397,3539,3.611]],["body/controllers/StorageController.html",[3,0.069,4,0.069,5,0.103,9,0.893,13,0.213,17,0.796,19,0.526,20,0.332,21,0.007,23,1.726,30,0.069,31,0.005,32,0.005,39,1.64,43,0.433,45,1.755,46,1.274,48,1.803,49,0.222,50,0.92,53,0.234,54,1.483,63,1.13,68,1.072,120,1.29,157,2.333,159,1.874,206,4.39,207,3.028,318,3.047,330,6.453,354,2.67,401,3.634,403,5.094,418,3.785,422,1.532,425,2.479,442,1.706,488,1.874,523,1.755,533,2.844,595,2.423,642,2.547,1138,5.171,1206,3.983,1245,3.247,1246,3.247,1247,3.374,1248,3.374,1252,3.374,1253,3.247,1257,2.26,1727,3.872,1743,5.396,1748,5.494,1765,7.02,1771,7.748,2488,4.39,3234,4.775,3539,5.396,3540,4.775,3541,7.05,3542,5.359,3543,5.359,3544,5.359,3545,5.359,3546,5.359,3547,5.359,3548,7.05,3549,5.359,3550,5.359,3551,7.05,3552,7.05,3553,5.359,3554,7.05,3555,5.359,3556,5.359,3557,5.359,3558,5.359,3559,4.775,3560,5.359,3561,5.359,3562,5.359,3563,5.359,3564,5.359,3565,5.359,3566,5.359,3567,5.359,3568,5.359,3569,5.359,3570,5.359,3571,5.359]],["title/modules/StorageModule.html",[172,1.448,193,3.408]],["body/modules/StorageModule.html",[3,0.066,4,0.066,5,0.059,20,0.195,21,0.007,30,0.088,31,0.005,32,0.005,39,1.189,43,0.314,48,1.169,49,0.232,50,0.877,53,0.223,54,1.618,101,1.46,159,1.787,172,2.361,174,2.203,179,2.492,180,2.492,193,5.559,201,2.255,203,2.64,204,1.687,212,4.934,213,3.858,220,3.094,221,2.428,241,3.91,266,4.184,280,3.508,281,3.91,282,1.511,358,5.227,360,2.886,442,2.449,538,2.985,539,2.106,1572,3.91,1573,6.185,1702,3.691,1708,4.482,1740,5.889,1741,4.934,1748,5.049,1777,4.551,2209,6.854,2211,6.854,2226,4.551,2255,5.227,2271,4.184,3043,5.227,3046,6.084,3050,6.756,3060,4.184,3061,4.184,3539,5.227,3559,4.551,3572,3.91,3573,5.108,3574,5.108,3575,5.108,3576,5.108,3577,6.301,3578,4.551,3579,4.551,3580,4.551,3581,4.551,3582,8.013,3583,4.551,3584,4.551,3585,4.551,3586,4.551,3587,4.551,3588,6.084,3589,6.084,3590,4.551,3591,6.084,3592,4.551,3593,4.551,3594,5.108,3595,5.108,3596,5.108,3597,5.108,3598,5.108,3599,5.108,3600,5.108,3601,7.694,3602,5.108,3603,5.108,3604,5.108,3605,5.108,3606,5.108]],["title/controllers/TenantController.html",[157,1.397,536,3.611]],["body/controllers/TenantController.html",[3,0.063,4,0.063,5,0.056,9,0.95,13,0.193,16,2.083,17,0.846,19,0.501,20,0.286,21,0.007,30,0.063,31,0.004,32,0.004,34,3.713,39,1.535,43,0.46,45,1.866,46,1.355,48,1.924,49,0.212,50,0.833,53,0.212,54,1.577,62,2.898,63,1.201,120,1.168,157,2.219,159,1.697,318,3.722,354,2.498,384,2.605,401,3.863,409,4.322,416,4.718,417,3.974,418,4.187,419,3.184,425,2.381,431,3.551,441,2.661,442,2.385,480,5.736,523,2.405,536,5.048,612,3.184,642,2.306,685,1.957,760,3.855,863,3.713,974,6.155,1078,3.714,1090,3.4,1091,3.4,1239,3.332,1245,2.939,1246,2.939,1251,3.996,1253,2.939,1257,2.045,1261,3.332,1459,3.974,1492,4.872,1917,4.329,3420,4.322,3426,4.322,3607,4.322,3608,5.877,3609,5.877,3610,5.877,3611,4.851,3612,4.851,3613,4.851,3614,4.851,3615,4.851,3616,4.851,3617,4.851,3618,4.851,3619,4.851,3620,4.851,3621,4.851,3622,5.403,3623,4.851,3624,4.851,3625,6.596,3626,4.851,3627,4.851,3628,4.851,3629,4.851,3630,4.851,3631,4.851,3632,4.851]],["title/entities/TenantEntity.html",[548,1.751,885,1.372]],["body/entities/TenantEntity.html",[3,0.085,4,0.085,5,0.076,9,0.836,13,0.262,14,1,16,1.952,19,0.603,20,0.307,21,0.007,26,3.726,27,3.045,30,0.085,31,0.005,32,0.005,43,0.494,49,0.161,53,0.288,63,1.288,68,1.608,431,4.088,523,2.345,548,2.984,885,2.339,887,3.134,900,3.217,917,3.315,919,2.219,1194,4.871,1469,6.154,1704,7.105,1954,7.163,3633,5.874,3634,6.594,3635,6.594,3636,6.594]],["title/injectables/TenantService.html",[33,1.009,416,2.97]],["body/injectables/TenantService.html",[0,1.384,3,0.038,4,0.038,5,0.034,9,0.374,13,0.117,14,0.571,16,2.036,17,0.858,19,0.621,20,0.3,21,0.007,30,0.059,31,0.003,32,0.003,33,0.982,35,1.119,39,1.068,43,0.524,45,1.892,46,1.374,48,1.922,49,0.216,50,0.507,53,0.129,54,1.599,68,0.591,101,1.815,107,1.636,109,2.077,112,0.859,130,1.167,141,3.014,165,3.318,203,2.499,204,0.976,262,1.489,282,1.611,314,2.183,318,3.249,323,1.91,347,3.047,353,1.776,361,1.523,362,2.128,374,2.891,416,2.891,418,2.872,419,1.939,422,1.312,423,2.881,425,1.881,431,1.305,441,1.853,442,1.462,463,2.891,484,2.872,488,1.97,523,2.341,539,1.218,541,1.939,542,2.029,543,2.135,544,1.669,548,1.097,549,2.42,571,2.261,580,6.581,668,2.183,736,1.669,737,3.437,751,2.513,767,1.568,803,1.617,887,1.404,902,1.894,1071,1.939,1078,2.805,1083,3.099,1090,2.367,1091,2.367,1111,1.617,1113,2.135,1115,2.029,1119,2.135,1120,2.135,1125,3.318,1126,3.318,1127,2.135,1128,2.135,1129,2.135,1130,2.135,1137,2.135,1138,1.939,1168,2.782,1290,4.442,1320,2.029,1440,4.785,1492,3.848,1507,2.029,1748,4.988,1757,2.42,1917,3.014,1923,5.002,1995,4.785,1996,2.135,2221,2.029,2348,2.261,2541,4.785,2554,2.42,2556,2.42,2644,3.761,2759,3.761,2870,5.965,2918,2.42,2981,6.757,3129,2.135,3326,2.42,3337,5.203,3369,2.42,3371,2.261,3398,3.761,3608,4.091,3609,4.091,3610,4.091,3622,2.42,3637,2.42,3638,4.592,3639,5.659,3640,5.659,3641,4.592,3642,4.592,3643,5.018,3644,5.018,3645,4.592,3646,4.091,3647,2.955,3648,4.091,3649,4.091,3650,2.955,3651,4.091,3652,2.955,3653,4.091,3654,2.955,3655,4.091,3656,2.955,3657,2.955,3658,2.955,3659,2.955,3660,4.091,3661,2.955,3662,3.515,3663,4.091,3664,4.091,3665,4.091,3666,4.091,3667,4.091,3668,5.659,3669,2.955,3670,5.018,3671,4.091,3672,2.632,3673,2.632,3674,2.632,3675,4.091,3676,2.632,3677,2.632,3678,2.632,3679,2.632,3680,2.632,3681,5.018,3682,2.632,3683,2.632,3684,2.632,3685,4.091,3686,4.091,3687,2.632,3688,2.632,3689,2.632,3690,2.632,3691,2.632,3692,2.632,3693,2.632,3694,2.632,3695,2.632,3696,2.632]],["title/interfaces/Tenants.html",[0,1.422,580,3.408]],["body/interfaces/Tenants.html",[0,1.658,2,1.881,3,0.048,4,0.048,5,0.043,13,0.149,14,0.684,16,2.076,19,0.606,20,0.21,21,0.007,30,0.071,31,0.004,32,0.004,33,1.177,48,0.858,49,0.225,50,0.644,53,0.164,54,1.734,68,0.751,101,1.572,107,1.417,109,1.697,130,1.482,141,2.462,165,2.711,203,2.234,204,1.239,262,1.217,282,1.765,314,1.783,318,3.188,323,1.888,347,2.686,353,1.451,361,1.934,362,1.739,374,2.362,416,2.362,418,2.487,419,2.462,422,1.072,423,2.862,425,2.123,431,1.657,441,2.219,442,1.751,463,4.807,484,3.027,488,1.924,523,2.349,539,1.547,541,2.462,542,2.577,543,2.711,544,2.12,548,1.393,549,3.073,571,2.872,580,6.423,668,1.783,737,2.945,767,1.991,803,2.053,887,1.783,902,1.547,1071,2.462,1078,2.875,1083,2.684,1090,1.934,1091,1.934,1111,2.053,1113,2.711,1115,2.577,1119,2.711,1120,2.711,1125,3.974,1126,3.974,1127,2.711,1128,2.711,1129,2.711,1130,2.711,1137,2.711,1138,2.462,1168,2.273,1290,3.806,1320,2.577,1440,4.1,1492,3.945,1507,2.577,1748,4.274,1757,3.073,1917,3.61,1923,4.473,1995,4.1,1996,2.711,2221,2.577,2348,2.872,2541,4.1,2554,3.073,2556,3.073,2644,3.073,2759,3.073,2870,5.334,2918,3.073,2981,6.536,3129,2.711,3326,3.073,3337,4.505,3369,3.073,3371,2.872,3398,4.505,3622,3.073,3637,3.073,3639,3.343,3640,3.343,3643,3.343,3644,3.343,3646,3.343,3648,3.343,3649,3.343,3651,3.343,3653,3.343,3655,3.343,3660,3.343,3662,2.872,3663,3.343,3664,3.343,3665,3.343,3666,3.343,3667,3.343,3668,4.901,3670,4.901,3671,4.901,3672,3.343,3673,3.343,3674,3.343,3675,4.901,3676,3.343,3677,3.343,3678,3.343,3679,3.343,3680,3.343,3681,5.802,3682,3.343,3683,3.343,3684,3.343,3685,4.901,3686,4.901,3687,3.343,3688,3.343,3689,3.343,3690,3.343,3691,3.343,3692,3.343,3693,3.343,3694,3.343,3695,3.343,3696,3.343]],["title/interfaces/TokenPayload.html",[0,1.422,418,2.133]],["body/interfaces/TokenPayload.html",[0,1.98,2,3.292,3,0.085,4,0.085,5,0.076,9,0.832,11,3.386,12,2.066,13,0.261,14,0.998,19,0.578,20,0.306,21,0.007,28,3.571,30,0.104,31,0.005,32,0.005,42,5.795,49,0.16,50,1.128,54,1.382,62,3.102,101,1.877,282,1.775,318,3.102,354,3.416,361,3.386,398,4.511,418,3.916,477,3.044,478,5.919,480,7.079,595,2.97,751,3.594,840,4.31,909,2.342,3697,5.379,3698,7.146,3699,5.851,3700,5.851,3701,5.851,3702,6.568]],["title/classes/TokenRequestDto.html",[53,0.206,2364,3.408]],["body/classes/TokenRequestDto.html",[3,0.076,4,0.076,5,0.068,9,1.102,11,3.877,12,1.937,13,0.235,14,0.935,16,1.333,17,0.849,19,0.612,20,0.342,21,0.007,27,2.849,30,0.076,31,0.005,32,0.005,43,0.534,49,0.184,53,0.328,57,1.165,63,1.393,73,2.29,75,2.202,77,1.402,118,3.62,120,1.425,123,3.77,134,2.791,285,3.171,361,4.727,372,6.188,390,4.068,398,5.676,399,6.769,427,7.363,429,7.363,449,5.166,463,5.203,706,3.588,715,5.65,718,5.277,724,5.277,999,3.669,2364,5.434,2722,5.277,3703,7.35,3704,7.746,3705,7.521,3706,5.923,3707,5.923,3708,5.923]],["title/classes/TokenResponse.html",[53,0.206,376,3.611]],["body/classes/TokenResponse.html",[3,0.09,4,0.09,5,0.08,13,0.276,14,1.032,17,0.936,19,0.614,20,0.338,21,0.006,30,0.09,31,0.005,32,0.005,43,0.565,53,0.303,57,1.366,376,6.35,434,6.41,436,6.791,437,5.316,438,6.094,489,7.267,579,3.276,583,3.924,2235,6.188,2447,5.689,3709,8.369,3710,6.946,3711,6.946]],["title/classes/TokenResponseDto.html",[53,0.206,2373,3.408]],["body/classes/TokenResponseDto.html",[3,0.078,4,0.078,5,0.07,9,1.111,11,4.755,13,0.241,14,0.949,17,0.861,19,0.586,20,0.345,21,0.007,30,0.078,31,0.005,32,0.005,43,0.539,49,0.148,53,0.265,57,1.192,63,1.405,118,3.646,120,1.459,134,2.832,285,3.218,354,3.588,372,6.216,390,4.163,434,6.035,436,6.393,437,5.841,438,5.737,493,4.46,579,3.014,583,3.424,715,5.689,959,3.825,999,4.277,2373,5.514,2428,5.4,3090,5.4,3093,5.4,3703,7.401,3704,7.811,3712,6.061,3713,6.061,3714,6.061]],["title/classes/TrustedAuthorityQuery.html",[53,0.206,946,2.858]],["body/classes/TrustedAuthorityQuery.html",[3,0.049,4,0.049,5,0.044,7,1.689,9,0.707,12,2.19,13,0.152,14,0.694,16,1.628,17,0.432,19,0.618,20,0.355,21,0.007,25,2.25,26,1.772,27,1.449,28,2.3,30,0.107,31,0.004,32,0.004,43,0.343,49,0.203,53,0.378,57,0.752,62,2.798,63,0.894,68,1.823,70,1.132,71,4.018,73,1.479,74,2.927,75,2.231,76,2.64,77,0.905,78,1.917,79,3.3,80,3.3,89,3.966,95,2.522,101,1.093,107,1.437,118,2.25,120,0.92,122,2.113,124,1.312,128,1.989,134,1.419,143,2.395,144,1.263,221,1.818,262,1.24,286,2.858,299,2.093,323,0.905,353,1.479,375,1.24,493,2.235,523,1.639,548,2.444,579,1.51,592,4.264,593,1.866,594,2.546,595,1.729,597,2.161,607,1.612,616,1.775,639,2.235,668,1.818,672,4.384,681,1.65,842,2.161,848,2.161,860,2.03,885,1.915,891,1.917,892,1.971,893,3.052,894,3.26,896,3.26,897,1.818,900,3.531,902,2.3,905,2.352,906,1.612,908,1.612,909,1.364,913,3.26,915,2.161,916,2.161,917,1.577,918,2.352,919,1.287,920,1.612,921,2.84,922,4.145,923,2.235,928,2.796,929,3.603,930,3.661,931,2.96,932,3.72,933,2.51,934,4.321,935,2.408,936,3.989,937,2.51,938,4.749,939,4.749,940,4.749,941,4.084,942,4.229,943,4.321,944,2.51,945,2.51,946,4.384,947,2.51,948,3.661,949,3.661,950,2.51,951,2.51,952,2.51,953,2.51,954,3.661,955,4.384,956,2.51,957,2.03,958,2.51,959,2.796,960,2.51,961,2.51,962,2.03,963,3.354,964,2.317,965,2.235,966,2.161,967,2.317,968,1.971,969,2.51,3715,3.824,3716,3.824,3717,3.824,3718,3.824]],["title/classes/UpdateKeyDto.html",[53,0.206,2179,3.611]],["body/classes/UpdateKeyDto.html",[3,0.093,4,0.093,5,0.083,21,0.007,23,1.773,30,0.093,31,0.006,32,0.006,37,4.043,49,0.208,53,0.316,57,1.425,120,1.743,282,1.882,1059,4.975,1418,5.582,1488,4.56,1512,5.544,2154,4.975,2179,6.51,3533,5.933,3719,8.506]],["title/classes/VCT.html",[53,0.206,986,2.858]],["body/classes/VCT.html",[3,0.075,4,0.075,5,0.067,9,1.036,13,0.23,14,0.922,17,1.101,19,0.652,20,0.354,21,0.007,30,0.075,31,0.005,32,0.005,37,3.887,43,0.57,46,1.478,49,0.181,53,0.324,57,1.139,63,1.485,74,3.005,75,2.347,77,1.37,118,2.991,120,1.394,134,2.149,285,2.442,716,6.262,986,5.399,1265,7.184,3720,5.159,3721,8.178,3722,8.178,3723,8.178,3724,5.791,3725,5.791,3726,5.791,3727,5.791,3728,5.791,3729,5.791,3730,5.791,3731,5.791,3732,5.791,3733,7.414]],["title/modules/VerifierModule.html",[172,1.448,194,3.408]],["body/modules/VerifierModule.html",[3,0.081,4,0.081,5,0.072,21,0.007,30,0.081,31,0.005,32,0.005,49,0.23,50,1.076,53,0.273,172,2.602,174,2.702,175,3.056,176,3.229,177,3.229,178,2.977,179,3.056,180,3.056,185,5.089,191,5.856,192,5.635,194,7.115,196,4.016,197,3.229,198,3.229,201,3.439,225,3.943,238,4.794,240,4.525,2043,6.104,2049,5.35,2050,3.539,2535,6.104,2536,5.58,2735,5.58,3734,6.264,3735,6.264,3736,6.264]],["title/classes/WebHookAuthConfig.html",[53,0.206,131,3.096]],["body/classes/WebHookAuthConfig.html",[3,0.064,4,0.064,5,0.057,13,0.198,14,0.837,17,0.564,19,0.508,20,0.365,21,0.007,23,1.992,30,0.113,31,0.004,32,0.004,43,0.307,46,1.375,49,0.186,53,0.39,57,0.982,63,0.8,68,0.999,70,1.479,73,1.931,75,2.216,76,2.141,77,1.182,84,2.399,105,4.992,106,3.278,107,2.188,108,5.59,109,4.112,110,4.789,111,3.609,112,2.367,114,3.372,115,3.468,117,2.919,118,2.714,119,2.919,120,1.202,121,2.822,122,2.548,123,3.372,124,2.915,125,4.608,126,3.431,127,4.235,128,3.03,129,5.341,130,2.657,131,5.575,132,3.609,133,4.861,134,1.854,135,1.506,136,4.992,137,3.609,138,4.861,139,4.861,140,3.431,141,3.278,142,3.609,143,1.817,144,2.222,145,2.919,146,3.278,147,2.504,148,2.919,149,3.932,150,3.609,151,3.609,152,2.919,153,2.651,154,2.919,155,2.919,156,2.205,3737,4.995]],["title/classes/WebHookAuthConfigHeader.html",[53,0.206,129,3.096]],["body/classes/WebHookAuthConfigHeader.html",[3,0.062,4,0.062,5,0.055,9,0.609,13,0.191,14,0.815,17,0.542,19,0.498,20,0.368,21,0.007,23,2.052,30,0.112,31,0.004,32,0.004,43,0.403,46,1.348,49,0.182,53,0.386,57,0.945,63,1.05,68,0.961,70,1.422,73,1.857,75,2.191,76,2.085,77,1.137,84,2.337,105,5.256,106,3.152,107,2.28,108,5.757,109,4.219,110,4.694,111,3.47,112,2.33,114,3.284,115,3.377,117,2.807,118,2.643,119,2.807,120,1.156,121,2.714,122,2.481,123,3.284,124,2.968,125,3.969,126,3.299,127,4.694,128,3.157,129,5.501,130,2.944,131,5.501,132,3.47,133,5.387,134,2.431,135,2.247,136,4.893,137,3.47,138,4.733,139,3.47,140,3.299,141,3.152,142,3.47,143,1.747,144,2.164,145,2.807,146,3.152,147,2.407,148,2.807,149,3.829,150,3.47,151,3.47,152,2.807,153,2.549,154,2.807,155,2.807,156,2.121,3738,4.803,3739,4.803,3740,4.279,3741,4.803]],["title/classes/WebHookAuthConfigNone.html",[53,0.206,136,3.096]],["body/classes/WebHookAuthConfigNone.html",[3,0.064,4,0.064,5,0.057,13,0.197,14,0.832,17,0.559,19,0.506,20,0.367,21,0.007,23,1.985,30,0.113,31,0.004,32,0.004,43,0.304,46,1.369,49,0.185,53,0.389,57,0.974,63,0.793,68,0.99,70,1.466,73,1.914,75,2.21,76,2.129,77,1.172,84,2.385,105,4.97,106,3.249,107,2.182,108,5.57,109,4.159,110,4.767,111,3.577,112,2.359,114,3.352,115,3.447,117,2.893,118,2.698,119,2.893,120,1.191,121,2.797,122,2.533,123,3.352,124,2.995,125,4.051,126,3.4,127,4.21,128,3.113,129,5.322,130,2.991,131,5.559,132,3.577,133,4.832,134,1.837,135,1.492,136,5.322,137,3.577,138,5.472,139,3.577,140,3.4,141,3.249,142,3.577,143,1.801,144,2.209,145,2.893,146,3.249,147,2.482,148,2.893,149,3.908,150,3.577,151,3.577,152,2.893,153,2.628,154,2.893,155,2.893,156,2.186,3740,4.411,3742,4.951]],["title/classes/WebhookConfig.html",[53,0.206,143,1.716]],["body/classes/WebhookConfig.html",[3,0.061,4,0.061,5,0.055,9,0.601,13,0.188,14,0.808,17,0.899,19,0.532,20,0.36,21,0.007,23,1.95,30,0.111,31,0.004,32,0.004,43,0.399,46,1.339,49,0.181,53,0.385,57,0.933,63,1.041,68,1.299,70,1.404,73,1.834,75,2.234,76,2.067,77,1.122,84,2.316,105,4.861,106,3.112,107,2.273,108,5.472,109,4.169,110,5.015,111,3.426,112,2.317,114,3.255,115,3.348,117,2.772,118,2.62,119,2.772,120,1.141,121,2.679,122,2.46,123,3.255,124,3.027,125,3.934,126,3.257,127,4.089,128,3.147,129,5.476,130,2.565,131,5.228,132,3.426,133,4.692,134,1.76,135,1.429,136,5.228,137,3.426,138,4.692,139,3.426,140,4.461,141,4.262,142,3.426,143,2.363,144,2.756,145,3.796,146,4.262,147,3.255,148,2.772,149,3.796,150,3.426,151,3.426,152,3.796,153,2.517,154,2.772,155,3.796,156,3.27,998,3.884,999,2.314,3743,4.743,3744,4.743,3745,4.743]],["title/classes/WebhookResponse.html",[53,0.206,3746,3.611]],["body/classes/WebhookResponse.html",[3,0.053,4,0.053,5,0.047,9,0.517,17,0.46,19,0.39,21,0.007,23,1.43,30,0.075,31,0.004,32,0.004,33,1.25,43,0.251,47,2.567,49,0.206,50,0.7,53,0.255,54,1.436,57,0.802,68,0.816,84,2.084,101,2.347,110,2.567,115,3.012,127,3.678,128,3.354,147,2.044,260,2.642,282,1.511,286,2.307,317,4.213,347,2.298,375,2.663,422,1.67,423,2.173,425,2.646,441,2.357,442,1.86,473,3.126,484,2.298,488,1.426,594,2.259,595,1.844,620,2.259,673,2.164,676,3.844,677,2.676,780,3.678,968,3.012,987,3.844,1081,4.358,1084,2.164,1217,5.24,1664,2.676,1772,2.947,2045,3.54,2046,3.678,2050,2.304,2054,2.947,2135,6.285,2212,5.387,2491,3.835,2557,4.481,2562,6.741,2579,4.786,2612,5.593,2613,4.786,2788,5.226,2789,2.801,2831,4.786,2890,2.567,3101,4.786,3179,3.633,3662,4.472,3746,5.707,3747,3.34,3748,4.078,3749,5.206,3750,6.083,3751,3.633,3752,3.633,3753,3.633,3754,3.633,3755,3.633,3756,3.633,3757,3.633,3758,7.316,3759,6.643,3760,6.643,3761,5.206,3762,3.633,3763,5.206,3764,5.206,3765,5.206,3766,5.206,3767,7.535,3768,5.206,3769,5.206,3770,5.206,3771,5.206,3772,5.206,3773,5.206,3774,5.206,3775,5.206,3776,3.633,3777,3.633,3778,3.633,3779,3.633,3780,3.633,3781,3.633,3782,5.206,3783,3.633]],["title/injectables/WebhookService.html",[33,1.009,2046,2.97]],["body/injectables/WebhookService.html",[3,0.048,4,0.048,5,0.042,9,0.688,13,0.146,17,0.856,19,0.246,20,0.246,21,0.007,23,0.902,30,0.07,31,0.004,32,0.004,33,1.162,35,1.396,39,1.263,43,0.396,45,1.605,46,1.165,47,2.321,48,1.242,49,0.2,50,0.633,53,0.237,54,1.496,68,1.086,84,1.937,101,2.405,110,3.418,112,1.072,115,2.799,127,3.418,128,3.341,147,2.722,260,2.455,262,1.195,282,1.426,286,2.144,317,4.018,347,2.552,375,2.658,422,2.032,423,2.052,425,2.586,441,2.191,442,1.728,473,3.259,484,2.17,488,1.899,594,2.1,595,2.455,620,2.1,673,1.957,676,4.337,677,2.419,750,2.083,780,3.418,968,1.9,987,3.323,1081,4.156,1084,1.957,1217,5.483,1664,3.564,1772,3.923,2045,4.308,2046,4.477,2050,2.083,2054,2.664,2135,6.069,2212,5.924,2491,4.667,2557,5.381,2562,6.928,2579,4.447,2612,5.28,2613,4.447,2750,3.02,2788,4.934,2789,2.532,2831,4.447,2890,3.418,3101,4.447,3662,5.443,3746,4.934,3747,3.02,3749,4.838,3750,6.754,3751,4.838,3752,5.743,3753,3.285,3754,3.285,3755,3.285,3756,3.285,3757,3.285,3758,7.065,3759,6.335,3760,6.335,3761,4.838,3762,3.285,3763,4.838,3764,4.838,3765,4.838,3766,4.838,3767,7.305,3768,4.838,3769,4.838,3770,4.838,3771,4.838,3772,4.838,3773,4.838,3774,4.838,3775,4.838,3776,5.743,3777,3.285,3778,3.285,3779,3.285,3780,3.285,3781,3.285,3782,4.838,3783,3.285,3784,3.687,3785,3.687,3786,3.687,3787,3.687,3788,3.687]],["title/controllers/WellKnownController.html",[157,1.397,200,3.611]],["body/controllers/WellKnownController.html",[3,0.059,4,0.059,5,0.052,9,0.919,13,0.181,17,0.818,20,0.314,21,0.007,23,1.545,30,0.059,31,0.004,32,0.004,39,1.469,43,0.445,45,1.804,46,1.415,48,2.092,49,0.221,50,0.781,53,0.199,54,1.525,63,1.162,68,1.263,114,2.281,120,1.095,134,1.689,157,2.146,159,1.592,163,2.865,195,5.377,200,5.547,244,4.978,245,5.991,247,4.054,276,3.08,323,1.077,352,3.824,353,2.803,359,3.689,367,4.631,382,4.631,385,2.125,404,5.17,408,3,420,2.987,422,1.301,425,2.146,428,3.288,473,3.354,497,4.023,523,1.572,616,2.009,642,2.163,644,7.925,645,4.832,673,2.415,674,4.978,675,3.483,685,1.836,695,3.483,729,6.457,742,3.483,1091,3.254,1097,3.824,1191,5.137,1195,4.774,1257,1.919,1661,3.126,1728,5.493,1993,3.727,2025,4.054,2034,5.237,2365,4.054,2440,5.237,2489,4.832,3427,4.054,3789,4.054,3790,4.551,3791,6.974,3792,5.624,3793,4.551,3794,4.551,3795,4.551,3796,4.551,3797,6.313,3798,4.551,3799,4.551,3800,4.551,3801,6.411,3802,4.551,3803,4.551,3804,4.551,3805,5.624,3806,4.551,3807,4.054,3808,4.054,3809,4.054,3810,4.551,3811,4.551,3812,4.551,3813,4.551,3814,4.054,3815,4.551,3816,4.551,3817,4.551,3818,4.551,3819,4.551,3820,4.551,3821,4.551,3822,4.551]],["title/injectables/WellKnownService.html",[33,1.009,195,3.24]],["body/injectables/WellKnownService.html",[3,0.05,4,0.05,5,0.044,9,0.49,11,2.897,12,0.995,13,0.154,17,0.821,19,0.442,20,0.337,21,0.007,23,1.621,30,0.05,31,0.004,32,0.004,33,1.202,35,1.463,39,1.308,43,0.447,45,1.81,46,1.314,48,2.02,49,0.216,50,0.663,53,0.169,54,1.53,112,1.635,195,4.995,227,3.165,228,2.183,244,3.86,245,5.913,276,3.933,282,1.243,304,3.442,321,3.86,323,1.33,347,2.229,352,4.405,353,2.173,354,2.129,359,3.284,366,2.792,367,3.515,382,3.515,385,1.892,397,4.108,408,2.671,422,2.078,423,2.315,425,2.288,473,3.088,477,2.604,478,2.536,484,2.229,488,1.966,497,3.762,513,2.792,515,2.792,516,2.654,522,1.992,523,2.007,593,2.742,616,1.789,645,4.301,658,4.06,673,2.051,678,5.164,685,2.934,737,3.855,751,3.075,767,2.051,782,4.169,824,3.32,837,1.937,959,1.937,983,3.175,1006,2.792,1091,4.156,1097,3.404,1116,3.165,1190,4.301,1191,5.071,1195,5.037,1292,5.04,1319,2.792,1322,2.183,1327,3.442,1351,3.165,1368,3.165,1369,2.536,1377,2.792,1378,2.957,1661,2.654,1728,4.864,1874,2.536,1995,5.238,1996,2.792,2003,4.301,2130,5.007,2361,4.301,2366,4.603,2429,4.06,2434,2.957,2440,5.254,2603,3.442,2605,3.165,2726,4.603,3008,5.007,3012,3.442,3791,5.007,3792,5.007,3801,5.956,3805,3.442,3807,3.442,3808,3.442,3809,3.442,3814,3.442,3823,3.442,3824,5.62,3825,5.62,3826,5.62,3827,3.864,3828,3.864,3829,5.62,3830,3.864,3831,5.62,3832,3.864,3833,5.62,3834,5.62,3835,5.62,3836,5.62,3837,5.956,3838,6.623,3839,5.007,3840,5.62,3841,3.864,3842,3.864,3843,3.864,3844,3.864,3845,3.864,3846,3.864,3847,5.62,3848,3.864,3849,3.864,3850,3.864,3851,3.864,3852,3.864]],["title/coverage.html",[3853,5.765]],["body/coverage.html",[0,2.493,1,1.713,5,0.024,6,1.863,7,0.923,8,1.863,12,0.539,20,0.296,21,0.007,22,0.862,23,0.512,27,0.792,31,0.002,32,0.002,33,1.933,34,1.601,36,1.863,53,0.424,56,1.144,58,4.155,60,1.144,78,1.048,79,1.048,80,1.048,83,1.317,90,1.144,97,1.144,99,1.317,103,1.144,105,1.373,106,3.787,129,1.373,131,1.373,135,1.048,136,1.373,143,0.761,157,2.528,158,1.601,160,1.863,178,0.994,195,1.436,200,1.601,223,1.601,226,1.601,228,3.729,230,1.601,234,1.601,237,1.601,239,1.601,241,1.601,245,2.661,344,1.601,345,1.863,354,0.792,367,1.11,368,1.601,371,1.601,376,1.601,382,1.11,400,3.098,414,1.373,416,1.317,418,0.946,442,0.666,473,0.731,497,0.946,533,1.11,534,1.511,535,4.258,536,1.601,544,1.964,548,0.776,552,1.511,554,1.713,555,1.713,580,1.511,581,1.511,582,1.863,583,4.179,598,1.267,599,3.92,600,3.92,601,1.317,602,1.317,617,1.317,622,1.267,625,1.267,636,1.511,637,1.863,640,1.601,641,1.863,652,1.317,674,1.436,676,1.078,678,1.267,682,1.601,705,1.863,706,3.998,728,3.415,737,0.946,738,1.222,739,1.267,770,1.511,772,1.511,774,1.511,811,1.743,836,1.267,845,7.35,885,2.258,886,1.144,888,2.848,911,1.511,922,4.155,923,4.192,932,1.182,936,1.267,946,1.267,955,1.267,957,1.11,970,2.848,971,1.863,974,1.601,975,1.863,978,1.902,979,4.169,986,1.267,991,1.436,1025,1.317,1035,1.373,1039,1.436,1041,1.144,1055,1.511,1056,1.863,1057,3.415,1061,1.601,1062,2.848,1067,1.436,1073,1.373,1074,1.863,1075,1.511,1076,3.415,1084,1.11,1132,6.178,1190,1.601,1191,4.087,1192,1.863,1193,2.848,1217,1.267,1232,1.601,1233,1.863,1256,1.373,1264,1.601,1265,3.415,1266,1.713,1267,1.863,1284,1.863,1290,1.222,1292,1.267,1392,4.746,1393,1.713,1396,1.436,1397,4.258,1407,1.436,1415,1.601,1421,2.848,1429,1.713,1435,1.601,1440,1.317,1442,1.601,1446,1.373,1450,1.601,1451,1.863,1452,3.098,1454,1.436,1482,1.373,1488,1.317,1510,2.388,1563,1.713,1565,1.713,1603,1.601,1604,1.863,1609,1.511,1613,1.436,1620,1.863,1622,1.317,1624,3.415,1627,1.511,1630,1.511,1636,1.863,1661,1.436,1663,1.863,1702,1.511,1703,1.863,1708,1.373,1709,3.979,1725,1.511,1728,1.317,1732,1.436,1741,1.511,1743,1.601,1744,1.863,1745,1.863,1748,1.373,1749,1.863,1808,1.601,1809,2.848,1844,1.601,1845,1.863,1865,3.098,1902,1.601,1903,1.863,1920,1.863,1979,1.601,1980,1.863,1981,1.713,1982,1.863,1985,1.436,1988,1.373,1995,1.317,2034,1.511,2035,1.863,2044,1.317,2045,1.267,2046,1.317,2047,1.713,2048,1.601,2076,1.863,2082,1.713,2094,1.863,2154,3.963,2155,2.848,2167,1.863,2179,1.601,2195,2.848,2201,1.713,2208,1.713,2215,1.863,2230,1.713,2231,1.863,2236,1.863,2250,2.928,2255,1.601,2256,1.863,2293,1.601,2294,2.848,2307,1.601,2352,1.601,2353,1.863,2359,1.601,2360,1.863,2364,1.511,2373,1.511,2374,1.436,2384,1.713,2386,1.713,2389,1.863,2440,1.511,2441,1.863,2452,2.848,2475,1.863,2491,1.373,2511,1.601,2512,1.863,2538,1.863,2541,1.317,2542,1.317,2550,1.601,2557,1.373,2586,2.661,2659,1.863,2683,1.511,2684,1.863,2688,1.601,2689,1.863,2696,1.601,2720,2.661,2727,1.863,2739,1.863,2751,1.436,2833,1.511,2834,1.863,2845,1.713,2858,1.863,2993,1.863,3002,1.863,3043,1.601,3044,1.863,3100,2.661,3146,1.601,3147,1.863,3160,1.511,3163,1.713,3165,1.601,3177,4.169,3178,1.863,3185,1.863,3210,1.713,3250,1.863,3310,1.713,3320,1.863,3330,1.863,3361,7.732,3414,1.601,3415,3.787,3416,1.863,3430,1.511,3431,2.848,3432,1.863,3451,1.511,3455,1.863,3523,1.863,3533,2.848,3539,1.601,3540,1.863,3572,2.661,3577,1.713,3607,1.863,3633,1.863,3637,2.848,3697,2.848,3703,2.848,3709,1.863,3720,1.863,3746,1.601,3747,2.848,3789,1.863,3823,1.863,3853,1.863,3854,2.091,3855,2.091,3856,7.592,3857,2.091,3858,3.477,3859,3.477,3860,5.199,3861,5.199,3862,7.912,3863,9.288,3864,2.091,3865,4.462,3866,8.271,3867,3.477,3868,5.771,3869,1.863,3870,2.091,3871,3.098,3872,2.091,3873,2.091,3874,7.173,3875,4.462,3876,4.462,3877,3.098,3878,3.477,3879,2.091,3880,1.863,3881,3.477,3882,5.548,3883,2.091,3884,2.091,3885,2.091,3886,2.091,3887,6.227,3888,2.091,3889,7.592,3890,5.199,3891,5.199,3892,1.863,3893,4.462,3894,5.771,3895,2.091,3896,6.227,3897,3.477,3898,2.091,3899,5.199,3900,2.091,3901,2.091,3902,2.091,3903,2.091,3904,2.091,3905,2.091,3906,5.771,3907,3.477,3908,3.477,3909,7.397,3910,2.091,3911,2.091,3912,2.091,3913,2.091,3914,2.091,3915,2.091,3916,3.477,3917,3.477,3918,1.863,3919,2.091,3920,2.091,3921,1.863,3922,2.091,3923,1.863,3924,5.199,3925,2.091,3926,2.091,3927,2.091,3928,2.091,3929,2.091,3930,3.098,3931,2.091,3932,2.091,3933,1.713,3934,1.863,3935,2.091,3936,2.091,3937,2.091,3938,2.091,3939,2.091]],["title/dependencies.html",[175,2.772,3940,3.496]],["body/dependencies.html",[12,1.44,21,0.007,31,0.005,32,0.005,50,0.96,52,4.039,53,0.316,70,1.655,77,1.323,120,1.345,175,2.727,204,1.847,206,4.578,207,3.158,209,4.578,211,4.98,212,4.039,213,3.158,215,4.98,217,3.519,218,5.277,275,4.278,359,3.267,361,3.736,431,2.468,539,2.305,541,3.668,542,3.839,766,4.039,824,3.632,919,1.882,1195,3.059,1206,3.158,1308,3.839,1311,4.972,1312,4.278,1313,4.278,1315,4.278,1317,4.278,1318,4.039,1501,4.039,1506,2.881,1509,4.278,1857,4.578,1994,3.668,2050,3.158,2081,4.578,2112,4.98,2115,4.98,2324,4.278,2789,3.839,2904,4.98,3050,4.039,3060,5.936,3061,4.578,3062,4.98,3063,4.98,3371,4.278,3941,7.247,3942,5.59,3943,7.247,3944,8.042,3945,5.59,3946,5.59,3947,5.59,3948,5.59,3949,5.59,3950,5.59,3951,5.59,3952,5.59,3953,7.247,3954,8.508,3955,8.508,3956,8.508,3957,5.59,3958,5.59,3959,5.59,3960,5.59,3961,8.042,3962,5.59,3963,5.59,3964,5.59,3965,5.59,3966,5.59,3967,5.59,3968,5.59,3969,5.59,3970,5.59,3971,5.59,3972,5.59,3973,5.59,3974,5.59,3975,5.59,3976,5.59,3977,5.59,3978,5.59,3979,5.59,3980,5.59,3981,5.59,3982,5.59,3983,5.59,3984,5.59,3985,5.59,3986,5.59,3987,5.59]],["title/miscellaneous/enumerations.html",[3988,2.47,3989,5.063]],["body/miscellaneous/enumerations.html",[12,1.632,13,0.252,20,0.299,21,0.007,31,0.005,32,0.005,84,3.176,106,4.157,109,2.864,110,3.987,112,2.868,123,3.932,124,2.691,125,4.752,126,4.35,127,3.987,156,3.463,375,2.054,594,2.449,599,3.987,600,4.938,614,3.702,626,4.938,627,4.157,706,4.752,1040,3.932,1174,5.148,1194,3.837,1994,5.148,1997,5.388,2003,4.848,2204,4.576,2462,4.848,2720,4.848,2890,3.987,3100,4.848,3126,6.425,3129,5.668,3139,6.989,3140,5.668,3141,6.989,3801,6.425,3837,5.188,3839,5.643,3933,5.188,3988,3.987,3989,5.643,3990,6.334,3991,6.334,3992,5.643,3993,7.844,3994,6.334,3995,5.643,3996,6.334,3997,6.334]],["title/miscellaneous/functions.html",[3988,2.47,3998,5.063]],["body/miscellaneous/functions.html",[12,2.308,13,0.282,17,0.802,20,0.271,21,0.006,31,0.006,32,0.006,45,1.769,46,1.285,48,1.924,178,4.401,207,4.015,217,4.474,310,4.305,317,4.015,454,5.439,674,6.153,770,6.077,810,5.439,1492,4.305,2250,5.52,2890,4.474,3918,6.332,3921,6.332,3923,6.332,3988,4.474,3998,6.332,3999,7.107,4000,7.107,4001,7.107,4002,7.107,4003,7.107,4004,7.107]],["title/index.html",[13,0.187,4005,4.203]],["body/index.html",[2,1.83,21,0.007,31,0.004,32,0.004,35,1.383,57,0.718,159,1.277,172,1.12,173,7.402,174,1.575,175,1.781,176,1.882,177,1.882,178,1.735,179,1.781,180,1.781,181,3.253,182,3.253,183,3.253,184,6.917,185,5.06,186,5.114,187,4.631,188,6.715,189,4.631,190,4.631,191,5.63,192,5.418,193,4.631,194,6.528,195,4.402,196,2.779,197,1.882,198,1.882,414,5.364,416,4.035,528,3.253,529,3.253,530,3.253,531,3.253,532,5.718,533,4.338,534,5.906,676,4.213,678,4.951,737,3.696,738,4.777,739,4.951,887,1.735,1073,5.364,1256,4.206,1290,4.777,1292,4.951,1388,5.455,1389,3.253,1390,3.253,1391,3.253,1437,3.253,1438,3.253,1439,3.253,1440,5.146,1613,4.402,1995,5.146,2039,3.253,2040,3.253,2041,3.253,2042,3.253,2043,6.106,2044,4.456,2045,4.288,2046,4.456,2374,5.614,2379,6.256,2380,3.253,2381,3.253,2382,3.253,2529,3.253,2531,3.253,2532,3.253,2535,5.622,2541,5.146,2542,5.146,2729,3.253,2730,3.253,2731,3.253,2732,3.253,2733,5.709,2751,5.614,2841,3.253,2842,3.253,2843,3.253,2997,3.253,2998,3.253,2999,3.253,3306,3.253,3307,3.253,3309,3.253,3444,3.253,3445,3.253,3446,3.253,3869,3.253,3882,3.253,4005,3.253,4006,3.651,4007,3.651,4008,3.651,4009,3.651]],["title/modules.html",[174,2.791]],["body/modules.html",[21,0.005,31,0.005,32,0.005,173,4.988,174,2.811,184,4.709,185,3.566,186,4.709,187,4.709,188,4.476,189,4.709,190,4.709,191,4.103,192,3.948,193,4.709,194,4.709,443,6.339,447,7.547,532,4.277,1388,4.709,2043,4.277,2379,4.988,2535,4.277,2733,4.709,4010,9.86,4011,9.86,4012,9.979,4013,9.229]],["title/properties.html",[14,0.707,3940,3.496]],["body/properties.html",[9,0.93,14,0.913,21,0.006,31,0.006,32,0.006,170,7.02,846,4.62,1083,3.58,2366,6.01,4014,7.338,4015,7.338,4016,7.338,4017,7.338,4018,7.338,4019,7.338,4020,8.571,4021,7.338,4022,7.338,4023,7.338,4024,7.338,4025,7.338,4026,7.338,4027,7.338]],["title/miscellaneous/typealiases.html",[3988,2.47,4028,5.683]],["body/miscellaneous/typealiases.html",[11,3.321,13,0.256,20,0.351,21,0.006,23,1.577,31,0.005,32,0.005,58,4.056,59,3.64,83,4.99,84,2.298,85,3.64,86,3.64,228,4.479,318,2.491,473,2.253,510,3.64,527,3.765,591,6.857,836,4.802,885,1.874,888,5.277,911,5.727,1077,3.229,1194,3.903,1217,4.802,1392,5.445,1397,7.338,1407,5.445,1415,6.067,1421,6.493,1429,6.493,1435,4.931,1677,5.277,1692,5.277,1709,4.931,1725,5.727,1732,5.445,1740,4.931,2195,5.277,2201,6.493,2202,4.655,2204,4.655,2250,5.202,2890,4.056,3050,4.655,3100,4.931,3142,4.425,3572,4.931,3577,6.493,3988,4.056,3995,5.74,4029,6.443,4030,6.443,4031,7.982,4032,5.74,4033,6.443,4034,6.443,4035,7.062]],["title/miscellaneous/variables.html",[2417,4.349,3988,2.47]],["body/miscellaneous/variables.html",[11,1.556,12,1.79,13,0.12,19,0.554,20,0.347,21,0.007,22,1.925,23,0.739,31,0.003,32,0.003,39,0.702,42,3.373,46,1.161,54,1.611,68,0.934,112,2.687,124,1.035,134,1.12,135,0.91,172,1.433,223,3.573,226,3.573,228,1.705,230,3.573,234,3.573,237,3.573,239,3.573,241,3.573,256,2.472,262,3.023,266,2.472,282,1.869,285,1.968,288,1.9,317,1.705,318,1.167,321,2.073,347,2.339,354,2.162,388,2.073,418,1.365,430,3.373,442,1.486,454,2.31,473,1.997,477,1.399,484,2.579,488,1.056,491,2.472,492,2.472,535,2.472,552,3.373,553,2.689,554,3.824,555,3.824,556,6.919,557,2.689,558,7.05,559,2.689,560,6.411,561,2.689,562,2.689,563,2.689,564,2.689,565,2.689,566,2.689,567,2.472,568,2.689,569,2.689,570,2.689,571,2.31,572,2.689,573,2.689,574,2.689,595,2.905,608,1.651,615,1.602,751,2.554,763,3.054,789,3.064,837,1.513,909,3.099,984,1.705,999,1.472,1077,1.513,1084,2.478,1173,1.9,1195,1.651,1298,2.181,1358,2.689,1359,3.824,1392,3.206,1393,3.824,1394,2.689,1395,2.689,1396,2.073,1402,2.472,1407,2.073,1408,2.689,1412,2.472,1413,2.689,1416,2.689,1417,4.413,1418,4.216,1419,4.676,1435,5.318,1563,2.472,1565,3.824,1566,2.689,1567,2.689,1568,2.689,1569,2.689,1570,5.724,1571,6.19,1572,6.057,1573,6.411,1574,2.689,1575,2.689,1576,2.689,1577,2.689,1578,2.689,1688,2.689,1709,2.31,1728,2.939,1740,2.31,1741,3.373,1742,2.689,1766,2.472,1876,2.689,2047,2.472,2068,2.689,2069,2.689,2082,3.824,2202,3.373,2204,2.181,2208,2.472,2217,2.689,2218,2.689,2219,2.689,2220,5.086,2221,2.073,2222,2.689,2223,2.689,2224,2.689,2225,2.689,2321,2.073,2384,2.472,2386,3.824,2387,2.689,2388,2.472,2417,3.573,2429,2.181,2491,3.064,2563,3.573,2586,4.369,2845,2.472,2846,2.472,2850,2.689,2851,2.689,2852,2.689,2853,5.086,2854,5.086,2855,2.472,2856,2.472,3050,5.535,3142,2.073,3177,2.181,3210,3.824,3213,4.159,3310,2.472,3312,2.472,3313,2.689,3314,2.689,3315,2.689,3572,2.31,3578,2.689,3579,2.689,3580,2.689,3581,2.689,3582,6.824,3583,2.689,3584,2.689,3585,2.689,3586,2.689,3587,2.689,3588,2.689,3589,2.689,3590,2.689,3591,2.689,3592,2.689,3593,2.689,3697,2.472,3698,4.159,3699,4.159,3700,4.159,3701,2.689,3837,2.472,3871,2.689,3877,2.689,3880,4.159,3892,2.689,3930,5.086,3933,2.472,3934,4.159,3988,1.9,3992,2.689,4031,2.689,4032,2.689,4035,2.689,4036,6.425,4037,3.018,4038,3.018,4039,3.018,4040,4.668,4041,3.018,4042,3.018,4043,3.018,4044,3.018,4045,4.668,4046,3.018,4047,3.018,4048,3.018,4049,5.709,4050,3.018,4051,6.425,4052,3.018,4053,7.346,4054,3.018,4055,4.668,4056,3.018,4057,3.018,4058,4.668,4059,3.018,4060,4.668,4061,3.018,4062,3.018,4063,3.018,4064,3.018,4065,4.668,4066,3.018,4067,3.018,4068,3.018,4069,3.018]]],"invertedIndex":[["",{"_index":21,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1132,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["0.0.1",{"_index":4015,"title":{},"body":{"properties.html":{}}}],["0.14.0",{"_index":3961,"title":{},"body":{"dependencies.html":{}}}],["0.14.1",{"_index":3962,"title":{},"body":{"dependencies.html":{}}}],["0.14.2",{"_index":3967,"title":{},"body":{"dependencies.html":{}}}],["0.2.2",{"_index":3982,"title":{},"body":{"dependencies.html":{}}}],["0.3.0",{"_index":3954,"title":{},"body":{"dependencies.html":{}}}],["0.3.25",{"_index":3986,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":3492,"title":{},"body":{"injectables/StatusListService.html":{}}}],["0.5.1",{"_index":3966,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":3863,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3897,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":3898,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3856,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3862,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":3868,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3865,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3924,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3925,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3893,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1874,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/WellKnownService.html":{}}}],["1.11.0",{"_index":3965,"title":{},"body":{"dependencies.html":{}}}],["1.13.0",{"_index":3960,"title":{},"body":{"dependencies.html":{}}}],["1.5.4",{"_index":3980,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":3866,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":3906,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":3876,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":3908,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":3870,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":3901,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1785,"title":{},"body":{"injectables/FilesService.html":{}}}],["10,000",{"_index":3472,"title":{},"body":{"injectables/StatusListService.html":{}}}],["10.5.0",{"_index":3977,"title":{},"body":{"dependencies.html":{}}}],["10/12",{"_index":3917,"title":{},"body":{"coverage.html":{}}}],["10/15",{"_index":3883,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":845,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["1000",{"_index":1369,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["10000",{"_index":3485,"title":{},"body":{"injectables/StatusListService.html":{}}}],["11",{"_index":3904,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":3953,"title":{},"body":{"dependencies.html":{}}}],["11.0.5",{"_index":3949,"title":{},"body":{"dependencies.html":{}}}],["11.1.0",{"_index":3987,"title":{},"body":{"dependencies.html":{}}}],["11.1.6",{"_index":3944,"title":{},"body":{"dependencies.html":{}}}],["11.2.0",{"_index":3952,"title":{},"body":{"dependencies.html":{}}}],["12",{"_index":4008,"title":{},"body":{"index.html":{}}}],["12/14",{"_index":3932,"title":{},"body":{"coverage.html":{}}}],["12/schema",{"_index":3089,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["13.1.1",{"_index":3978,"title":{},"body":{"dependencies.html":{}}}],["13/13",{"_index":3910,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":3900,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":3935,"title":{},"body":{"coverage.html":{}}}],["15.1.3",{"_index":3979,"title":{},"body":{"dependencies.html":{}}}],["15/15",{"_index":3922,"title":{},"body":{"coverage.html":{}}}],["16",{"_index":3869,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["18",{"_index":4006,"title":{},"body":{"index.html":{}}}],["18.0.0",{"_index":3968,"title":{},"body":{"dependencies.html":{}}}],["19",{"_index":4007,"title":{},"body":{"index.html":{}}}],["1_0.html#claims_query",{"_index":953,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["1_0.html#name",{"_index":943,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["2.0",{"_index":2366,"title":{},"body":{"controllers/OAuthController.html":{},"injectables/WellKnownService.html":{},"properties.html":{}}}],["2.0.2",{"_index":3971,"title":{},"body":{"dependencies.html":{}}}],["2/17",{"_index":3905,"title":{},"body":{"coverage.html":{}}}],["2/2",{"_index":3896,"title":{},"body":{"coverage.html":{}}}],["2/3",{"_index":3899,"title":{},"body":{"coverage.html":{}}}],["2/4",{"_index":3888,"title":{},"body":{"coverage.html":{}}}],["20/22",{"_index":3879,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":356,"title":{},"body":{"controllers/AuthController.html":{}}}],["201",{"_index":1987,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["20250714110838",{"_index":3956,"title":{},"body":{"dependencies.html":{}}}],["23",{"_index":3928,"title":{},"body":{"coverage.html":{}}}],["24",{"_index":491,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["24h",{"_index":486,"title":{},"body":{"controllers/AuthController.html":{}}}],["25",{"_index":3907,"title":{},"body":{"coverage.html":{}}}],["256",{"_index":1359,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["28",{"_index":4009,"title":{},"body":{"index.html":{}}}],["3.0.1",{"_index":3948,"title":{},"body":{"dependencies.html":{}}}],["3.14.3",{"_index":3973,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":3970,"title":{},"body":{"dependencies.html":{}}}],["3.3.0",{"_index":3942,"title":{},"body":{"dependencies.html":{}}}],["3.864.0",{"_index":3941,"title":{},"body":{"dependencies.html":{}}}],["3/13",{"_index":3929,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":3909,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3861,"title":{},"body":{"coverage.html":{}}}],["3/5",{"_index":3867,"title":{},"body":{"coverage.html":{}}}],["300",{"_index":842,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["30d",{"_index":490,"title":{},"body":{"controllers/AuthController.html":{}}}],["33",{"_index":3875,"title":{},"body":{"coverage.html":{}}}],["36/36",{"_index":3859,"title":{},"body":{"coverage.html":{}}}],["3600",{"_index":2428,"title":{},"body":{"injectables/OAuthService.html":{},"classes/TokenResponseDto.html":{}}}],["4",{"_index":940,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["4.0.1",{"_index":3943,"title":{},"body":{"dependencies.html":{}}}],["4.0.2",{"_index":3945,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":3974,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":3874,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":3891,"title":{},"body":{"coverage.html":{}}}],["4/7",{"_index":3927,"title":{},"body":{"coverage.html":{}}}],["401",{"_index":377,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["47",{"_index":3885,"title":{},"body":{"coverage.html":{}}}],["4909",{"_index":2015,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["5",{"_index":2133,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["5.0.3",{"_index":3951,"title":{},"body":{"dependencies.html":{}}}],["5.1.7",{"_index":3985,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":3894,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":3914,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":3887,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":699,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["53",{"_index":3872,"title":{},"body":{"coverage.html":{}}}],["57",{"_index":3926,"title":{},"body":{"coverage.html":{}}}],["6.0.0",{"_index":3950,"title":{},"body":{"dependencies.html":{}}}],["6.0.12",{"_index":3969,"title":{},"body":{"dependencies.html":{}}}],["6.0.2",{"_index":3963,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":3881,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":2586,"title":{},"body":{"injectables/Oid4vpService.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["66",{"_index":3882,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["7.8.2",{"_index":3983,"title":{},"body":{"dependencies.html":{}}}],["7/13",{"_index":3873,"title":{},"body":{"coverage.html":{}}}],["7/8",{"_index":3903,"title":{},"body":{"coverage.html":{}}}],["7/9",{"_index":3920,"title":{},"body":{"coverage.html":{}}}],["71",{"_index":3913,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":3860,"title":{},"body":{"coverage.html":{}}}],["77",{"_index":3919,"title":{},"body":{"coverage.html":{}}}],["8.16.3",{"_index":3976,"title":{},"body":{"dependencies.html":{}}}],["8/12",{"_index":3895,"title":{},"body":{"coverage.html":{}}}],["8/9",{"_index":3912,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":3890,"title":{},"body":{"coverage.html":{}}}],["83",{"_index":3916,"title":{},"body":{"coverage.html":{}}}],["85",{"_index":3931,"title":{},"body":{"coverage.html":{}}}],["86400",{"_index":439,"title":{},"body":{"controllers/AuthController.html":{}}}],["87",{"_index":3902,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":3911,"title":{},"body":{"coverage.html":{}}}],["8a7a",{"_index":2016,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["8ad6",{"_index":2014,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["9/10",{"_index":3937,"title":{},"body":{"coverage.html":{}}}],["9/19",{"_index":3886,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":3936,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":3878,"title":{},"body":{"coverage.html":{}}}],["_d",{"_index":1523,"title":{},"body":{"classes/DBKeyService.html":{}}}],["_ext",{"_index":1527,"title":{},"body":{"classes/DBKeyService.html":{}}}],["_key_ops",{"_index":1525,"title":{},"body":{"classes/DBKeyService.html":{}}}],["a128gcm",{"_index":2600,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["a739c2c412c0",{"_index":2017,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["abstract",{"_index":2237,"title":{},"body":{"classes/KeyService.html":{}}}],["accept",{"_index":2025,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/WellKnownController.html":{}}}],["accepts",{"_index":381,"title":{},"body":{"controllers/AuthController.html":{}}}],["access",{"_index":11,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"injectables/WellKnownService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["access_token",{"_index":434,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["accesscert",{"_index":2608,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscert?.length",{"_index":2617,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["accesscertificatecontrollerregister",{"_index":2907,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["accesscertificateid",{"_index":2835,"title":{},"body":{"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{}}}],["accesscertificateresponse",{"_index":1,"title":{"interfaces/AccessCertificateResponse.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["accessible",{"_index":1774,"title":{},"body":{"injectables/FilesService.html":{}}}],["accessing",{"_index":2874,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["accesskeyid",{"_index":3602,"title":{},"body":{"modules/StorageModule.html":{}}}],["accesstoken",{"_index":2425,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{}}}],["accesstokenrequest",{"_index":809,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["accordingly",{"_index":3666,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["acl",{"_index":1729,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/S3FileStorage.html":{}}}],["acl=public",{"_index":1737,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["action",{"_index":2568,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["active",{"_index":3129,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/enumerations.html":{}}}],["actual",{"_index":521,"title":{},"body":{"controllers/AuthController.html":{}}}],["adapt",{"_index":92,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["adapters/db",{"_index":2214,"title":{},"body":{"modules/KeyModule.html":{}}}],["adapters/local.storage",{"_index":3574,"title":{},"body":{"modules/StorageModule.html":{}}}],["adapters/s3.storage",{"_index":3575,"title":{},"body":{"modules/StorageModule.html":{}}}],["adapters/vault",{"_index":2216,"title":{},"body":{"modules/KeyModule.html":{}}}],["add",{"_index":1322,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/MetricModule.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/WellKnownService.html":{}}}],["add(issuer_state",{"_index":3340,"title":{},"body":{"injectables/SessionService.html":{}}}],["addaccesscertificate",{"_index":2865,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addaccesscertificate(tenantid",{"_index":2876,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addclient",{"_index":2390,"title":{},"body":{"injectables/OAuthService.html":{}}}],["addclient(clientid",{"_index":2398,"title":{},"body":{"injectables/OAuthService.html":{}}}],["adding",{"_index":2861,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["additional",{"_index":1836,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/SessionLogContext.html":{}}}],["additionaldata",{"_index":3267,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["addkey",{"_index":2168,"title":{},"body":{"controllers/KeyController.html":{}}}],["addkey(token",{"_index":2172,"title":{},"body":{"controllers/KeyController.html":{}}}],["addregistrationcertificate",{"_index":2866,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addregistrationcertificate(req",{"_index":2879,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp",{"_index":2867,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["addrp(name",{"_index":2881,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["adds",{"_index":2883,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["admin",{"_index":480,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/TenantController.html":{},"interfaces/TokenPayload.html":{}}}],["admin.guard",{"_index":3617,"title":{},"body":{"controllers/TenantController.html":{}}}],["adminauthguard",{"_index":34,"title":{"injectables/AdminAuthGuard.html":{}},"body":{"injectables/AdminAuthGuard.html":{},"controllers/TenantController.html":{},"coverage.html":{}}}],["against",{"_index":1153,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["agent",{"_index":319,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["alg",{"_index":837,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["algorithm",{"_index":1420,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/RegistrarService.html":{}}}],["algorithms",{"_index":1401,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["alias",{"_index":3889,"title":{},"body":{"coverage.html":{}}}],["aliases",{"_index":4029,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allowed",{"_index":3622,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["allowedsigningalgs",{"_index":822,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["allowing",{"_index":3663,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["allowinsecureurls",{"_index":2074,"title":{},"body":{"modules/IssuerModule.html":{}}}],["allowlist",{"_index":59,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/typealiases.html":{}}}],["allowlistpolicy",{"_index":56,"title":{"classes/AllowListPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["allows",{"_index":2370,"title":{},"body":{"controllers/OAuthController.html":{}}}],["alpha",{"_index":3955,"title":{},"body":{"dependencies.html":{}}}],["already",{"_index":1107,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["always",{"_index":1657,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["amount",{"_index":1218,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{}}}],["any).$schema",{"_index":1339,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["any).issuer",{"_index":2150,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["any).method",{"_index":880,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["any)[key",{"_index":2152,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apache",{"_index":4023,"title":{},"body":{"properties.html":{}}}],["api",{"_index":108,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/RegistrarService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["api:read",{"_index":2706,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["api:write",{"_index":2707,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["api_key",{"_index":126,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["apibody",{"_index":403,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/StorageController.html":{}}}],["apibody({description",{"_index":661,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["apiconsumes",{"_index":3556,"title":{},"body":{"controllers/StorageController.html":{}}}],["apiconsumes(\"multipart/form",{"_index":3562,"title":{},"body":{"controllers/StorageController.html":{}}}],["apiexcludecontroller",{"_index":163,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiexcludecontroller(process.env.swagger_all",{"_index":420,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["apiextramodels",{"_index":117,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["apiextramodels(webhookauthconfignone",{"_index":142,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["apiheader",{"_index":3811,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apihideproperty",{"_index":928,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["apihideproperty()@column('varchar",{"_index":1030,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["apikey",{"_index":127,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["apikeyconfig",{"_index":105,"title":{"classes/ApiKeyConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["apioperation",{"_index":404,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OAuthController.html":{},"controllers/WellKnownController.html":{}}}],["apioperation({summary",{"_index":2365,"title":{},"body":{"controllers/OAuthController.html":{},"controllers/WellKnownController.html":{}}}],["apiparam",{"_index":2489,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{}}}],["apiparam({name",{"_index":3156,"title":{},"body":{"controllers/SessionController.html":{}}}],["apiproduces",{"_index":1993,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["apiproduces(\"application/json",{"_index":2005,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiproduces(mediatype.application_json",{"_index":3813,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["apiproperty",{"_index":118,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/FileUploadDto.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["apiproperty({description",{"_index":3704,"title":{},"body":{"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{}}}],["apiproperty({enum",{"_index":3127,"title":{},"body":{"entities/Session.html":{}}}],["apiproperty({examples",{"_index":2461,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["apiproperty({required",{"_index":3730,"title":{},"body":{"classes/VCT.html":{}}}],["apiproperty({type",{"_index":1227,"title":{},"body":{"classes/CredentialSetQuery.html":{},"classes/FileUploadDto.html":{},"classes/OfferRequestDto.html":{}}}],["apiresponse",{"_index":405,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apiresponse({description",{"_index":1986,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["apisecurity",{"_index":1246,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{}}}],["apisecurity(\"oauth2",{"_index":1253,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{}}}],["apitags",{"_index":406,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{}}}],["apitags(\"authentication",{"_index":421,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags(\"issuer",{"_index":1250,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["apitags(\"oauth",{"_index":2376,"title":{},"body":{"controllers/OAuthController.html":{}}}],["apitags(\"presentation",{"_index":2705,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["apitags(\"session",{"_index":3168,"title":{},"body":{"controllers/SessionController.html":{}}}],["apitags(\"status",{"_index":3424,"title":{},"body":{"controllers/StatusListController.html":{}}}],["app/app.controller",{"_index":222,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":158,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":2890,"title":{},"body":{"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["application/json",{"_index":2003,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/jwk",{"_index":3797,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["application/jwt",{"_index":3839,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["application/statuslist+jwt",{"_index":3422,"title":{},"body":{"controllers/StatusListController.html":{}}}],["application_json",{"_index":3996,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["application_jwt",{"_index":3997,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["applications",{"_index":394,"title":{},"body":{"controllers/AuthController.html":{}}}],["appmodule",{"_index":173,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["array",{"_index":95,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/JwksResponseDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["array(size",{"_index":3488,"title":{},"body":{"injectables/StatusListService.html":{}}}],["array(size).fill(0).map",{"_index":3486,"title":{},"body":{"injectables/StatusListService.html":{}}}],["array.isarray(dcql_query",{"_index":2583,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["associated",{"_index":1071,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"injectables/FilesService.html":{},"classes/IssuanceDto.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["assume",{"_index":859,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["async",{"_index":347,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["att",{"_index":2825,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["attached",{"_index":934,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["attachment",{"_index":3569,"title":{},"body":{"controllers/StorageController.html":{}}}],["attestation",{"_index":848,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["attestationbased",{"_index":86,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/typealiases.html":{}}}],["attestationbasedpolicy",{"_index":103,"title":{"classes/AttestationBasedPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["attestations",{"_index":935,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["attestations.map((att",{"_index":2826,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["aud",{"_index":514,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["audience",{"_index":487,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth",{"_index":156,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["auth.controller",{"_index":546,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":547,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.module",{"_index":1811,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["auth/auth.guard",{"_index":1247,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{}}}],["auth/auth.module",{"_index":224,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/entitites/tenant.entity",{"_index":920,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["auth/token.decorator",{"_index":1248,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{}}}],["auth_client_id",{"_index":573,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["auth_client_secret",{"_index":571,"title":{},"body":{"modules/AuthModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["auth_queries",{"_index":698,"title":{},"body":{"controllers/AuthorizeController.html":{},"entities/Session.html":{}}}],["auth_session",{"_index":707,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["auth_validation_schema",{"_index":223,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authconfig",{"_index":125,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["authconfig.api_key",{"_index":133,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["authconfig.method",{"_index":873,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authconfig.none",{"_index":138,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["authcontroller",{"_index":344,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":396,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["authenticate(req",{"_index":2099,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authenticating",{"_index":2900,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["authentication",{"_index":109,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["authentication.'})@apiresponse({status",{"_index":392,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticationconfig",{"_index":1866,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethod",{"_index":626,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["authenticationmethod.auth",{"_index":1900,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethod.none",{"_index":1899,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethod.presentation_during_issuance",{"_index":1901,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["authenticationmethodauth",{"_index":598,"title":{"classes/AuthenticationMethodAuth.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationmethodinterface",{"_index":601,"title":{"interfaces/AuthenticationMethodInterface.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationmethodnone",{"_index":625,"title":{"classes/AuthenticationMethodNone.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationmethodpresentation",{"_index":622,"title":{"classes/AuthenticationMethodPresentation.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authenticationurlconfig",{"_index":602,"title":{"classes/AuthenticationUrlConfig.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["authfixed",{"_index":2011,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["authguard",{"_index":51,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["authguard(\"jwt",{"_index":38,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["authheader",{"_index":455,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.startswith(\"basic",{"_index":457,"title":{},"body":{"controllers/AuthController.html":{}}}],["authheader.substring(6",{"_index":459,"title":{},"body":{"controllers/AuthController.html":{}}}],["authmodule",{"_index":184,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"index.html":{},"modules.html":{}}}],["author",{"_index":4025,"title":{},"body":{"properties.html":{}}}],["authorities",{"_index":945,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["authorization",{"_index":382,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["authorization_challenge_endpoint",{"_index":795,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_code",{"_index":881,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["authorization_encrypted_response_alg",{"_index":2598,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_encrypted_response_enc",{"_index":2599,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authorization_endpoint",{"_index":785,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorization_request",{"_index":2565,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{}}}],["authorization_server",{"_index":1196,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["authorization_servers",{"_index":1197,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["authorizationchallengeendpoint",{"_index":648,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationchallengeendpoint(res",{"_index":651,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{}}}],["authorizationcodegrantidentifier",{"_index":761,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationresponse",{"_index":636,"title":{"classes/AuthorizationResponse.html":{}},"body":{"classes/AuthorizationResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["authorizationserver",{"_index":777,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata",{"_index":744,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.dpop_signing_alg_values_supported",{"_index":823,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorizationservermetadata.issuer",{"_index":843,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authorize",{"_index":649,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(@query",{"_index":686,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize(queries",{"_index":656,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize.service",{"_index":679,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorize/authorize.controller",{"_index":2057,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorize/authorize.service",{"_index":2058,"title":{},"body":{"modules/IssuerModule.html":{}}}],["authorizecontroller",{"_index":640,"title":{"controllers/AuthorizeController.html":{}},"body":{"controllers/AuthorizeController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["authorized",{"_index":609,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["authorizequeries",{"_index":652,"title":{"classes/AuthorizeQueries.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"coverage.html":{}}}],["authorizequeries})@post('par",{"_index":663,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["authorizeservice",{"_index":678,"title":{"injectables/AuthorizeService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["authresponse",{"_index":581,"title":{"interfaces/AuthResponse.html":{}},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["authserver",{"_index":779,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/.well",{"_index":787,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize",{"_index":786,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/challenge",{"_index":796,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/par",{"_index":792,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authserver}/authorize/token",{"_index":784,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["authtype",{"_index":3761,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["authz",{"_index":2606,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["authzmetadata",{"_index":729,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/WellKnownController.html":{}}}],["authzmetadata(session",{"_index":742,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/WellKnownController.html":{}}}],["autoloadentities",{"_index":1583,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["autologging",{"_index":296,"title":{},"body":{"modules/AppModule.html":{}}}],["automatic",{"_index":2323,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["available",{"_index":443,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/OAuthService.html":{},"entities/StatusListEntity.html":{},"modules.html":{}}}],["avoid",{"_index":1158,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["await",{"_index":484,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":3060,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["axios",{"_index":3964,"title":{},"body":{"dependencies.html":{}}}],["back",{"_index":467,"title":{},"body":{"controllers/AuthController.html":{}}}],["background_color",{"_index":1043,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["background_image",{"_index":1045,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["badgateway/oauth2",{"_index":2904,"title":{},"body":{"injectables/RegistrarService.html":{},"dependencies.html":{}}}],["base64",{"_index":461,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/FileStorage.html":{},"injectables/ResolverService.html":{}}}],["base64credentials",{"_index":458,"title":{},"body":{"controllers/AuthController.html":{}}}],["base64url",{"_index":4064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":1298,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["basedir",{"_index":2259,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["baseurl",{"_index":2927,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["basic",{"_index":383,"title":{},"body":{"controllers/AuthController.html":{}}}],["batch",{"_index":1209,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{}}}],["batch_credential_issuance",{"_index":1198,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batch_size",{"_index":1219,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["batchsize",{"_index":1867,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["bearer",{"_index":437,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["before",{"_index":856,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["being",{"_index":3181,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["belong",{"_index":3551,"title":{},"body":{"controllers/StorageController.html":{}}}],["belongs",{"_index":3443,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["better",{"_index":3764,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["between",{"_index":589,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["binary",{"_index":1746,"title":{},"body":{"classes/FileUploadDto.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["binding",{"_index":1323,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["bindings",{"_index":1881,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["bits",{"_index":3433,"title":{},"body":{"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["bitsperstatus",{"_index":3434,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["body",{"_index":384,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"interfaces/FileStorage.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/TenantController.html":{}}}],["body.auth_session",{"_index":857,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.client_id",{"_index":468,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.client_secret",{"_index":469,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.grant_type",{"_index":448,"title":{},"body":{"controllers/AuthController.html":{}}}],["body.issuer_state",{"_index":850,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["body.privatekey",{"_index":1519,"title":{},"body":{"classes/DBKeyService.html":{}}}],["body.requestid",{"_index":2711,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["body.response",{"_index":2637,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["body.response_type",{"_index":2027,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["body.webhook",{"_index":2712,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["boolean",{"_index":28,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["bootstrap",{"_index":178,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["both",{"_index":693,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["bound",{"_index":2975,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["break",{"_index":878,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["browse",{"_index":4012,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":4010,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":3047,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["buffer",{"_index":1722,"title":{},"body":{"interfaces/FileStorage.html":{},"controllers/IssuerManagementController.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"classes/S3FileStorage.html":{}}}],["buffer.from",{"_index":460,"title":{},"body":{"controllers/AuthController.html":{}}}],["buffer.from(signature).tostring(\"base64url",{"_index":4061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buffer.from(signaturebase64url",{"_index":4063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bugs",{"_index":4019,"title":{},"body":{"properties.html":{}}}],["builder/querypartialentity",{"_index":3375,"title":{},"body":{"injectables/SessionService.html":{}}}],["c.id",{"_index":3686,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["cache",{"_index":2130,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/WellKnownService.html":{}}}],["call",{"_index":2932,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["callback",{"_index":590,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{}}}],["callbacks",{"_index":613,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["called",{"_index":2889,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["callhandler",{"_index":3192,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["canactivate",{"_index":40,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":41,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["canonical",{"_index":1733,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["cascade",{"_index":905,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["cascading",{"_index":3695,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["case",{"_index":874,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["catch",{"_index":465,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{}}}],["catcherror",{"_index":3207,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["catcherror((error",{"_index":3236,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["cats",{"_index":3548,"title":{},"body":{"controllers/StorageController.html":{}}}],["cb",{"_index":2136,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cb(err",{"_index":2140,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["cert",{"_index":1165,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["cert.crt",{"_index":2253,"title":{},"body":{"classes/KeyService.html":{}}}],["cert.id",{"_index":1547,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/RegistrarService.html":{}}}],["cert.publickey.export",{"_index":3025,"title":{},"body":{"injectables/ResolverService.html":{}}}],["cert.revoked",{"_index":2980,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cert.subjectaltname?.includes(new",{"_index":3021,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certentity",{"_index":886,"title":{"entities/CertEntity.html":{}},"body":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["certificate",{"_index":7,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["certificatechainlength",{"_index":2616,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["certificates",{"_index":890,"title":{},"body":{"entities/CertEntity.html":{},"injectables/RegistrarService.html":{}}}],["certificatetype",{"_index":911,"title":{},"body":{"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["certrepository",{"_index":1463,"title":{},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{}}}],["certs",{"_index":2976,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["certs?.length",{"_index":2983,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["certs[0",{"_index":3020,"title":{},"body":{"injectables/ResolverService.html":{}}}],["certs[0].jwt",{"_index":2984,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cfg",{"_index":3595,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get",{"_index":3601,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_bucket",{"_index":3604,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_endpoint",{"_index":3599,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_public_base_url",{"_index":3605,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"s3_region",{"_index":3598,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.get(\"storage_driver",{"_index":3596,"title":{},"body":{"modules/StorageModule.html":{}}}],["cfg.getorthrow(\"local_storage_dir",{"_index":3606,"title":{},"body":{"modules/StorageModule.html":{}}}],["chain",{"_index":3016,"title":{},"body":{"injectables/ResolverService.html":{}}}],["challenge",{"_index":655,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["check",{"_index":287,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{}}}],["checked",{"_index":864,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["checking",{"_index":3471,"title":{},"body":{"injectables/StatusListService.html":{}}}],["checks",{"_index":1851,"title":{},"body":{"controllers/HealthController.html":{},"injectables/RegistrarService.html":{}}}],["checksum",{"_index":1730,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{}}}],["checksumsha256",{"_index":3070,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["checl",{"_index":3026,"title":{},"body":{"injectables/ResolverService.html":{}}}],["child",{"_index":1961,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["children",{"_index":1179,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{}}}],["claims",{"_index":100,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["claims?.[credentialconfigurationid",{"_index":1346,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["claims_supported",{"_index":512,"title":{},"body":{"controllers/AuthController.html":{}}}],["claimsquery",{"_index":78,"title":{"classes/ClaimsQuery.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["claimswebhook",{"_index":1868,"title":{},"body":{"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["class",{"_index":53,"title":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayCreateDto.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/FileUploadDto.html":{},"classes/IssuanceDto.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{}},"body":{"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":57,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayCreateDto.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/FileUploadDto.html":{},"classes/IssuanceDto.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"index.html":{}}}],["clear",{"_index":2653,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client",{"_index":361,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/JwtStrategy.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"dependencies.html":{}}}],["client.id",{"_index":479,"title":{},"body":{"controllers/AuthController.html":{}}}],["client_credentials",{"_index":427,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenRequestDto.html":{}}}],["client_id",{"_index":398,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizeQueries.html":{},"classes/ClientCredentialsDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{}}}],["client_metadata",{"_index":2592,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_name",{"_index":2601,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["client_secret",{"_index":399,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"classes/TokenRequestDto.html":{}}}],["client_secret_basic",{"_index":506,"title":{},"body":{"controllers/AuthController.html":{}}}],["client_secret_post",{"_index":507,"title":{},"body":{"controllers/AuthController.html":{}}}],["clientcredentialsdto",{"_index":371,"title":{"classes/ClientCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["clientid",{"_index":451,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["clientinitdto",{"_index":974,"title":{"classes/ClientInitDto.html":{}},"body":{"classes/ClientInitDto.html":{},"controllers/TenantController.html":{},"coverage.html":{}}}],["clients",{"_index":2371,"title":{},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{}}}],["clientsecret",{"_index":452,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{}}}],["clientservice",{"_index":424,"title":{},"body":{"controllers/AuthController.html":{}}}],["cloudfront",{"_index":3064,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["cluster_appmodule",{"_index":181,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":182,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":183,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":528,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_exports",{"_index":531,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_imports",{"_index":529,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_providers",{"_index":530,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule",{"_index":1389,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule_exports",{"_index":1390,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptoimplementatationmodule_providers",{"_index":1391,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"index.html":{}}}],["cluster_cryptomodule",{"_index":1437,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_cryptomodule_exports",{"_index":1438,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_cryptomodule_providers",{"_index":1439,"title":{},"body":{"modules/CryptoModule.html":{},"index.html":{}}}],["cluster_issuermodule",{"_index":2039,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_exports",{"_index":2042,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_imports",{"_index":2041,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_issuermodule_providers",{"_index":2040,"title":{},"body":{"modules/IssuerModule.html":{},"index.html":{}}}],["cluster_oauthmodule",{"_index":2380,"title":{},"body":{"modules/OAuthModule.html":{},"index.html":{}}}],["cluster_oauthmodule_exports",{"_index":2381,"title":{},"body":{"modules/OAuthModule.html":{},"index.html":{}}}],["cluster_oauthmodule_imports",{"_index":2383,"title":{},"body":{"modules/OAuthModule.html":{}}}],["cluster_oauthmodule_providers",{"_index":2382,"title":{},"body":{"modules/OAuthModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule",{"_index":2529,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule_exports",{"_index":2532,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_oid4vpmodule_imports",{"_index":2530,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["cluster_oid4vpmodule_providers",{"_index":2531,"title":{},"body":{"modules/Oid4vpModule.html":{},"index.html":{}}}],["cluster_presentationsmodule",{"_index":2729,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_exports",{"_index":2731,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_imports",{"_index":2730,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_presentationsmodule_providers",{"_index":2732,"title":{},"body":{"modules/PresentationsModule.html":{},"index.html":{}}}],["cluster_registrarmodule",{"_index":2841,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_registrarmodule_exports",{"_index":2842,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_registrarmodule_imports",{"_index":2844,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["cluster_registrarmodule_providers",{"_index":2843,"title":{},"body":{"modules/RegistrarModule.html":{},"index.html":{}}}],["cluster_resolvermodule",{"_index":2997,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_resolvermodule_exports",{"_index":2998,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_resolvermodule_providers",{"_index":2999,"title":{},"body":{"modules/ResolverModule.html":{},"index.html":{}}}],["cluster_sessionmodule",{"_index":3306,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_exports",{"_index":3307,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_sessionmodule_imports",{"_index":3308,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":3309,"title":{},"body":{"modules/SessionModule.html":{},"index.html":{}}}],["cluster_statuslistmodule",{"_index":3444,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_statuslistmodule_exports",{"_index":3445,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_statuslistmodule_imports",{"_index":3447,"title":{},"body":{"modules/StatusListModule.html":{}}}],["cluster_statuslistmodule_providers",{"_index":3446,"title":{},"body":{"modules/StatusListModule.html":{},"index.html":{}}}],["cluster_verifiermodule",{"_index":3734,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cluster_verifiermodule_imports",{"_index":3735,"title":{},"body":{"modules/VerifierModule.html":{}}}],["cnf",{"_index":1373,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["cnonce",{"_index":833,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["cnonceexpiresin",{"_index":844,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["code",{"_index":610,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{}}}],["code_challenge",{"_index":708,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_method",{"_index":709,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["code_challenge_methods_supported",{"_index":793,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["colorize",{"_index":300,"title":{},"body":{"modules/AppModule.html":{}}}],["column",{"_index":917,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column(\"boolean",{"_index":1047,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["column(\"date",{"_index":3144,"title":{},"body":{"entities/Session.html":{}}}],["column(\"int",{"_index":962,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column(\"json",{"_index":963,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column(\"varchar",{"_index":921,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["column('date",{"_index":3112,"title":{},"body":{"entities/Session.html":{}}}],["column('int",{"_index":3435,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["column('json",{"_index":988,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column('json')@validatenested()@apiproperty({oneof",{"_index":1871,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["column('json')@validatenested()@type(undefined",{"_index":992,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/PresentationConfig.html":{}}}],["column('varchar",{"_index":898,"title":{},"body":{"entities/CertEntity.html":{},"entities/FileEntity.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{}}}],["column({nullable",{"_index":3635,"title":{},"body":{"entities/TenantEntity.html":{}}}],["column({type",{"_index":3524,"title":{},"body":{"entities/StatusMapping.html":{}}}],["commonoptions",{"_index":1581,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["comparison",{"_index":2988,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["complete",{"_index":2760,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["completed",{"_index":3140,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["completion",{"_index":3276,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["components",{"_index":1553,"title":{},"body":{"classes/DBKeyService.html":{}}}],["computed",{"_index":3072,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["condition",{"_index":3354,"title":{},"body":{"injectables/SessionService.html":{}}}],["config",{"_index":135,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["config.dto",{"_index":1894,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.dto.ts",{"_index":600,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["config.dto.ts:21",{"_index":633,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:29",{"_index":635,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["config.dto.ts:41",{"_index":2687,"title":{},"body":{"classes/PresentationDuringIssuanceConfig.html":{}}}],["config.dto.ts:49",{"_index":632,"title":{},"body":{"classes/AuthenticationMethodPresentation.html":{}}}],["config.dto.ts:53",{"_index":630,"title":{},"body":{"classes/AuthenticationMethodPresentation.html":{}}}],["config.dto.ts:59",{"_index":606,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{}}}],["config.dto.ts:63",{"_index":604,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{}}}],["config.dto.ts:69",{"_index":629,"title":{},"body":{"classes/AuthenticationMethodNone.html":{}}}],["config.entity",{"_index":82,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationConfigCreateDto.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{}}}],["config.entity.ts",{"_index":923,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["config.entity.ts:105",{"_index":1562,"title":{},"body":{"classes/DCQL.html":{}}}],["config.entity.ts:111",{"_index":1560,"title":{},"body":{"classes/DCQL.html":{}}}],["config.entity.ts:114",{"_index":1872,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:123",{"_index":1878,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:124",{"_index":2675,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:129",{"_index":1890,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:131",{"_index":2679,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:137",{"_index":2678,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:138",{"_index":1877,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:145",{"_index":2673,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:147",{"_index":1888,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:153",{"_index":2676,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:156",{"_index":1875,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:161",{"_index":2671,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:164",{"_index":1886,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:169",{"_index":2677,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:177",{"_index":2682,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:183",{"_index":2670,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:189",{"_index":2680,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:199",{"_index":2669,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["config.entity.ts:31",{"_index":2667,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:34",{"_index":2666,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:38",{"_index":2665,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["config.entity.ts:44",{"_index":3716,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["config.entity.ts:48",{"_index":3718,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["config.entity.ts:49",{"_index":1887,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:55",{"_index":1221,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:56",{"_index":1889,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:58",{"_index":1220,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:62",{"_index":1224,"title":{},"body":{"classes/CredentialQuery.html":{},"entities/IssuanceConfig.html":{}}}],["config.entity.ts:65",{"_index":1222,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:70",{"_index":1884,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["config.entity.ts:71",{"_index":1226,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["config.entity.ts:77",{"_index":924,"title":{},"body":{"classes/ClaimsQuery.html":{}}}],["config.entity.ts:80",{"_index":925,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/IssuanceConfig.html":{}}}],["config.entity.ts:84",{"_index":927,"title":{},"body":{"classes/ClaimsQuery.html":{}}}],["config.entity.ts:94",{"_index":1229,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["config.entity.ts:98",{"_index":1231,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["config.id",{"_index":1332,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["config.keyid",{"_index":1164,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service",{"_index":1249,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["config.service.ts",{"_index":1076,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["config.service.ts:149",{"_index":1103,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:158",{"_index":1096,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:17",{"_index":2305,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:171",{"_index":1099,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:18",{"_index":1086,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:185",{"_index":1105,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:198",{"_index":1089,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:23",{"_index":2314,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:34",{"_index":1100,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["config.service.ts:47",{"_index":2317,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:59",{"_index":2306,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:63",{"_index":2313,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:67",{"_index":2312,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:71",{"_index":2311,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:75",{"_index":2309,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:79",{"_index":2308,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:86",{"_index":2318,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config.service.ts:94",{"_index":2322,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["config/credential",{"_index":1075,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["config_folder",{"_index":268,"title":{},"body":{"modules/AppModule.html":{}}}],["config_import",{"_index":265,"title":{},"body":{"modules/AppModule.html":{}}}],["config_import_force",{"_index":267,"title":{},"body":{"modules/AppModule.html":{}}}],["config_storage_schema",{"_index":241,"title":{},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configmodule",{"_index":202,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configmodule.forroot",{"_index":248,"title":{},"body":{"modules/AppModule.html":{}}}],["configpath",{"_index":1119,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["configs",{"_index":1101,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["configservice",{"_index":203,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["configservice.get",{"_index":284,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{}}}],["configservice.get(\"jwt_issuer",{"_index":2149,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"jwt_secret",{"_index":2144,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"log_level",{"_index":295,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get(\"oidc",{"_index":2117,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"oidc_algorithm",{"_index":2142,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get(\"oidc_internal_issuer_url",{"_index":2126,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.getorthrow(\"db_database",{"_index":1593,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_host",{"_index":1585,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_password",{"_index":1591,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_port",{"_index":1587,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"db_username",{"_index":1589,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["configservice.getorthrow(\"folder",{"_index":333,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["configservie",{"_index":1426,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["configurable",{"_index":483,"title":{},"body":{"controllers/AuthController.html":{}}}],["configuration",{"_index":107,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["configuration(@token",{"_index":2715,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configuration(user",{"_index":2692,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["configurations",{"_index":1064,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["configured",{"_index":1433,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationRequest.html":{},"injectables/SessionService.html":{}}}],["conflictexception",{"_index":760,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{}}}],["conflictexception(\"certificate",{"_index":2254,"title":{},"body":{"classes/KeyService.html":{}}}],["conflictexception(\"issuer",{"_index":3033,"title":{},"body":{"injectables/ResolverService.html":{}}}],["conflictexception(\"no",{"_index":2639,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["conflictexception(\"user",{"_index":3626,"title":{},"body":{"controllers/TenantController.html":{}}}],["conflictexception(`request",{"_index":2806,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["connect",{"_index":391,"title":{},"body":{"controllers/AuthController.html":{}}}],["connect/certs",{"_index":2129,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["connect/token",{"_index":2921,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["connection",{"_index":1852,"title":{},"body":{"controllers/HealthController.html":{}}}],["console.error",{"_index":2137,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{}}}],["console.error(\"error",{"_index":2966,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["console.log('session",{"_index":2508,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["console.log(err",{"_index":2816,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["console.warn",{"_index":1813,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["const",{"_index":282,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"classes/DisplayCreateDto.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateKeyDto.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["constraints",{"_index":1171,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["constructor",{"_index":422,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["constructor(basedir",{"_index":2257,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["constructor(configservice",{"_index":736,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/DBKeyService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{}}}],["constructor(configservie",{"_index":1424,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["constructor(credentialconfigrepository",{"_index":1082,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["constructor(cryptoservice",{"_index":1289,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["constructor(displayrepository",{"_index":1637,"title":{},"body":{"injectables/DisplayService.html":{}}}],["constructor(httpservice",{"_index":2750,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/WebhookService.html":{}}}],["constructor(issuanceconfigrepo",{"_index":1924,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["constructor(keyrepository",{"_index":1670,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["constructor(logger",{"_index":3264,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["constructor(oid4vciservice",{"_index":3827,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["constructor(private",{"_index":1257,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CryptoImplementationService.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/ResolverService.html":{},"injectables/SessionPipe.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{}}}],["constructor(reflector",{"_index":2077,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["constructor(s3",{"_index":3045,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["constructor(sessionrepository",{"_index":3334,"title":{},"body":{"injectables/SessionService.html":{}}}],["constructor(sessionservice",{"_index":3322,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["constructor(storage",{"_index":1753,"title":{},"body":{"injectables/FilesService.html":{}}}],["containing",{"_index":593,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WellKnownService.html":{}}}],["content",{"_index":321,"title":{},"body":{"modules/AppModule.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["contenttype",{"_index":1728,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":47,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["context.flowtype",{"_index":3292,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.getclass",{"_index":2087,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":2086,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["context.sessionid",{"_index":3294,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.switchtohttp().getrequest",{"_index":3214,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.switchtohttp().getresponse",{"_index":3215,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["context.tenantid",{"_index":3295,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["context.ts",{"_index":3178,"title":{},"body":{"interfaces/SessionLogContext.html":{},"coverage.html":{}}}],["context.ts:21",{"_index":3180,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["continue",{"_index":1146,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["controller",{"_index":157,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"injectables/SessionPipe.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["controller(\":session/.well",{"_index":3810,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["controller(\":session/authorize",{"_index":684,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["controller(\":session/oid4vp",{"_index":2525,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["controller(\":session/vci",{"_index":2495,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["controller(\":tenantid/credentials",{"_index":1276,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["controller(\":tenantid/status",{"_index":3425,"title":{},"body":{"controllers/StatusListController.html":{}}}],["controller(\"display",{"_index":1616,"title":{},"body":{"controllers/DisplayController.html":{}}}],["controller(\"health",{"_index":1858,"title":{},"body":{"controllers/HealthController.html":{}}}],["controller(\"issuer",{"_index":1254,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{}}}],["controller(\"key",{"_index":2185,"title":{},"body":{"controllers/KeyController.html":{}}}],["controller(\"oauth",{"_index":2377,"title":{},"body":{"controllers/OAuthController.html":{}}}],["controller(\"presentation",{"_index":2708,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["controller(\"session",{"_index":3169,"title":{},"body":{"controllers/SessionController.html":{}}}],["controller(\"storage",{"_index":3560,"title":{},"body":{"controllers/StorageController.html":{}}}],["controller(\"tenant",{"_index":3620,"title":{},"body":{"controllers/TenantController.html":{}}}],["controllers",{"_index":159,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"modules/CryptoModule.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{},"index.html":{}}}],["convert",{"_index":1548,"title":{},"body":{"classes/DBKeyService.html":{}}}],["coordinate",{"_index":1659,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["copy",{"_index":3242,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["correct",{"_index":865,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["count",{"_index":3398,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["counter",{"_index":1131,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["coverage",{"_index":3853,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["covered",{"_index":2971,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["create",{"_index":1363,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["create(session",{"_index":3343,"title":{},"body":{"injectables/SessionService.html":{}}}],["create(tenantid",{"_index":1466,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"classes/KeyService.html":{}}}],["create.dto",{"_index":1117,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["create.dto.ts",{"_index":1057,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"classes/DisplayCreateDto.html":{},"classes/PresentationConfigCreateDto.html":{},"coverage.html":{}}}],["create_authorization_request",{"_index":2569,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest",{"_index":2539,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationrequest(session",{"_index":2544,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createauthorizationservermetadata",{"_index":783,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["created",{"_index":897,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["createdat",{"_index":891,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["createdatecolumn",{"_index":894,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["createdisplay",{"_index":1605,"title":{},"body":{"controllers/DisplayController.html":{}}}],["createdisplay(user",{"_index":1607,"title":{},"body":{"controllers/DisplayController.html":{}}}],["createdsession",{"_index":3396,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.issuanceid",{"_index":3401,"title":{},"body":{"injectables/SessionService.html":{}}}],["createdsession.tenantid",{"_index":3400,"title":{},"body":{"injectables/SessionService.html":{}}}],["createentry",{"_index":3456,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createentry(session",{"_index":3463,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createhash('sha256').update(bufferorstreamtobuffer(body)).digest('base64",{"_index":1789,"title":{},"body":{"injectables/FilesService.html":{}}}],["createheaderandpayload",{"_index":3479,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist",{"_index":3457,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createlist(entry",{"_index":3466,"title":{},"body":{"injectables/StatusListService.html":{}}}],["createparamdecorator",{"_index":3698,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["createreadstream",{"_index":2264,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createreadstream(fullpath",{"_index":2290,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createrequest",{"_index":2540,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["createrequest(requestid",{"_index":2549,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["creates",{"_index":1411,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{}}}],["createwritestream",{"_index":2265,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["createwritestream(fullpath",{"_index":2279,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["creation",{"_index":961,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["credential",{"_index":616,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["credential(req",{"_index":2478,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credential.issuanceconfigs",{"_index":1895,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["credential.issuanceconfigs)@jointable",{"_index":1879,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["credential_configurations_supported",{"_index":1199,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{}}}],["credential_creation",{"_index":3301,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_endpoint",{"_index":1200,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["credential_ids",{"_index":937,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["credential_issuance",{"_index":3300,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credential_issuer",{"_index":1201,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["credential_revoked",{"_index":2357,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["credential_set",{"_index":956,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["credential_sets",{"_index":102,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["credential_signing_alg_values_supported",{"_index":1328,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credential_verification",{"_index":3303,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["credentialconfig",{"_index":978,"title":{"entities/CredentialConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialconfig).key",{"_index":1175,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfig.schema",{"_index":1387,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct",{"_index":1381,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfig.vct.vct",{"_index":1383,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigcreate",{"_index":1055,"title":{"classes/CredentialConfigCreate.html":{}},"body":{"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"coverage.html":{}}}],["credentialconfigid",{"_index":1974,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialconfigids",{"_index":1072,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{}}}],["credentialconfigmapping",{"_index":1061,"title":{"classes/CredentialConfigMapping.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["credentialconfigrepo",{"_index":1291,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigrepository",{"_index":1087,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["credentialconfigs",{"_index":1069,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["credentialconfigservice",{"_index":1073,"title":{"injectables/CredentialConfigService.html":{}},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["credentialconfiguration",{"_index":1342,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.claims",{"_index":1348,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.disclosureframe",{"_index":1349,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.keybinding",{"_index":1374,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.lifetime",{"_index":1372,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration.statusmanagement",{"_index":1365,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfiguration?.keyid",{"_index":1350,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigurationid",{"_index":1299,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["credentialconfigurationids",{"_index":2453,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["credentialconfigurationsupported",{"_index":1307,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialconfigurationsupported).vct",{"_index":1335,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialcount",{"_index":2650,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialid",{"_index":1306,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["credentialissuer",{"_index":3844,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["credentialissuermetadatadto",{"_index":1190,"title":{"classes/CredentialIssuerMetadataDto.html":{}},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["credentialofferobject",{"_index":3120,"title":{},"body":{"entities/Session.html":{}}}],["credentialpayload",{"_index":3101,"title":{},"body":{"entities/Session.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["credentialquery",{"_index":79,"title":{"classes/CredentialQuery.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["credentialresponse",{"_index":2490,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["credentials",{"_index":101,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/NoneTrustPolicy.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["credentials.dto",{"_index":410,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials.dto.ts",{"_index":971,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:5",{"_index":972,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.dto.ts:7",{"_index":973,"title":{},"body":{"classes/ClientCredentialsDto.html":{}}}],["credentials.length",{"_index":2649,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentials.push(credential",{"_index":1977,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentials.split",{"_index":464,"title":{},"body":{"controllers/AuthController.html":{}}}],["credentials/credential",{"_index":1941,"title":{},"body":{"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials/credentials.controller",{"_index":2059,"title":{},"body":{"modules/IssuerModule.html":{}}}],["credentials/credentials.service",{"_index":1275,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{}}}],["credentials/entities/credential.entity",{"_index":1892,"title":{},"body":{"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{}}}],["credentials?.length",{"_index":2651,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["credentialsconfigservice",{"_index":1925,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["credentialscontroller",{"_index":1232,"title":{"controllers/CredentialsController.html":{}},"body":{"controllers/CredentialsController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsetquery",{"_index":80,"title":{"classes/CredentialSetQuery.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["credentialsmetadatacontroller",{"_index":1264,"title":{"controllers/CredentialsMetadataController.html":{}},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["credentialsservice",{"_index":1256,"title":{"injectables/CredentialsService.html":{}},"body":{"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["credentialtype",{"_index":3270,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["cron",{"_index":3358,"title":{},"body":{"injectables/SessionService.html":{}}}],["crt",{"_index":15,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{}}}],["crv",{"_index":1650,"title":{},"body":{"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["crypto",{"_index":1172,"title":{},"body":{"injectables/CredentialConfigService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"modules/KeyModule.html":{}}}],["crypto.service",{"_index":1443,"title":{},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{}}}],["crypto.webcrypto.subtle.exportkey",{"_index":4055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.generatekey",{"_index":4054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.importkey",{"_index":4058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.sign",{"_index":4059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto.webcrypto.subtle.verify",{"_index":4066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["crypto/crypto.module",{"_index":225,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{}}}],["crypto/crypto.service",{"_index":767,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/IssuanceService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{}}}],["crypto/encryption/encryption.service",{"_index":2554,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["crypto/key/crypto",{"_index":227,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialsService.html":{},"injectables/WellKnownService.html":{}}}],["crypto/key/dto/key",{"_index":407,"title":{},"body":{"controllers/AuthController.html":{}}}],["crypto/key/entities/cert.entity",{"_index":1034,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["crypto/key/key.module",{"_index":231,"title":{},"body":{"modules/AppModule.html":{}}}],["crypto_alg",{"_index":1394,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"miscellaneous/variables.html":{}}}],["crypto_validation_schema",{"_index":226,"title":{},"body":{"modules/AppModule.html":{},"modules/CryptoImplementatationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptographic",{"_index":2875,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["cryptographic_binding_methods_supported",{"_index":1329,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["cryptoimplementatationmodule",{"_index":1388,"title":{"modules/CryptoImplementatationModule.html":{}},"body":{"modules/CryptoImplementatationModule.html":{},"modules/KeyModule.html":{},"index.html":{},"modules.html":{}}}],["cryptoimplementation",{"_index":1396,"title":{"interfaces/CryptoImplementation.html":{}},"body":{"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptoimplementationservice",{"_index":1292,"title":{"injectables/CryptoImplementationService.html":{}},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["cryptokey",{"_index":1502,"title":{},"body":{"classes/DBKeyService.html":{}}}],["cryptomodule",{"_index":185,"title":{"modules/CryptoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["cryptoservice",{"_index":737,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["cryptoservice.getcrypto",{"_index":1518,"title":{},"body":{"classes/DBKeyService.html":{}}}],["cryptotype",{"_index":1429,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["ctx",{"_index":3699,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":3700,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["current",{"_index":1954,"title":{},"body":{"injectables/IssuanceService.html":{},"entities/TenantEntity.html":{}}}],["curve",{"_index":1647,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["customprops",{"_index":309,"title":{},"body":{"modules/AppModule.html":{}}}],["d",{"_index":1522,"title":{},"body":{"classes/DBKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["data",{"_index":595,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"interfaces/CryptoImplementation.html":{},"classes/DCQL.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/StorageController.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["data')@apibody({description",{"_index":3547,"title":{},"body":{"controllers/StorageController.html":{}}}],["database",{"_index":1592,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/HealthController.html":{},"injectables/OAuthService.html":{}}}],["database/database.module",{"_index":232,"title":{},"body":{"modules/AppModule.html":{}}}],["databasemodule",{"_index":186,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"index.html":{},"modules.html":{}}}],["date",{"_index":893,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["date().gettime",{"_index":1368,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["date().toisostring().slice(0",{"_index":1784,"title":{},"body":{"injectables/FilesService.html":{}}}],["date(date.now",{"_index":3413,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(token.expiresat",{"_index":2940,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["date.gettime",{"_index":2951,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["date.now",{"_index":2628,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["day",{"_index":3368,"title":{},"body":{"injectables/SessionService.html":{}}}],["db",{"_index":1859,"title":{},"body":{"controllers/HealthController.html":{}}}],["db_database",{"_index":1578,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_host",{"_index":1569,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_password",{"_index":1577,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_port",{"_index":1574,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_type",{"_index":1566,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_username",{"_index":1576,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["db_validation_schema",{"_index":1565,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbkeyservice",{"_index":1450,"title":{"classes/DBKeyService.html":{}},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["dbtype",{"_index":1580,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["dc+sd",{"_index":2596,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcql",{"_index":955,"title":{"classes/DCQL.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["dcql_query",{"_index":964,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["dcql_query.length",{"_index":2584,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dcqlquerycount",{"_index":2582,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["dd",{"_index":305,"title":{},"body":{"modules/AppModule.html":{}}}],["deal",{"_index":2001,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["debug",{"_index":258,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["debugging",{"_index":2121,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["declarations",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["declare",{"_index":88,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["decodedvc",{"_index":2808,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.header",{"_index":2811,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decodedvc.jwt?.payload",{"_index":2810,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["decorator",{"_index":4049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["decorators",{"_index":63,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/FileEntity.html":{},"classes/FileUploadDto.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"entities/RegistrarEntity.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["decrease",{"_index":3405,"title":{},"body":{"injectables/SessionService.html":{}}}],["decryption",{"_index":1666,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe",{"_index":1667,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["decryptjwe(response",{"_index":1672,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["dedicated",{"_index":2433,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["deeppartial",{"_index":3344,"title":{},"body":{"injectables/SessionService.html":{}}}],["default",{"_index":262,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtService.html":{},"entities/KeyEntity.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WebhookService.html":{},"miscellaneous/variables.html":{}}}],["default_auth_client_id",{"_index":554,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_auth_client_secret",{"_index":555,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["default_jwt_secret",{"_index":552,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["defaultclientid",{"_index":2418,"title":{},"body":{"injectables/OAuthService.html":{}}}],["defaultclientsecret",{"_index":2420,"title":{},"body":{"injectables/OAuthService.html":{}}}],["defaultmetrics",{"_index":2350,"title":{},"body":{"modules/MetricModule.html":{}}}],["define",{"_index":701,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/PresentationConfigCreateDto.html":{}}}],["defined",{"_index":43,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["defines",{"_index":2850,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["delete",{"_index":1078,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["delete(\":id",{"_index":1261,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{}}}],["delete(':id",{"_index":1239,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{}}}],["delete(id",{"_index":3346,"title":{},"body":{"injectables/SessionService.html":{}}}],["delete(key",{"_index":1713,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["delete(tenantid",{"_index":1088,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["deletebytenant",{"_index":1750,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletebytenant(tenantid",{"_index":1758,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteconfiguration",{"_index":2690,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(@param(\"id",{"_index":2718,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleteconfiguration(id",{"_index":2694,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["deleted",{"_index":1757,"title":{},"body":{"injectables/FilesService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["deleteissuanceconfiguration",{"_index":1235,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["deleteissuanceconfiguration(id",{"_index":1238,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{}}}],["deleteissuanceconfiguration(tenantid",{"_index":1928,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["deletekey",{"_index":2169,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(@token",{"_index":2193,"title":{},"body":{"controllers/KeyController.html":{}}}],["deletekey(token",{"_index":2174,"title":{},"body":{"controllers/KeyController.html":{}}}],["deleteobjectcommand",{"_index":3056,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["deletepresentationconfig",{"_index":2745,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletepresentationconfig(id",{"_index":2757,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["deletes",{"_index":1090,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["deletesession",{"_index":3148,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletesession(id",{"_index":3152,"title":{},"body":{"controllers/SessionController.html":{}}}],["deletetenant",{"_index":3608,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{}}}],["deletetenant(@param(\"id",{"_index":3630,"title":{},"body":{"controllers/TenantController.html":{}}}],["deletetenant(id",{"_index":3611,"title":{},"body":{"controllers/TenantController.html":{}}}],["deletetenant(tenantid",{"_index":3646,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["deletion",{"_index":2759,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["dependencies",{"_index":175,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"dependencies.html":{},"index.html":{}}}],["desc",{"_index":2803,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionService.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayImage.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"classes/NoneTrustPolicy.html":{},"controllers/OAuthController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"properties.html":{}}}],["details",{"_index":639,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["detection",{"_index":1788,"title":{},"body":{"injectables/FilesService.html":{}}}],["determine",{"_index":1876,"title":{},"body":{"entities/IssuanceConfig.html":{},"miscellaneous/variables.html":{}}}],["development/testing",{"_index":3683,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["different",{"_index":1400,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{}}}],["digest",{"_index":1309,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["direct_post.jwt",{"_index":2591,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["directory",{"_index":2767,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dirname",{"_index":2270,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["disable",{"_index":2943,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["disclosure",{"_index":1003,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["disclosure_policy",{"_index":1340,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["disclosureframe",{"_index":980,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["discovery",{"_index":389,"title":{},"body":{"controllers/AuthController.html":{}}}],["discovery.dto",{"_index":412,"title":{},"body":{"controllers/AuthController.html":{}}}],["discovery.dto.ts",{"_index":3858,"title":{},"body":{"coverage.html":{}}}],["discoveryendpoint",{"_index":2922,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["discriminated",{"_index":1004,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["discriminator",{"_index":152,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["display",{"_index":1041,"title":{"classes/Display.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"coverage.html":{}}}],["display.service",{"_index":1614,"title":{},"body":{"controllers/DisplayController.html":{}}}],["display/display.controller",{"_index":2061,"title":{},"body":{"modules/IssuerModule.html":{}}}],["display/display.service",{"_index":2067,"title":{},"body":{"modules/IssuerModule.html":{}}}],["display/entities/display.entity",{"_index":2062,"title":{},"body":{"modules/IssuerModule.html":{}}}],["displaycontroller",{"_index":1603,"title":{"controllers/DisplayController.html":{}},"body":{"controllers/DisplayController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["displaycreatedto",{"_index":1609,"title":{"classes/DisplayCreateDto.html":{}},"body":{"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"injectables/DisplayService.html":{},"coverage.html":{}}}],["displaydata",{"_index":1608,"title":{},"body":{"controllers/DisplayController.html":{},"injectables/DisplayService.html":{}}}],["displayentity",{"_index":1622,"title":{"entities/DisplayEntity.html":{}},"body":{"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["displayimage",{"_index":1039,"title":{"classes/DisplayImage.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"coverage.html":{}}}],["displayinfo",{"_index":1627,"title":{"classes/DisplayInfo.html":{}},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"coverage.html":{}}}],["displaylogo",{"_index":1630,"title":{"classes/DisplayLogo.html":{}},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"coverage.html":{}}}],["displayrepository",{"_index":1639,"title":{},"body":{"injectables/DisplayService.html":{}}}],["displayservice",{"_index":1613,"title":{"injectables/DisplayService.html":{}},"body":{"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"index.html":{}}}],["disposition",{"_index":3568,"title":{},"body":{"controllers/StorageController.html":{}}}],["dns",{"_index":2963,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["document",{"_index":3008,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["documentation",{"_index":3854,"title":{},"body":{"coverage.html":{}}}],["documents",{"_index":2756,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["download",{"_index":3541,"title":{},"body":{"controllers/StorageController.html":{}}}],["download(@param(\"key",{"_index":3565,"title":{},"body":{"controllers/StorageController.html":{}}}],["download(key",{"_index":3542,"title":{},"body":{"controllers/StorageController.html":{}}}],["dpop",{"_index":817,"title":{},"body":{"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpop_jkt",{"_index":710,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["dpop_signing_alg_values_supported",{"_index":788,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dpoprequired",{"_index":1869,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["dpopvalue",{"_index":815,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["driver",{"_index":3577,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["dto",{"_index":584,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["dto/auth",{"_index":2791,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["dto/authentication",{"_index":1893,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["dto/authorization",{"_index":2523,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["dto/authorize",{"_index":680,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["dto/client",{"_index":409,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TenantController.html":{}}}],["dto/credential",{"_index":1116,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/WellKnownService.html":{}}}],["dto/display",{"_index":1615,"title":{},"body":{"controllers/DisplayController.html":{},"injectables/DisplayService.html":{}}}],["dto/file",{"_index":3557,"title":{},"body":{"controllers/StorageController.html":{}}}],["dto/issuance.dto",{"_index":1912,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["dto/issuer",{"_index":3011,"title":{},"body":{"injectables/ResolverService.html":{}}}],["dto/jwks",{"_index":3808,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/key",{"_index":1511,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{}}}],["dto/notification",{"_index":2494,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["dto/oauth",{"_index":3809,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["dto/oidc",{"_index":411,"title":{},"body":{"controllers/AuthController.html":{}}}],["dto/par",{"_index":683,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["dto/presentation",{"_index":2560,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["dto/status",{"_index":3482,"title":{},"body":{"injectables/StatusListService.html":{}}}],["dto/token",{"_index":413,"title":{},"body":{"controllers/AuthController.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{}}}],["dto/vp",{"_index":933,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["duration",{"_index":3229,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["duration}ms",{"_index":3235,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["during",{"_index":3766,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["dynamically",{"_index":2436,"title":{},"body":{"injectables/OAuthService.html":{}}}],["dynamicmodule",{"_index":2211,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["e",{"_index":1181,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["e.g",{"_index":474,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{},"interfaces/SessionLogContext.html":{}}}],["e.message",{"_index":1183,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["each",{"_index":89,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["easier",{"_index":2986,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["ec",{"_index":1648,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["ec_public",{"_index":1482,"title":{"classes/EC_Public.html":{}},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["ecdh",{"_index":1696,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["ecdsa",{"_index":4050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ecdsa_p256",{"_index":3880,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["ed25519",{"_index":1435,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["eddsa",{"_index":4053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["element",{"_index":1149,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["elements",{"_index":1135,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["elliptic",{"_index":1646,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["embedded",{"_index":1002,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["embeddeddisclosurepolicy",{"_index":60,"title":{"classes/EmbeddedDisclosurePolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["embeddeddisclosurepolicy:31",{"_index":66,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["embeddeddisclosurepolicy:42",{"_index":3040,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["embeddeddisclosurepolicy:54",{"_index":2351,"title":{},"body":{"classes/NoneTrustPolicy.html":{}}}],["embeddeddisclosurepolicy:80",{"_index":340,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["emits",{"_index":3199,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["emitter",{"_index":3947,"title":{},"body":{"dependencies.html":{}}}],["empty",{"_index":520,"title":{},"body":{"controllers/AuthController.html":{},"injectables/StatusListService.html":{}}}],["enabled",{"_index":1362,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"injectables/RegistrarService.html":{}}}],["enabledebugmode",{"_index":2327,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablehttplogger",{"_index":283,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["enablesessionlogger",{"_index":2326,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["encodeuri(key",{"_index":3076,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["encodeuricomponent(key)}=${encodeuricomponent(value",{"_index":2626,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["encrypt",{"_index":1677,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"miscellaneous/typealiases.html":{}}}],["encrypted",{"_index":1678,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption",{"_index":1665,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["encryption/encryption.service",{"_index":1444,"title":{},"body":{"modules/CryptoModule.html":{}}}],["encryptionservice",{"_index":1440,"title":{"injectables/EncryptionService.html":{}},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["encrypts",{"_index":1675,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["endpoint",{"_index":360,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/HealthController.html":{},"modules/MetricModule.html":{},"controllers/OAuthController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/StorageModule.html":{}}}],["endpoints",{"_index":645,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/HealthController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["enhanced",{"_index":525,"title":{},"body":{"controllers/AuthController.html":{}}}],["ensure",{"_index":2147,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entities",{"_index":887,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"entities/DisplayEntity.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"index.html":{}}}],["entities/cert.entity",{"_index":1513,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{}}}],["entities/credential.entity",{"_index":1060,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["entities/display.entity",{"_index":1623,"title":{},"body":{"classes/DisplayCreateDto.html":{},"injectables/DisplayService.html":{}}}],["entities/files.entity",{"_index":1777,"title":{},"body":{"injectables/FilesService.html":{},"modules/StorageModule.html":{}}}],["entities/issuance",{"_index":1066,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{}}}],["entities/keys.entity",{"_index":1514,"title":{},"body":{"classes/DBKeyService.html":{},"modules/KeyModule.html":{}}}],["entities/presentation",{"_index":2686,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{}}}],["entities/registrar.entity",{"_index":2848,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{}}}],["entities/session.entity",{"_index":3164,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{}}}],["entities/status",{"_index":3449,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["entitites/tenant.entity",{"_index":549,"title":{},"body":{"modules/AuthModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["entity",{"_index":885,"title":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{}},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"injectables/SessionPipe.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["entries",{"_index":2895,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entries.length",{"_index":3520,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry",{"_index":1364,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["entry.bits",{"_index":3499,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.elements",{"_index":3516,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.elements[id",{"_index":3515,"title":{},"body":{"injectables/StatusListService.html":{}}}],["entry.key",{"_index":1701,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["entry.key.d",{"_index":1700,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["entry.relyingpartyid",{"_index":2977,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["entry.tenantid",{"_index":3500,"title":{},"body":{"injectables/StatusListService.html":{}}}],["enum",{"_index":123,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"entities/Session.html":{},"classes/TokenRequestDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":3989,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":2321,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"modules/RegistrarModule.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["environments",{"_index":1815,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["equals",{"_index":3096,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals(\"https://json",{"_index":3097,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals(\"object",{"_index":3099,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals('https://json",{"_index":3087,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["equals('object",{"_index":3094,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["erika",{"_index":2470,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["err",{"_index":2135,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["err.message",{"_index":2831,"title":{},"body":{"injectables/PresentationsService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["error",{"_index":260,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["error(\"error",{"_index":2967,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["error(\"issuer",{"_index":3014,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(\"key",{"_index":3038,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error(\"no",{"_index":2820,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["error(\"stack",{"_index":3512,"title":{},"body":{"injectables/StatusListService.html":{}}}],["error(\"subject",{"_index":3023,"title":{},"body":{"injectables/ResolverService.html":{}}}],["error('credential",{"_index":867,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["error(`error",{"_index":3775,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["error(`invalid",{"_index":1840,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["error(`unsupported",{"_index":1436,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["error.children",{"_index":1959,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["error.children.length",{"_index":1960,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["error.constraints",{"_index":1955,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error.message",{"_index":1841,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.name",{"_index":3238,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.property",{"_index":1967,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error.stack",{"_index":3241,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["error.value",{"_index":1970,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["error_description",{"_index":855,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["errormessages",{"_index":1963,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["errors",{"_index":1170,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerService.html":{}}}],["es",{"_index":1687,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["es256",{"_index":510,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["es256.getverifier(publickey",{"_index":2813,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["eslint",{"_index":2942,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["eslint/no",{"_index":2947,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["etag",{"_index":1735,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["etsi_tl",{"_index":948,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["eudi",{"_index":4018,"title":{},"body":{"properties.html":{}}}],["eudiplo",{"_index":164,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["event",{"_index":1168,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/NotificationRequestDto.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["events",{"_index":3251,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["example",{"_index":2007,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["examples",{"_index":372,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{}}}],["exchange",{"_index":669,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["execution",{"_index":3195,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["executioncontext",{"_index":42,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":1478,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/StatusListService.html":{}}}],["existing",{"_index":2183,"title":{},"body":{"controllers/KeyController.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{}}}],["exists",{"_index":1108,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"interfaces/FileStorage.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/StatusListService.html":{}}}],["exists(key",{"_index":1715,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["existssync",{"_index":2266,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["exp",{"_index":515,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["expandvariables",{"_index":278,"title":{},"body":{"modules/AppModule.html":{}}}],["expect",{"_index":3751,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["expected",{"_index":2462,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["expectedcode",{"_index":831,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedpreauthorizedcode",{"_index":826,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectedtxcode",{"_index":828,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["expectresponse",{"_index":3750,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["expiration",{"_index":1370,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/ParResponseDto.html":{}}}],["expirationdate",{"_index":2939,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["expirationdate.gettime",{"_index":2950,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["expire",{"_index":2148,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["expired",{"_index":3141,"title":{},"body":{"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["expires_in",{"_index":438,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/OAuthService.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["expiresat",{"_index":2627,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["expiresin",{"_index":482,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["expiresinseconds",{"_index":841,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["export",{"_index":30,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["exportable",{"_index":1536,"title":{},"body":{"classes/DBKeyService.html":{}}}],["exportjwk",{"_index":1503,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["exportjwk(secret.privatekey",{"_index":1690,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["exports",{"_index":180,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["exportspki",{"_index":1504,"title":{},"body":{"classes/DBKeyService.html":{}}}],["exportspki(publickeyinstance",{"_index":1556,"title":{},"body":{"classes/DBKeyService.html":{}}}],["express",{"_index":207,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"controllers/StorageController.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["express.multer.file",{"_index":1765,"title":{},"body":{"injectables/FilesService.html":{},"controllers/StorageController.html":{}}}],["ext",{"_index":1526,"title":{},"body":{"classes/DBKeyService.html":{}}}],["extend",{"_index":938,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["extends",{"_index":37,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/DBKeyService.html":{},"classes/DisplayCreateDto.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/RootOfTrustPolicy.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{}}}],["extends#integrity",{"_index":3721,"title":{},"body":{"classes/VCT.html":{}}}],["external",{"_index":444,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["extname",{"_index":1775,"title":{},"body":{"injectables/FilesService.html":{}}}],["extname(file.originalname",{"_index":1781,"title":{},"body":{"injectables/FilesService.html":{}}}],["extract",{"_index":454,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["extractable",{"_index":1552,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["extracterrormessages",{"_index":1952,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extracterrormessages(child",{"_index":1962,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extracterrormessages(error",{"_index":1965,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["extractjwt",{"_index":2113,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":2141,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eyjhbgcioijiuzi1niisinr5cci6ikpxvcj9",{"_index":435,"title":{},"body":{"controllers/AuthController.html":{}}}],["eyjhbgcioijsuzi1niisinr5cci6ikpxvcj9",{"_index":3714,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["failed",{"_index":1174,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["failure",{"_index":3404,"title":{},"body":{"injectables/SessionService.html":{}}}],["failwitherror",{"_index":2123,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fall",{"_index":466,"title":{},"body":{"controllers/AuthController.html":{}}}],["false",{"_index":285,"title":{},"body":{"modules/AppModule.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/VCT.html":{},"miscellaneous/variables.html":{}}}],["false})@isboolean",{"_index":1019,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["false})@isempty",{"_index":3731,"title":{},"body":{"classes/VCT.html":{}}}],["family_name",{"_index":2471,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["fatal",{"_index":261,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["fd3ebf28",{"_index":2013,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["fetch",{"_index":2785,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fetched",{"_index":3139,"title":{},"body":{"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["fields",{"_index":2645,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["file#asynchronous",{"_index":292,"title":{},"body":{"modules/AppModule.html":{}}}],["file.buffer",{"_index":1791,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.jwt",{"_index":3507,"title":{},"body":{"injectables/StatusListService.html":{}}}],["file.mimetype",{"_index":1792,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.originalname",{"_index":1794,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.replace(\".json",{"_index":1143,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["file.stack.pop",{"_index":3511,"title":{},"body":{"injectables/StatusListService.html":{}}}],["file_storage",{"_index":1741,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["fileentity",{"_index":1702,"title":{"entities/FileEntity.html":{}},"body":{"entities/FileEntity.html":{},"injectables/FilesService.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["fileinterceptor",{"_index":3555,"title":{},"body":{"controllers/StorageController.html":{}}}],["filerepository",{"_index":1754,"title":{},"body":{"injectables/FilesService.html":{}}}],["files",{"_index":1138,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["files.service",{"_index":3559,"title":{},"body":{"controllers/StorageController.html":{},"modules/StorageModule.html":{}}}],["filesservice",{"_index":1748,"title":{"injectables/FilesService.html":{}},"body":{"injectables/FilesService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["filestorage",{"_index":1708,"title":{"interfaces/FileStorage.html":{}},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["fileuploaddto",{"_index":1743,"title":{"classes/FileUploadDto.html":{}},"body":{"classes/FileUploadDto.html":{},"controllers/StorageController.html":{},"coverage.html":{}}}],["fileuploaddto})@post",{"_index":3549,"title":{},"body":{"controllers/StorageController.html":{}}}],["fill(0",{"_index":3489,"title":{},"body":{"injectables/StatusListService.html":{}}}],["filter((tenant",{"_index":1129,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["finally",{"_index":3009,"title":{},"body":{"injectables/ResolverService.html":{}}}],["find",{"_index":3651,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["findonebyorfail",{"_index":1380,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["findoptionswhere",{"_index":3352,"title":{},"body":{"injectables/SessionService.html":{}}}],["findtenantbyid",{"_index":3638,"title":{},"body":{"injectables/TenantService.html":{}}}],["findtenantbyid(tenantid",{"_index":3649,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["first",{"_index":1549,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/ResolverService.html":{}}}],["firstvaluefrom",{"_index":2788,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["firstvaluefrom(this.httpservice.get(uri)).then",{"_index":2817,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["fixed",{"_index":2012,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["flag",{"_index":3702,"title":{},"body":{"interfaces/TokenPayload.html":{}}}],["flow",{"_index":362,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["flow_complete",{"_index":3298,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_error",{"_index":3299,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flow_start",{"_index":3296,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["flowtype",{"_index":2563,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["folder",{"_index":251,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["forbiddenexception",{"_index":3671,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["forbidnonwhitelisted",{"_index":1162,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["forbidunknownvalues",{"_index":1157,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["force",{"_index":1123,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["forcepathstyle",{"_index":3600,"title":{},"body":{"modules/StorageModule.html":{}}}],["format",{"_index":25,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EC_Public.html":{},"classes/FileUploadDto.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/ResolverService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["formats",{"_index":3835,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["forroot",{"_index":2209,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["forwardref",{"_index":2534,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{}}}],["found",{"_index":803,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionPipe.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["foundation",{"_index":170,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"properties.html":{}}}],["free",{"_index":3465,"title":{},"body":{"injectables/StatusListService.html":{}}}],["fresh",{"_index":2619,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["fs",{"_index":1115,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["fullpath",{"_index":2272,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["function",{"_index":2250,"title":{},"body":{"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":3998,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":3106,"title":{},"body":{"entities/Session.html":{}}}],["g",{"_index":2575,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["gauge",{"_index":3337,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["generate",{"_index":1477,"title":{},"body":{"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/OAuthService.html":{},"controllers/PresentationManagementController.html":{}}}],["generateaccesstoken",{"_index":2391,"title":{},"body":{"injectables/OAuthService.html":{}}}],["generateaccesstoken(clientid",{"_index":2400,"title":{},"body":{"injectables/OAuthService.html":{}}}],["generated",{"_index":1470,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["generated/client.gen",{"_index":2912,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["generatekeypair",{"_index":1402,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["generatekeypair(\"ecdh",{"_index":1686,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["generates",{"_index":1406,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/Oid4vpService.html":{}}}],["generatesalt",{"_index":1310,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["generatetoken",{"_index":1817,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generatetoken(payload",{"_index":2090,"title":{},"body":{"injectables/JwtService.html":{}}}],["generatetokenoptions",{"_index":1808,"title":{"interfaces/GenerateTokenOptions.html":{}},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["generation",{"_index":1819,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["generic",{"_index":1398,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/KeyService.html":{},"injectables/SessionLoggerService.html":{}}}],["get(\".well",{"_index":494,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(\":id",{"_index":3171,"title":{},"body":{"controllers/SessionController.html":{}}}],["get(\":key",{"_index":3564,"title":{},"body":{"controllers/StorageController.html":{}}}],["get(\"jwks.json",{"_index":3820,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"oauth",{"_index":3817,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"openid",{"_index":3815,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get(\"schema/:id",{"_index":1281,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get(\"status",{"_index":3426,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/TenantController.html":{}}}],["get(\"vct/:id",{"_index":1277,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('.well",{"_index":350,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(':key",{"_index":3543,"title":{},"body":{"controllers/StorageController.html":{}}}],["get('oauth",{"_index":3793,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["get('schema/:id",{"_index":1270,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get('session",{"_index":2507,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["get('status",{"_index":3420,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/TenantController.html":{}}}],["get('vct/:id",{"_index":1273,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["get()@healthcheck",{"_index":1853,"title":{},"body":{"controllers/HealthController.html":{}}}],["get()@sessionlogger('session",{"_index":2517,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["get(state",{"_index":3348,"title":{},"body":{"injectables/SessionService.html":{}}}],["get(tenantid",{"_index":1095,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/DisplayService.html":{}}}],["getalg",{"_index":1422,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getall",{"_index":3331,"title":{},"body":{"injectables/SessionService.html":{}}}],["getallsessions",{"_index":3149,"title":{},"body":{"controllers/SessionController.html":{}}}],["getauthorizationserver",{"_index":730,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["getauthorizationserver(tenantid",{"_index":745,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["getauthzmetadata",{"_index":3825,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getauthzmetadata(session",{"_index":3829,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getby",{"_index":800,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["getby(where",{"_index":3351,"title":{},"body":{"injectables/SessionService.html":{}}}],["getbyid",{"_index":1079,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getbyid(tenantid",{"_index":1098,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["getcertificate",{"_index":1462,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getcertificate(tenantid",{"_index":1499,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getconfigs",{"_index":1236,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(@token",{"_index":1258,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfigs(user",{"_index":1241,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["getconfiguration",{"_index":2295,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getcredential",{"_index":1285,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredential(credentialconfigurationid",{"_index":1294,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfigurationsupported",{"_index":1286,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcredentialconfigurationsupported(session",{"_index":1300,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getcrypto",{"_index":1423,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getcrypto(alg",{"_index":1430,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["getdisplay",{"_index":1606,"title":{},"body":{"controllers/DisplayController.html":{}}}],["getdisplay(@token",{"_index":1617,"title":{},"body":{"controllers/DisplayController.html":{}}}],["getdisplay(user",{"_index":1611,"title":{},"body":{"controllers/DisplayController.html":{}}}],["getdownloadurl",{"_index":1751,"title":{},"body":{"injectables/FilesService.html":{}}}],["getdownloadurl(key",{"_index":1761,"title":{},"body":{"injectables/FilesService.html":{}}}],["getencryptionpublickey",{"_index":1668,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getencryptionpublickey(tenantid",{"_index":1679,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["getexistingrp",{"_index":2868,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getexistingrp(name",{"_index":2885,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["getexternaloidcconfig",{"_index":2096,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getexternaloidcconfig(configservice",{"_index":2101,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getglobaljwks",{"_index":346,"title":{},"body":{"controllers/AuthController.html":{}}}],["getheadersfromrequest",{"_index":770,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["getheadersfromrequest(req",{"_index":810,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"miscellaneous/functions.html":{}}}],["getintegratedoauth2config",{"_index":2097,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getintegratedoauth2config(configservice",{"_index":2105,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["getissuanceconfiguration",{"_index":1921,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfiguration(tenantid",{"_index":1930,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid",{"_index":1922,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurationbyid(issuanceconfigid",{"_index":1932,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["getissuanceconfigurations",{"_index":1905,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(@token",{"_index":1914,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuanceconfigurations(user",{"_index":1908,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["getissuermetadata",{"_index":3826,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getissuermetadata(session",{"_index":3831,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getjwks",{"_index":3792,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["getjwks(@sessionentity",{"_index":3821,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(session",{"_index":3795,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["getjwks(tenantid",{"_index":3840,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["getkeys",{"_index":2170,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkeys(@token",{"_index":2187,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkeys(token",{"_index":2176,"title":{},"body":{"controllers/KeyController.html":{}}}],["getkid",{"_index":1455,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getkid(tenantid",{"_index":1471,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getlist",{"_index":3418,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlist(@param(\"tenantid",{"_index":3428,"title":{},"body":{"controllers/StatusListController.html":{}}}],["getlist(tenantid",{"_index":3419,"title":{},"body":{"controllers/StatusListController.html":{},"injectables/StatusListService.html":{}}}],["getlogformat",{"_index":2296,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getloglevel",{"_index":2297,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["getoauth2token",{"_index":348,"title":{},"body":{"controllers/AuthController.html":{}}}],["getoauth2token(body",{"_index":369,"title":{},"body":{"controllers/AuthController.html":{}}}],["getobjectcommand",{"_index":3057,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["getoffer",{"_index":1983,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoffer(res",{"_index":1984,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["getoidcdiscovery",{"_index":349,"title":{},"body":{"controllers/AuthController.html":{}}}],["getorthrow(\"public_url",{"_index":2072,"title":{},"body":{"modules/IssuerModule.html":{},"injectables/RegistrarService.html":{}}}],["getpresentationconfig",{"_index":2746,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfig(id",{"_index":2761,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs",{"_index":2747,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getpresentationconfigs(tenantid",{"_index":2763,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["getprivatekey",{"_index":1456,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getprivatekey(tenantid",{"_index":1475,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpubfromprivatekey",{"_index":1457,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpubfromprivatekey(privatekey",{"_index":1479,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getpublickey",{"_index":1458,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getpublickey(type",{"_index":1483,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["getrepositorytoken",{"_index":2213,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrepositorytoken(certentity",{"_index":2228,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrepositorytoken(keyentity",{"_index":2229,"title":{},"body":{"modules/KeyModule.html":{}}}],["getrequestwithsession",{"_index":2514,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(@sessionentity",{"_index":2526,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getrequestwithsession(session",{"_index":2516,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["getresponse",{"_index":2515,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["getresponse(body",{"_index":2520,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{}}}],["gets",{"_index":1473,"title":{},"body":{"classes/DBKeyService.html":{}}}],["getschema",{"_index":1287,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschema(credentialconfigurationid",{"_index":1302,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getschemapath",{"_index":119,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["getschemapath(allowlistpolicy",{"_index":1050,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["getschemapath(attestationbasedpolicy",{"_index":1048,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["getschemapath(authenticationmethodauth",{"_index":1897,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["getschemapath(authenticationmethodnone",{"_index":1896,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["getschemapath(authenticationmethodpresentation",{"_index":1898,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["getschemapath(nonetrustpolicy",{"_index":1049,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["getschemapath(rootoftrustpolicy",{"_index":1051,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["getschemapath(webhookauthconfigheader",{"_index":151,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["getschemapath(webhookauthconfignone",{"_index":150,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["getsession",{"_index":3150,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(@param(\"id",{"_index":3172,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsession(session",{"_index":3155,"title":{},"body":{"controllers/SessionController.html":{}}}],["getsignedurl",{"_index":1710,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsignedurl(key",{"_index":1717,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getsignedurl?(key",{"_index":1739,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["getsigner",{"_index":1403,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getsigner(privatekeyjwk",{"_index":1408,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["getstream",{"_index":1711,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["getstream(key",{"_index":1719,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["gettenants",{"_index":3639,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["gettenantstatus",{"_index":3609,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{}}}],["gettenantstatus(@token",{"_index":3628,"title":{},"body":{"controllers/TenantController.html":{}}}],["gettenantstatus(id",{"_index":3653,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["gettenantstatus(user",{"_index":3613,"title":{},"body":{"controllers/TenantController.html":{}}}],["getting",{"_index":1215,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["gettoken",{"_index":2362,"title":{},"body":{"controllers/OAuthController.html":{}}}],["gettoken(tokenrequest",{"_index":2363,"title":{},"body":{"controllers/OAuthController.html":{}}}],["getvct",{"_index":1288,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getvct(credentialid",{"_index":1304,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["getverifier",{"_index":1404,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["getverifier(publickeyjwk",{"_index":1413,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["given",{"_index":1091,"title":{},"body":{"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"classes/KeyService.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["given_name",{"_index":2019,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["global",{"_index":358,"title":{},"body":{"controllers/AuthController.html":{},"modules/CryptoImplementatationModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["globalthis.headers",{"_index":4003,"title":{},"body":{"miscellaneous/functions.html":{}}}],["grant",{"_index":449,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"controllers/OAuthController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/TokenRequestDto.html":{}}}],["grant_type",{"_index":429,"title":{},"body":{"controllers/AuthController.html":{},"classes/TokenRequestDto.html":{}}}],["grant_types_supported",{"_index":504,"title":{},"body":{"controllers/AuthController.html":{}}}],["granttype",{"_index":773,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["graph",{"_index":4013,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":2346,"title":{},"body":{"modules/MetricModule.html":{}}}],["handle",{"_index":658,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/WellKnownService.html":{}}}],["handleclientcredentialsgrant",{"_index":2392,"title":{},"body":{"injectables/OAuthService.html":{}}}],["handleclientcredentialsgrant(request",{"_index":2402,"title":{},"body":{"injectables/OAuthService.html":{}}}],["handled",{"_index":1838,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["handler",{"_index":3196,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["handles",{"_index":646,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["handlesigningkeyerror",{"_index":2134,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["handling",{"_index":1664,"title":{},"body":{"injectables/EncryptionService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["hasclient",{"_index":2393,"title":{},"body":{"injectables/OAuthService.html":{}}}],["hasclient(clientid",{"_index":2404,"title":{},"body":{"injectables/OAuthService.html":{}}}],["hash",{"_index":4052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hashalg",{"_index":1357,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hasher",{"_index":1356,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["hasresponsedata",{"_index":3773,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["haswebhook",{"_index":2642,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["head",{"_index":3073,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.contentlength",{"_index":3079,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.contenttype",{"_index":3080,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["head.etag",{"_index":3078,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["header",{"_index":114,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{}}}],["header(\"content",{"_index":3427,"title":{},"body":{"controllers/StatusListController.html":{},"controllers/WellKnownController.html":{}}}],["header('content",{"_index":3796,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["header.kid",{"_index":3037,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c",{"_index":3015,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header.x5c.map",{"_index":3018,"title":{},"body":{"injectables/ResolverService.html":{}}}],["header[\"jwk",{"_index":3027,"title":{},"body":{"injectables/ResolverService.html":{}}}],["headername",{"_index":111,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["headers",{"_index":317,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["headers.authorization",{"_index":456,"title":{},"body":{"controllers/AuthController.html":{}}}],["headers[session.claimswebhook!.auth.config.headername",{"_index":3755,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["headers[webhook.auth.config.headername",{"_index":3780,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["headobjectcommand",{"_index":3058,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["health",{"_index":1846,"title":{},"body":{"controllers/HealthController.html":{}}}],["health.controller",{"_index":1864,"title":{},"body":{"modules/HealthModule.html":{}}}],["health/health.module",{"_index":233,"title":{},"body":{"modules/AppModule.html":{}}}],["healthcheck",{"_index":1855,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcheckservice",{"_index":1849,"title":{},"body":{"controllers/HealthController.html":{}}}],["healthcontroller",{"_index":1844,"title":{"controllers/HealthController.html":{}},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"coverage.html":{}}}],["healthmodule",{"_index":187,"title":{"modules/HealthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/HealthModule.html":{},"index.html":{},"modules.html":{}}}],["help",{"_index":577,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{}}}],["here",{"_index":3849,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["hh:mm:ss",{"_index":306,"title":{},"body":{"modules/AppModule.html":{}}}],["holdercnf",{"_index":1295,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["host",{"_index":1382,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/DatabaseModule.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["hostname",{"_index":2585,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${session.id}/oid4vp",{"_index":2589,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${session.tenantid",{"_index":2571,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["host}/${tenantid}/credentials",{"_index":1384,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["hot",{"_index":2319,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["hour",{"_index":2429,"title":{},"body":{"injectables/OAuthService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["hours",{"_index":492,"title":{},"body":{"controllers/AuthController.html":{},"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["hs256",{"_index":1827,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["http",{"_index":2324,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["httpmethod",{"_index":762,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["httpmodule",{"_index":2049,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"modules/VerifierModule.html":{}}}],["https://${this.bucket}.s3.amazonaws.com/${encodeuri(key",{"_index":3077,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["https://github.com/iamolegga/nestjs",{"_index":289,"title":{},"body":{"modules/AppModule.html":{}}}],["https://github.com/openwallet",{"_index":4020,"title":{},"body":{"properties.html":{}}}],["https://json",{"_index":3098,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["https://openid.net/specs/openid",{"_index":939,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["https://openwallet",{"_index":169,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["httpservice",{"_index":2212,"title":{},"body":{"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["iat",{"_index":516,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["id",{"_index":16,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TokenRequestDto.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["id_token_signing_alg_values_supported",{"_index":509,"title":{},"body":{"controllers/AuthController.html":{}}}],["identifier",{"_index":27,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"classes/DCQL.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"classes/RegistrationCertificateRequest.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"entities/TenantEntity.html":{},"classes/TokenRequestDto.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["ids",{"_index":1070,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["idx",{"_index":3510,"title":{},"body":{"injectables/StatusListService.html":{}}}],["ignore",{"_index":307,"title":{},"body":{"modules/AppModule.html":{}}}],["ignoreexpiration",{"_index":2146,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["image",{"_index":2031,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png",{"_index":2004,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["image/png')@apibody({type",{"_index":1990,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["image/png')@useguards(jwtauthguard)@apisecurity('oauth2')@apibody({type",{"_index":2697,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["images",{"_index":3552,"title":{},"body":{"controllers/StorageController.html":{}}}],["imeplement",{"_index":1399,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation",{"_index":1432,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/OAuthService.html":{}}}],["implementation.module",{"_index":229,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{}}}],["implementation.module.ts",{"_index":1393,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["implementation.service",{"_index":1319,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{}}}],["implementation.service.ts",{"_index":1421,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.service.ts:10",{"_index":1425,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:17",{"_index":1427,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.service.ts:26",{"_index":1431,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["implementation.ts",{"_index":1397,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["implementation.ts:19",{"_index":1405,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:24",{"_index":1410,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation.ts:29",{"_index":1414,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["implementation/crypto",{"_index":228,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/KeyModule.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["implementation/ed25519.ts",{"_index":3892,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["implements",{"_index":130,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/EC_Public.html":{},"injectables/IssuanceService.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/LocalFileStorage.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["import",{"_index":49,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["import(tenantid",{"_index":1487,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["import.dto",{"_index":1512,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/UpdateKeyDto.html":{}}}],["import.dto.ts",{"_index":2155,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"coverage.html":{}}}],["import.dto.ts:11",{"_index":2163,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:13",{"_index":2164,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:15",{"_index":2158,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:17",{"_index":2159,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:19",{"_index":2157,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:31",{"_index":2207,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:38",{"_index":2205,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:45",{"_index":2206,"title":{},"body":{"classes/KeyImportDto.html":{}}}],["import.dto.ts:7",{"_index":2160,"title":{},"body":{"classes/Key.html":{}}}],["import.dto.ts:9",{"_index":2162,"title":{},"body":{"classes/Key.html":{}}}],["imported",{"_index":1185,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["importerror",{"_index":1182,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["importing",{"_index":2166,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["importjwk",{"_index":1505,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{}}}],["importjwk(keyentity.key",{"_index":1695,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["importjwk(payload.cnf.jwk",{"_index":2821,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["importjwk(privatekey",{"_index":1557,"title":{},"body":{"classes/DBKeyService.html":{}}}],["imports",{"_index":201,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/CredentialConfigService.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{}}}],["include",{"_index":472,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{}}}],["included",{"_index":1882,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["includes",{"_index":2546,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["including",{"_index":2860,"title":{},"body":{"injectables/RegistrarService.html":{},"interfaces/SessionLogContext.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexable",{"_index":3179,"title":{},"body":{"interfaces/SessionLogContext.html":{},"classes/WebhookResponse.html":{}}}],["indexes",{"_index":3440,"title":{},"body":{"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["indicates",{"_index":29,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["indicating",{"_index":2725,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["information",{"_index":168,"title":{},"body":{"controllers/AppController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"controllers/IssuerManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["inherited",{"_index":65,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/DBKeyService.html":{},"classes/NoneTrustPolicy.html":{},"classes/RootOfTrustPolicy.html":{}}}],["init",{"_index":1459,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"controllers/TenantController.html":{}}}],["init(tenant",{"_index":1490,"title":{},"body":{"classes/DBKeyService.html":{}}}],["init(tenantid",{"_index":2246,"title":{},"body":{"classes/KeyService.html":{}}}],["init.dto",{"_index":3618,"title":{},"body":{"controllers/TenantController.html":{}}}],["init.dto.ts",{"_index":975,"title":{},"body":{"classes/ClientInitDto.html":{},"coverage.html":{}}}],["init.dto.ts:6",{"_index":977,"title":{},"body":{"classes/ClientInitDto.html":{}}}],["initialization",{"_index":3297,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["initialize",{"_index":1492,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/functions.html":{}}}],["initializeclients",{"_index":2394,"title":{},"body":{"injectables/OAuthService.html":{}}}],["initialized",{"_index":2248,"title":{},"body":{"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["initializes",{"_index":1255,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["inittenant",{"_index":3610,"title":{},"body":{"controllers/TenantController.html":{},"injectables/TenantService.html":{}}}],["inittenant(@token",{"_index":3621,"title":{},"body":{"controllers/TenantController.html":{}}}],["inittenant(id",{"_index":3655,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["inittenant(user",{"_index":3615,"title":{},"body":{"controllers/TenantController.html":{}}}],["inject",{"_index":280,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["inject(\"keyservice",{"_index":2186,"title":{},"body":{"controllers/KeyController.html":{}}}],["inject(file_storage",{"_index":1778,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectable",{"_index":33,"title":{"injectables/AdminAuthGuard.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["injectables",{"_index":35,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoggerConfigService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"index.html":{}}}],["injectmetric",{"_index":3369,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["injectmetric(\"sessions",{"_index":3377,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectmetric(\"tenant_total",{"_index":3674,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["injectrepository",{"_index":1111,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["injectrepository(credentialconfig",{"_index":1118,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{}}}],["injectrepository(displayentity",{"_index":1642,"title":{},"body":{"injectables/DisplayService.html":{}}}],["injectrepository(fileentity",{"_index":1779,"title":{},"body":{"injectables/FilesService.html":{}}}],["injectrepository(issuanceconfig",{"_index":1942,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["injectrepository(keyentity",{"_index":1685,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["injectrepository(presentationconfig",{"_index":2792,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["injectrepository(registrarentity",{"_index":2914,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["injectrepository(session",{"_index":3376,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(statuslistentity",{"_index":3484,"title":{},"body":{"injectables/StatusListService.html":{}}}],["injectrepository(statusmapping",{"_index":3483,"title":{},"body":{"injectables/StatusListService.html":{}}}],["injectrepository(tenantentity",{"_index":3673,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["instance",{"_index":1053,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["instance.decode(`${data}.${signature",{"_index":2809,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["instanceof",{"_index":2139,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalFileStorage.html":{}}}],["instantiate",{"_index":1007,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["instead",{"_index":96,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/JwtStrategy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["insufficient_authorization",{"_index":854,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["int",{"_index":3527,"title":{},"body":{"entities/StatusMapping.html":{}}}],["integrated",{"_index":1816,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["integration",{"_index":3670,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["intended",{"_index":1655,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["interact",{"_index":4017,"title":{},"body":{"properties.html":{}}}],["interacting",{"_index":2902,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["interaction",{"_index":2859,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["intercept",{"_index":3188,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercept(context",{"_index":3191,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interceptor",{"_index":3186,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["intercepts",{"_index":3194,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["interface",{"_index":0,"title":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthenticationMethodInterface.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"interfaces/AuthResponse.html":{},"interfaces/AuthenticationMethodInterface.html":{},"interfaces/CryptoImplementation.html":{},"interfaces/FileStorage.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"interfaces/LoggerConfiguration.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"index.html":{}}}],["interval",{"_index":3381,"title":{},"body":{"injectables/SessionService.html":{}}}],["intervaltime",{"_index":3379,"title":{},"body":{"injectables/SessionService.html":{}}}],["invalid",{"_index":378,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["is_public_key",{"_index":2082,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isabsolute",{"_index":219,"title":{},"body":{"modules/AppModule.html":{}}}],["isabsolute(folder",{"_index":335,"title":{},"body":{"modules/AppModule.html":{}}}],["isarray",{"_index":71,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuanceDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isarray()@isoptional",{"_index":926,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/OfferRequestDto.html":{}}}],["isarray()@isoptional()@validatenested({each",{"_index":1225,"title":{},"body":{"classes/CredentialQuery.html":{},"classes/DCQL.html":{}}}],["isarray()@isstring({each",{"_index":3717,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["isarray()@validatenested({each",{"_index":1561,"title":{},"body":{"classes/DCQL.html":{}}}],["isboolean",{"_index":929,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isboolean()@isoptional",{"_index":1230,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["isboolean()@isoptional()@column('boolean",{"_index":1885,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["isdebugmodeenabled",{"_index":2298,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isdefined",{"_index":72,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/CredentialConfigService.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isdefined()@isarray()@validatenested({each",{"_index":341,"title":{},"body":{"classes/AttestationBasedPolicy.html":{},"classes/PolicyCredential.html":{}}}],["isdefined()@isstring",{"_index":3041,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["isdefined()@isstring({each",{"_index":67,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["isempty",{"_index":3733,"title":{},"body":{"classes/VCT.html":{}}}],["isenabled",{"_index":2869,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["isenum",{"_index":121,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isenum([\"credential_accepted",{"_index":2358,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum([\"ec",{"_index":2165,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["isenum(['credential_accepted",{"_index":2356,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["isenum(['ec",{"_index":2161,"title":{},"body":{"classes/Key.html":{}}}],["isenum(authconfig",{"_index":139,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isenum(responsetype",{"_index":2469,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{}}}],["isglobal",{"_index":277,"title":{},"body":{"modules/AppModule.html":{}}}],["ishttploggerenabled",{"_index":2299,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isin",{"_index":73,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isin([\"aki",{"_index":947,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isin([\"allowlist",{"_index":87,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin([\"attestationbased",{"_index":104,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin([\"auth",{"_index":624,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isin([\"client_credentials",{"_index":3708,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["isin([\"none",{"_index":98,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin([\"presentationduringissuance",{"_index":623,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["isin([\"rootoftrust",{"_index":91,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["isin(['undefined'])@isstring",{"_index":3740,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{}}}],["isin([0",{"_index":3538,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isin([authconfig.api_key",{"_index":132,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isin([authconfig.none",{"_index":137,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isnotempty",{"_index":930,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isnull",{"_index":3372,"title":{},"body":{"injectables/SessionService.html":{}}}],["isnumber",{"_index":931,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["isnumber()@isin(['0",{"_index":3536,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["isnumber()@isoptional()@column('int",{"_index":1873,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["isobject",{"_index":122,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isobject()@isoptional",{"_index":2723,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["isobject()@validatenested()@type(undefined",{"_index":603,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"classes/AuthenticationMethodPresentation.html":{}}}],["isoptional",{"_index":74,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{}}}],["isoptional()@column('boolean",{"_index":1018,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@column('int",{"_index":1022,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@isarray()@validatenested()@type(undefined)@column('json",{"_index":2668,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["isoptional()@isarray()@validatenested({each",{"_index":2660,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["isoptional()@isboolean",{"_index":1223,"title":{},"body":{"classes/CredentialQuery.html":{}}}],["isoptional()@isstring",{"_index":716,"title":{},"body":{"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{}}}],["isoptional()@isstring({each",{"_index":2664,"title":{},"body":{"classes/PresentationAttachment.html":{}}}],["isoptional()@validatenested()@apiproperty({oneof",{"_index":997,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["isoptional()@validatenested()@type(undefined",{"_index":634,"title":{},"body":{"classes/AuthenticationUrlConfig.html":{}}}],["isoptional()@validatenested()@type(undefined)@column('json",{"_index":1026,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"entities/PresentationConfig.html":{}}}],["ispublic",{"_index":1766,"title":{},"body":{"injectables/FilesService.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["iss",{"_index":513,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["issessionloggerenabled",{"_index":2300,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["isstring",{"_index":75,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["isstring()@column('varchar",{"_index":994,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["isstring()@isin(['aki",{"_index":3715,"title":{},"body":{"classes/TrustedAuthorityQuery.html":{}}}],["isstring()@isin(['allowlist",{"_index":64,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["isstring()@isin(['attestationbased",{"_index":339,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["isstring()@isin(['auth",{"_index":605,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{}}}],["isstring()@isin(['none",{"_index":628,"title":{},"body":{"classes/AuthenticationMethodNone.html":{},"classes/NoneTrustPolicy.html":{}}}],["isstring()@isin(['presentationduringissuance",{"_index":631,"title":{},"body":{"classes/AuthenticationMethodPresentation.html":{}}}],["isstring()@isin(['rootoftrust",{"_index":3039,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["isstring()@isoptional",{"_index":976,"title":{},"body":{"classes/ClientInitDto.html":{},"classes/KeyImportDto.html":{},"classes/StatusUpdateDto.html":{}}}],["isstring()@isoptional()@column('varchar",{"_index":1883,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["issuance",{"_index":620,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["issuance.credentialconfigs",{"_index":1015,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["issuance.service",{"_index":1913,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["issuance/credentials",{"_index":1122,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["issuance/entities/issuance",{"_index":1037,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{}}}],["issuance/issuance",{"_index":1946,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuance/issuance.controller",{"_index":2063,"title":{},"body":{"modules/IssuerModule.html":{}}}],["issuance/issuance.service",{"_index":769,"title":{},"body":{"injectables/AuthorizeService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig",{"_index":811,"title":{"entities/IssuanceConfig.html":{}},"body":{"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["issuanceconfig.authenticationconfig",{"_index":871,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig.claimswebhook",{"_index":875,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfig.credentialconfigs.find",{"_index":1331,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuanceconfig.dpoprequired",{"_index":821,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["issuanceconfigid",{"_index":1934,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuanceconfigrepo",{"_index":1927,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["issuanceconfigs",{"_index":981,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["issuancecontroller",{"_index":1902,"title":{"controllers/IssuanceController.html":{}},"body":{"controllers/IssuanceController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuancecounter",{"_index":3390,"title":{},"body":{"injectables/SessionService.html":{}}}],["issuancedto",{"_index":1067,"title":{"classes/IssuanceDto.html":{}},"body":{"classes/CredentialConfigMapping.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"coverage.html":{}}}],["issuanceid",{"_index":869,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["issuanceservice",{"_index":739,"title":{"injectables/IssuanceService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"index.html":{}}}],["issue",{"_index":2481,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["issued",{"_index":366,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/WellKnownService.html":{}}}],["issuer",{"_index":497,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["issuer/authorize/authorize.service",{"_index":3842,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["issuer/authorize/dto/authorize",{"_index":3138,"title":{},"body":{"entities/Session.html":{}}}],["issuer/issuer.module",{"_index":235,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["issuer/oid4vci/dto/offer",{"_index":2555,"title":{},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{}}}],["issuer/oid4vci/oid4vci.service",{"_index":1996,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/Oid4vciController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{}}}],["issuer/status",{"_index":543,"title":{},"body":{"modules/AuthModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["issuer_state",{"_index":711,"title":{},"body":{"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["issuer_validation_schema",{"_index":234,"title":{},"body":{"modules/AppModule.html":{},"modules/IssuerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["issuermanagementcontroller",{"_index":1979,"title":{"controllers/IssuerManagementController.html":{}},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["issuermetadata",{"_index":2034,"title":{"interfaces/IssuerMetadata.html":{}},"body":{"interfaces/IssuerMetadata.html":{},"injectables/ResolverService.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["issuermetadata(session",{"_index":3800,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["issuermetadatacredentialconfig",{"_index":991,"title":{"classes/IssuerMetadataCredentialConfig.html":{}},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"coverage.html":{}}}],["issuermodule",{"_index":188,"title":{"modules/IssuerModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"index.html":{},"modules.html":{}}}],["issues",{"_index":1297,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["issuing",{"_index":3302,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["isused",{"_index":1330,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["isused?.id",{"_index":1341,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["isusingexternaloidc",{"_index":1842,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["isuuid",{"_index":2468,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["isuuid()@isoptional",{"_index":2465,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["isverified",{"_index":4065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["it's",{"_index":3765,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["item.name",{"_index":2958,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["items",{"_index":954,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["iterate",{"_index":1133,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["itself",{"_index":3623,"title":{},"body":{"controllers/TenantController.html":{}}}],["job",{"_index":3359,"title":{},"body":{"injectables/SessionService.html":{}}}],["joi",{"_index":213,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/OAuthModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["joi.boolean().default(false",{"_index":266,"title":{},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.boolean().when(joi.ref(\"storage_driver",{"_index":3592,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.exist",{"_index":2854,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().default(24",{"_index":3315,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().default(60",{"_index":3313,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["joi.number().when(\"db_type",{"_index":1575,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.object",{"_index":250,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.optional",{"_index":1572,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.required",{"_index":1573,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/RegistrarModule.html":{},"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string",{"_index":256,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"../../assets/config",{"_index":269,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"../../tmp",{"_index":252,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"24h",{"_index":570,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"azp",{"_index":562,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"eudiplo",{"_index":254,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().default(\"http://localhost:3000",{"_index":2069,"title":{},"body":{"modules/IssuerModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(\"rs256",{"_index":564,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default((parent",{"_index":3583,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(default_auth_client_id",{"_index":574,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(default_auth_client_secret",{"_index":572,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().default(default_jwt_secret",{"_index":566,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().optional",{"_index":556,"title":{},"body":{"modules/AuthModule.html":{},"modules/OAuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().optional().default(\"eudiplo",{"_index":568,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":559,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().uri().when(\"km_type",{"_index":2223,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"db",{"_index":2218,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"es256\").default(\"es256",{"_index":1395,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"local",{"_index":3579,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().valid(\"sqlite",{"_index":1567,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(\"db_type",{"_index":1570,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(\"km_type",{"_index":2225,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(\"registrar_url",{"_index":2853,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["joi.string().when(joi.ref(\"storage_driver",{"_index":3582,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["joi.when(\"oidc",{"_index":558,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["join",{"_index":220,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"modules/DatabaseModule.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{}}}],["join(__dirname",{"_index":337,"title":{},"body":{"modules/AppModule.html":{}}}],["join(configpath",{"_index":1136,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["join(folder",{"_index":336,"title":{},"body":{"modules/AppModule.html":{}}}],["join(parent.folder",{"_index":3584,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["join(this.basedir",{"_index":2273,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["jointable",{"_index":1891,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["jose",{"_index":1506,"title":{},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"dependencies.html":{}}}],["joseheaderparameters",{"_index":2251,"title":{},"body":{"classes/KeyService.html":{}}}],["json",{"_index":276,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/SchemaResponse.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["json.parse",{"_index":1140,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["json.stringify",{"_index":3145,"title":{},"body":{"entities/Session.html":{}}}],["json.stringify(data",{"_index":3233,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["json.stringify(presentationconfig.dcql_query).replace",{"_index":2574,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["json.stringify(presentationconfig.registrationcert).replace",{"_index":2577,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jsonwebkey",{"_index":1409,"title":{},"body":{"interfaces/CryptoImplementation.html":{}}}],["jwe",{"_index":1676,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwk",{"_index":763,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"miscellaneous/variables.html":{}}}],["jwk_ec_private",{"_index":1480,"title":{},"body":{"classes/DBKeyService.html":{}}}],["jwk_ec_public",{"_index":1649,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{}}}],["jwks",{"_index":359,"title":{},"body":{"controllers/AuthController.html":{},"classes/EC_Public.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["jwks_uri",{"_index":500,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["jwksrequestsperminute",{"_index":2132,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwksresponsedto",{"_index":1661,"title":{"classes/JwksResponseDto.html":{}},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["jwksuri",{"_index":2127,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwt",{"_index":824,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["jwt.service",{"_index":415,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["jwt.setaudience(options.audience",{"_index":1834,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.sign(secretkey",{"_index":1835,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwt.strategy",{"_index":550,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt/crypto",{"_index":1312,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["jwt/jwt",{"_index":1315,"title":{},"body":{"injectables/CredentialsService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt/sd",{"_index":1317,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt/types",{"_index":1501,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["jwt_alg_values",{"_index":2597,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["jwt_expires_in",{"_index":569,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["jwt_issuer",{"_index":567,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["jwt_secret",{"_index":565,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":533,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"modules/AuthModule.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"coverage.html":{},"index.html":{}}}],["jwtdecrypt",{"_index":1684,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtdecrypt(response",{"_index":1697,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["jwtfromrequest",{"_index":2104,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtheaderparameters",{"_index":1497,"title":{},"body":{"classes/DBKeyService.html":{}}}],["jwtpayload",{"_index":1496,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{}}}],["jwtservice",{"_index":414,"title":{"injectables/JwtService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{},"index.html":{}}}],["jwtstrategy",{"_index":534,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["jwtstrategy.getexternaloidcconfig(configservice",{"_index":2118,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtstrategy.getintegratedoauth2config(configservice",{"_index":2119,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtverify",{"_index":1810,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/PresentationsService.html":{}}}],["jwtverify(`${data}.${signature",{"_index":2822,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["jwtverify(token",{"_index":1839,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["jwtwithstatuslistpayload",{"_index":1314,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/StatusListService.html":{}}}],["kb",{"_index":1324,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{}}}],["kbverifier",{"_index":2742,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keep",{"_index":1052,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["keepdiscriminatorproperty",{"_index":155,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["key",{"_index":23,"title":{"classes/Key.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/StorageController.html":{},"classes/UpdateKeyDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["key).then",{"_index":2823,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["key.key",{"_index":1544,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.kid",{"_index":3036,"title":{},"body":{"injectables/ResolverService.html":{}}}],["key.service",{"_index":1515,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{}}}],["key.service.ts",{"_index":1452,"title":{},"body":{"classes/DBKeyService.html":{},"coverage.html":{}}}],["key.service.ts:118",{"_index":1476,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:153",{"_index":1485,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:158",{"_index":1486,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:28",{"_index":1465,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key.service.ts:62",{"_index":1481,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key/entities/cert.entity",{"_index":1445,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key/entities/keys.entity",{"_index":1447,"title":{},"body":{"modules/CryptoModule.html":{},"injectables/EncryptionService.html":{}}}],["key/key.controller",{"_index":1448,"title":{},"body":{"modules/CryptoModule.html":{}}}],["key_ops",{"_index":1524,"title":{},"body":{"classes/DBKeyService.html":{}}}],["key_validation_schema",{"_index":230,"title":{},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["keybinding",{"_index":982,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/PresentationsService.html":{}}}],["keybindingnonce",{"_index":2771,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keybindings",{"_index":2783,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["keycloak",{"_index":2138,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycloakissuerurl",{"_index":2125,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycloakissuerurl}/protocol/openid",{"_index":2128,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["keycontroller",{"_index":1442,"title":{"controllers/KeyController.html":{}},"body":{"modules/CryptoModule.html":{},"controllers/KeyController.html":{},"coverage.html":{}}}],["keyentity",{"_index":1446,"title":{"entities/KeyEntity.html":{}},"body":{"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"modules/KeyModule.html":{},"coverage.html":{}}}],["keyid",{"_index":983,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["keyimportdto",{"_index":1488,"title":{"classes/KeyImportDto.html":{}},"body":{"classes/DBKeyService.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["keymodule",{"_index":189,"title":{"modules/KeyModule.html":{}},"body":{"modules/AppModule.html":{},"modules/KeyModule.html":{},"index.html":{},"modules.html":{}}}],["keymodule.forroot",{"_index":328,"title":{},"body":{"modules/AppModule.html":{}}}],["keyobj",{"_index":2230,"title":{"classes/KeyObj.html":{}},"body":{"classes/KeyObj.html":{},"coverage.html":{}}}],["keypair",{"_index":1407,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["keypair.privatekey",{"_index":4057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keypair.publickey",{"_index":4056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["keyrepository",{"_index":1464,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"modules/KeyModule.html":{}}}],["keyresponsedto",{"_index":368,"title":{"classes/KeyResponseDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["keys",{"_index":522,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyResponseDto.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["keys.privatekey",{"_index":1531,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice",{"_index":1454,"title":{"classes/KeyService.html":{}},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"coverage.html":{}}}],["keyservice:109",{"_index":1494,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:136",{"_index":1472,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:152",{"_index":1484,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:195",{"_index":1498,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:46",{"_index":1489,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:77",{"_index":1491,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:85",{"_index":1500,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyservice:86",{"_index":1467,"title":{},"body":{"classes/DBKeyService.html":{}}}],["keyusage",{"_index":2201,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["kid",{"_index":2156,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["km_type",{"_index":2217,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["kmtype",{"_index":2227,"title":{},"body":{"modules/KeyModule.html":{}}}],["know",{"_index":2972,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["known",{"_index":3791,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["known.controller",{"_index":246,"title":{},"body":{"modules/AppModule.html":{}}}],["known.controller.ts",{"_index":3789,"title":{},"body":{"controllers/WellKnownController.html":{},"coverage.html":{}}}],["known.controller.ts:45",{"_index":3804,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:57",{"_index":3794,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.controller.ts:69",{"_index":3799,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["known.service",{"_index":247,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{}}}],["known.service.ts",{"_index":3823,"title":{},"body":{"injectables/WellKnownService.html":{},"coverage.html":{}}}],["known.service.ts:16",{"_index":3828,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:39",{"_index":3832,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:77",{"_index":3830,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known.service.ts:87",{"_index":3841,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["known/dto/credential",{"_index":1192,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"coverage.html":{}}}],["known/dto/jwks",{"_index":1510,"title":{},"body":{"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"coverage.html":{}}}],["known/dto/oauth",{"_index":2441,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"coverage.html":{}}}],["known/jwks.json",{"_index":502,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["known/jwks.json')@apioperation({summary",{"_index":351,"title":{},"body":{"controllers/AuthController.html":{}}}],["known/jwt",{"_index":3030,"title":{},"body":{"injectables/ResolverService.html":{}}}],["known/oauth",{"_index":386,"title":{},"body":{"controllers/AuthController.html":{}}}],["known/openid",{"_index":2924,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["known/well",{"_index":245,"title":{},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["kty",{"_index":1651,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["labelnames",{"_index":3317,"title":{},"body":{"modules/SessionModule.html":{}}}],["labs.github.io/eudiplo/latest",{"_index":171,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["labs/eudiplo.git",{"_index":4024,"title":{},"body":{"properties.html":{}}}],["labs/eudiplo/issues",{"_index":4021,"title":{},"body":{"properties.html":{}}}],["last",{"_index":915,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["later",{"_index":526,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{}}}],["legend",{"_index":176,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["length",{"_index":3234,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"controllers/StorageController.html":{}}}],["lessthan",{"_index":3373,"title":{},"body":{"injectables/SessionService.html":{}}}],["lessthan(new",{"_index":3412,"title":{},"body":{"injectables/SessionService.html":{}}}],["level",{"_index":294,"title":{},"body":{"modules/AppModule.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels",{"_index":2334,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["levels[level.tolowercase",{"_index":2337,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["license",{"_index":4022,"title":{},"body":{"properties.html":{}}}],["lifetime",{"_index":959,"title":{},"body":{"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WellKnownService.html":{}}}],["line",{"_index":2945,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["link",{"_index":618,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["links",{"_index":1880,"title":{},"body":{"entities/IssuanceConfig.html":{}}}],["list",{"_index":1206,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"injectables/CredentialsService.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/PresentationsService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"controllers/StorageController.html":{},"dependencies.html":{}}}],["list')@header('content",{"_index":3421,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.controller",{"_index":3453,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.controller.ts",{"_index":3416,"title":{},"body":{"controllers/StatusListController.html":{},"coverage.html":{}}}],["list.controller.ts:17",{"_index":3423,"title":{},"body":{"controllers/StatusListController.html":{}}}],["list.entity",{"_index":3450,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["list.entity.ts",{"_index":3432,"title":{},"body":{"entities/StatusListEntity.html":{},"coverage.html":{}}}],["list.entity.ts:14",{"_index":3442,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:20",{"_index":3441,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:26",{"_index":3437,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:32",{"_index":3439,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:38",{"_index":3436,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.entity.ts:44",{"_index":3438,"title":{},"body":{"entities/StatusListEntity.html":{}}}],["list.module",{"_index":545,"title":{},"body":{"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/SessionModule.html":{}}}],["list.module.ts",{"_index":3448,"title":{},"body":{"modules/StatusListModule.html":{}}}],["list.service",{"_index":1320,"title":{},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["list.service.ts",{"_index":3455,"title":{},"body":{"injectables/StatusListService.html":{},"coverage.html":{}}}],["list.service.ts:114",{"_index":3468,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:124",{"_index":3464,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:176",{"_index":3476,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:192",{"_index":3478,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:20",{"_index":3462,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:36",{"_index":3470,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:60",{"_index":3469,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list.service.ts:68",{"_index":3467,"title":{},"body":{"injectables/StatusListService.html":{}}}],["list/dto/status",{"_index":3163,"title":{},"body":{"controllers/SessionController.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["list/entities/status",{"_index":3431,"title":{},"body":{"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["list/status",{"_index":544,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["listen",{"_index":3664,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["literal",{"_index":591,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":2644,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["loadconfiguration",{"_index":2301,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loadtenants",{"_index":3640,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["loadtypemetadataformat",{"_index":1361,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["local",{"_index":1740,"title":{},"body":{"interfaces/FileStorage.html":{},"modules/StorageModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["local_storage_dir",{"_index":3581,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["locale",{"_index":1042,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["localfilestorage",{"_index":2255,"title":{"classes/LocalFileStorage.html":{}},"body":{"classes/LocalFileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["log",{"_index":2336,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_debug_mode",{"_index":272,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_enable_http_logger",{"_index":270,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_enable_session_logger",{"_index":271,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["log_format",{"_index":273,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["log_level",{"_index":255,"title":{},"body":{"modules/AppModule.html":{}}}],["logauthorizationrequest",{"_index":3253,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logauthorizationrequest(context",{"_index":3266,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcontext",{"_index":2562,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["logcredentialissuance",{"_index":3254,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialissuance(context",{"_index":3269,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification",{"_index":3255,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logcredentialverification(context",{"_index":3272,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete",{"_index":3256,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowcomplete(context",{"_index":3274,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror",{"_index":3257,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowerror(context",{"_index":3277,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart",{"_index":3258,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logflowstart(context",{"_index":3279,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logformat",{"_index":2328,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["logged",{"_index":3182,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["logger",{"_index":1084,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.decorator",{"_index":2493,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logger.decorator.ts",{"_index":3930,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["logger.interceptor",{"_index":2053,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["logger.interceptor.ts",{"_index":3185,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{}}}],["logger.interceptor.ts:136",{"_index":3201,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:19",{"_index":3190,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.interceptor.ts:44",{"_index":3193,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["logger.service",{"_index":2054,"title":{},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["logger.service.ts",{"_index":3250,"title":{},"body":{"injectables/SessionLoggerService.html":{},"coverage.html":{}}}],["logger.service.ts:102",{"_index":3271,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:12",{"_index":3265,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:124",{"_index":3273,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:146",{"_index":3268,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:163",{"_index":3288,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:180",{"_index":3282,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:202",{"_index":3284,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:221",{"_index":3286,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:30",{"_index":3289,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:37",{"_index":3280,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:56",{"_index":3275,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger.service.ts:75",{"_index":3278,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logger/session",{"_index":3749,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["loggerconfigservice",{"_index":2293,"title":{"injectables/LoggerConfigService.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggerconfiguration",{"_index":2307,"title":{"interfaces/LoggerConfiguration.html":{}},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["loggermodule",{"_index":216,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["loggermodule.forrootasync",{"_index":279,"title":{},"body":{"modules/AppModule.html":{}}}],["logging",{"_index":288,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"miscellaneous/variables.html":{}}}],["loglevel",{"_index":2310,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["lognotification",{"_index":3259,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["lognotification(context",{"_index":3281,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logo",{"_index":1046,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["logs",{"_index":2547,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["logsession",{"_index":3260,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsession(context",{"_index":3283,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror",{"_index":3261,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logsessionerror(context",{"_index":3285,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange",{"_index":3262,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["logtokenexchange(context",{"_index":3287,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["long",{"_index":960,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["made",{"_index":958,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["main",{"_index":161,"title":{},"body":{"controllers/AppController.html":{}}}],["maintain",{"_index":588,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["make",{"_index":481,"title":{},"body":{"controllers/AuthController.html":{}}}],["makegaugeprovider",{"_index":540,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{}}}],["makes",{"_index":1006,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/WellKnownService.html":{}}}],["making",{"_index":2754,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["manage",{"_index":889,"title":{},"body":{"entities/CertEntity.html":{},"entities/IssuanceConfig.html":{},"injectables/OAuthService.html":{}}}],["management",{"_index":1251,"title":{},"body":{"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{}}}],["management.controller",{"_index":2064,"title":{},"body":{"modules/IssuerModule.html":{}}}],["management.controller.ts",{"_index":1982,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["management.controller.ts:83",{"_index":1992,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["management/credentials",{"_index":1234,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["management/issuance",{"_index":1904,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["management/issuer",{"_index":1981,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["managing",{"_index":1077,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["manytomany",{"_index":1033,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["manytomany(undefined",{"_index":1014,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{}}}],["manytoone",{"_index":918,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["manytoone(undefined",{"_index":904,"title":{},"body":{"entities/CertEntity.html":{},"entities/CredentialConfig.html":{},"entities/DisplayEntity.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"entities/KeyEntity.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{}}}],["map",{"_index":2411,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["map((_",{"_index":3490,"title":{},"body":{"injectables/StatusListService.html":{}}}],["map((error",{"_index":1964,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["mapping",{"_index":1063,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity",{"_index":3452,"title":{},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{}}}],["mapping.entity.ts",{"_index":3523,"title":{},"body":{"entities/StatusMapping.html":{},"coverage.html":{}}}],["mapping.entity.ts:13",{"_index":3531,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:16",{"_index":3530,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:19",{"_index":3529,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:22",{"_index":3528,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:25",{"_index":3526,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mapping.entity.ts:7",{"_index":3532,"title":{},"body":{"entities/StatusMapping.html":{}}}],["mark",{"_index":4069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marks",{"_index":3365,"title":{},"body":{"injectables/SessionService.html":{}}}],["match",{"_index":3024,"title":{},"body":{"injectables/ResolverService.html":{}}}],["matching",{"_index":32,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["material",{"_index":2198,"title":{},"body":{"entities/KeyEntity.html":{}}}],["math.floor(date.now",{"_index":2432,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{}}}],["math.floor(new",{"_index":2603,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["math.random",{"_index":3493,"title":{},"body":{"injectables/StatusListService.html":{}}}],["math.round(new",{"_index":1367,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["max",{"_index":2020,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["maybe",{"_index":2989,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["media",{"_index":3837,"title":{},"body":{"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["mediatype",{"_index":3801,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{}}}],["mediatype.application_jwt",{"_index":3814,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["mediatype.application_jwt)@get('openid",{"_index":3803,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["memorystorage",{"_index":214,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":3239,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["messages",{"_index":1953,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.join",{"_index":1968,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.length",{"_index":1966,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["messages.push",{"_index":1956,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["meta",{"_index":951,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["metadata",{"_index":1195,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"controllers/CredentialsMetadataController.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerInterceptor.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["metadata+jwt",{"_index":3846,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.'})@apiproduces(mediatype.application_json",{"_index":3802,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["metadata.controller",{"_index":2060,"title":{},"body":{"modules/IssuerModule.html":{}}}],["metadata.controller.ts",{"_index":1267,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"coverage.html":{}}}],["metadata.controller.ts:15",{"_index":1274,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.controller.ts:25",{"_index":1271,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["metadata.credential_issuer",{"_index":3847,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["metadata.dto",{"_index":3012,"title":{},"body":{"injectables/ResolverService.html":{},"injectables/WellKnownService.html":{}}}],["metadata.dto.ts",{"_index":1193,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["metadata.dto.ts:12",{"_index":1205,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:16",{"_index":1211,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:20",{"_index":1216,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:24",{"_index":1208,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:33",{"_index":1214,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:37",{"_index":1210,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:41",{"_index":1203,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata.dto.ts:8",{"_index":1212,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["metadata/credentials",{"_index":1266,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"modules/IssuerModule.html":{},"coverage.html":{}}}],["metadata/dto/schema",{"_index":1035,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["metadata/dto/vct.dto",{"_index":1036,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["metadata/dto/vct.dto.ts",{"_index":3720,"title":{},"body":{"classes/VCT.html":{},"coverage.html":{}}}],["metadata/dto/vct.dto.ts:12",{"_index":3727,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:15",{"_index":3724,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:18",{"_index":3725,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:21",{"_index":3726,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:24",{"_index":3728,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:27",{"_index":3729,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/dto/vct.dto.ts:9",{"_index":3732,"title":{},"body":{"classes/VCT.html":{}}}],["metadata/vct/${credentialconfig.id",{"_index":1385,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["metadata/vct/${credentialconfigurationid",{"_index":1376,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["metadata/vct/${value.id",{"_index":1337,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["method",{"_index":314,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["methods",{"_index":39,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["metric/metric.module",{"_index":236,"title":{},"body":{"modules/AppModule.html":{}}}],["metricmodule",{"_index":190,"title":{"modules/MetricModule.html":{}},"body":{"modules/AppModule.html":{},"modules/MetricModule.html":{},"index.html":{},"modules.html":{}}}],["metrics",{"_index":2348,"title":{},"body":{"modules/MetricModule.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["middleware",{"_index":4016,"title":{},"body":{"properties.html":{}}}],["mirko",{"_index":4026,"title":{},"body":{"properties.html":{}}}],["miscellaneous",{"_index":3988,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["misused",{"_index":2948,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["mkdirsync",{"_index":2267,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["mkdirsync(dirname(fullpath",{"_index":2274,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["mm",{"_index":304,"title":{},"body":{"modules/AppModule.html":{},"injectables/WellKnownService.html":{}}}],["modify",{"_index":2024,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["modifying",{"_index":3243,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["module",{"_index":172,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":174,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/HealthModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/MetricModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["mollik",{"_index":4027,"title":{},"body":{"properties.html":{}}}],["more",{"_index":167,"title":{},"body":{"controllers/AppController.html":{},"entities/Session.html":{}}}],["move",{"_index":2415,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{}}}],["mso_mdoc",{"_index":2595,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["multer",{"_index":215,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["multermodule",{"_index":205,"title":{},"body":{"modules/AppModule.html":{}}}],["multermodule.register",{"_index":329,"title":{},"body":{"modules/AppModule.html":{}}}],["multi",{"_index":3133,"title":{},"body":{"entities/Session.html":{}}}],["multiple",{"_index":950,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["mustermann",{"_index":2472,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["mysql2",{"_index":3972,"title":{},"body":{"dependencies.html":{}}}],["name",{"_index":46,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["name)?.id",{"_index":2959,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["namedcurve",{"_index":4051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["necessary",{"_index":966,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["need",{"_index":395,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"injectables/RegistrarService.html":{}}}],["needed",{"_index":93,"title":{},"body":{"classes/AllowListPolicy.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{}}}],["needs",{"_index":863,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/TenantController.html":{}}}],["nestinterceptor",{"_index":3206,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["nestjs",{"_index":217,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["nestjs/axios",{"_index":2050,"title":{},"body":{"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"modules/VerifierModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":50,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"modules/VerifierModule.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":204,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":2081,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{},"dependencies.html":{}}}],["nestjs/event",{"_index":3946,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":52,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":206,"title":{},"body":{"modules/AppModule.html":{},"controllers/StorageController.html":{},"dependencies.html":{}}}],["nestjs/schedule",{"_index":209,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionService.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":211,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":120,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/FileUploadDto.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"dependencies.html":{}}}],["nestjs/terminus",{"_index":1857,"title":{},"body":{"controllers/HealthController.html":{},"modules/HealthModule.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":539,"title":{},"body":{"modules/AuthModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["new",{"_index":442,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":2944,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/StatusListService.html":{}}}],["next.handle",{"_index":3212,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["next.handle().pipe",{"_index":3227,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["node:crypto",{"_index":671,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/ResolverService.html":{}}}],["nodejs",{"_index":1313,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"injectables/PresentationsService.html":{},"dependencies.html":{}}}],["noncce",{"_index":3137,"title":{},"body":{"entities/Session.html":{}}}],["nonce",{"_index":2477,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["nonce(@sessionentity",{"_index":2505,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["nonce(session",{"_index":2482,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["none",{"_index":84,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/StatusListService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["nonetrustpolicy",{"_index":97,"title":{"classes/NoneTrustPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["not(isnull",{"_index":3392,"title":{},"body":{"injectables/SessionService.html":{}}}],["notfoundexception",{"_index":3326,"title":{},"body":{"injectables/SessionPipe.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["notfoundexception(`tenant",{"_index":3680,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["notification",{"_index":1217,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["notification_endpoint",{"_index":1202,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["notification_id",{"_index":2354,"title":{},"body":{"classes/NotificationRequestDto.html":{}}}],["notificationevent",{"_index":2355,"title":{},"body":{"classes/NotificationRequestDto.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["notificationrequestdto",{"_index":2352,"title":{"classes/NotificationRequestDto.html":{}},"body":{"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["notifications",{"_index":146,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["notifications(body",{"_index":2485,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["notifywebhook",{"_index":1870,"title":{},"body":{"entities/IssuanceConfig.html":{},"entities/Session.html":{}}}],["now",{"_index":519,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["null",{"_index":2981,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["nullable",{"_index":900,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["number",{"_index":579,"title":{},"body":{"modules/AuthModule.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"interfaces/FileStorage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/ParResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["oauth",{"_index":2361,"title":{},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["oauth.controller",{"_index":2385,"title":{},"body":{"modules/OAuthModule.html":{}}}],["oauth.service",{"_index":2375,"title":{},"body":{"controllers/OAuthController.html":{},"modules/OAuthModule.html":{}}}],["oauth2",{"_index":374,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["oauth2authorizationserver",{"_index":747,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oauth2authorizationserverresponse",{"_index":2440,"title":{"classes/Oauth2AuthorizationServerResponse.html":{}},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["oauth2client",{"_index":2864,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oauth_client_id",{"_index":2387,"title":{},"body":{"modules/OAuthModule.html":{},"miscellaneous/variables.html":{}}}],["oauth_client_secret",{"_index":2388,"title":{},"body":{"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"miscellaneous/variables.html":{}}}],["oauth_validation_schema",{"_index":2386,"title":{},"body":{"modules/OAuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["oauthcontroller",{"_index":2359,"title":{"controllers/OAuthController.html":{}},"body":{"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"coverage.html":{}}}],["oauthmodule",{"_index":2379,"title":{"modules/OAuthModule.html":{}},"body":{"modules/OAuthModule.html":{},"index.html":{},"modules.html":{}}}],["oauthservice",{"_index":2374,"title":{"injectables/OAuthService.html":{}},"body":{"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"coverage.html":{},"index.html":{}}}],["obj",{"_index":3081,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.body",{"_index":3082,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.contentlength",{"_index":3084,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["obj.contenttype",{"_index":3083,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["object",{"_index":909,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/RegistrarEntity.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{},"miscellaneous/variables.html":{}}}],["object.dto.ts",{"_index":2231,"title":{},"body":{"classes/KeyObj.html":{},"coverage.html":{}}}],["object.dto.ts:11",{"_index":2233,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.dto.ts:15",{"_index":2234,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.dto.ts:19",{"_index":2232,"title":{},"body":{"classes/KeyObj.html":{}}}],["object.entries(params",{"_index":2625,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["object.keys(res.vp_token",{"_index":2824,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["object.values",{"_index":1957,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["objects",{"_index":1161,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"classes/SchemaResponse.html":{}}}],["observable",{"_index":3198,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["obtain",{"_index":2367,"title":{},"body":{"controllers/OAuthController.html":{}}}],["offer",{"_index":868,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["offerrequestdto",{"_index":1985,"title":{"classes/OfferRequestDto.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"entities/Session.html":{},"coverage.html":{}}}],["offerresponse",{"_index":1988,"title":{"classes/OfferResponse.html":{}},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["offerurl",{"_index":3102,"title":{},"body":{"entities/Session.html":{}}}],["oid4vci",{"_index":608,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"miscellaneous/variables.html":{}}}],["oid4vci/dto/offer",{"_index":1999,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["oid4vci/oid4vci.controller",{"_index":2065,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/oid4vci.service",{"_index":2066,"title":{},"body":{"modules/IssuerModule.html":{}}}],["oid4vci/util",{"_index":771,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["oid4vcicontroller",{"_index":2048,"title":{"controllers/Oid4vciController.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["oid4vciservice",{"_index":1995,"title":{},"body":{"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["oid4vp",{"_index":615,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"interfaces/SessionLogContext.html":{},"miscellaneous/variables.html":{}}}],["oid4vp.controller",{"_index":2537,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["oid4vp.service",{"_index":2524,"title":{},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{}}}],["oid4vp/dto/presentation",{"_index":2702,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vp/oid4vp.module",{"_index":2735,"title":{},"body":{"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{}}}],["oid4vp/oid4vp.service",{"_index":2703,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["oid4vpcontroller",{"_index":2511,"title":{"controllers/Oid4vpController.html":{}},"body":{"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"coverage.html":{}}}],["oid4vpmodule",{"_index":2043,"title":{"modules/Oid4vpModule.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["oid4vpservice",{"_index":738,"title":{"injectables/Oid4vpService.html":{}},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"coverage.html":{},"index.html":{}}}],["oidc",{"_index":388,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["oidc_algorithm",{"_index":563,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["oidc_internal_issuer_url",{"_index":557,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["oidc_sub",{"_index":561,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["oidcdiscoverydto",{"_index":400,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["oidcissuerurl",{"_index":2916,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/.well",{"_index":2923,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["oidcissuerurl}/protocol/openid",{"_index":2920,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["old",{"_index":1148,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["older",{"_index":3367,"title":{},"body":{"injectables/SessionService.html":{}}}],["omittype",{"_index":1059,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"classes/DisplayCreateDto.html":{},"classes/IssuanceDto.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/UpdateKeyDto.html":{}}}],["omittype(credentialconfig",{"_index":1058,"title":{},"body":{"classes/CredentialConfigCreate.html":{}}}],["omittype(displayentity",{"_index":1621,"title":{},"body":{"classes/DisplayCreateDto.html":{}}}],["omittype(issuanceconfig",{"_index":1068,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{}}}],["omittype(keyimportdto",{"_index":3719,"title":{},"body":{"classes/UpdateKeyDto.html":{}}}],["omittype(presentationconfig",{"_index":2685,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{}}}],["on(\"error",{"_index":2285,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["on(\"finish",{"_index":2283,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["onapplicationbootstrap",{"_index":1923,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["once",{"_index":2878,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["ondelete",{"_index":906,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["one",{"_index":1474,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["oneof",{"_index":148,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["ones",{"_index":1344,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["onmoduleinit",{"_index":2870,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["ontenantdelete",{"_index":1080,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["ontenantdelete(tenantid",{"_index":1102,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/EncryptionService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit",{"_index":1669,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["ontenantinit(tenantid",{"_index":1682,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{}}}],["openid",{"_index":390,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{}}}],["openid4vc/oauth2",{"_index":766,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"dependencies.html":{}}}],["openid4vc/openid4vci",{"_index":1308,"title":{},"body":{"injectables/CredentialsService.html":{},"modules/IssuerModule.html":{},"classes/NotificationRequestDto.html":{},"controllers/Oid4vciController.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["openid4vc/openid4vp",{"_index":3957,"title":{},"body":{"dependencies.html":{}}}],["openid4vc/utils",{"_index":3958,"title":{},"body":{"dependencies.html":{}}}],["openid4vci",{"_index":644,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/WellKnownController.html":{}}}],["openid4vp://?${(await",{"_index":851,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["openid4vp://?${querystring",{"_index":2634,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["openid4vp://?${values.uri",{"_index":2714,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["openid_federation",{"_index":949,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["openidvci",{"_index":3845,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["operation",{"_index":1094,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["operations",{"_index":1428,"title":{},"body":{"injectables/CryptoImplementationService.html":{},"injectables/EncryptionService.html":{},"controllers/Oid4vpController.html":{},"injectables/RegistrarService.html":{}}}],["optional",{"_index":17,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":299,"title":{},"body":{"modules/AppModule.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["options.audience",{"_index":1833,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["options.dto",{"_index":2561,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["options.dto.ts",{"_index":2727,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["options.expiresin",{"_index":1822,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["opts",{"_index":1724,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["opts?.acl",{"_index":3068,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["opts?.checksum",{"_index":3071,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["opts?.contenttype",{"_index":2289,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["opts?.metadata",{"_index":3067,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["order",{"_index":2802,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["original",{"_index":3244,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["originalname",{"_index":1793,"title":{},"body":{"injectables/FilesService.html":{}}}],["otherwhise",{"_index":2000,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["otherwise",{"_index":560,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":198,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["ov",{"_index":291,"title":{},"body":{"modules/AppModule.html":{}}}],["over",{"_index":1134,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["override",{"_index":2018,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["overrides",{"_index":2459,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["overview",{"_index":4005,"title":{"index.html":{}},"body":{"index.html":{}}}],["overwrite",{"_index":1940,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["overwritten",{"_index":1109,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["owns",{"_index":908,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["p",{"_index":1688,"title":{},"body":{"injectables/EncryptionService.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":3940,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pairs",{"_index":596,"title":{},"body":{"interfaces/AuthResponse.html":{}}}],["par",{"_index":650,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(@body",{"_index":689,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["par(body",{"_index":660,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["param",{"_index":425,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["param(\"id",{"_index":1262,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"controllers/KeyController.html":{},"controllers/SessionController.html":{}}}],["param(\"tenantid",{"_index":1279,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["parameter",{"_index":587,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/SessionPipe.html":{}}}],["parameterdecorator",{"_index":4004,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parameters",{"_index":45,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":2621,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["parresponsedto",{"_index":682,"title":{"classes/ParResponseDto.html":{}},"body":{"controllers/AuthorizeController.html":{},"classes/ParResponseDto.html":{},"coverage.html":{}}}],["parse",{"_index":2773,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseaccesstokenrequest",{"_index":808,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest",{"_index":731,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsechallengerequest(body",{"_index":748,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["parsed",{"_index":2774,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parsedaccesstokenauthorizationcoderequestgrant",{"_index":772,"title":{"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenpreauthorizedcoderequestgrant",{"_index":774,"title":{"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["parsedaccesstokenrequest",{"_index":807,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.accesstokenrequest",{"_index":820,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.dpop?.jwt",{"_index":825,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant",{"_index":819,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.granttype",{"_index":816,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.preauthorizedcode",{"_index":827,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parsedaccesstokenrequest.grant.txcode",{"_index":829,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["parseloglevel",{"_index":2302,"title":{},"body":{"injectables/LoggerConfigService.html":{}}}],["parseloglevel(level",{"_index":2316,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["parseresponse",{"_index":2748,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parseresponse(res",{"_index":2769,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["part",{"_index":2787,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["parties",{"_index":2863,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["party",{"_index":2884,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pass",{"_index":2023,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/RegistrarService.html":{}}}],["passed",{"_index":1343,"title":{},"body":{"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{}}}],["passport",{"_index":2115,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportjwtsecret",{"_index":2111,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportmodule",{"_index":537,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":2110,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":2095,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":1590,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["path",{"_index":221,"title":{},"body":{"modules/AppModule.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"classes/LocalFileStorage.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"modules/StorageModule.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["payload",{"_index":477,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["payload.admin",{"_index":2153,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.cnf",{"_index":2819,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["payload.id",{"_index":1144,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["payload.iss",{"_index":3013,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.iss}/.well",{"_index":3029,"title":{},"body":{"injectables/ResolverService.html":{}}}],["payload.sub",{"_index":1831,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["payloads",{"_index":3003,"title":{},"body":{"injectables/ResolverService.html":{}}}],["peculiar/x509",{"_index":3959,"title":{},"body":{"dependencies.html":{}}}],["pem",{"_index":24,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/DBKeyService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"injectables/RegistrarService.html":{}}}],["perform",{"_index":1850,"title":{},"body":{"controllers/HealthController.html":{}}}],["periodically",{"_index":2899,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pg",{"_index":3975,"title":{},"body":{"dependencies.html":{}}}],["pid",{"_index":2009,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{}}}],["pid,hostname",{"_index":308,"title":{},"body":{"modules/AppModule.html":{}}}],["pino",{"_index":218,"title":{},"body":{"modules/AppModule.html":{},"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"dependencies.html":{}}}],["pino?tab=readme",{"_index":290,"title":{},"body":{"modules/AppModule.html":{}}}],["pinohttp",{"_index":293,"title":{},"body":{"modules/AppModule.html":{}}}],["pinologger",{"_index":1085,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["pipetransform",{"_index":3327,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["pkcecodechallengemethod",{"_index":764,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["pkcecodechallengemethod.s256",{"_index":794,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["plain",{"_index":1160,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["plaintoclass",{"_index":1112,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["plaintoclass(issuancedto",{"_index":1949,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["png",{"_index":2002,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["point",{"_index":1352,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["policies.dto",{"_index":1038,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["policy",{"_index":61,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["policycredential",{"_index":99,"title":{"classes/PolicyCredential.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["policytype",{"_index":83,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["port",{"_index":1586,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["positives",{"_index":1159,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["post",{"_index":401,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{}}}],["post(\"challenge",{"_index":703,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post(\"credential",{"_index":2497,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"nonce",{"_index":2503,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"notification",{"_index":2500,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post(\"oauth2/token",{"_index":426,"title":{},"body":{"controllers/AuthController.html":{}}}],["post(\"offer",{"_index":2021,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["post(\"par",{"_index":688,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post(\"request",{"_index":2709,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["post(\"revoke",{"_index":3174,"title":{},"body":{"controllers/SessionController.html":{}}}],["post(\"token",{"_index":700,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/OAuthController.html":{}}}],["post('challenge",{"_index":653,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post('credential')@sessionlogger('session",{"_index":2479,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('nonce')@sessionlogger('nonce",{"_index":2483,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('notification')@sessionlogger('notification_id",{"_index":2486,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["post('oauth2/token')@apibody({type",{"_index":370,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('revoke",{"_index":3161,"title":{},"body":{"controllers/SessionController.html":{}}}],["post('token",{"_index":666,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["post()@sessionlogger('session",{"_index":2521,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["postgres",{"_index":1584,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["postgres\").default(\"sqlite",{"_index":1568,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["pre",{"_index":2467,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["preauthorizedcode",{"_index":775,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["preauthorizedcodegrantidentifier",{"_index":765,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["predefined",{"_index":2766,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["preferred",{"_index":1204,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["prefix",{"_index":642,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{}}}],["preheader",{"_index":3502,"title":{},"body":{"injectables/StatusListService.html":{}}}],["prepayload",{"_index":3501,"title":{},"body":{"injectables/StatusListService.html":{}}}],["present",{"_index":1151,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["presentation",{"_index":594,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["presentation_during_issuance",{"_index":627,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["presentationattachment",{"_index":936,"title":{"classes/PresentationAttachment.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["presentationconfig",{"_index":957,"title":{"entities/PresentationConfig.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["presentationconfig.lifetime",{"_index":2629,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfig.webhook",{"_index":2632,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationconfigcreatedto",{"_index":2683,"title":{"classes/PresentationConfigCreateDto.html":{}},"body":{"classes/PresentationConfigCreateDto.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"coverage.html":{}}}],["presentationduringissuance",{"_index":614,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"miscellaneous/enumerations.html":{}}}],["presentationduringissuanceconfig",{"_index":617,"title":{"classes/PresentationDuringIssuanceConfig.html":{}},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{}}}],["presentationexists",{"_index":2797,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["presentationmanagementcontroller",{"_index":2688,"title":{"controllers/PresentationManagementController.html":{}},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"coverage.html":{}}}],["presentationrequest",{"_index":2696,"title":{"classes/PresentationRequest.html":{}},"body":{"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"coverage.html":{}}}],["presentationrequestoptions",{"_index":2550,"title":{"interfaces/PresentationRequestOptions.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{}}}],["presentations",{"_index":942,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["presentations.controller",{"_index":2737,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["presentations.service",{"_index":2704,"title":{},"body":{"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{}}}],["presentations/dto/auth",{"_index":2558,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentations/presentations.module",{"_index":2536,"title":{},"body":{"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["presentations/presentations.service",{"_index":2559,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["presentationsmodule",{"_index":2535,"title":{"modules/PresentationsModule.html":{}},"body":{"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["presentationsservice",{"_index":2542,"title":{"injectables/PresentationsService.html":{}},"body":{"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"coverage.html":{},"index.html":{}}}],["presigned",{"_index":1738,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["presigner",{"_index":3063,"title":{},"body":{"classes/S3FileStorage.html":{},"dependencies.html":{}}}],["pretty",{"_index":275,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"dependencies.html":{}}}],["primary",{"_index":902,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["primarycolumn",{"_index":1704,"title":{},"body":{"entities/FileEntity.html":{},"entities/Session.html":{},"entities/TenantEntity.html":{}}}],["primarycolumn(\"uuid",{"_index":3143,"title":{},"body":{"entities/Session.html":{}}}],["primarycolumn('uuid",{"_index":3114,"title":{},"body":{"entities/Session.html":{}}}],["private",{"_index":423,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"classes/KeyImportDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{}}}],["private_key",{"_index":3246,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["privateencryptionkey",{"_index":1694,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["privatekey",{"_index":1418,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/UpdateKeyDto.html":{},"miscellaneous/variables.html":{}}}],["privatekey.alg",{"_index":1534,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.ext",{"_index":1537,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.key_ops",{"_index":1538,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekey.kid",{"_index":1521,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekeyinstance",{"_index":1550,"title":{},"body":{"classes/DBKeyService.html":{}}}],["privatekeyjwk",{"_index":1412,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"miscellaneous/variables.html":{}}}],["proceed",{"_index":3197,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["process",{"_index":621,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"entities/Session.html":{}}}],["process.env.node_env",{"_index":263,"title":{},"body":{"modules/AppModule.html":{}}}],["process_presentation_response",{"_index":2641,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["processes",{"_index":2553,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["production",{"_index":264,"title":{},"body":{"modules/AppModule.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["progress",{"_index":3184,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["prom",{"_index":3371,"title":{},"body":{"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["prometheus",{"_index":542,"title":{},"body":{"modules/AuthModule.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["prometheus/dist/injector",{"_index":3370,"title":{},"body":{"injectables/SessionService.html":{}}}],["prometheusmodule",{"_index":2345,"title":{},"body":{"modules/MetricModule.html":{}}}],["prometheusmodule.register",{"_index":2349,"title":{},"body":{"modules/MetricModule.html":{}}}],["promise",{"_index":385,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["promise((resolve",{"_index":2276,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.all(att",{"_index":2832,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["promise.all(files.map((file",{"_index":1805,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.resolve",{"_index":1802,"title":{},"body":{"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["promise.resolve(existssync(join(this.basedir",{"_index":2292,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.resolve(rmsync(join(this.basedir",{"_index":2291,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["promise.resolve(this.storage.delete(key",{"_index":1799,"title":{},"body":{"injectables/FilesService.html":{}}}],["promise.resolve(this.storage.getstream(key",{"_index":1798,"title":{},"body":{"injectables/FilesService.html":{}}}],["promises",{"_index":2949,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["proof_signing_alg_values_supported",{"_index":1326,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["proof_types_supported",{"_index":1325,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/FileEntity.html":{},"classes/FileUploadDto.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"properties.html":{}}}],["property",{"_index":153,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/PresentationsService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["protect",{"_index":2347,"title":{},"body":{"modules/MetricModule.html":{}}}],["protected",{"_index":1461,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["provide",{"_index":2226,"title":{},"body":{"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["provided",{"_index":147,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationRequest.html":{},"classes/StatusUpdateDto.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["provider",{"_index":445,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/RegistrarService.html":{}}}],["providers",{"_index":179,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["provides",{"_index":363,"title":{},"body":{"controllers/AuthController.html":{},"injectables/IssuanceService.html":{},"modules/RegistrarModule.html":{}}}],["providing",{"_index":1847,"title":{},"body":{"controllers/HealthController.html":{}}}],["public",{"_index":22,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"classes/DBKeyService.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"controllers/KeyController.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public.decorator",{"_index":2083,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["public_url",{"_index":2068,"title":{},"body":{"modules/IssuerModule.html":{},"miscellaneous/variables.html":{}}}],["publicbaseurl",{"_index":3048,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["publicjwk",{"_index":838,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["publickey",{"_index":1417,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyObj.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["publickeyinstance",{"_index":1555,"title":{},"body":{"classes/DBKeyService.html":{}}}],["publickeyjwk",{"_index":1416,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"miscellaneous/variables.html":{}}}],["publicly",{"_index":1773,"title":{},"body":{"injectables/FilesService.html":{}}}],["publicurl",{"_index":495,"title":{},"body":{"controllers/AuthController.html":{}}}],["publicurl}/.well",{"_index":501,"title":{},"body":{"controllers/AuthController.html":{}}}],["publicurl}/oauth2/token",{"_index":499,"title":{},"body":{"controllers/AuthController.html":{}}}],["purpose",{"_index":2973,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["pushed",{"_index":662,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["pushed_authorization_request_endpoint",{"_index":791,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["put",{"_index":1712,"title":{},"body":{"interfaces/FileStorage.html":{},"controllers/KeyController.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["put(\":id",{"_index":2191,"title":{},"body":{"controllers/KeyController.html":{}}}],["put(':id",{"_index":2180,"title":{},"body":{"controllers/KeyController.html":{}}}],["put(key",{"_index":1721,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["putobjectcommand",{"_index":3059,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["putoptions",{"_index":1725,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["qr",{"_index":2006,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["qrcode",{"_index":1994,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["qrcode.tobuffer(values.uri",{"_index":2029,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["qrcodebuffer",{"_index":2028,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["queries",{"_index":659,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["queries.request_uri",{"_index":798,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["query",{"_index":672,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["querydeeppartialentity",{"_index":3341,"title":{},"body":{"injectables/SessionService.html":{}}}],["querystring",{"_index":2624,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["r",{"_index":3031,"title":{},"body":{"injectables/ResolverService.html":{}}}],["r.data",{"_index":3032,"title":{},"body":{"injectables/ResolverService.html":{}}}],["random",{"_index":1532,"title":{},"body":{"classes/DBKeyService.html":{}}}],["randomness",{"_index":3474,"title":{},"body":{"injectables/StatusListService.html":{}}}],["randomuuid",{"_index":670,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/FilesService.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["randomuuid()}${safeext",{"_index":1786,"title":{},"body":{"injectables/FilesService.html":{}}}],["ratelimit",{"_index":2131,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["re",{"_index":849,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["reachable",{"_index":3034,"title":{},"body":{"injectables/ResolverService.html":{}}}],["react",{"_index":3665,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["read",{"_index":3069,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["readable",{"_index":1723,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{}}}],["readable.from(body",{"_index":2281,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["readdirsync",{"_index":1113,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["readdirsync(configpath",{"_index":1127,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["readdirsync(path",{"_index":1139,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync",{"_index":1114,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readfilesync(join(path",{"_index":1141,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["readonly",{"_index":685,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/TenantController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["real",{"_index":2412,"title":{},"body":{"injectables/OAuthService.html":{}}}],["receive",{"_index":968,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["received",{"_index":3769,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["receives",{"_index":3329,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["record",{"_index":987,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"interfaces/FileStorage.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/SchemaResponse.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["recursive",{"_index":2275,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["recursively",{"_index":1958,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["redacted",{"_index":3249,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["redirect_uri",{"_index":712,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["redirected",{"_index":611,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["ref",{"_index":149,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["reference",{"_index":1533,"title":{},"body":{"classes/DBKeyService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["reflect",{"_index":3981,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":2078,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["refresh",{"_index":2892,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["refresh_token",{"_index":489,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TokenResponse.html":{}}}],["refreshaccesstoken",{"_index":2871,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["refreshes",{"_index":2898,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["regcert",{"_index":2573,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["region",{"_index":3597,"title":{},"body":{"modules/StorageModule.html":{}}}],["register",{"_index":3356,"title":{},"body":{"injectables/SessionService.html":{}}}],["registrar",{"_index":2846,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar.service",{"_index":2849,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["registrar/generated",{"_index":2996,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrar/registrar.module",{"_index":238,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["registrar/registrar.service",{"_index":2556,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["registrar_oidc_client_id",{"_index":2855,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_client_secret",{"_index":2856,"title":{},"body":{"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"miscellaneous/variables.html":{}}}],["registrar_oidc_url",{"_index":2852,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["registrar_url",{"_index":2851,"title":{},"body":{"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["registrar_validation_schema",{"_index":237,"title":{},"body":{"modules/AppModule.html":{},"modules/RegistrarModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registrarentity",{"_index":2833,"title":{"entities/RegistrarEntity.html":{}},"body":{"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"coverage.html":{}}}],["registrarmodule",{"_index":191,"title":{"modules/RegistrarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/RegistrarModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["registrarrepository",{"_index":2872,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrarservice",{"_index":2541,"title":{"injectables/RegistrarService.html":{}},"body":{"injectables/Oid4vpService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["registration",{"_index":965,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["registrationcert",{"_index":967,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/Oid4vpService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["registrationcertid",{"_index":2780,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["registrationcertificatecontrollerall",{"_index":2908,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrationcertificatecontrollerregister",{"_index":2909,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["registrationcertificatecreation",{"_index":2994,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["registrationcertificaterequest",{"_index":932,"title":{"classes/RegistrationCertificateRequest.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["reject",{"_index":2277,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["related",{"_index":2221,"title":{},"body":{"modules/KeyModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"miscellaneous/variables.html":{}}}],["relations",{"_index":1187,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{}}}],["relevant",{"_index":619,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/Oid4vciController.html":{},"classes/PresentationDuringIssuanceConfig.html":{}}}],["reload",{"_index":2320,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["reloadconfiguration",{"_index":2303,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["relying",{"_index":2862,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerfindall",{"_index":2910,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartycontrollerregister",{"_index":2911,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["relyingpartyid",{"_index":2836,"title":{},"body":{"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{}}}],["remove",{"_index":1054,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["removeclient",{"_index":2395,"title":{},"body":{"injectables/OAuthService.html":{}}}],["removeclient(clientid",{"_index":2407,"title":{},"body":{"injectables/OAuthService.html":{}}}],["removed",{"_index":1150,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["replace(\"https",{"_index":2962,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["repository",{"_index":1083,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/IssuanceService.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"properties.html":{}}}],["representing",{"_index":597,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/IssuerMetadata.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["represents",{"_index":1194,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyObj.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/Session.html":{},"entities/TenantEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["repsonse",{"_index":10,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{}}}],["req",{"_index":310,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/JwtStrategy.html":{},"controllers/Oid4vciController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"miscellaneous/functions.html":{}}}],["req+jwt",{"_index":2607,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["req.body",{"_index":2985,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["req.headers[\"content",{"_index":322,"title":{},"body":{"modules/AppModule.html":{}}}],["req.headers[\"user",{"_index":320,"title":{},"body":{"modules/AppModule.html":{}}}],["req.id",{"_index":2982,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["req.method",{"_index":315,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["req.params?.session",{"_index":312,"title":{},"body":{"modules/AppModule.html":{}}}],["req.params?.tenantid",{"_index":324,"title":{},"body":{"modules/AppModule.html":{}}}],["req.url",{"_index":316,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":12,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TrustedAuthorityQuery.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["request.'})@isenum(responsetype",{"_index":2463,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.client_id",{"_index":2423,"title":{},"body":{"injectables/OAuthService.html":{}}}],["request.client_secret",{"_index":2424,"title":{},"body":{"injectables/OAuthService.html":{}}}],["request.dto",{"_index":681,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["request.dto.ts",{"_index":706,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PresentationRequest.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/TokenRequestDto.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["request.dto.ts:12",{"_index":718,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/TokenRequestDto.html":{}}}],["request.dto.ts:13",{"_index":2995,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:15",{"_index":723,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:18",{"_index":725,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/RegistrationCertificateRequest.html":{}}}],["request.dto.ts:19",{"_index":3706,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["request.dto.ts:21",{"_index":727,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:24",{"_index":719,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:25",{"_index":2464,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:26",{"_index":2722,"title":{},"body":{"classes/PresentationRequest.html":{},"classes/TokenRequestDto.html":{}}}],["request.dto.ts:27",{"_index":720,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:30",{"_index":721,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:31",{"_index":2460,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:32",{"_index":2721,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:33",{"_index":724,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/TokenRequestDto.html":{}}}],["request.dto.ts:36",{"_index":717,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["request.dto.ts:38",{"_index":2458,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:40",{"_index":2724,"title":{},"body":{"classes/PresentationRequest.html":{}}}],["request.dto.ts:58",{"_index":2455,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:6",{"_index":722,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.dto.ts:66",{"_index":2457,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:73",{"_index":2466,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["request.dto.ts:77",{"_index":2474,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:78",{"_index":2473,"title":{},"body":{"classes/OfferResponse.html":{}}}],["request.dto.ts:9",{"_index":726,"title":{},"body":{"classes/AuthorizeQueries.html":{},"classes/NotificationRequestDto.html":{}}}],["request.header",{"_index":2609,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.headers[\"accept",{"_index":4048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.headers[\"content",{"_index":3223,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.headers[\"user",{"_index":3222,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.method",{"_index":3218,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params?.tenantid",{"_index":3217,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.params[sessionidparam",{"_index":3216,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.payload",{"_index":2611,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["request.scope",{"_index":2427,"title":{},"body":{"injectables/OAuthService.html":{}}}],["request.url",{"_index":3219,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request.user",{"_index":3701,"title":{},"body":{"interfaces/TokenPayload.html":{},"miscellaneous/variables.html":{}}}],["request/response",{"_index":2325,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["request_error",{"_index":3237,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_start",{"_index":3221,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_success",{"_index":3230,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["request_uri",{"_index":690,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"entities/Session.html":{}}}],["requested",{"_index":2509,"title":{},"body":{"controllers/Oid4vciController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["requestid",{"_index":2519,"title":{},"body":{"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{}}}],["requesting",{"_index":3648,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["requests",{"_index":647,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["requesturl",{"_index":2633,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["require_pushed_authorization_requests",{"_index":790,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["required",{"_index":134,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["requiredclaimkeys",{"_index":2828,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requiredfields",{"_index":2770,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["requires",{"_index":2450,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["res",{"_index":325,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["res.data",{"_index":2818,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["res.data![\"crt",{"_index":2969,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data![\"id",{"_index":2970,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data![\"jwt",{"_index":2992,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.data?.filter",{"_index":2979,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.error",{"_index":2965,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["res.payload",{"_index":1698,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["res.redirect(`${values.redirect_uri}?code=${code",{"_index":805,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send",{"_index":883,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.send(qrcodebuffer",{"_index":2032,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.send(values",{"_index":2033,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.setheader(\"content",{"_index":2030,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["res.state",{"_index":2638,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["res.status(400).send(response",{"_index":877,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["res.statuscode",{"_index":327,"title":{},"body":{"modules/AppModule.html":{}}}],["reset",{"_index":197,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}],["resolve",{"_index":2284,"title":{},"body":{"classes/LocalFileStorage.html":{},"injectables/ResolverService.html":{}}}],["resolvepublickey",{"_index":3004,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolvepublickey(payload",{"_index":3006,"title":{},"body":{"injectables/ResolverService.html":{}}}],["resolver.service",{"_index":3001,"title":{},"body":{"modules/ResolverModule.html":{}}}],["resolver/resolver.module",{"_index":2736,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["resolver/resolver.service",{"_index":2790,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["resolvermodule",{"_index":2733,"title":{"modules/ResolverModule.html":{}},"body":{"modules/PresentationsModule.html":{},"modules/ResolverModule.html":{},"index.html":{},"modules.html":{}}}],["resolverservice",{"_index":2751,"title":{"injectables/ResolverService.html":{}},"body":{"injectables/PresentationsService.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"coverage.html":{},"index.html":{}}}],["resolves",{"_index":1092,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/FilesService.html":{},"injectables/PresentationsService.html":{}}}],["resolving",{"_index":2755,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{}}}],["resource",{"_index":713,"title":{},"body":{"classes/AuthorizeQueries.html":{}}}],["response",{"_index":375,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["response.data!.find((item",{"_index":2957,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.data![\"id",{"_index":2955,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.dto",{"_index":408,"title":{},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["response.dto.ts",{"_index":583,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/KeyResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/SchemaResponse.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"coverage.html":{}}}],["response.dto.ts:11",{"_index":638,"title":{},"body":{"classes/AuthorizationResponse.html":{},"classes/EC_Public.html":{}}}],["response.dto.ts:13",{"_index":2443,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:14",{"_index":3090,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponseDto.html":{}}}],["response.dto.ts:15",{"_index":1654,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:16",{"_index":3095,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:17",{"_index":2448,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:18",{"_index":3092,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:19",{"_index":1658,"title":{},"body":{"classes/EC_Public.html":{}}}],["response.dto.ts:2",{"_index":3710,"title":{},"body":{"classes/TokenResponse.html":{}}}],["response.dto.ts:20",{"_index":3093,"title":{},"body":{"classes/SchemaResponse.html":{},"classes/TokenResponseDto.html":{}}}],["response.dto.ts:21",{"_index":2445,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:23",{"_index":1660,"title":{},"body":{"classes/EC_Public.html":{},"classes/SchemaResponse.html":{}}}],["response.dto.ts:25",{"_index":2446,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:26",{"_index":3091,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["response.dto.ts:27",{"_index":3713,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["response.dto.ts:29",{"_index":2449,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:3",{"_index":3711,"title":{},"body":{"classes/TokenResponse.html":{}}}],["response.dto.ts:33",{"_index":2075,"title":{},"body":{"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:37",{"_index":2442,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["response.dto.ts:4",{"_index":2235,"title":{},"body":{"classes/KeyResponseDto.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:5",{"_index":2447,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{},"classes/TokenResponse.html":{}}}],["response.dto.ts:8",{"_index":3712,"title":{},"body":{"classes/TokenResponseDto.html":{}}}],["response.dto.ts:9",{"_index":2451,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{},"classes/ParResponseDto.html":{}}}],["response.error",{"_index":2953,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["response.jwks.keys.find((key",{"_index":3035,"title":{},"body":{"injectables/ResolverService.html":{}}}],["response.key",{"_index":1797,"title":{},"body":{"injectables/FilesService.html":{}}}],["response.statuscode",{"_index":3231,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["response.ts",{"_index":8,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["response_mode",{"_index":2590,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_processing",{"_index":2640,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["response_type",{"_index":714,"title":{},"body":{"classes/AuthorizeQueries.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{}}}],["response_types_supported",{"_index":503,"title":{},"body":{"controllers/AuthController.html":{},"injectables/Oid4vpService.html":{}}}],["response_uri",{"_index":2588,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["responses",{"_index":3187,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsesize",{"_index":3232,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["responsestatus",{"_index":3771,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["responsetype",{"_index":1997,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"miscellaneous/enumerations.html":{}}}],["responsetype.qrcode",{"_index":2008,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsetype.uri",{"_index":2010,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["responsible",{"_index":1453,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/HealthController.html":{},"controllers/KeyController.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"modules/SessionModule.html":{}}}],["result",{"_index":1093,"title":{},"body":{"injectables/CredentialConfigService.html":{},"entities/IssuanceConfig.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{}}}],["result.payload",{"_index":2829,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["results",{"_index":31,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieval",{"_index":3824,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["retrieve",{"_index":694,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/EncryptionService.html":{},"injectables/PresentationsService.html":{}}}],["retrieves",{"_index":1097,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["return",{"_index":54,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"modules/DatabaseModule.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":2726,"title":{},"body":{"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["returning",{"_index":2124,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["returns",{"_index":48,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"controllers/HealthController.html":{},"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"modules/KeyModule.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"classes/S3FileStorage.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"miscellaneous/functions.html":{}}}],["reuse",{"_index":2655,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["review",{"_index":3848,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["revokeall",{"_index":3151,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(@body",{"_index":3175,"title":{},"body":{"controllers/SessionController.html":{}}}],["revokeall(value",{"_index":3159,"title":{},"body":{"controllers/SessionController.html":{}}}],["revoked",{"_index":18,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/StatusUpdateDto.html":{}}}],["right",{"_index":1008,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["rmsync",{"_index":2268,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["root",{"_index":430,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/OAuthService.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["rootoftrust",{"_index":85,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"miscellaneous/typealiases.html":{}}}],["rootoftrustpolicy",{"_index":90,"title":{"classes/RootOfTrustPolicy.html":{}},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{}}}],["rootpath",{"_index":334,"title":{},"body":{"modules/AppModule.html":{}}}],["rp",{"_index":2964,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["rp_name",{"_index":253,"title":{},"body":{"modules/AppModule.html":{}}}],["rpid",{"_index":2952,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["rs256",{"_index":2435,"title":{},"body":{"injectables/OAuthService.html":{}}}],["rsa",{"_index":2112,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["rules",{"_index":1012,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["run",{"_index":3360,"title":{},"body":{"injectables/SessionService.html":{}}}],["running",{"_index":166,"title":{},"body":{"controllers/AppController.html":{}}}],["runs",{"_index":1010,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["rxjs",{"_index":2789,"title":{},"body":{"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":3209,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["s3",{"_index":3050,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["s3\").default(\"local",{"_index":3580,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_access_key_id",{"_index":3588,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_bucket",{"_index":3587,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_endpoint",{"_index":3590,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_force_path_style",{"_index":3591,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_public_base_url",{"_index":3593,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_region",{"_index":3586,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3_secret_access_key",{"_index":3589,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["s3client",{"_index":3046,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{}}}],["s3filestorage",{"_index":3043,"title":{"classes/S3FileStorage.html":{}},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["safeext",{"_index":1780,"title":{},"body":{"injectables/FilesService.html":{}}}],["saltgenerator",{"_index":1360,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["same",{"_index":847,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sanitize",{"_index":3204,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody",{"_index":3189,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizebody(body",{"_index":3200,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized",{"_index":3205,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitized[field",{"_index":3248,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sanitizes",{"_index":3202,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["save",{"_index":692,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/DBKeyService.html":{}}}],["saves",{"_index":1768,"title":{},"body":{"injectables/FilesService.html":{}}}],["saveuserupload",{"_index":1752,"title":{},"body":{"injectables/FilesService.html":{}}}],["saveuserupload(tenantid",{"_index":1764,"title":{},"body":{"injectables/FilesService.html":{}}}],["schedulemodule",{"_index":208,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulemodule.forroot",{"_index":331,"title":{},"body":{"modules/AppModule.html":{}}}],["schedulerregistry",{"_index":3335,"title":{},"body":{"injectables/SessionService.html":{}}}],["schema",{"_index":984,"title":{},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/PresentationManagementController.html":{},"modules/RegistrarModule.html":{},"classes/SchemaResponse.html":{},"miscellaneous/variables.html":{}}}],["schema(@param(\"id",{"_index":1282,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema(id",{"_index":1269,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["schema.org/draft/2020",{"_index":3088,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["schema_uri",{"_index":3722,"title":{},"body":{"classes/VCT.html":{}}}],["schema_uri#integrity",{"_index":3723,"title":{},"body":{"classes/VCT.html":{}}}],["schemaresponse",{"_index":1025,"title":{"classes/SchemaResponse.html":{}},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/SchemaResponse.html":{},"coverage.html":{}}}],["scope",{"_index":715,"title":{},"body":{"classes/AuthorizeQueries.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/OAuthService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{}}}],["scopes_supported",{"_index":511,"title":{},"body":{"controllers/AuthController.html":{}}}],["sd",{"_index":1311,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"dependencies.html":{}}}],["sdjwt",{"_index":1353,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwt.issue",{"_index":1375,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["sdjwtinstance",{"_index":2743,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["sdjwtvcinstance",{"_index":1316,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{}}}],["sdk/client",{"_index":3061,"title":{},"body":{"classes/S3FileStorage.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["sdk/s3",{"_index":3062,"title":{},"body":{"classes/S3FileStorage.html":{},"dependencies.html":{}}}],["seconds",{"_index":493,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/ParResponseDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["secret",{"_index":463,"title":{},"body":{"controllers/AuthController.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TokenRequestDto.html":{}}}],["secretaccesskey",{"_index":3603,"title":{},"body":{"modules/StorageModule.html":{}}}],["secretkey",{"_index":1824,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["secretorkey",{"_index":2143,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secretorkeyprovider",{"_index":2103,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["secure",{"_index":1814,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["securely",{"_index":2414,"title":{},"body":{"injectables/OAuthService.html":{}}}],["self",{"_index":3631,"title":{},"body":{"controllers/TenantController.html":{}}}],["send",{"_index":145,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuerManagementController.html":{},"injectables/Oid4vpService.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["sendauthorizationcode",{"_index":732,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sendauthorizationcode(res",{"_index":752,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse",{"_index":733,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["sendauthorizationresponse(queries",{"_index":754,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["sending",{"_index":3758,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sends",{"_index":3662,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook",{"_index":3752,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhook(session",{"_index":3785,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sendwebhooknotification",{"_index":3776,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["sendwebhooknotification(session",{"_index":3787,"title":{},"body":{"injectables/WebhookService.html":{}}}],["sense",{"_index":3850,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["sensitive",{"_index":3203,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields",{"_index":3245,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sensitivefields.foreach((field",{"_index":3247,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["sent",{"_index":115,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["serializers",{"_index":313,"title":{},"body":{"modules/AppModule.html":{}}}],["server",{"_index":367,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["server')@apioperation({summary",{"_index":387,"title":{},"body":{"controllers/AuthController.html":{}}}],["server's",{"_index":2444,"title":{},"body":{"classes/Oauth2AuthorizationServerResponse.html":{}}}],["servers",{"_index":1207,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{}}}],["servestaticmodule",{"_index":210,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forrootasync",{"_index":332,"title":{},"body":{"modules/AppModule.html":{}}}],["service",{"_index":488,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/CredentialConfigService.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"classes/KeyService.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerService.html":{},"injectables/StatusListService.html":{},"controllers/StorageController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["service.db",{"_index":1594,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["service_documentation",{"_index":517,"title":{},"body":{"controllers/AuthController.html":{}}}],["services",{"_index":141,"title":{},"body":{"classes/ApiKeyConfig.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["session",{"_index":473,"title":{"entities/Session.html":{}},"body":{"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["session.auth_queries",{"_index":802,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.authorization_code",{"_index":832,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.claimswebhook",{"_index":2643,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.claimswebhook!.auth",{"_index":3753,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth.config.value",{"_index":3756,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth.type",{"_index":3754,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.auth?.type",{"_index":3762,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.claimswebhook!.url",{"_index":3760,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.controller",{"_index":3311,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.credentialpayload",{"_index":3770,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.credentialpayload!.claims",{"_index":3768,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.credentialpayload?.claims?.[credentialconfigurationid",{"_index":1347,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["session.credentials",{"_index":861,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["session.id",{"_index":780,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.issuanceid",{"_index":813,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["session.notifywebhook",{"_index":3777,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session.pipe",{"_index":3166,"title":{},"body":{"controllers/SessionController.html":{}}}],["session.requestid",{"_index":2567,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session.service",{"_index":3167,"title":{},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{}}}],["session.tenantid",{"_index":782,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["session.vp_nonce",{"_index":2647,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["session/.well",{"_index":3790,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["session/authorize",{"_index":643,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["session/entities/session.entity",{"_index":673,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["session/oid4vp",{"_index":2513,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["session/session.decorator",{"_index":675,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{}}}],["session/session.module",{"_index":240,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/VerifierModule.html":{}}}],["session/session.service",{"_index":677,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["session/vci",{"_index":2476,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_id",{"_index":2510,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["session_logger_key",{"_index":3210,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["session_tidy_up_interval",{"_index":3312,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["session_ttl",{"_index":3314,"title":{},"body":{"modules/SessionModule.html":{},"miscellaneous/variables.html":{}}}],["session_type",{"_index":3319,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["session_validation_schema",{"_index":239,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessioncontroller",{"_index":3146,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionentity",{"_index":674,"title":{},"body":{"controllers/AuthorizeController.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/WellKnownController.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["sessionid",{"_index":311,"title":{},"body":{"modules/AppModule.html":{},"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionPipe.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{}}}],["sessionidparam",{"_index":3213,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"miscellaneous/variables.html":{}}}],["sessionlogcontext",{"_index":2557,"title":{"interfaces/SessionLogContext.html":{}},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["sessionlogger",{"_index":2491,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sessionlogger(\"nonce",{"_index":2504,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger(\"notification_id",{"_index":2501,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["sessionlogger(\"session",{"_index":2498,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["sessionloggerinterceptor",{"_index":2044,"title":{"injectables/SessionLoggerInterceptor.html":{}},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/SessionLoggerInterceptor.html":{},"coverage.html":{},"index.html":{}}}],["sessionloggerservice",{"_index":2045,"title":{"injectables/SessionLoggerService.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"injectables/SessionLoggerService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["sessionmodule",{"_index":192,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"modules/SessionModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["sessionpipe",{"_index":3165,"title":{"injectables/SessionPipe.html":{}},"body":{"controllers/SessionController.html":{},"injectables/SessionPipe.html":{},"coverage.html":{}}}],["sessionrepository",{"_index":3339,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":3142,"title":{},"body":{"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sessionscounter",{"_index":3336,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionservice",{"_index":676,"title":{"injectables/SessionService.html":{}},"body":{"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["sessionstatus",{"_index":3126,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/enumerations.html":{}}}],["sessionstatus.active",{"_index":3385,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.completed",{"_index":3387,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.expired",{"_index":3388,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.failed",{"_index":3389,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus.fetched",{"_index":3386,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionstatus})@column('varchar",{"_index":3128,"title":{},"body":{"entities/Session.html":{}}}],["sessiontype",{"_index":3402,"title":{},"body":{"injectables/SessionService.html":{}}}],["set",{"_index":353,"title":{},"body":{"controllers/AuthController.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtStrategy.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["set+json",{"_index":3819,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["set+json')@get('jwks.json",{"_index":3798,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["setauthcode",{"_index":734,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["setauthcode(issuer_state",{"_index":756,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["setentry",{"_index":3458,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setentry(id",{"_index":3475,"title":{},"body":{"injectables/StatusListService.html":{}}}],["setexpirationtime(expiresin",{"_index":1832,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setglobalconfig",{"_index":2051,"title":{},"body":{"modules/IssuerModule.html":{}}}],["setinterval(callback",{"_index":3382,"title":{},"body":{"injectables/SessionService.html":{}}}],["setissuedat",{"_index":1828,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setissuer(issuer",{"_index":1829,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setmetadata(is_public_key",{"_index":4067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(session_logger_key",{"_index":4068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setprotectedheader",{"_index":1826,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["setprotectedheader(header",{"_index":1558,"title":{},"body":{"classes/DBKeyService.html":{}}}],["setstate",{"_index":3332,"title":{},"body":{"injectables/SessionService.html":{}}}],["setstate(session",{"_index":3363,"title":{},"body":{"injectables/SessionService.html":{}}}],["setsubject(options.subject",{"_index":1830,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["settimeout",{"_index":2941,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["setuptenant",{"_index":3641,"title":{},"body":{"injectables/TenantService.html":{}}}],["setuptenant(id",{"_index":3660,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["sha",{"_index":1358,"title":{},"body":{"injectables/CredentialsService.html":{},"miscellaneous/variables.html":{}}}],["sha256",{"_index":1731,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["shouldenableautologging",{"_index":2304,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["shouldlog",{"_index":3263,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["shuffel",{"_index":3487,"title":{},"body":{"injectables/StatusListService.html":{}}}],["shuffled",{"_index":3473,"title":{},"body":{"injectables/StatusListService.html":{}}}],["sign",{"_index":2202,"title":{},"body":{"entities/KeyEntity.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/S3FileStorage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sign(privatekeyinstance",{"_index":1559,"title":{},"body":{"classes/DBKeyService.html":{}}}],["signalg",{"_index":1355,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["signature",{"_index":1419,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["signature).catch((err",{"_index":2815,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["signaturebase64url",{"_index":4062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["signed",{"_index":3838,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["signedjwt",{"_index":2610,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwt.length",{"_index":2615,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signedjwtlength",{"_index":2614,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["signer",{"_index":836,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/KeyService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["signer(tenantid",{"_index":1493,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["signing",{"_index":527,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"injectables/JwtStrategy.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/StatusListService.html":{},"miscellaneous/typealiases.html":{}}}],["signjwt",{"_index":1460,"title":{},"body":{"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"classes/KeyService.html":{}}}],["signjwt(payload",{"_index":1495,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["simplicity",{"_index":2830,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["singleline",{"_index":301,"title":{},"body":{"modules/AppModule.html":{}}}],["size",{"_index":1736,"title":{},"body":{"interfaces/FileStorage.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"injectables/StatusListService.html":{}}}],["skip",{"_index":1147,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["slice(1",{"_index":1783,"title":{},"body":{"injectables/FilesService.html":{}}}],["someone",{"_index":2990,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["sort",{"_index":3491,"title":{},"body":{"injectables/StatusListService.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"modules/CryptoModule.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/HealthController.html":{},"modules/HealthModule.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"modules/IssuerModule.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"modules/KeyModule.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"modules/MetricModule.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"modules/OAuthModule.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"modules/PresentationsModule.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"modules/RegistrarModule.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"modules/ResolverModule.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"modules/SessionModule.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/UpdateKeyDto.html":{},"classes/VCT.html":{},"modules/VerifierModule.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["specific",{"_index":524,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/FilesService.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["specified",{"_index":3833,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["sqlite",{"_index":1571,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["sqlite3",{"_index":3984,"title":{},"body":{"dependencies.html":{}}}],["src",{"_index":2280,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src.pipe(write",{"_index":2282,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/.../auth.module.ts",{"_index":4036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../authentication",{"_index":3991,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../cert.entity.ts",{"_index":4030,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../crypto",{"_index":4031,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../crypto.service.ts",{"_index":4038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../database.module.ts",{"_index":4037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ed25519.ts",{"_index":4039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../issuer.module.ts",{"_index":4041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../key.module.ts",{"_index":4042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../keys.entity.ts",{"_index":4033,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../main.ts",{"_index":3999,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../media",{"_index":3992,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../oauth.module.ts",{"_index":4043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../policies.dto.ts",{"_index":4034,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../presentation",{"_index":3994,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../public.decorator.ts",{"_index":4040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../registrar.module.ts",{"_index":4044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session",{"_index":4045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../session.decorator.ts",{"_index":4001,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../session.entity.ts",{"_index":3995,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../session.module.ts",{"_index":4046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../storage.module.ts",{"_index":4032,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../storage.types.ts",{"_index":4035,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../token.decorator.ts",{"_index":4047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../util.ts",{"_index":4000,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../webhook.dto.ts",{"_index":3990,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":199,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.controller.ts",{"_index":160,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app/app.controller.ts:8",{"_index":162,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app/dto/oidc",{"_index":3857,"title":{},"body":{"coverage.html":{}}}],["src/auth/admin.guard.ts",{"_index":36,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"coverage.html":{}}}],["src/auth/admin.guard.ts:6",{"_index":44,"title":{},"body":{"injectables/AdminAuthGuard.html":{}}}],["src/auth/auth.controller.ts",{"_index":345,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:172",{"_index":393,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:207",{"_index":357,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:75",{"_index":379,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":2076,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.guard.ts:12",{"_index":2080,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.guard.ts:7",{"_index":2079,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["src/auth/auth.module.ts",{"_index":535,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/client",{"_index":970,"title":{},"body":{"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"coverage.html":{}}}],["src/auth/dto/oidc",{"_index":3864,"title":{},"body":{"coverage.html":{}}}],["src/auth/dto/token",{"_index":3709,"title":{},"body":{"classes/TokenResponse.html":{},"coverage.html":{}}}],["src/auth/entitites/tenant.entity.ts",{"_index":3633,"title":{},"body":{"entities/TenantEntity.html":{},"coverage.html":{}}}],["src/auth/entitites/tenant.entity.ts:12",{"_index":3634,"title":{},"body":{"entities/TenantEntity.html":{}}}],["src/auth/entitites/tenant.entity.ts:18",{"_index":3636,"title":{},"body":{"entities/TenantEntity.html":{}}}],["src/auth/jwt.service.ts",{"_index":1809,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"coverage.html":{}}}],["src/auth/jwt.service.ts:14",{"_index":2089,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:28",{"_index":2091,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:65",{"_index":2093,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.service.ts:91",{"_index":2092,"title":{},"body":{"injectables/JwtService.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":2094,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":2100,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:27",{"_index":2102,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:55",{"_index":2106,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:79",{"_index":2108,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:9",{"_index":2098,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/public.decorator.ts",{"_index":3871,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/tenant.service.ts",{"_index":3637,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["src/auth/tenant.service.ts:114",{"_index":3669,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:127",{"_index":3650,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:135",{"_index":3661,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:149",{"_index":3647,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:31",{"_index":3645,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:47",{"_index":3659,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:61",{"_index":3658,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:71",{"_index":3656,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:76",{"_index":3654,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:88",{"_index":3652,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant.service.ts:98",{"_index":3657,"title":{},"body":{"injectables/TenantService.html":{}}}],["src/auth/tenant/tenant.controller.ts",{"_index":3607,"title":{},"body":{"controllers/TenantController.html":{},"coverage.html":{}}}],["src/auth/tenant/tenant.controller.ts:32",{"_index":3616,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/auth/tenant/tenant.controller.ts:46",{"_index":3614,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/auth/tenant/tenant.controller.ts:55",{"_index":3612,"title":{},"body":{"controllers/TenantController.html":{}}}],["src/auth/token.decorator.ts",{"_index":3697,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/crypto.module.ts",{"_index":1441,"title":{},"body":{"modules/CryptoModule.html":{}}}],["src/crypto/crypto.service.ts",{"_index":3877,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/encryption/encryption.service.ts",{"_index":1663,"title":{},"body":{"injectables/EncryptionService.html":{},"coverage.html":{}}}],["src/crypto/encryption/encryption.service.ts:12",{"_index":1671,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:26",{"_index":1683,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:44",{"_index":1681,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:54",{"_index":1673,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/encryption/encryption.service.ts:74",{"_index":1680,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["src/crypto/key/adapters/db",{"_index":1451,"title":{},"body":{"classes/DBKeyService.html":{},"coverage.html":{}}}],["src/crypto/key/adapters/vault",{"_index":3884,"title":{},"body":{"coverage.html":{}}}],["src/crypto/key/crypto",{"_index":1392,"title":{},"body":{"modules/CryptoImplementatationModule.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/dto/key",{"_index":2154,"title":{},"body":{"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["src/crypto/key/entities/cert.entity.ts",{"_index":888,"title":{},"body":{"entities/CertEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/cert.entity.ts:21",{"_index":903,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:27",{"_index":910,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:33",{"_index":907,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:39",{"_index":899,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:45",{"_index":912,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:51",{"_index":901,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:57",{"_index":895,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/cert.entity.ts:63",{"_index":914,"title":{},"body":{"entities/CertEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts",{"_index":2195,"title":{},"body":{"entities/KeyEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/crypto/key/entities/keys.entity.ts:16",{"_index":2196,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:22",{"_index":2200,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:28",{"_index":2199,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:34",{"_index":2197,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/entities/keys.entity.ts:40",{"_index":2203,"title":{},"body":{"entities/KeyEntity.html":{}}}],["src/crypto/key/key.controller.ts",{"_index":2167,"title":{},"body":{"controllers/KeyController.html":{},"coverage.html":{}}}],["src/crypto/key/key.controller.ts:39",{"_index":2177,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:51",{"_index":2173,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:67",{"_index":2181,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.controller.ts:82",{"_index":2175,"title":{},"body":{"controllers/KeyController.html":{}}}],["src/crypto/key/key.module.ts",{"_index":2208,"title":{},"body":{"modules/KeyModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/crypto/key/key.module.ts:33",{"_index":2210,"title":{},"body":{"modules/KeyModule.html":{}}}],["src/crypto/key/key.service.ts",{"_index":2236,"title":{},"body":{"classes/KeyService.html":{},"coverage.html":{}}}],["src/crypto/key/key.service.ts:12",{"_index":2238,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:23",{"_index":2247,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:30",{"_index":2239,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:37",{"_index":2245,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:43",{"_index":2249,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:49",{"_index":2241,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:55",{"_index":2242,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:60",{"_index":2243,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:65",{"_index":2244,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:72",{"_index":2252,"title":{},"body":{"classes/KeyService.html":{}}}],["src/crypto/key/key.service.ts:85",{"_index":2240,"title":{},"body":{"classes/KeyService.html":{}}}],["src/database/database.module.ts",{"_index":1563,"title":{},"body":{"modules/DatabaseModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/health/health.controller.ts",{"_index":1845,"title":{},"body":{"controllers/HealthController.html":{},"coverage.html":{}}}],["src/health/health.controller.ts:25",{"_index":1854,"title":{},"body":{"controllers/HealthController.html":{}}}],["src/health/health.module.ts",{"_index":1862,"title":{},"body":{"modules/HealthModule.html":{}}}],["src/issuer/authorize/authorize.controller.ts",{"_index":641,"title":{},"body":{"controllers/AuthorizeController.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.controller.ts:30",{"_index":657,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:44",{"_index":664,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:65",{"_index":667,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.controller.ts:81",{"_index":654,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["src/issuer/authorize/authorize.service.ts",{"_index":728,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"coverage.html":{}}}],["src/issuer/authorize/authorize.service.ts:103",{"_index":759,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:206",{"_index":749,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:224",{"_index":741,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:296",{"_index":753,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:303",{"_index":757,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:37",{"_index":740,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:48",{"_index":746,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:55",{"_index":743,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/authorize.service.ts:78",{"_index":755,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["src/issuer/authorize/dto/authorize",{"_index":705,"title":{},"body":{"classes/AuthorizeQueries.html":{},"coverage.html":{}}}],["src/issuer/authorize/dto/par",{"_index":2659,"title":{},"body":{"classes/ParResponseDto.html":{},"coverage.html":{}}}],["src/issuer/credentials",{"_index":1265,"title":{},"body":{"controllers/CredentialsMetadataController.html":{},"classes/SchemaResponse.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["src/issuer/credentials/credential",{"_index":1074,"title":{},"body":{"injectables/CredentialConfigService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts",{"_index":1233,"title":{},"body":{"controllers/CredentialsController.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.controller.ts:35",{"_index":1242,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:45",{"_index":1244,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.controller.ts:58",{"_index":1240,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["src/issuer/credentials/credentials.service.ts",{"_index":1284,"title":{},"body":{"injectables/CredentialsService.html":{},"coverage.html":{}}}],["src/issuer/credentials/credentials.service.ts:107",{"_index":1296,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:203",{"_index":1305,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:229",{"_index":1303,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:23",{"_index":1293,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/credentials.service.ts:46",{"_index":1301,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["src/issuer/credentials/dto/credential",{"_index":1056,"title":{},"body":{"classes/CredentialConfigCreate.html":{},"coverage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts",{"_index":979,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"coverage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:100",{"_index":990,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:105",{"_index":996,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:111",{"_index":1032,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:116",{"_index":1020,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:120",{"_index":1021,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:123",{"_index":1017,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:128",{"_index":1028,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:133",{"_index":1024,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:139",{"_index":1027,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:172",{"_index":1001,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:179",{"_index":1016,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:34",{"_index":1631,"title":{},"body":{"classes/DisplayImage.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:38",{"_index":1601,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:40",{"_index":1598,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:42",{"_index":1599,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:44",{"_index":1595,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:46",{"_index":1602,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:49",{"_index":1597,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:52",{"_index":1600,"title":{},"body":{"classes/Display.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:57",{"_index":2037,"title":{},"body":{"classes/IssuerMetadataCredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:60",{"_index":2036,"title":{},"body":{"classes/IssuerMetadataCredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:63",{"_index":2038,"title":{},"body":{"classes/IssuerMetadataCredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:76",{"_index":1013,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:80",{"_index":995,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:84",{"_index":1031,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:90",{"_index":1029,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/credential.entity.ts:95",{"_index":993,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts",{"_index":58,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:24",{"_index":1662,"title":{},"body":{"classes/EmbeddedDisclosurePolicy.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:35",{"_index":69,"title":{},"body":{"classes/AllowListPolicy.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:47",{"_index":3042,"title":{},"body":{"classes/RootOfTrustPolicy.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:62",{"_index":2661,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:68",{"_index":2663,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:74",{"_index":2662,"title":{},"body":{"classes/PolicyCredential.html":{}}}],["src/issuer/credentials/entities/policies.dto.ts:86",{"_index":343,"title":{},"body":{"classes/AttestationBasedPolicy.html":{}}}],["src/issuer/display/display.controller.ts",{"_index":1604,"title":{},"body":{"controllers/DisplayController.html":{},"coverage.html":{}}}],["src/issuer/display/display.controller.ts:27",{"_index":1612,"title":{},"body":{"controllers/DisplayController.html":{}}}],["src/issuer/display/display.controller.ts:38",{"_index":1610,"title":{},"body":{"controllers/DisplayController.html":{}}}],["src/issuer/display/display.service.ts",{"_index":1636,"title":{},"body":{"injectables/DisplayService.html":{},"coverage.html":{}}}],["src/issuer/display/display.service.ts:11",{"_index":1638,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/display.service.ts:26",{"_index":1641,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/display.service.ts:38",{"_index":1640,"title":{},"body":{"injectables/DisplayService.html":{}}}],["src/issuer/display/dto/display",{"_index":1620,"title":{},"body":{"classes/DisplayCreateDto.html":{},"coverage.html":{}}}],["src/issuer/display/entities/display.entity.ts",{"_index":1624,"title":{},"body":{"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"coverage.html":{}}}],["src/issuer/display/entities/display.entity.ts:13",{"_index":1634,"title":{},"body":{"classes/DisplayInfo.html":{}}}],["src/issuer/display/entities/display.entity.ts:15",{"_index":1632,"title":{},"body":{"classes/DisplayInfo.html":{}}}],["src/issuer/display/entities/display.entity.ts:19",{"_index":1633,"title":{},"body":{"classes/DisplayInfo.html":{}}}],["src/issuer/display/entities/display.entity.ts:26",{"_index":1626,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/display/entities/display.entity.ts:32",{"_index":1625,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/display/entities/display.entity.ts:40",{"_index":1629,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["src/issuer/display/entities/display.entity.ts:9",{"_index":1635,"title":{},"body":{"classes/DisplayLogo.html":{}}}],["src/issuer/issuance/dto/authentication",{"_index":599,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts",{"_index":1062,"title":{},"body":{"classes/CredentialConfigMapping.html":{},"classes/IssuanceDto.html":{},"coverage.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:13",{"_index":1065,"title":{},"body":{"classes/CredentialConfigMapping.html":{}}}],["src/issuer/issuance/dto/issuance.dto.ts:30",{"_index":1919,"title":{},"body":{"classes/IssuanceDto.html":{}}}],["src/issuer/issuance/entities/issuance",{"_index":1865,"title":{},"body":{"entities/IssuanceConfig.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts",{"_index":1903,"title":{},"body":{"controllers/IssuanceController.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.controller.ts:28",{"_index":1909,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:38",{"_index":1911,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.controller.ts:54",{"_index":1907,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["src/issuer/issuance/issuance.service.ts",{"_index":1920,"title":{},"body":{"injectables/IssuanceService.html":{},"coverage.html":{}}}],["src/issuer/issuance/issuance.service.ts:159",{"_index":1937,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:168",{"_index":1931,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:181",{"_index":1933,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:197",{"_index":1939,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:21",{"_index":1926,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:221",{"_index":1929,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:39",{"_index":1936,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuance/issuance.service.ts:48",{"_index":1935,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["src/issuer/issuer",{"_index":1980,"title":{},"body":{"controllers/IssuerManagementController.html":{},"coverage.html":{}}}],["src/issuer/issuer.module.ts",{"_index":2047,"title":{},"body":{"modules/IssuerModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/issuer/oid4vci/dto/notification",{"_index":2353,"title":{},"body":{"classes/NotificationRequestDto.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/dto/offer",{"_index":2452,"title":{},"body":{"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts",{"_index":2475,"title":{},"body":{"controllers/Oid4vciController.html":{},"coverage.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:29",{"_index":2480,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:43",{"_index":2487,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.controller.ts:53",{"_index":2484,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["src/issuer/oid4vci/oid4vci.service.ts",{"_index":3915,"title":{},"body":{"coverage.html":{}}}],["src/issuer/oid4vci/util.ts",{"_index":3918,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/issuer/status",{"_index":3415,"title":{},"body":{"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["src/main.ts",{"_index":3921,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/metric/metric.module.ts",{"_index":2344,"title":{},"body":{"modules/MetricModule.html":{}}}],["src/oauth/dto/token",{"_index":3703,"title":{},"body":{"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"coverage.html":{}}}],["src/oauth/oauth.controller.ts",{"_index":2360,"title":{},"body":{"controllers/OAuthController.html":{},"coverage.html":{}}}],["src/oauth/oauth.controller.ts:22",{"_index":2369,"title":{},"body":{"controllers/OAuthController.html":{}}}],["src/oauth/oauth.module.ts",{"_index":2384,"title":{},"body":{"modules/OAuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/oauth/oauth.service.ts",{"_index":2389,"title":{},"body":{"injectables/OAuthService.html":{},"coverage.html":{}}}],["src/oauth/oauth.service.ts:10",{"_index":2397,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:100",{"_index":2405,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:20",{"_index":2406,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:33",{"_index":2403,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:60",{"_index":2410,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:68",{"_index":2401,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:92",{"_index":2399,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/oauth/oauth.service.ts:96",{"_index":2408,"title":{},"body":{"injectables/OAuthService.html":{}}}],["src/registrar/dto/access",{"_index":6,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"coverage.html":{}}}],["src/registrar/entities/registrar.entity.ts",{"_index":2834,"title":{},"body":{"entities/RegistrarEntity.html":{},"coverage.html":{}}}],["src/registrar/entities/registrar.entity.ts:13",{"_index":2839,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:16",{"_index":2838,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:19",{"_index":2837,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/entities/registrar.entity.ts:7",{"_index":2840,"title":{},"body":{"entities/RegistrarEntity.html":{}}}],["src/registrar/registrar.module.ts",{"_index":2845,"title":{},"body":{"modules/RegistrarModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/registrar/registrar.service.ts",{"_index":2858,"title":{},"body":{"injectables/RegistrarService.html":{},"coverage.html":{}}}],["src/registrar/registrar.service.ts:100",{"_index":2888,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:111",{"_index":2896,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:133",{"_index":2894,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:141",{"_index":2897,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:158",{"_index":2882,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:181",{"_index":2886,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:198",{"_index":2877,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:240",{"_index":2880,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:32",{"_index":2903,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:36",{"_index":2901,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:40",{"_index":2873,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:59",{"_index":2893,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/registrar/registrar.service.ts:92",{"_index":2887,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["src/session/entities/session.entity.ts",{"_index":3100,"title":{},"body":{"entities/Session.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["src/session/entities/session.entity.ts:105",{"_index":3117,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:111",{"_index":3107,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:117",{"_index":3135,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:120",{"_index":3113,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:126",{"_index":3121,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:132",{"_index":3122,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:138",{"_index":3108,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:143",{"_index":3105,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:148",{"_index":3119,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:153",{"_index":3118,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:158",{"_index":3132,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:164",{"_index":3131,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:171",{"_index":3130,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:58",{"_index":3115,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:61",{"_index":3116,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:67",{"_index":3124,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:73",{"_index":3125,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:79",{"_index":3110,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:84",{"_index":3104,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:89",{"_index":3123,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:94",{"_index":3103,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:99",{"_index":3136,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session.controller.ts",{"_index":3147,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{}}}],["src/session/session.controller.ts:33",{"_index":3154,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:43",{"_index":3158,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:54",{"_index":3153,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.controller.ts:67",{"_index":3162,"title":{},"body":{"controllers/SessionController.html":{}}}],["src/session/session.decorator.ts",{"_index":3923,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/session/session.module.ts",{"_index":3310,"title":{},"body":{"modules/SessionModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/session/session.pipe.ts",{"_index":3320,"title":{},"body":{"injectables/SessionPipe.html":{},"coverage.html":{}}}],["src/session/session.pipe.ts:6",{"_index":3323,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["src/session/session.pipe.ts:9",{"_index":3325,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["src/session/session.service.ts",{"_index":3330,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/session/session.service.ts:118",{"_index":3364,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:144",{"_index":3342,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:152",{"_index":3350,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:163",{"_index":3349,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:172",{"_index":3353,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:179",{"_index":3366,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:19",{"_index":3338,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:192",{"_index":3347,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:34",{"_index":3355,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:89",{"_index":3362,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:98",{"_index":3345,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/storage/adapters/local.storage.ts",{"_index":2256,"title":{},"body":{"classes/LocalFileStorage.html":{},"coverage.html":{}}}],["src/storage/adapters/local.storage.ts:13",{"_index":2258,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:16",{"_index":2263,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:37",{"_index":2262,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:42",{"_index":2260,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/local.storage.ts:46",{"_index":2261,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts",{"_index":3044,"title":{},"body":{"classes/S3FileStorage.html":{},"coverage.html":{}}}],["src/storage/adapters/s3.storage.ts:13",{"_index":3049,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:20",{"_index":3055,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:56",{"_index":3054,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:68",{"_index":3051,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:74",{"_index":3052,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/adapters/s3.storage.ts:85",{"_index":3053,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["src/storage/dto/file",{"_index":1744,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["src/storage/entities/files.entity.ts",{"_index":1703,"title":{},"body":{"entities/FileEntity.html":{},"coverage.html":{}}}],["src/storage/entities/files.entity.ts:13",{"_index":1707,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/storage/entities/files.entity.ts:19",{"_index":1706,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/storage/entities/files.entity.ts:7",{"_index":1705,"title":{},"body":{"entities/FileEntity.html":{}}}],["src/storage/files.service.ts",{"_index":1749,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{}}}],["src/storage/files.service.ts:15",{"_index":1755,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:30",{"_index":1767,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:64",{"_index":1763,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:73",{"_index":1756,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:77",{"_index":1762,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/files.service.ts:88",{"_index":1759,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/storage/storage.controller.ts",{"_index":3540,"title":{},"body":{"controllers/StorageController.html":{},"coverage.html":{}}}],["src/storage/storage.controller.ts:44",{"_index":3550,"title":{},"body":{"controllers/StorageController.html":{}}}],["src/storage/storage.controller.ts:52",{"_index":3544,"title":{},"body":{"controllers/StorageController.html":{}}}],["src/storage/storage.module.ts",{"_index":3572,"title":{},"body":{"modules/StorageModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/storage/storage.module.ts:55",{"_index":3573,"title":{},"body":{"modules/StorageModule.html":{}}}],["src/storage/storage.types.ts",{"_index":1709,"title":{},"body":{"interfaces/FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/storage/storage.types.ts:21",{"_index":1726,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:27",{"_index":1720,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:31",{"_index":1714,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:33",{"_index":1716,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/storage/storage.types.ts:35",{"_index":1718,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["src/utils/logger/logger",{"_index":2294,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"coverage.html":{}}}],["src/utils/logger/session",{"_index":3177,"title":{},"body":{"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/utils/mediatype/media",{"_index":3933,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/utils/webhook/webhook.dto.ts",{"_index":106,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/utils/webhook/webhook.dto.ts:105",{"_index":3744,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:19",{"_index":113,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:24",{"_index":116,"title":{},"body":{"classes/ApiKeyConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:44",{"_index":3741,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{}}}],["src/utils/webhook/webhook.dto.ts:51",{"_index":3739,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{}}}],["src/utils/webhook/webhook.dto.ts:60",{"_index":3742,"title":{},"body":{"classes/WebHookAuthConfigNone.html":{}}}],["src/utils/webhook/webhook.dto.ts:65",{"_index":3737,"title":{},"body":{"classes/WebHookAuthConfig.html":{}}}],["src/utils/webhook/webhook.dto.ts:77",{"_index":3745,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["src/utils/webhook/webhook.service.ts",{"_index":3747,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["src/utils/webhook/webhook.service.ts:111",{"_index":3788,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:12",{"_index":3748,"title":{},"body":{"classes/WebhookResponse.html":{}}}],["src/utils/webhook/webhook.service.ts:20",{"_index":3784,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/utils/webhook/webhook.service.ts:40",{"_index":3786,"title":{},"body":{"injectables/WebhookService.html":{}}}],["src/verifier/oid4vp/dto/authorization",{"_index":637,"title":{},"body":{"classes/AuthorizationResponse.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/dto/presentation",{"_index":2720,"title":{},"body":{"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts",{"_index":2512,"title":{},"body":{"controllers/Oid4vpController.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:32",{"_index":2518,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.controller.ts:43",{"_index":2522,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["src/verifier/oid4vp/oid4vp.module.ts",{"_index":2533,"title":{},"body":{"modules/Oid4vpModule.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts",{"_index":2538,"title":{},"body":{"injectables/Oid4vpService.html":{},"coverage.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:20",{"_index":2543,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:205",{"_index":2551,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:264",{"_index":2552,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/oid4vp/oid4vp.service.ts:41",{"_index":2545,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["src/verifier/presentations/dto/auth",{"_index":582,"title":{},"body":{"interfaces/AuthResponse.html":{},"coverage.html":{}}}],["src/verifier/presentations/dto/presentation",{"_index":2684,"title":{},"body":{"classes/PresentationConfigCreateDto.html":{},"coverage.html":{}}}],["src/verifier/presentations/dto/vp",{"_index":2993,"title":{},"body":{"classes/RegistrationCertificateRequest.html":{},"coverage.html":{}}}],["src/verifier/presentations/entities/presentation",{"_index":922,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts",{"_index":2689,"title":{},"body":{"controllers/PresentationManagementController.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.controller.ts:111",{"_index":2693,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:121",{"_index":2701,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:137",{"_index":2695,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.controller.ts:79",{"_index":2699,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["src/verifier/presentations/presentations.module.ts",{"_index":2734,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["src/verifier/presentations/presentations.service.ts",{"_index":2739,"title":{},"body":{"injectables/PresentationsService.html":{},"coverage.html":{}}}],["src/verifier/presentations/presentations.service.ts:147",{"_index":2764,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:160",{"_index":2777,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:176",{"_index":2758,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:186",{"_index":2762,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:207",{"_index":2779,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:220",{"_index":2786,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:243",{"_index":2784,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:258",{"_index":2782,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:275",{"_index":2772,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:33",{"_index":2753,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:53",{"_index":2768,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/presentations/presentations.service.ts:66",{"_index":2765,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["src/verifier/resolver/dto/issuer",{"_index":2035,"title":{},"body":{"interfaces/IssuerMetadata.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.module.ts",{"_index":3000,"title":{},"body":{"modules/ResolverModule.html":{}}}],["src/verifier/resolver/resolver.service.ts",{"_index":3002,"title":{},"body":{"injectables/ResolverService.html":{},"coverage.html":{}}}],["src/verifier/resolver/resolver.service.ts:12",{"_index":3005,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/resolver/resolver.service.ts:21",{"_index":3007,"title":{},"body":{"injectables/ResolverService.html":{}}}],["src/verifier/verifier.module.ts",{"_index":3736,"title":{},"body":{"modules/VerifierModule.html":{}}}],["src/well",{"_index":1191,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{}}}],["st",{"_index":2286,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["st.size",{"_index":2288,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["stack",{"_index":3240,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{}}}],["stage",{"_index":2564,"title":{},"body":{"injectables/Oid4vpService.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{}}}],["start",{"_index":2548,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["started",{"_index":3293,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["starting",{"_index":3225,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["starts",{"_index":2891,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["startswith(\"http",{"_index":2073,"title":{},"body":{"modules/IssuerModule.html":{}}}],["starttime",{"_index":3226,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["state",{"_index":585,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/SessionService.html":{}}}],["statements",{"_index":3855,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":3384,"title":{},"body":{"injectables/SessionService.html":{}}}],["static",{"_index":212,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{},"dependencies.html":{}}}],["statsync",{"_index":2269,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["statsync(fullpath",{"_index":2287,"title":{},"body":{"classes/LocalFileStorage.html":{}}}],["status",{"_index":431,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialsService.html":{},"controllers/IssuerManagementController.html":{},"modules/IssuerModule.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["status_list",{"_index":3514,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuscode",{"_index":326,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionLoggerInterceptor.html":{}}}],["statuslist",{"_index":3480,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslist(entry.elements",{"_index":3498,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslist+jwt",{"_index":3503,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistcontroller",{"_index":3414,"title":{"controllers/StatusListController.html":{}},"body":{"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"coverage.html":{}}}],["statuslistentity",{"_index":3430,"title":{"entities/StatusListEntity.html":{}},"body":{"entities/StatusListEntity.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"coverage.html":{}}}],["statuslistfetcher",{"_index":2744,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["statuslistjwtheaderparameters",{"_index":3481,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistmodule",{"_index":532,"title":{"modules/StatusListModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/IssuerModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"index.html":{},"modules.html":{}}}],["statuslistrepository",{"_index":3461,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statuslistservice",{"_index":1290,"title":{"injectables/StatusListService.html":{}},"body":{"injectables/CredentialsService.html":{},"controllers/SessionController.html":{},"controllers/StatusListController.html":{},"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["statusmanagement",{"_index":985,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["statusmapping",{"_index":3451,"title":{"entities/StatusMapping.html":{}},"body":{"modules/StatusListModule.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"coverage.html":{}}}],["statusmappingrepository",{"_index":3460,"title":{},"body":{"injectables/StatusListService.html":{}}}],["statusupdatedto",{"_index":3160,"title":{"classes/StatusUpdateDto.html":{}},"body":{"controllers/SessionController.html":{},"injectables/StatusListService.html":{},"classes/StatusUpdateDto.html":{},"coverage.html":{}}}],["step",{"_index":696,"title":{},"body":{"controllers/AuthorizeController.html":{},"injectables/SessionLoggerService.html":{}}}],["still",{"_index":476,"title":{},"body":{"controllers/AuthController.html":{}}}],["stopatfirsterror",{"_index":1163,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["storage",{"_index":330,"title":{},"body":{"modules/AppModule.html":{},"injectables/FilesService.html":{},"controllers/StorageController.html":{}}}],["storage.controller",{"_index":3576,"title":{},"body":{"modules/StorageModule.html":{}}}],["storage.types",{"_index":2271,"title":{},"body":{"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"modules/StorageModule.html":{}}}],["storage/files.service",{"_index":3672,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["storage/storage.module",{"_index":242,"title":{},"body":{"modules/AppModule.html":{}}}],["storage/storage.types",{"_index":1776,"title":{},"body":{"injectables/FilesService.html":{}}}],["storage_driver",{"_index":3578,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["storagecontroller",{"_index":3539,"title":{"controllers/StorageController.html":{}},"body":{"controllers/StorageController.html":{},"modules/StorageModule.html":{},"coverage.html":{}}}],["storagemodule",{"_index":193,"title":{"modules/StorageModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StorageModule.html":{},"index.html":{},"modules.html":{}}}],["storagemodule.forroot",{"_index":338,"title":{},"body":{"modules/AppModule.html":{}}}],["store",{"_index":1081,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/OAuthService.html":{},"controllers/Oid4vciController.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/StatusListService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["store(tenantid",{"_index":1104,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["storecredentialconfiguration",{"_index":1237,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["storecredentialconfiguration(config",{"_index":1243,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["stored",{"_index":1110,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/FilesService.html":{},"injectables/PresentationsService.html":{},"injectables/StatusListService.html":{}}}],["storedobject",{"_index":1732,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["storedsecret",{"_index":2430,"title":{},"body":{"injectables/OAuthService.html":{}}}],["storeissuanceconfiguration",{"_index":1906,"title":{},"body":{"controllers/IssuanceController.html":{},"injectables/IssuanceService.html":{}}}],["storeissuanceconfiguration(config",{"_index":1910,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["storeissuanceconfiguration(tenantid",{"_index":1938,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["storepresentationconfig",{"_index":2691,"title":{},"body":{"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{}}}],["storepresentationconfig(config",{"_index":2700,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["storepresentationconfig(tenantid",{"_index":2775,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid",{"_index":2749,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["storercid(registrationcertid",{"_index":2778,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["stores",{"_index":1106,"title":{},"body":{"injectables/CredentialConfigService.html":{},"controllers/CredentialsController.html":{},"controllers/IssuanceController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{}}}],["strategy",{"_index":2114,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":1727,"title":{},"body":{"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"classes/LocalFileStorage.html":{},"classes/S3FileStorage.html":{},"controllers/StorageController.html":{}}}],["stream.contenttype",{"_index":3570,"title":{},"body":{"controllers/StorageController.html":{}}}],["stream.size",{"_index":3571,"title":{},"body":{"controllers/StorageController.html":{}}}],["streamablefile",{"_index":3553,"title":{},"body":{"controllers/StorageController.html":{}}}],["streamablefile(stream.stream",{"_index":3567,"title":{},"body":{"controllers/StorageController.html":{}}}],["string",{"_index":19,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"controllers/AppController.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["string})@get(':id",{"_index":3157,"title":{},"body":{"controllers/SessionController.html":{}}}],["structure",{"_index":870,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{}}}],["structured",{"_index":3252,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["sub",{"_index":478,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"injectables/OAuthService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{}}}],["subclass",{"_index":1009,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["subclass’s",{"_index":1011,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["subfolder",{"_index":1121,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["subject",{"_index":840,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"interfaces/TokenPayload.html":{}}}],["subject_types_supported",{"_index":508,"title":{},"body":{"controllers/AuthController.html":{}}}],["subtypes",{"_index":154,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["succeeded",{"_index":3304,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["success",{"_index":432,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionService.html":{}}}],["successful",{"_index":433,"title":{},"body":{"controllers/AuthController.html":{},"injectables/SessionService.html":{}}}],["successfully",{"_index":2613,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["such",{"_index":1656,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"entities/Session.html":{}}}],["summary",{"_index":428,"title":{},"body":{"controllers/AuthController.html":{},"controllers/IssuerManagementController.html":{},"controllers/OAuthController.html":{},"controllers/PresentationManagementController.html":{},"controllers/WellKnownController.html":{}}}],["super",{"_index":2084,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["super(config",{"_index":2120,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super(configservice",{"_index":1516,"title":{},"body":{"classes/DBKeyService.html":{}}}],["super.authenticate(req",{"_index":2122,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["super.canactivate(context",{"_index":55,"title":{},"body":{"injectables/AdminAuthGuard.html":{},"injectables/JwtAuthGuard.html":{}}}],["supersecret",{"_index":553,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["support",{"_index":447,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"entities/Session.html":{},"modules.html":{}}}],["supported",{"_index":450,"title":{},"body":{"controllers/AuthController.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{}}}],["supportedauthenticationscheme.clientattestationjwt",{"_index":797,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["supports",{"_index":380,"title":{},"body":{"controllers/AuthController.html":{}}}],["svg",{"_index":4011,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":3812,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["switch",{"_index":872,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CryptoImplementationService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["symbol(\"file_storage",{"_index":1742,"title":{},"body":{"interfaces/FileStorage.html":{},"miscellaneous/variables.html":{}}}],["symmetric",{"_index":2145,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["synchronize",{"_index":1582,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["system",{"_index":1469,"title":{},"body":{"classes/DBKeyService.html":{},"controllers/KeyController.html":{},"injectables/StatusListService.html":{},"entities/TenantEntity.html":{}}}],["t",{"_index":1674,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["table",{"_index":3939,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3938,"title":{},"body":{"coverage.html":{}}}],["tamper",{"_index":1787,"title":{},"body":{"injectables/FilesService.html":{}}}],["tap",{"_index":3208,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["tap((data",{"_index":3228,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["target",{"_index":298,"title":{},"body":{"modules/AppModule.html":{}}}],["tell",{"_index":1177,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/Oid4vpService.html":{}}}],["tenancy",{"_index":3134,"title":{},"body":{"entities/Session.html":{}}}],["tenant",{"_index":523,"title":{},"body":{"controllers/AuthController.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"classes/DisplayCreateDto.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"injectables/OAuthService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["tenant.isdirectory",{"_index":1130,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.name",{"_index":1137,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.secret",{"_index":3687,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenant.service",{"_index":417,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TenantController.html":{}}}],["tenant/2025/08/14/uuid.ext",{"_index":1734,"title":{},"body":{"interfaces/FileStorage.html":{}}}],["tenant/tenant.controller",{"_index":551,"title":{},"body":{"modules/AuthModule.html":{}}}],["tenant_id",{"_index":3318,"title":{},"body":{"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["tenant_total",{"_index":576,"title":{},"body":{"modules/AuthModule.html":{}}}],["tenantcontroller",{"_index":536,"title":{"controllers/TenantController.html":{}},"body":{"modules/AuthModule.html":{},"controllers/TenantController.html":{},"coverage.html":{}}}],["tenantentity",{"_index":548,"title":{"entities/TenantEntity.html":{}},"body":{"modules/AuthModule.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["tenantfolders",{"_index":1126,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenanthost",{"_index":2570,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["tenantid",{"_index":323,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigCreate.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["tenantid)).uri",{"_index":853,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["tenantid/credentials",{"_index":1268,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["tenantid/status",{"_index":3417,"title":{},"body":{"controllers/StatusListController.html":{}}}],["tenantrepository",{"_index":3643,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenants",{"_index":580,"title":{"interfaces/Tenants.html":{}},"body":{"modules/AuthModule.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{}}}],["tenantsecret",{"_index":3668,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["tenantservice",{"_index":416,"title":{"injectables/TenantService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"coverage.html":{},"index.html":{}}}],["tenanttotal",{"_index":3644,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["terminusmodule",{"_index":1863,"title":{},"body":{"modules/HealthModule.html":{}}}],["text_color",{"_index":1044,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["textencoder().encode(data",{"_index":4060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["textencoder().encode(secret",{"_index":1825,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["then((cert",{"_index":1546,"title":{},"body":{"classes/DBKeyService.html":{}}}],["then((entry",{"_index":1699,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["then((file",{"_index":3506,"title":{},"body":{"injectables/StatusListService.html":{}}}],["then((key",{"_index":1543,"title":{},"body":{"classes/DBKeyService.html":{}}}],["then((res",{"_index":2978,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["then((response",{"_index":2956,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["then((session",{"_index":801,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["then(async",{"_index":1689,"title":{},"body":{"injectables/EncryptionService.html":{},"injectables/RegistrarService.html":{}}}],["think",{"_index":475,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.accesstoken",{"_index":2929,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.addaccesscertificate",{"_index":2934,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.addrp(name",{"_index":2933,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.authorizeservice.authorizationchallengeendpoint",{"_index":704,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.authzmetadata",{"_index":3851,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.authorizeservice.sendauthorizationresponse(queries",{"_index":687,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authorizeservice.validatetokenrequest(body",{"_index":702,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.authzmetadata(session",{"_index":814,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.bucket",{"_index":3066,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.certrepository",{"_index":1545,"title":{},"body":{"classes/DBKeyService.html":{},"classes/KeyService.html":{}}}],["this.client",{"_index":2925,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.client.setconfig",{"_index":2926,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.clients.delete(clientid",{"_index":2438,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.get(clientid",{"_index":2431,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.has(clientid",{"_index":2439,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.set(clientid",{"_index":2437,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clients.set(defaultclientid",{"_index":2421,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.clientservice.validatetenant",{"_index":470,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.config",{"_index":2330,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enabledebugmode",{"_index":2340,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablehttplogger",{"_index":2339,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.enablesessionlogger",{"_index":2338,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.level",{"_index":2341,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.config.logformat",{"_index":2342,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice",{"_index":2961,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.get",{"_index":2333,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.configservice.get(\"config_import",{"_index":1125,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.get(\"config_import_force",{"_index":1124,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.configservice.get(\"jwt_secret",{"_index":1812,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.get(\"log_level",{"_index":2332,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.configservice.get(\"oauth_client_id",{"_index":2419,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.configservice.get(\"oidc",{"_index":1843,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{}}}],["this.configservice.get(\"public_url\")}/storage/${key",{"_index":1803,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.configservice.get(\"registrar_url",{"_index":2930,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow",{"_index":2918,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.getorthrow(\"auth_client_id",{"_index":3684,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.getorthrow(\"config_folder",{"_index":1120,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.configservice.getorthrow(\"jwt_expires_in",{"_index":1823,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"jwt_issuer",{"_index":1821,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"jwt_secret",{"_index":1820,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.configservice.getorthrow(\"oidc_sub",{"_index":2151,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.configservice.getorthrow(\"public_url",{"_index":496,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/StatusListService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}${req.url",{"_index":806,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.id",{"_index":835,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${session.tenantid}/credentials",{"_index":1336,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.configservice.getorthrow(\"public_url\")}/${values.session}/oid4vp",{"_index":2623,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.configservice.getorthrow(\"registrar_oidc_url",{"_index":2917,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"registrar_url",{"_index":2928,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"rp_name",{"_index":2602,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/RegistrarService.html":{}}}],["this.configservice.getorthrow(\"session_tidy_up_interval",{"_index":3380,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservice.getorthrow(\"session_ttl",{"_index":3411,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.configservie.get(\"crypto_alg",{"_index":1434,"title":{},"body":{"injectables/CryptoImplementationService.html":{}}}],["this.create(tenant",{"_index":1529,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.create(tenantid",{"_index":1542,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.createlist(entry",{"_index":3495,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.credentialconfigrepo",{"_index":1379,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findby",{"_index":1321,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepo.findonebyorfail",{"_index":1386,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.credentialconfigrepository.delete",{"_index":1152,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.find",{"_index":1186,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.findonebyorfail",{"_index":1188,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialconfigrepository.save",{"_index":1189,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.credentialsconfigservice.getbyid",{"_index":1976,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsconfigservice.import",{"_index":1944,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.credentialsservice.delete(user.sub",{"_index":1263,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.get(user.sub",{"_index":1259,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.credentialsservice.getschema(id",{"_index":1283,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.getvct(id",{"_index":1280,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["this.credentialsservice.store(user.sub",{"_index":1260,"title":{},"body":{"controllers/CredentialsController.html":{}}}],["this.crypto",{"_index":1517,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.alg",{"_index":1535,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.generatekeypair",{"_index":1530,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.crypto.getsigner(privatekey",{"_index":1540,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.cryptoimplementationservice.getalg",{"_index":1327,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.deletekey(token.sub",{"_index":2194,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getalg",{"_index":1551,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.cryptoservice.getcallbackcontext(tenantid",{"_index":778,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.cryptoservice.getcertchain",{"_index":1378,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.getcertentry",{"_index":1166,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.cryptoservice.getcerts(tenantid",{"_index":2189,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.getjwks(tenantid).then((key",{"_index":3852,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.cryptoservice.import",{"_index":1943,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.cryptoservice.importkey(tenantid",{"_index":2190,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.cryptoservice.keyservice.getkid",{"_index":1351,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.keyservice.getkid(tenantid",{"_index":2960,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.getpublickey",{"_index":839,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{}}}],["this.cryptoservice.keyservice.signer",{"_index":1354,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.cryptoservice.ontenantinit(id",{"_index":3688,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.cryptoservice.signjwt",{"_index":2434,"title":{},"body":{"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["this.cryptoservice.storeaccesscertificate",{"_index":2968,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.cryptoservice.updatecert(tenantid",{"_index":2192,"title":{},"body":{"controllers/KeyController.html":{}}}],["this.db.pingcheck(\"database",{"_index":1861,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.displayrepository.create",{"_index":1644,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayrepository.findone",{"_index":1643,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayrepository.save(displayentity",{"_index":1645,"title":{},"body":{"injectables/DisplayService.html":{}}}],["this.displayservice.create(user.sub",{"_index":1619,"title":{},"body":{"controllers/DisplayController.html":{}}}],["this.displayservice.get(user.sub",{"_index":1618,"title":{},"body":{"controllers/DisplayController.html":{}}}],["this.encryptionservice.decryptjwe",{"_index":2636,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.getencryptionpublickey",{"_index":2593,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.encryptionservice.ontenantinit(id",{"_index":3689,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.filerepository.delete",{"_index":1807,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filerepository.find",{"_index":1804,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filerepository.save",{"_index":1795,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.filesservice.deletebytenant(tenantid",{"_index":3694,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.filesservice.getstream(key).then",{"_index":3566,"title":{},"body":{"controllers/StorageController.html":{}}}],["this.filesservice.saveuserupload(user.sub",{"_index":3563,"title":{},"body":{"controllers/StorageController.html":{}}}],["this.generateaccesstoken",{"_index":2426,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.getauthorizationserver",{"_index":781,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getauthorizationserver(tenantid).createaccesstokenresponse",{"_index":834,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.getbyid",{"_index":1145,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.getdownloadurl(response.key",{"_index":1796,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.getexistingrp(name",{"_index":2954,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.getissuanceconfigurationbyid",{"_index":1947,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.getkid(tenant).catch(async",{"_index":1528,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getkid(tenantid).catch",{"_index":1541,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getpresentationconfig",{"_index":2798,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.getprivatekey(tenantid",{"_index":1539,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.getpubfromprivatekey(privatekeyjwk",{"_index":1554,"title":{},"body":{"classes/DBKeyService.html":{}}}],["this.gettenants().find((c",{"_index":3685,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.health.check",{"_index":1860,"title":{},"body":{"controllers/HealthController.html":{}}}],["this.httpservice.get",{"_index":3028,"title":{},"body":{"injectables/ResolverService.html":{}}}],["this.httpservice.post",{"_index":3763,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.import",{"_index":1945,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["this.initializeclients",{"_index":2416,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.isenabled",{"_index":2915,"title":{},"body":{"injectables/RegistrarService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.ishttploggerenabled",{"_index":2343,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.issuanceconfigrepo.delete",{"_index":1948,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.find",{"_index":1972,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.findoneorfail",{"_index":1973,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceconfigrepo.save",{"_index":1978,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.issuanceservice.deleteissuanceconfiguration(user.sub",{"_index":1918,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfiguration(user.sub",{"_index":1915,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.issuanceservice.getissuanceconfigurationbyid",{"_index":812,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.issuanceservice.storeissuanceconfiguration",{"_index":1916,"title":{},"body":{"controllers/IssuanceController.html":{}}}],["this.isusingexternaloidc",{"_index":1818,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["this.jwtservice.generatetoken(payload",{"_index":485,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.jwtservice.isusingexternaloidc",{"_index":440,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.kbverifier.bind(this",{"_index":2795,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.keyrepository",{"_index":1520,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{}}}],["this.keyrepository.delete",{"_index":1693,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.keyrepository.save",{"_index":1691,"title":{},"body":{"injectables/EncryptionService.html":{}}}],["this.loadconfiguration",{"_index":2329,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.loadtenants",{"_index":3682,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.logger.error",{"_index":1167,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.info",{"_index":1184,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{}}}],["this.logger.setcontext(\"sessionlogger",{"_index":3220,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.logger.setcontext(\"sessionloggerservice",{"_index":3290,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.oauth2client",{"_index":2919,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.oauth2client.clientcredentials().then((token",{"_index":2937,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.oauthservice.handleclientcredentialsgrant",{"_index":2378,"title":{},"body":{"controllers/OAuthController.html":{}}}],["this.oid4vciservice.createoffer",{"_index":2026,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["this.oid4vciservice.getcredential(req",{"_index":2499,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.handlenotification(req",{"_index":2502,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.issuermetadata(session",{"_index":3843,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["this.oid4vciservice.noncerequest(session",{"_index":2506,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["this.oid4vciservice.ontenantinit(id",{"_index":3692,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.oid4vpservice.createauthorizationrequest(session",{"_index":2527,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.oid4vpservice.createrequest",{"_index":2710,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.oid4vpservice.createrequest(\"pid",{"_index":852,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.oid4vpservice.getresponse(body",{"_index":2528,"title":{},"body":{"controllers/Oid4vpController.html":{}}}],["this.ontenantinit(session.tenantid).then",{"_index":3508,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.parsechallengerequest",{"_index":876,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.parseloglevel",{"_index":2331,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["this.presentationsservice.deletepresentationconfig(id",{"_index":2719,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.getpresentationconfig",{"_index":2572,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.getpresentationconfigs(user.sub",{"_index":2716,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.parseresponse",{"_index":2646,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.presentationsservice.storepresentationconfig",{"_index":2717,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["this.presentationsservice.storercid",{"_index":2991,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.publicbaseurl",{"_index":3074,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.publicbaseurl.replace",{"_index":3075,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.reflector.get",{"_index":3211,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.reflector.getallandoverride",{"_index":2085,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.refreshaccesstoken",{"_index":2931,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.delete",{"_index":2936,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.findonebyorfail",{"_index":2974,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarrepository.save",{"_index":2935,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["this.registrarservice.addregistrationcertificate",{"_index":2578,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.isenabled",{"_index":2576,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.registrarservice.ontenantinit(id",{"_index":3691,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.resolverservice.resolvepublickey",{"_index":2812,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.s3",{"_index":3085,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.s3.send",{"_index":3065,"title":{},"body":{"classes/S3FileStorage.html":{}}}],["this.sanitizebody(request.body",{"_index":3224,"title":{},"body":{"injectables/SessionLoggerInterceptor.html":{}}}],["this.schedulerregistry.addinterval(\"tidyupsessions",{"_index":3383,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sdjwtinstance",{"_index":2793,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.sendauthorizationcode(res",{"_index":862,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionlogger.logauthorizationrequest(logcontext",{"_index":2581,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logcredentialverification",{"_index":2648,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowcomplete(logcontext",{"_index":2657,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowerror(logcontext",{"_index":2618,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logflowstart(logcontext",{"_index":2566,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionlogger.logsession",{"_index":2612,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsession(logcontext",{"_index":3757,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionlogger.logsessionerror",{"_index":3774,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionrepository.countby",{"_index":3391,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.delete",{"_index":3395,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.find",{"_index":3407,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail",{"_index":3408,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.findonebyorfail(where",{"_index":3409,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":3397,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.update",{"_index":3403,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.dec",{"_index":3406,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.inc",{"_index":3399,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionscounter.set",{"_index":3393,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice",{"_index":799,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(body.issuer_state",{"_index":697,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["this.sessionservice.add(issuer_state",{"_index":884,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.add(res.state",{"_index":2652,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.add(session.id",{"_index":2579,"title":{},"body":{"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["this.sessionservice.add(values.session",{"_index":2635,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.create",{"_index":2630,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.sessionservice.delete(id",{"_index":3173,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.sessionservice.get(body.auth_session",{"_index":858,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(body.issuer_state",{"_index":866,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.sessionservice.get(sessionid",{"_index":3328,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["this.sessionservice.getall",{"_index":3170,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.setauthcode(issuer_state",{"_index":882,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setauthcode(values.issuer_state",{"_index":804,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["this.setentry(entry.index",{"_index":3521,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.setuptenant(id",{"_index":3678,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.shouldlog",{"_index":3291,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["this.statuslistfetcher.bind(this",{"_index":2796,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.statuslistrepository",{"_index":3505,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.delete",{"_index":3496,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.findonebyorfail",{"_index":3509,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.save",{"_index":3494,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistrepository.update",{"_index":3504,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statuslistservice.createentry",{"_index":1366,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["this.statuslistservice.getlist(tenantid",{"_index":3429,"title":{},"body":{"controllers/StatusListController.html":{}}}],["this.statuslistservice.ontenantinit(id",{"_index":3690,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.statuslistservice.updatestatus(value",{"_index":3176,"title":{},"body":{"controllers/SessionController.html":{}}}],["this.statusmappingrepository.delete",{"_index":3497,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.findby",{"_index":3517,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.statusmappingrepository.save",{"_index":3513,"title":{},"body":{"injectables/StatusListService.html":{}}}],["this.storage.delete(file.id",{"_index":1806,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.getsignedurl",{"_index":1800,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.getsignedurl(key",{"_index":1801,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.storage.put(key",{"_index":1790,"title":{},"body":{"injectables/FilesService.html":{}}}],["this.store(tenant.name",{"_index":1180,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["this.storeissuanceconfiguration",{"_index":1971,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["this.storepresentationconfig(tenant.name",{"_index":2800,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.tenantrepository.count",{"_index":3676,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.delete",{"_index":3696,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.findoneby",{"_index":3679,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.save",{"_index":3675,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantrepository.update",{"_index":3693,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenants",{"_index":3681,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tenantservice.deletetenant(id",{"_index":3632,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantservice.gettenantstatus(user.sub",{"_index":3629,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenantservice.inittenant(values.id",{"_index":3627,"title":{},"body":{"controllers/TenantController.html":{}}}],["this.tenanttotal.set",{"_index":3677,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["this.tidyupsessions",{"_index":3378,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.validateclientcredentials",{"_index":2422,"title":{},"body":{"injectables/OAuthService.html":{}}}],["this.verifier.bind(this",{"_index":2794,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository",{"_index":2805,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.delete",{"_index":2799,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.find",{"_index":2801,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.save",{"_index":2804,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.vprequestrepository.update",{"_index":2807,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["this.webhookservice.sendwebhook",{"_index":2656,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["this.wellknownservice.getauthzmetadata(session",{"_index":3818,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getissuermetadata(session",{"_index":3816,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["this.wellknownservice.getjwks(session.tenantid",{"_index":3822,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["throw",{"_index":441,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"injectables/OAuthService.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionPipe.html":{},"injectables/StatusListService.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["tidy",{"_index":3357,"title":{},"body":{"injectables/SessionService.html":{}}}],["tidyupsessions",{"_index":3333,"title":{},"body":{"injectables/SessionService.html":{}}}],["time",{"_index":1371,"title":{},"body":{"injectables/CredentialsService.html":{},"classes/ParResponseDto.html":{}}}],["timestamp",{"_index":896,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["title",{"_index":3086,"title":{},"body":{"classes/SchemaResponse.html":{}}}],["todo",{"_index":286,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/FilesService.html":{},"controllers/IssuerManagementController.html":{},"classes/KeyService.html":{},"modules/MetricModule.html":{},"controllers/Oid4vciController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["token",{"_index":354,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"controllers/KeyController.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"entities/StatusListEntity.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"interfaces/TokenPayload.html":{},"classes/TokenResponseDto.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["token(body",{"_index":665,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["token.accesstoken",{"_index":2938,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["token.decorator",{"_index":419,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["token.sub",{"_index":2188,"title":{},"body":{"controllers/KeyController.html":{}}}],["token_endpoint",{"_index":498,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_endpoint_auth_methods_supported",{"_index":505,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["token_exchange",{"_index":3305,"title":{},"body":{"injectables/SessionLoggerService.html":{}}}],["token_type",{"_index":436,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{}}}],["tokenpayload",{"_index":418,"title":{"interfaces/TokenPayload.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenrequest",{"_index":2372,"title":{},"body":{"controllers/OAuthController.html":{}}}],["tokenrequestdto",{"_index":2364,"title":{"classes/TokenRequestDto.html":{}},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenRequestDto.html":{},"coverage.html":{}}}],["tokenresponse",{"_index":376,"title":{"classes/TokenResponse.html":{}},"body":{"controllers/AuthController.html":{},"classes/TokenResponse.html":{},"coverage.html":{}}}],["tokenresponsedto",{"_index":2373,"title":{"classes/TokenResponseDto.html":{}},"body":{"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/TokenResponseDto.html":{},"coverage.html":{}}}],["tokens",{"_index":365,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"controllers/OAuthController.html":{}}}],["tolowercase",{"_index":1782,"title":{},"body":{"injectables/FilesService.html":{}}}],["toodo",{"_index":1950,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["tostring(\"ascii",{"_index":462,"title":{},"body":{"controllers/AuthController.html":{}}}],["total",{"_index":578,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{}}}],["tracking",{"_index":2728,"title":{},"body":{"interfaces/PresentationRequestOptions.html":{},"interfaces/SessionLogContext.html":{}}}],["transform",{"_index":3321,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["transform(sessionid",{"_index":3324,"title":{},"body":{"injectables/SessionPipe.html":{}}}],["transformer",{"_index":70,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"injectables/PresentationsService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["translatetime",{"_index":302,"title":{},"body":{"modules/AppModule.html":{}}}],["transport",{"_index":297,"title":{},"body":{"modules/AppModule.html":{}}}],["true",{"_index":68,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"controllers/AuthorizeController.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/KeyEntity.html":{},"classes/LocalFileStorage.html":{},"classes/NoneTrustPolicy.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"entities/StatusMapping.html":{},"controllers/StorageController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"miscellaneous/variables.html":{}}}],["true})@column('json",{"_index":1000,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isnumber",{"_index":1023,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isoptional()@isobject",{"_index":989,"title":{},"body":{"entities/CredentialConfig.html":{}}}],["true})@isoptional()@isstring",{"_index":2672,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isoptional()@validate(webhookconfig)@type(undefined",{"_index":2681,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@isstring",{"_index":2674,"title":{},"body":{"entities/PresentationConfig.html":{}}}],["true})@type(undefined",{"_index":342,"title":{},"body":{"classes/AttestationBasedPolicy.html":{},"classes/CredentialQuery.html":{},"classes/DCQL.html":{},"classes/PolicyCredential.html":{}}}],["trust",{"_index":3017,"title":{},"body":{"injectables/ResolverService.html":{}}}],["trusted",{"_index":944,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["trusted_authorities",{"_index":952,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["trustedauthorityquery",{"_index":946,"title":{"classes/TrustedAuthorityQuery.html":{}},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{},"coverage.html":{}}}],["try",{"_index":453,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/Oid4vpService.html":{},"classes/S3FileStorage.html":{}}}],["ttl",{"_index":3410,"title":{},"body":{"injectables/SessionService.html":{}}}],["two",{"_index":3834,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["txcode",{"_index":776,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["typ",{"_index":2605,"title":{},"body":{"injectables/Oid4vpService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["type",{"_index":20,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"injectables/AdminAuthGuard.html":{},"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AttestationBasedPolicy.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"controllers/AuthorizeController.html":{},"classes/AuthorizeQueries.html":{},"injectables/AuthorizeService.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsController.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"interfaces/CryptoImplementation.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/DCQL.html":{},"modules/DatabaseModule.html":{},"classes/Display.html":{},"controllers/DisplayController.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"classes/EC_Public.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/EncryptionService.html":{},"entities/FileEntity.html":{},"interfaces/FileStorage.html":{},"classes/FileUploadDto.html":{},"injectables/FilesService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"controllers/IssuanceController.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"interfaces/IssuerMetadata.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/Key.html":{},"controllers/KeyController.html":{},"entities/KeyEntity.html":{},"classes/KeyImportDto.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"controllers/OAuthController.html":{},"injectables/OAuthService.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"injectables/PresentationsService.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"classes/RegistrationCertificateRequest.html":{},"injectables/ResolverService.html":{},"classes/RootOfTrustPolicy.html":{},"classes/S3FileStorage.html":{},"classes/SchemaResponse.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"interfaces/SessionLogContext.html":{},"injectables/SessionLoggerInterceptor.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionPipe.html":{},"injectables/SessionService.html":{},"controllers/StatusListController.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"modules/StorageModule.html":{},"controllers/TenantController.html":{},"entities/TenantEntity.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponse.html":{},"classes/TokenResponseDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type(undefined)@isobject",{"_index":3738,"title":{},"body":{"classes/WebHookAuthConfigHeader.html":{}}}],["type.'})@post('token",{"_index":2368,"title":{},"body":{"controllers/OAuthController.html":{}}}],["type.decorator",{"_index":3806,"title":{},"body":{"controllers/WellKnownController.html":{}}}],["type.decorator.ts",{"_index":3934,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":3807,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["type.enum.ts",{"_index":3993,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":4028,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":2913,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["typeorm",{"_index":919,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/DisplayService.html":{},"entities/FileEntity.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"entities/KeyEntity.html":{},"classes/KeyService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/RegistrarEntity.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"entities/StatusListEntity.html":{},"injectables/StatusListService.html":{},"entities/StatusMapping.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"dependencies.html":{}}}],["typeorm/query",{"_index":3374,"title":{},"body":{"injectables/SessionService.html":{}}}],["typeorm/repository/repository",{"_index":1507,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"modules/KeyModule.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["typeormhealthindicator",{"_index":1856,"title":{},"body":{"controllers/HealthController.html":{}}}],["typeormmodule",{"_index":538,"title":{},"body":{"modules/AuthModule.html":{},"modules/CryptoModule.html":{},"modules/DatabaseModule.html":{},"modules/IssuerModule.html":{},"modules/KeyModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/StorageModule.html":{}}}],["typeormmodule.forfeature",{"_index":2070,"title":{},"body":{"modules/IssuerModule.html":{}}}],["typeormmodule.forfeature([certentity",{"_index":1449,"title":{},"body":{"modules/CryptoModule.html":{},"modules/KeyModule.html":{}}}],["typeormmodule.forfeature([fileentity",{"_index":3594,"title":{},"body":{"modules/StorageModule.html":{}}}],["typeormmodule.forfeature([presentationconfig",{"_index":2738,"title":{},"body":{"modules/PresentationsModule.html":{}}}],["typeormmodule.forfeature([registrarentity",{"_index":2857,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["typeormmodule.forfeature([session",{"_index":3316,"title":{},"body":{"modules/SessionModule.html":{}}}],["typeormmodule.forfeature([statusmapping",{"_index":3454,"title":{},"body":{"modules/StatusListModule.html":{}}}],["typeormmodule.forfeature([tenantentity",{"_index":575,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forrootasync",{"_index":1579,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["typeormmoduleoptions",{"_index":1564,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":2204,"title":{},"body":{"entities/KeyEntity.html":{},"modules/RegistrarModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":2946,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["typically",{"_index":1213,"title":{},"body":{"classes/CredentialIssuerMetadataDto.html":{},"interfaces/IssuerMetadata.html":{}}}],["unauthorizedexception",{"_index":402,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{}}}],["unauthorizedexception(\"invalid",{"_index":471,"title":{},"body":{"controllers/AuthController.html":{},"injectables/OAuthService.html":{}}}],["undefined",{"_index":999,"title":{},"body":{"entities/CredentialConfig.html":{},"injectables/CredentialsService.html":{},"interfaces/GenerateTokenOptions.html":{},"entities/IssuanceConfig.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"classes/OfferRequestDto.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"classes/TokenRequestDto.html":{},"classes/TokenResponseDto.html":{},"classes/WebhookConfig.html":{},"miscellaneous/variables.html":{}}}],["undefined})@apiproduces('application/json",{"_index":1989,"title":{},"body":{"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{}}}],["undefined})@apiresponse({status",{"_index":373,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@isarray",{"_index":1228,"title":{},"body":{"classes/CredentialSetQuery.html":{}}}],["undefined})@isobject()@isoptional",{"_index":2454,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["undefined})@isstring",{"_index":3705,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["undefined})@isstring()@isin(['client_credentials",{"_index":3707,"title":{},"body":{"classes/TokenRequestDto.html":{}}}],["undefined})@post('offer",{"_index":1991,"title":{},"body":{"controllers/IssuerManagementController.html":{}}}],["undefined})@post('request",{"_index":2698,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["undefined})@type(undefined",{"_index":998,"title":{},"body":{"entities/CredentialConfig.html":{},"entities/IssuanceConfig.html":{},"classes/WebhookConfig.html":{}}}],["union",{"_index":1005,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{}}}],["unique",{"_index":26,"title":{},"body":{"interfaces/AccessCertificateResponse.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"entities/KeyEntity.html":{},"classes/KeyObj.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"interfaces/SessionLogContext.html":{},"entities/TenantEntity.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["unknown",{"_index":751,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"injectables/IssuanceService.html":{},"injectables/RegistrarService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"interfaces/TokenPayload.html":{},"injectables/WellKnownService.html":{},"miscellaneous/variables.html":{}}}],["unsecure",{"_index":2071,"title":{},"body":{"modules/IssuerModule.html":{}}}],["unsigned",{"_index":3836,"title":{},"body":{"injectables/WellKnownService.html":{}}}],["unsupported",{"_index":879,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["up",{"_index":165,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["update",{"_index":2781,"title":{},"body":{"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["update.dto",{"_index":2184,"title":{},"body":{"controllers/KeyController.html":{},"controllers/SessionController.html":{},"injectables/StatusListService.html":{}}}],["update.dto.ts",{"_index":3533,"title":{},"body":{"classes/StatusUpdateDto.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["update.dto.ts:16",{"_index":3534,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:24",{"_index":3537,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["update.dto.ts:8",{"_index":3535,"title":{},"body":{"classes/StatusUpdateDto.html":{}}}],["updated",{"_index":916,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["updatedat",{"_index":892,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialConfigMapping.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationConfigCreateDto.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["updatedatecolumn",{"_index":913,"title":{},"body":{"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["updatekey",{"_index":2171,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatekey(token",{"_index":2178,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatekeydto",{"_index":2179,"title":{"classes/UpdateKeyDto.html":{}},"body":{"controllers/KeyController.html":{},"classes/UpdateKeyDto.html":{},"coverage.html":{}}}],["updates",{"_index":2182,"title":{},"body":{"controllers/KeyController.html":{}}}],["updatestatus",{"_index":3459,"title":{},"body":{"injectables/StatusListService.html":{}}}],["updatestatus(value",{"_index":3477,"title":{},"body":{"injectables/StatusListService.html":{}}}],["upload",{"_index":1771,"title":{},"body":{"injectables/FilesService.html":{},"controllers/StorageController.html":{}}}],["upload(user",{"_index":3545,"title":{},"body":{"controllers/StorageController.html":{}}}],["upload.dto",{"_index":3558,"title":{},"body":{"controllers/StorageController.html":{}}}],["upload.dto.ts",{"_index":1745,"title":{},"body":{"classes/FileUploadDto.html":{},"coverage.html":{}}}],["upload.dto.ts:5",{"_index":1747,"title":{},"body":{"classes/FileUploadDto.html":{}}}],["uploaded",{"_index":1769,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploadedfile",{"_index":3554,"title":{},"body":{"controllers/StorageController.html":{}}}],["uploading",{"_index":1770,"title":{},"body":{"injectables/FilesService.html":{}}}],["uploads",{"_index":3585,"title":{},"body":{"modules/StorageModule.html":{},"miscellaneous/variables.html":{}}}],["uri",{"_index":1040,"title":{},"body":{"entities/CredentialConfig.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"classes/ParResponseDto.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"injectables/StatusListService.html":{},"miscellaneous/enumerations.html":{}}}],["url",{"_index":144,"title":{},"body":{"classes/ApiKeyConfig.html":{},"modules/AppModule.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialIssuerMetadataDto.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/DisplayEntity.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"interfaces/FileStorage.html":{},"injectables/FilesService.html":{},"interfaces/IssuerMetadata.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/S3FileStorage.html":{},"entities/Session.html":{},"injectables/SessionLoggerInterceptor.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["url(payload.iss).hostname",{"_index":3022,"title":{},"body":{"injectables/ResolverService.html":{}}}],["urn:${randomuuid",{"_index":691,"title":{},"body":{"controllers/AuthorizeController.html":{}}}],["usage",{"_index":1692,"title":{},"body":{"injectables/EncryptionService.html":{},"entities/KeyEntity.html":{},"miscellaneous/typealiases.html":{}}}],["use",{"_index":446,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/EC_Public.html":{},"interfaces/GenerateTokenOptions.html":{},"controllers/IssuerManagementController.html":{},"classes/JwksResponseDto.html":{},"injectables/JwtService.html":{},"injectables/OAuthService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/RegistrarService.html":{}}}],["used",{"_index":124,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/AuthorizeController.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"injectables/CryptoImplementationService.html":{},"classes/DCQL.html":{},"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/RegistrarService.html":{},"entities/Session.html":{},"entities/StatusListEntity.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["usedclaims",{"_index":1345,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["useexternaloidc",{"_index":2116,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usefactory",{"_index":281,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules/KeyModule.html":{},"modules/StorageModule.html":{}}}],["useful",{"_index":3183,"title":{},"body":{"interfaces/SessionLogContext.html":{}}}],["useguards",{"_index":1245,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{}}}],["useguards(adminauthguard",{"_index":3619,"title":{},"body":{"controllers/TenantController.html":{}}}],["useguards(jwtauthguard",{"_index":1252,"title":{},"body":{"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/KeyController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/StorageController.html":{}}}],["useinterceptors",{"_index":2488,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"controllers/StorageController.html":{}}}],["useinterceptors(fileinterceptor(\"file",{"_index":3561,"title":{},"body":{"controllers/StorageController.html":{}}}],["useinterceptors(sessionloggerinterceptor",{"_index":2496,"title":{},"body":{"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{}}}],["useinterceptors(undefined)@useguards(jwtauthguard)@apisecurity('oauth2')@apiconsumes('multipart/form",{"_index":3546,"title":{},"body":{"controllers/StorageController.html":{}}}],["user",{"_index":318,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"controllers/CredentialsController.html":{},"controllers/DisplayController.html":{},"injectables/DisplayService.html":{},"injectables/FilesService.html":{},"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"injectables/SessionLoggerInterceptor.html":{},"modules/SessionModule.html":{},"classes/StatusUpdateDto.html":{},"controllers/StorageController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"interfaces/TokenPayload.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["user.admin",{"_index":3625,"title":{},"body":{"controllers/TenantController.html":{}}}],["user.sub",{"_index":1917,"title":{},"body":{"controllers/IssuanceController.html":{},"controllers/IssuerManagementController.html":{},"controllers/PresentationManagementController.html":{},"controllers/SessionController.html":{},"controllers/TenantController.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["username",{"_index":1588,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["users",{"_index":612,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/TenantController.html":{}}}],["uses",{"_index":1848,"title":{},"body":{"controllers/HealthController.html":{},"injectables/SessionLoggerService.html":{}}}],["using",{"_index":397,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthorizeService.html":{},"injectables/EncryptionService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"controllers/OAuthController.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/RegistrarService.html":{},"injectables/WellKnownService.html":{}}}],["utf8",{"_index":1142,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["utility",{"_index":4002,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utils/logger//session",{"_index":2492,"title":{},"body":{"controllers/Oid4vciController.html":{}}}],["utils/logger/session",{"_index":2052,"title":{},"body":{"modules/IssuerModule.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["utils/mediatype/media",{"_index":3805,"title":{},"body":{"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["utils/webhook/webhook.dto",{"_index":607,"title":{},"body":{"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["utils/webhook/webhook.service",{"_index":2055,"title":{},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{}}}],["uuid",{"_index":1509,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{},"dependencies.html":{}}}],["v4",{"_index":1508,"title":{},"body":{"classes/DBKeyService.html":{},"injectables/EncryptionService.html":{},"injectables/Oid4vpService.html":{}}}],["valid",{"_index":860,"title":{},"body":{"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/StatusUpdateDto.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["valid(\"json",{"_index":274,"title":{},"body":{"modules/AppModule.html":{}}}],["valid(\"trace",{"_index":257,"title":{},"body":{"modules/AppModule.html":{}}}],["validate",{"_index":668,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/ClaimsQuery.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"injectables/IssuanceService.html":{},"injectables/JwtStrategy.html":{},"injectables/OAuthService.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"classes/SchemaResponse.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["validate(config",{"_index":1155,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/PresentationsService.html":{}}}],["validate(issuancedto",{"_index":1951,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["validate(payload",{"_index":2107,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(webhookconfig",{"_index":969,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["validateclientcredentials",{"_index":2396,"title":{},"body":{"injectables/OAuthService.html":{}}}],["validateclientcredentials(clientid",{"_index":2409,"title":{},"body":{"injectables/OAuthService.html":{}}}],["validated",{"_index":2109,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatenested",{"_index":76,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/ClaimsQuery.html":{},"entities/CredentialConfig.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/RootOfTrustPolicy.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["validatenested()@apiproperty({oneof",{"_index":3743,"title":{},"body":{"classes/WebhookConfig.html":{}}}],["validatenested()@type(undefined",{"_index":1596,"title":{},"body":{"classes/Display.html":{},"classes/DisplayInfo.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/KeyImportDto.html":{}}}],["validatenested()@type(undefined)@column('json",{"_index":1628,"title":{},"body":{"entities/DisplayEntity.html":{}}}],["validatenested()@type(undefined)@isoptional",{"_index":2456,"title":{},"body":{"classes/OfferRequestDto.html":{}}}],["validatetenant",{"_index":3642,"title":{},"body":{"injectables/TenantService.html":{}}}],["validatetenant(tenantid",{"_index":3667,"title":{},"body":{"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["validatetokenrequest",{"_index":735,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["validatetokenrequest(body",{"_index":758,"title":{},"body":{"injectables/AuthorizeService.html":{}}}],["validation",{"_index":1173,"title":{},"body":{"injectables/CredentialConfigService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/IssuanceService.html":{},"injectables/JwtService.html":{},"injectables/JwtStrategy.html":{},"injectables/PresentationsService.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["validationerror",{"_index":1169,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors",{"_index":1154,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors.length",{"_index":1176,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationerrors.map((error",{"_index":1969,"title":{},"body":{"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["validationschema",{"_index":249,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":77,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/ApiKeyConfig.html":{},"classes/AttestationBasedPolicy.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"classes/AuthorizationResponse.html":{},"classes/AuthorizeQueries.html":{},"classes/ClaimsQuery.html":{},"classes/ClientCredentialsDto.html":{},"classes/ClientInitDto.html":{},"entities/CredentialConfig.html":{},"classes/CredentialConfigMapping.html":{},"injectables/CredentialConfigService.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"entities/IssuanceConfig.html":{},"classes/IssuanceDto.html":{},"injectables/IssuanceService.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"classes/NoneTrustPolicy.html":{},"classes/NotificationRequestDto.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"injectables/PresentationsService.html":{},"classes/RegistrationCertificateRequest.html":{},"classes/RootOfTrustPolicy.html":{},"classes/SchemaResponse.html":{},"classes/StatusUpdateDto.html":{},"classes/TokenRequestDto.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/VCT.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"dependencies.html":{}}}],["value",{"_index":112,"title":{},"body":{"classes/ApiKeyConfig.html":{},"controllers/AuthController.html":{},"interfaces/AuthResponse.html":{},"injectables/AuthorizeService.html":{},"entities/CredentialConfig.html":{},"injectables/CredentialConfigService.html":{},"injectables/CredentialsService.html":{},"injectables/CryptoImplementationService.html":{},"classes/DBKeyService.html":{},"classes/Display.html":{},"entities/DisplayEntity.html":{},"classes/DisplayImage.html":{},"classes/DisplayInfo.html":{},"classes/DisplayLogo.html":{},"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"injectables/IssuanceService.html":{},"controllers/IssuerManagementController.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"injectables/JwtService.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{},"injectables/OAuthService.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"controllers/SessionController.html":{},"injectables/StatusListService.html":{},"injectables/TenantService.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"injectables/WebhookService.html":{},"injectables/WellKnownService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.config",{"_index":1334,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.credentialconfigids",{"_index":1975,"title":{},"body":{"injectables/IssuanceService.html":{}}}],["value.credentialconfigurationid",{"_index":3519,"title":{},"body":{"injectables/StatusListService.html":{}}}],["value.embeddeddisclosurepolicy",{"_index":1338,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.id",{"_index":1333,"title":{},"body":{"injectables/CredentialsService.html":{}}}],["value.sessionid",{"_index":3518,"title":{},"body":{"injectables/StatusListService.html":{}}}],["value.status",{"_index":3522,"title":{},"body":{"injectables/StatusListService.html":{}}}],["values",{"_index":62,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"controllers/IssuerManagementController.html":{},"classes/NoneTrustPolicy.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PolicyCredential.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"controllers/PresentationManagementController.html":{},"injectables/PresentationsService.html":{},"injectables/RegistrarService.html":{},"classes/RootOfTrustPolicy.html":{},"injectables/SessionService.html":{},"controllers/TenantController.html":{},"interfaces/TokenPayload.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["values.id",{"_index":3624,"title":{},"body":{"controllers/TenantController.html":{}}}],["values.session",{"_index":2620,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["values.uri",{"_index":2713,"title":{},"body":{"controllers/PresentationManagementController.html":{}}}],["values.webhook",{"_index":2631,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["varchar",{"_index":3525,"title":{},"body":{"entities/StatusMapping.html":{}}}],["variable",{"_index":3361,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["variables",{"_index":2417,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/OAuthService.html":{},"modules/RegistrarModule.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":140,"title":{},"body":{"classes/ApiKeyConfig.html":{},"entities/Session.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{}}}],["vault",{"_index":2220,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault\").default(\"db",{"_index":2219,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault_token",{"_index":2224,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vault_url",{"_index":2222,"title":{},"body":{"modules/KeyModule.html":{},"miscellaneous/variables.html":{}}}],["vaultkeyservice",{"_index":2215,"title":{},"body":{"modules/KeyModule.html":{},"coverage.html":{}}}],["vc",{"_index":1318,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/PresentationsService.html":{},"injectables/ResolverService.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["vcs",{"_index":2741,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vct",{"_index":986,"title":{"classes/VCT.html":{}},"body":{"entities/CredentialConfig.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/Display.html":{},"classes/DisplayImage.html":{},"classes/IssuerMetadataCredentialConfig.html":{},"classes/VCT.html":{},"coverage.html":{}}}],["vct(@param(\"id",{"_index":1278,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["vct(id",{"_index":1272,"title":{},"body":{"controllers/CredentialsMetadataController.html":{}}}],["verbose",{"_index":2335,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["verifiable",{"_index":941,"title":{},"body":{"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"controllers/CredentialsMetadataController.html":{},"injectables/CredentialsService.html":{},"classes/DCQL.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["verification",{"_index":518,"title":{},"body":{"controllers/AuthController.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"entities/Session.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{}}}],["verification.'})@apiresponse({status",{"_index":355,"title":{},"body":{"controllers/AuthController.html":{}}}],["verificationcounter",{"_index":3394,"title":{},"body":{"injectables/SessionService.html":{}}}],["verificationresult",{"_index":3109,"title":{},"body":{"entities/Session.html":{},"injectables/SessionLoggerService.html":{}}}],["verified",{"_index":3111,"title":{},"body":{"entities/Session.html":{}}}],["verifier",{"_index":1415,"title":{},"body":{"interfaces/CryptoImplementation.html":{},"injectables/PresentationsService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["verifier/oid4vp/dto/presentation",{"_index":1998,"title":{},"body":{"controllers/IssuerManagementController.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{}}}],["verifier/oid4vp/oid4vp.module",{"_index":2056,"title":{},"body":{"modules/IssuerModule.html":{}}}],["verifier/oid4vp/oid4vp.service",{"_index":768,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifier/presentations/dto/vp",{"_index":2905,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["verifier/presentations/entities/presentation",{"_index":81,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"classes/NoneTrustPolicy.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["verifier/presentations/presentations.module",{"_index":2847,"title":{},"body":{"modules/RegistrarModule.html":{}}}],["verifier/presentations/presentations.service",{"_index":2906,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["verifier/verifier.module",{"_index":243,"title":{},"body":{"modules/AppModule.html":{}}}],["verifier_attestations",{"_index":2604,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["verifiermodule",{"_index":194,"title":{"modules/VerifierModule.html":{}},"body":{"modules/AppModule.html":{},"modules/VerifierModule.html":{},"index.html":{},"modules.html":{}}}],["verify",{"_index":789,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"miscellaneous/variables.html":{}}}],["verify(data",{"_index":2814,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verify(res.vp_token[att",{"_index":2827,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["verifyauthorizationcodeaccesstokenrequest",{"_index":830,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifying",{"_index":364,"title":{},"body":{"controllers/AuthController.html":{}}}],["verifypreauthorizedcodeaccesstokenrequest",{"_index":818,"title":{},"body":{"injectables/AuthorizeService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{}}}],["verifytoken",{"_index":2088,"title":{},"body":{"injectables/JwtService.html":{}}}],["verifytoken(token",{"_index":1837,"title":{},"body":{"interfaces/GenerateTokenOptions.html":{},"injectables/JwtService.html":{}}}],["version",{"_index":4014,"title":{},"body":{"properties.html":{}}}],["via",{"_index":695,"title":{},"body":{"controllers/AuthorizeController.html":{},"classes/KeyService.html":{},"injectables/SessionService.html":{},"controllers/WellKnownController.html":{}}}],["void",{"_index":2315,"title":{},"body":{"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{},"injectables/OAuthService.html":{},"injectables/RegistrarService.html":{},"injectables/SessionLoggerService.html":{},"injectables/SessionService.html":{},"injectables/StatusListService.html":{}}}],["vp",{"_index":592,"title":{},"body":{"interfaces/AuthResponse.html":{},"classes/AuthorizationResponse.html":{},"entities/CertEntity.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"injectables/PresentationsService.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{}}}],["vp_formats",{"_index":2594,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["vp_nonce",{"_index":2580,"title":{},"body":{"injectables/Oid4vpService.html":{},"entities/Session.html":{}}}],["vp_token",{"_index":586,"title":{},"body":{"interfaces/AuthResponse.html":{},"injectables/Oid4vpService.html":{},"injectables/PresentationsService.html":{}}}],["vprequest",{"_index":2776,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vprequestrepository",{"_index":2752,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["vps",{"_index":2740,"title":{},"body":{"injectables/PresentationsService.html":{}}}],["wallet",{"_index":846,"title":{},"body":{"injectables/AuthorizeService.html":{},"controllers/Oid4vciController.html":{},"controllers/Oid4vpController.html":{},"injectables/Oid4vpService.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"injectables/PresentationsService.html":{},"properties.html":{}}}],["want",{"_index":94,"title":{},"body":{"classes/AllowListPolicy.html":{},"classes/AttestationBasedPolicy.html":{},"classes/EmbeddedDisclosurePolicy.html":{},"injectables/FilesService.html":{},"classes/NoneTrustPolicy.html":{},"injectables/OAuthService.html":{},"classes/PolicyCredential.html":{},"classes/RootOfTrustPolicy.html":{}}}],["warn",{"_index":259,"title":{},"body":{"modules/AppModule.html":{},"injectables/LoggerConfigService.html":{},"interfaces/LoggerConfiguration.html":{}}}],["we'll",{"_index":2022,"title":{},"body":{"controllers/IssuerManagementController.html":{},"injectables/OAuthService.html":{}}}],["web",{"_index":352,"title":{},"body":{"controllers/AuthController.html":{},"classes/EC_Public.html":{},"injectables/EncryptionService.html":{},"interfaces/IssuerMetadata.html":{},"classes/JwksResponseDto.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"entities/StatusListEntity.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["webhook",{"_index":128,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"controllers/PresentationManagementController.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth",{"_index":3778,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth.config.value",{"_index":3781,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth.type",{"_index":3779,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.auth?.type",{"_index":3783,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhook.url",{"_index":3782,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhookauthconfig",{"_index":131,"title":{"classes/WebHookAuthConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookauthconfigheader",{"_index":129,"title":{"classes/WebHookAuthConfigHeader.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookauthconfignone",{"_index":136,"title":{"classes/WebHookAuthConfigNone.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookconfig",{"_index":143,"title":{"classes/WebhookConfig.html":{}},"body":{"classes/ApiKeyConfig.html":{},"classes/AuthenticationMethodAuth.html":{},"interfaces/AuthenticationMethodInterface.html":{},"classes/AuthenticationMethodNone.html":{},"classes/AuthenticationMethodPresentation.html":{},"classes/AuthenticationUrlConfig.html":{},"injectables/AuthorizeService.html":{},"classes/ClaimsQuery.html":{},"classes/CredentialQuery.html":{},"classes/CredentialSetQuery.html":{},"classes/DCQL.html":{},"entities/IssuanceConfig.html":{},"classes/OfferRequestDto.html":{},"classes/OfferResponse.html":{},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{},"classes/PresentationAttachment.html":{},"entities/PresentationConfig.html":{},"classes/PresentationDuringIssuanceConfig.html":{},"classes/PresentationRequest.html":{},"interfaces/PresentationRequestOptions.html":{},"entities/Session.html":{},"classes/TrustedAuthorityQuery.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"coverage.html":{}}}],["webhookresponse",{"_index":3746,"title":{"classes/WebhookResponse.html":{}},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{}}}],["webhookresponse.data",{"_index":3767,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhookresponse.status",{"_index":3772,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webhooks",{"_index":110,"title":{},"body":{"classes/ApiKeyConfig.html":{},"classes/WebHookAuthConfig.html":{},"classes/WebHookAuthConfigHeader.html":{},"classes/WebHookAuthConfigNone.html":{},"classes/WebhookConfig.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"miscellaneous/enumerations.html":{}}}],["webhooksent",{"_index":2658,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["webhookservice",{"_index":2046,"title":{"injectables/WebhookService.html":{}},"body":{"modules/IssuerModule.html":{},"modules/Oid4vpModule.html":{},"injectables/Oid4vpService.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{},"coverage.html":{},"index.html":{}}}],["webhookurl",{"_index":3759,"title":{},"body":{"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["webook",{"_index":2654,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["well",{"_index":244,"title":{},"body":{"modules/AppModule.html":{},"classes/DBKeyService.html":{},"classes/KeyObj.html":{},"classes/KeyResponseDto.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{}}}],["wellknowncontroller",{"_index":200,"title":{"controllers/WellKnownController.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"coverage.html":{}}}],["wellknownservice",{"_index":195,"title":{"injectables/WellKnownService.html":{}},"body":{"modules/AppModule.html":{},"controllers/WellKnownController.html":{},"injectables/WellKnownService.html":{},"coverage.html":{},"index.html":{}}}],["whether",{"_index":1772,"title":{},"body":{"injectables/FilesService.html":{},"entities/IssuanceConfig.html":{},"classes/Oauth2AuthorizationServerResponse.html":{},"classes/WebhookResponse.html":{},"injectables/WebhookService.html":{}}}],["whitelist",{"_index":1156,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{}}}],["whose",{"_index":1760,"title":{},"body":{"injectables/FilesService.html":{}}}],["willsoto/nestjs",{"_index":541,"title":{},"body":{"modules/AuthModule.html":{},"modules/MetricModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{},"dependencies.html":{}}}],["withfiletypes",{"_index":1128,"title":{},"body":{"injectables/CredentialConfigService.html":{},"injectables/IssuanceService.html":{},"injectables/PresentationsService.html":{},"injectables/TenantService.html":{},"interfaces/Tenants.html":{}}}],["write",{"_index":2278,"title":{},"body":{"classes/LocalFileStorage.html":{},"injectables/RegistrarService.html":{}}}],["writing",{"_index":2987,"title":{},"body":{"injectables/RegistrarService.html":{}}}],["wrong",{"_index":1178,"title":{},"body":{"injectables/CredentialConfigService.html":{}}}],["wrtites",{"_index":1468,"title":{},"body":{"classes/DBKeyService.html":{}}}],["x",{"_index":1652,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["x509_san_dns",{"_index":2587,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509_san_dns:${hostname",{"_index":2622,"title":{},"body":{"injectables/Oid4vpService.html":{}}}],["x509certificate",{"_index":3010,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x509certificate(buffer.from(cert",{"_index":3019,"title":{},"body":{"injectables/ResolverService.html":{}}}],["x5c",{"_index":1377,"title":{},"body":{"injectables/CredentialsService.html":{},"injectables/Oid4vpService.html":{},"injectables/ResolverService.html":{},"injectables/StatusListService.html":{},"injectables/WellKnownService.html":{}}}],["y",{"_index":1653,"title":{},"body":{"classes/EC_Public.html":{},"classes/JwksResponseDto.html":{},"classes/Key.html":{},"classes/KeyImportDto.html":{}}}],["yes",{"_index":750,"title":{},"body":{"injectables/AuthorizeService.html":{},"injectables/CredentialsService.html":{},"classes/DBKeyService.html":{},"interfaces/FileStorage.html":{},"injectables/JwtStrategy.html":{},"classes/KeyService.html":{},"classes/LocalFileStorage.html":{},"injectables/OAuthService.html":{},"classes/S3FileStorage.html":{},"injectables/SessionLoggerService.html":{},"injectables/WebhookService.html":{}}}],["you'd",{"_index":2413,"title":{},"body":{"injectables/OAuthService.html":{}}}],["yyyy",{"_index":303,"title":{},"body":{"modules/AppModule.html":{}}}],["zoom",{"_index":196,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CryptoImplementatationModule.html":{},"modules/CryptoModule.html":{},"modules/IssuerModule.html":{},"modules/OAuthModule.html":{},"modules/Oid4vpModule.html":{},"modules/PresentationsModule.html":{},"modules/RegistrarModule.html":{},"modules/ResolverModule.html":{},"modules/SessionModule.html":{},"modules/StatusListModule.html":{},"modules/VerifierModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/AccessCertificateResponse.html":{"url":"interfaces/AccessCertificateResponse.html","title":"interface - AccessCertificateResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AccessCertificateResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/dto/access-certificate-response.ts\n        \n\n\n            \n                Description\n            \n            \n                Repsonse of access certificate request.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            crt\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            revoked\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        crt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        crt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The public key in PEM format.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier of the access certificate.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        revoked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        revoked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Indicates if the access certificate is revoked.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AccessCertificateResponse {\n    /**\n     * Unique identifier of the access certificate.\n     */\n    id: string;\n    /**\n     * The public key in PEM format.\n     */\n    crt: string;\n    /**\n     * Indicates if the access certificate is revoked.\n     */\n    revoked?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AdminAuthGuard.html":{"url":"injectables/AdminAuthGuard.html","title":"injectable - AdminAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AdminAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/admin.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard(\"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/admin.guard.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { AuthGuard } from \"@nestjs/passport\";\n\n@Injectable()\nexport class AdminAuthGuard extends AuthGuard(\"jwt\") {\n    canActivate(context: ExecutionContext) {\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AllowListPolicy.html":{"url":"classes/AllowListPolicy.html","title":"class - AllowListPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AllowListPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                allowList\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['allowList'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:31\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ApiKeyConfig.html":{"url":"classes/ApiKeyConfig.html","title":"class - ApiKeyConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ApiKeyConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for API key authentication in webhooks.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                headerName\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        headerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:19\n                        \n                    \n\n            \n                \n                    The name of the header where the API key will be sent.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:24\n                        \n                    \n\n            \n                \n                    The value of the API key to be sent in the header.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                main\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        main\n                        \n                    \n                \n            \n            \n                \n                        \n                    main()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app/app.controller.ts:8\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport { ApiExcludeController } from \"@nestjs/swagger\";\n\n@ApiExcludeController()\n@Controller()\nexport class AppController {\n    @Get()\n    main(): string {\n        return 'EUDIPLO is up and running, more information at https://openwallet-foundation-labs.github.io/eudiplo/latest/';\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WellKnownService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WellKnownController\n                        \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CryptoModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            HealthModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            KeyModule\n                        \n                        \n                            MetricModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StorageModule\n                        \n                        \n                            VerifierModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { MulterModule } from \"@nestjs/platform-express\";\nimport { ScheduleModule } from \"@nestjs/schedule\";\nimport { ServeStaticModule } from \"@nestjs/serve-static\";\nimport * as Joi from \"joi\";\nimport { memoryStorage } from \"multer\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { isAbsolute, join } from \"path\";\nimport { AppController } from \"./app/app.controller\";\nimport { AUTH_VALIDATION_SCHEMA, AuthModule } from \"./auth/auth.module\";\nimport { CryptoModule } from \"./crypto/crypto.module\";\nimport { CRYPTO_VALIDATION_SCHEMA } from \"./crypto/key/crypto-implementation/crypto-implementation.module\";\nimport { KEY_VALIDATION_SCHEMA, KeyModule } from \"./crypto/key/key.module\";\nimport { DatabaseModule } from \"./database/database.module\";\nimport { HealthModule } from \"./health/health.module\";\nimport { ISSUER_VALIDATION_SCHEMA, IssuerModule } from \"./issuer/issuer.module\";\nimport { MetricModule } from \"./metric/metric.module\";\nimport {\n    REGISTRAR_VALIDATION_SCHEMA,\n    RegistrarModule,\n} from \"./registrar/registrar.module\";\nimport {\n    SESSION_VALIDATION_SCHEMA,\n    SessionModule,\n} from \"./session/session.module\";\nimport { CONFIG_STORAGE_SCHEMA, StorageModule } from \"./storage/storage.module\";\nimport { VerifierModule } from \"./verifier/verifier.module\";\nimport { WellKnownController } from \"./well-known/well-known.controller\";\nimport { WellKnownService } from \"./well-known/well-known.service\";\n\n@Module({\n    imports: [\n        ConfigModule.forRoot({\n            validationSchema: Joi.object({\n                FOLDER: Joi.string().default(\"../../tmp\"),\n                RP_NAME: Joi.string().default(\"EUDIPLO\"),\n                LOG_LEVEL: Joi.string()\n                    .valid(\"trace\", \"debug\", \"info\", \"warn\", \"error\", \"fatal\")\n                    .default(\n                        process.env.NODE_ENV === \"production\"\n                            ? \"warn\"\n                            : \"debug\",\n                    ),\n                CONFIG_IMPORT: Joi.boolean().default(false),\n                CONFIG_IMPORT_FORCE: Joi.boolean().default(false),\n                CONFIG_FOLDER: Joi.string().default(\"../../assets/config\"),\n                ...AUTH_VALIDATION_SCHEMA,\n                ...REGISTRAR_VALIDATION_SCHEMA,\n                ...KEY_VALIDATION_SCHEMA,\n                ...CRYPTO_VALIDATION_SCHEMA,\n                ...ISSUER_VALIDATION_SCHEMA,\n                ...SESSION_VALIDATION_SCHEMA,\n                ...CONFIG_STORAGE_SCHEMA,\n                LOG_ENABLE_HTTP_LOGGER: Joi.boolean().default(false),\n                LOG_ENABLE_SESSION_LOGGER: Joi.boolean().default(false),\n                LOG_DEBUG_MODE: Joi.boolean().default(false),\n                LOG_FORMAT: Joi.string()\n                    .valid(\"json\", \"pretty\")\n                    .default(\n                        process.env.NODE_ENV === \"production\"\n                            ? \"json\"\n                            : \"pretty\",\n                    ),\n            }),\n            isGlobal: true,\n            expandVariables: true,\n        }),\n        LoggerModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const enableHttpLogger = configService.get(\n                    \"LOG_ENABLE_HTTP_LOGGER\",\n                    false,\n                );\n                //TODO: check if logging to file is needed: https://github.com/iamolegga/nestjs-pino?tab=readme-ov-file#asynchronous-logging\n                return {\n                    pinoHttp: {\n                        level: configService.get(\"LOG_LEVEL\", \"info\"),\n                        autoLogging: enableHttpLogger,\n                        transport: {\n                            target: \"pino-pretty\",\n                            options: {\n                                colorize: true,\n                                singleLine: false,\n                                translateTime: \"yyyy-mm-dd HH:MM:ss\",\n                                ignore: \"pid,hostname\",\n                            },\n                        },\n                        customProps: (req: any) => ({\n                            sessionId: req.params?.session,\n                        }),\n                        serializers: {\n                            req: (req: any) => ({\n                                method: req.method,\n                                url: req.url,\n                                headers: {\n                                    \"user-agent\": req.headers[\"user-agent\"],\n                                    \"content-type\": req.headers[\"content-type\"],\n                                },\n                                sessionId: req.params?.session,\n                                tenantId: req.params?.tenantId,\n                            }),\n                            res: (res: any) => ({\n                                statusCode: res.statusCode,\n                            }),\n                        },\n                    },\n                };\n            },\n        }),\n        AuthModule,\n        KeyModule.forRoot(),\n        MulterModule.register({\n            storage: memoryStorage(),\n        }),\n        CryptoModule,\n        IssuerModule,\n        VerifierModule,\n        RegistrarModule,\n        ScheduleModule.forRoot(),\n        ServeStaticModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (configService: ConfigService) => {\n                const folder = configService.getOrThrow(\"FOLDER\");\n                const rootPath = isAbsolute(folder)\n                    ? join(folder, \"public\")\n                    : join(__dirname, \"../\", folder, \"public\");\n                return [\n                    {\n                        rootPath,\n                    },\n                ];\n            },\n        }),\n        DatabaseModule,\n        SessionModule,\n        DatabaseModule,\n        HealthModule,\n        MetricModule,\n        StorageModule.forRoot(),\n    ],\n    controllers: [WellKnownController, AppController],\n    providers: [WellKnownService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AttestationBasedPolicy.html":{"url":"classes/AttestationBasedPolicy.html","title":"class - AttestationBasedPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AttestationBasedPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['attestationBased'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:80\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PolicyCredential[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:86\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                getGlobalJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOAuth2Token\n                            \n                            \n                                    \n                                    \n                                    \n                                getOidcDiscovery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getGlobalJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getGlobalJwks()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/jwks.json')@ApiOperation({summary: 'JSON Web Key Set', description: 'Returns the JSON Web Key Set for token verification.'})@ApiResponse({status: 200, description: 'JSON Web Key Set'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:207\n                        \n                    \n\n\n            \n                \n                        Global JWKS endpoint for client credentials flow.\nThis provides the JSON Web Key Set for verifying tokens issued by this server.\n\n\n                        \n                            Returns :         KeyResponseDto\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOAuth2Token\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOAuth2Token(body: any, headers: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('oauth2/token')@ApiBody({type: ClientCredentialsDto, examples: undefined})@ApiResponse({status: 200, description: 'OAuth2 token response', type: TokenResponse, examples: undefined})@ApiResponse({status: 401, description: 'Invalid client credentials'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:75\n                        \n                    \n\n\n            \n                \n                        OAuth2 Token endpoint - supports client credentials flow only\nAccepts client credentials either in Authorization header (Basic auth) or request body\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                headers\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        getOidcDiscovery\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOidcDiscovery()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('.well-known/oauth-authorization-server')@ApiOperation({summary: 'OIDC Discovery Configuration', description: 'Returns the OpenID Connect discovery configuration for client credentials authentication.'})@ApiResponse({status: 200, description: 'OIDC Discovery Configuration'})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:172\n                        \n                    \n\n\n            \n                \n                        OIDC Discovery endpoint for client credentials flow.\nThis endpoint provides the OpenID Connect configuration for applications\nthat need to authenticate using client_id and client_secret.\n\n\n                        \n                            Returns :         OidcDiscoveryDto\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Get,\n    Headers,\n    Post,\n    UnauthorizedException,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    ApiBody,\n    ApiExcludeController,\n    ApiOperation,\n    ApiResponse,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { KeyResponseDto } from \"../crypto/key/dto/key-response.dto\";\nimport { ClientCredentialsDto } from \"./dto/client-credentials.dto\";\nimport { OidcDiscoveryDto } from \"./dto/oidc-discovery.dto\";\nimport { TokenResponse } from \"./dto/token-response.dto\";\nimport { JwtService } from \"./jwt.service\";\nimport { TenantService } from \"./tenant.service\";\nimport { TokenPayload } from \"./token.decorator\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiTags(\"Authentication\")\n@Controller(\"\")\nexport class AuthController {\n    constructor(\n        private jwtService: JwtService,\n        private clientService: TenantService,\n        private configService: ConfigService,\n    ) {}\n\n    /**\n     * OAuth2 Token endpoint - supports client credentials flow only\n     * Accepts client credentials either in Authorization header (Basic auth) or request body\n     * @param body\n     * @param headers\n     * @returns\n     */\n    @Post(\"oauth2/token\")\n    @ApiBody({\n        type: ClientCredentialsDto,\n        examples: {\n            client_credentials: {\n                summary: \"Client Credentials Flow\",\n                value: {\n                    grant_type: \"client_credentials\",\n                    client_id: \"root\",\n                    client_secret: \"root\",\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"OAuth2 token response\",\n        type: TokenResponse,\n        examples: {\n            success: {\n                summary: \"Successful response\",\n                value: {\n                    access_token: \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n                    token_type: \"Bearer\",\n                    expires_in: 86400,\n                },\n            },\n        },\n    })\n    @ApiResponse({\n        status: 401,\n        description: \"Invalid client credentials\",\n    })\n    async getOAuth2Token(\n        @Body() body: any,\n        @Headers() headers: any,\n    ): Promise {\n        if (this.jwtService.isUsingExternalOIDC()) {\n            throw new UnauthorizedException(\n                \"OAuth2 token endpoint is not available when using external OIDC provider. Use your external OIDC provider for authentication.\",\n            );\n        }\n\n        // Only support client credentials flow\n        if (body.grant_type !== \"client_credentials\") {\n            throw new UnauthorizedException(\n                \"Only client_credentials grant type is supported\",\n            );\n        }\n\n        let clientId: string;\n        let clientSecret: string;\n\n        // Try to extract credentials from Authorization header (Basic auth)\n        const authHeader = headers.authorization;\n        if (authHeader && authHeader.startsWith(\"Basic \")) {\n            try {\n                const base64Credentials = authHeader.substring(6);\n                const credentials = Buffer.from(\n                    base64Credentials,\n                    \"base64\",\n                ).toString(\"ascii\");\n                const [id, secret] = credentials.split(\":\");\n                clientId = id;\n                clientSecret = secret;\n            } catch {\n                throw new UnauthorizedException(\n                    \"Invalid Authorization header format\",\n                );\n            }\n        } else {\n            // Fall back to request body\n            clientId = body.client_id;\n            clientSecret = body.client_secret;\n        }\n\n        if (!clientId || !clientSecret) {\n            throw new UnauthorizedException(\n                \"Client credentials must be provided either in Authorization header (Basic auth) or request body\",\n            );\n        }\n\n        const client = this.clientService.validateTenant(\n            clientId,\n            clientSecret,\n        );\n        if (!client) {\n            throw new UnauthorizedException(\"Invalid client credentials\");\n        }\n\n        //TODO: check if the access token should only include the session id or also e.g. the credentials that should be issued. I would think this is not required since we still need the claims for it.\n        const payload: TokenPayload = {\n            sub: client.id,\n            admin: true,\n        };\n\n        //TODO: make expiresIn configurable?\n        const access_token = await this.jwtService.generateToken(payload, {\n            expiresIn: \"24h\",\n            audience: \"eudiplo-service\",\n        });\n\n        const refresh_token = await this.jwtService.generateToken(payload, {\n            expiresIn: \"30d\",\n            audience: \"eudiplo-service\",\n        });\n\n        return {\n            access_token,\n            refresh_token,\n            token_type: \"Bearer\",\n            expires_in: 86400, // 24 hours in seconds\n        };\n    }\n\n    /**\n     * OIDC Discovery endpoint for client credentials flow.\n     * This endpoint provides the OpenID Connect configuration for applications\n     * that need to authenticate using client_id and client_secret.\n     */\n    @Get(\".well-known/oauth-authorization-server\")\n    @ApiOperation({\n        summary: \"OIDC Discovery Configuration\",\n        description:\n            \"Returns the OpenID Connect discovery configuration for client credentials authentication.\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"OIDC Discovery Configuration\",\n    })\n    getOidcDiscovery(): OidcDiscoveryDto {\n        const publicUrl = this.configService.getOrThrow(\"PUBLIC_URL\");\n\n        return {\n            issuer: publicUrl,\n            token_endpoint: `${publicUrl}/oauth2/token`,\n            jwks_uri: `${publicUrl}/.well-known/jwks.json`,\n            response_types_supported: [\"token\"],\n            grant_types_supported: [\"client_credentials\"],\n            token_endpoint_auth_methods_supported: [\n                \"client_secret_basic\",\n                \"client_secret_post\",\n            ],\n            subject_types_supported: [\"public\"],\n            id_token_signing_alg_values_supported: [\"ES256\"],\n            scopes_supported: [\"openid\"],\n            claims_supported: [\"iss\", \"sub\", \"aud\", \"exp\", \"iat\"],\n            service_documentation:\n                \"https://openwallet-foundation-labs.github.io/eudiplo/latest/\",\n        };\n    }\n\n    /**\n     * Global JWKS endpoint for client credentials flow.\n     * This provides the JSON Web Key Set for verifying tokens issued by this server.\n     */\n    @Get(\".well-known/jwks.json\")\n    @ApiOperation({\n        summary: \"JSON Web Key Set\",\n        description: \"Returns the JSON Web Key Set for token verification.\",\n    })\n    @ApiResponse({\n        status: 200,\n        description: \"JSON Web Key Set\",\n    })\n    getGlobalJwks(): KeyResponseDto {\n        // For now, return an empty key set since the actual keys are tenant-specific\n        // This can be enhanced later to include global signing keys if needed\n        return {\n            keys: [],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCryptoModule->AuthModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nAuthModule -->\n\nIssuerModule->AuthModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nAuthModule -->\n\nRegistrarModule->AuthModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAuthModule -->\n\nSessionModule->AuthModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nAuthModule -->\n\nStatusListModule->AuthModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTenantService\n\nTenantService\n\nAuthModule -->\n\nTenantService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            TenantService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                        \n                            TenantController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            IssuerModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtAuthGuard\n                        \n                        \n                            JwtService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { makeGaugeProvider } from \"@willsoto/nestjs-prometheus\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { IssuerModule } from \"../issuer/issuer.module\";\nimport { StatusListModule } from \"../issuer/status-list/status-list.module\";\nimport { RegistrarModule } from \"../registrar/registrar.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { AuthController } from \"./auth.controller\";\nimport { JwtAuthGuard } from \"./auth.guard\";\nimport { TenantEntity } from \"./entitites/tenant.entity\";\nimport { JwtService } from \"./jwt.service\";\nimport { JwtStrategy } from \"./jwt.strategy\";\nimport { TenantController } from \"./tenant/tenant.controller\";\nimport { TenantService } from \"./tenant.service\";\n\nexport const DEFAULT_JWT_SECRET = \"supersecret\";\nexport const DEFAULT_AUTH_CLIENT_ID = \"root\";\nexport const DEFAULT_AUTH_CLIENT_SECRET = \"root\";\n\nexport const AUTH_VALIDATION_SCHEMA = {\n    OIDC: Joi.string().optional(),\n    OIDC_INTERNAL_ISSUER_URL: Joi.when(\"OIDC\", {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    OIDC_SUB: Joi.when(\"OIDC\", {\n        then: Joi.string().default(\"azp\"),\n        otherwise: Joi.string().optional(),\n    }),\n    OIDC_ALGORITHM: Joi.when(\"OIDC\", {\n        then: Joi.string().default(\"RS256\"),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_JWT_SECRET),\n    }),\n    JWT_ISSUER: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default(\"eudiplo-service\"),\n    }),\n    JWT_EXPIRES_IN: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(\"24h\"),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_SECRET),\n    }),\n    AUTH_CLIENT_ID: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_ID),\n    }),\n};\n@Module({\n    imports: [\n        PassportModule,\n        ConfigModule,\n        CryptoModule,\n        StatusListModule,\n        RegistrarModule,\n        SessionModule,\n        IssuerModule,\n        TypeOrmModule.forFeature([TenantEntity]),\n    ],\n    providers: [\n        JwtStrategy,\n        JwtAuthGuard,\n        JwtService,\n        TenantService,\n        makeGaugeProvider({\n            name: \"tenant_total\",\n            help: \"Total number of tenants\",\n        }),\n    ],\n    controllers: [AuthController, TenantController],\n    exports: [PassportModule, JwtStrategy, JwtAuthGuard, JwtService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthResponse.html":{"url":"interfaces/AuthResponse.html","title":"interface - AuthResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/auth-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthResponse DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            state\n                                        \n                                \n                                \n                                        \n                                            vp_token\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        state\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        state:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The state parameter to maintain state between the request and callback.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        vp_token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        vp_token:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The VP token containing the presentation data.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AuthResponse {\n    /**\n     * The VP token containing the presentation data.\n     */\n    vp_token: {\n        /**\n         * Key-value pairs representing the VP token data.\n         */\n        [key: string]: string;\n    };\n    /**\n     * The state parameter to maintain state between the request and callback.\n     */\n    state: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationMethodAuth.html":{"url":"classes/AuthenticationMethodAuth.html","title":"class - AuthenticationMethodAuth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationMethodAuth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AuthenticationMethodInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationUrlConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:63\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['auth'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:59\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AuthenticationMethodInterface.html":{"url":"interfaces/AuthenticationMethodInterface.html","title":"interface - AuthenticationMethodInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AuthenticationMethodInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            method\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        method\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        method:     \"none\" | \"auth\" | \"presentationDuringIssuance\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"none\" | \"auth\" | \"presentationDuringIssuance\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationMethodNone.html":{"url":"classes/AuthenticationMethodNone.html","title":"class - AuthenticationMethodNone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationMethodNone\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AuthenticationMethodInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['none'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:69\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationMethodPresentation.html":{"url":"classes/AuthenticationMethodPresentation.html","title":"class - AuthenticationMethodPresentation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationMethodPresentation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            AuthenticationMethodInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                method\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationDuringIssuanceConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:53\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        method\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['presentationDuringIssuance'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:49\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthenticationUrlConfig.html":{"url":"classes/AuthenticationUrlConfig.html","title":"class - AuthenticationUrlConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthenticationUrlConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'auth'\nUsed for OID4VCI authorized code flow where the user will be redirected for authentication\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                url\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:21\n                        \n                    \n\n            \n                \n                    The URL used in the OID4VCI authorized code flow.\nThis URL is where users will be redirected for authentication.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:29\n                        \n                    \n\n            \n                \n                    Optional webhook configuration for authentication callbacks\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizationResponse.html":{"url":"classes/AuthorizationResponse.html","title":"class - AuthorizationResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizationResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/authorization-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the authorization response containing the VP token.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                response\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/authorization-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The response string containing the authorization details.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\n\n/**\n * DTO for the authorization response containing the VP token.\n */\nexport class AuthorizationResponse {\n    /**\n     * The response string containing the authorization details.\n     */\n    @IsString()\n    response: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthorizeController.html":{"url":"controllers/AuthorizeController.html","title":"controller - AuthorizeController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthorizeController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/authorize\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI authorization endpoints.\nThis controller handles the authorization requests, token requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authorizationChallengeEndpoint\n                            \n                            \n                                    \n                                authorize\n                            \n                            \n                                    \n                                    \n                                    Async\n                                par\n                            \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response, body: AuthorizeQueries, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('challenge')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:81\n                        \n                    \n\n\n            \n                \n                        Endpoint for the authorization challenge.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authorize\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorize(queries: AuthorizeQueries, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:30\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Authorization Request.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        par\n                        \n                    \n                \n            \n            \n                \n                        \n                    par(body: AuthorizeQueries)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiBody({description: 'Pushed Authorization Request', type: AuthorizeQueries})@Post('par')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:44\n                        \n                    \n\n\n            \n                \n                        Endpoint to handle the Pushed Authorization Request (PAR).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n            \n                \n                        \n                    token(body: any, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.controller.ts:65\n                        \n                    \n\n\n            \n                \n                        Endpoint to validate the token request.\nThis endpoint is used to exchange the authorization code for an access token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { Body, Controller, Get, Post, Query, Req, Res } from \"@nestjs/common\";\nimport { ApiBody, ApiExcludeController } from \"@nestjs/swagger\";\nimport type { Request, Response } from \"express\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionService } from \"../../session/session.service\";\nimport { AuthorizeService } from \"./authorize.service\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\nimport { ParResponseDto } from \"./dto/par-response.dto\";\n\n/**\n * Controller for the OpenID4VCI authorization endpoints.\n * This controller handles the authorization requests, token requests.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":session/authorize\")\nexport class AuthorizeController {\n    constructor(\n        private readonly authorizeService: AuthorizeService,\n        private sessionService: SessionService,\n    ) {}\n\n    /**\n     * Endpoint to handle the Authorization Request.\n     * @param queries\n     * @param res\n     */\n    @Get()\n    authorize(@Query() queries: AuthorizeQueries, @Res() res: Response) {\n        return this.authorizeService.sendAuthorizationResponse(queries, res);\n    }\n\n    /**\n     * Endpoint to handle the Pushed Authorization Request (PAR).\n     * @param body\n     * @returns\n     */\n    @ApiBody({\n        description: \"Pushed Authorization Request\",\n        type: AuthorizeQueries,\n    })\n    @Post(\"par\")\n    async par(@Body() body: AuthorizeQueries): Promise {\n        const request_uri = `urn:${randomUUID()}`;\n        // save both so we can retrieve the session also via the request_uri in the authorize step.\n        await this.sessionService.add(body.issuer_state!, {\n            request_uri,\n            auth_queries: body,\n        });\n        return {\n            expires_in: 500,\n            request_uri,\n        };\n    }\n\n    /**\n     * Endpoint to validate the token request.\n     * This endpoint is used to exchange the authorization code for an access token.\n     * @param body\n     * @param req\n     * @returns\n     */\n    @Post(\"token\")\n    token(\n        @Body() body: any,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        //TODO: define body\n        return this.authorizeService.validateTokenRequest(body, req, session);\n    }\n\n    /**\n     * Endpoint for the authorization challenge.\n     * @param res\n     * @param body\n     * @returns\n     */\n    @Post(\"challenge\")\n    authorizationChallengeEndpoint(\n        @Res() res: Response,\n        @Body() body: AuthorizeQueries,\n        @SessionEntity() session: Session,\n    ) {\n        return this.authorizeService.authorizationChallengeEndpoint(\n            res,\n            body,\n            session,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthorizeQueries.html":{"url":"classes/AuthorizeQueries.html","title":"class - AuthorizeQueries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthorizeQueries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/authorize-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                auth_session\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                client_id\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                code_challenge_method\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                dpop_jkt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                issuer_state\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                redirect_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                resource\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        auth_session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        code_challenge_method\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        dpop_jkt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        issuer_state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        redirect_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        resource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/authorize-request.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\nexport class AuthorizeQueries {\n    @IsOptional()\n    @IsString()\n    issuer_state?: string;\n    @IsOptional()\n    @IsString()\n    response_type?: string;\n    @IsOptional()\n    @IsString()\n    client_id?: string;\n    @IsOptional()\n    @IsString()\n    redirect_uri?: string;\n    @IsOptional()\n    @IsString()\n    resource?: string;\n    @IsOptional()\n    @IsString()\n    scope?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge?: string;\n    @IsOptional()\n    @IsString()\n    code_challenge_method?: string;\n    @IsOptional()\n    @IsString()\n    dpop_jkt?: string;\n    @IsOptional()\n    @IsString()\n    request_uri?: string;\n    @IsOptional()\n    @IsString()\n    auth_session?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthorizeService.html":{"url":"injectables/AuthorizeService.html","title":"injectable - AuthorizeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthorizeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                authorizationChallengeEndpoint\n                            \n                            \n                                authzMetadata\n                            \n                            \n                                getAuthorizationServer\n                            \n                            \n                                    Async\n                                parseChallengeRequest\n                            \n                            \n                                    Private\n                                    Async\n                                sendAuthorizationCode\n                            \n                            \n                                    Async\n                                sendAuthorizationResponse\n                            \n                            \n                                    Async\n                                setAuthCode\n                            \n                            \n                                    Async\n                                validateTokenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, oid4vpService: Oid4vpService, sessionService: SessionService, issuanceService: IssuanceService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/authorize/authorize.service.ts:37\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vpService\n                                                  \n                                                        \n                                                                        Oid4vpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        issuanceService\n                                                  \n                                                        \n                                                                        IssuanceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        authorizationChallengeEndpoint\n                        \n                    \n                \n            \n            \n                \n                        \n                    authorizationChallengeEndpoint(res: Response>, body: AuthorizeQueries, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:224\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \nauthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     AuthorizationServerMetadata\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthorizationServer\n                        \n                    \n                \n            \n            \n                \ngetAuthorizationServer(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Oauth2AuthorizationServer\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        parseChallengeRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseChallengeRequest(body: AuthorizeQueries, tenantId: string, webhook?: WebhookConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:206\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                webhook\n                                            \n                                                            WebhookConfig\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        sendAuthorizationCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationCode(res: Response, issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:296\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendAuthorizationResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendAuthorizationResponse(queries: AuthorizeQueries, res: Response>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:78\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queries\n                                            \n                                                            AuthorizeQueries\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response>\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setAuthCode\n                        \n                    \n                \n            \n            \n                \n                        \n                    setAuthCode(issuer_state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:303\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateTokenRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateTokenRequest(body: any, req: Request, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/authorize/authorize.service.ts:103\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session.tenantId,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CertEntity.html":{"url":"entities/CertEntity.html","title":"entity - CertEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CertEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/cert.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage certificates for keys.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                crt\n                            \n                            \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                type\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:57\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:39\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:51\n                        \n                    \n\n            \n                \n                    Description of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:21\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:33\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:27\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertificateType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'signing', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:45\n                        \n                    \n\n            \n                \n                    Type of the certificate (access or signing).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/cert.entity.ts:63\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\nexport type CertificateType = \"access\" | \"signing\";\n\n/**\n * Entity to manage certificates for keys.\n */\n@Entity()\nexport class CertEntity {\n    /**\n     * Unique identifier for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Certificate in PEM format.\n     */\n    @Column(\"varchar\")\n    crt: string;\n\n    /**\n     * Type of the certificate (access or signing).\n     */\n    @Column(\"varchar\", { default: \"signing\", primary: true })\n    type: CertificateType;\n\n    /**\n     * Description of the key.\n     */\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClaimsQuery.html":{"url":"classes/ClaimsQuery.html","title":"class - ClaimsQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClaimsQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                path\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        path\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     any[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:84\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientCredentialsDto.html":{"url":"classes/ClientCredentialsDto.html","title":"class - ClientCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-credentials.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                client_id\n                            \n                            \n                                    \n                                client_secret\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-credentials.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString } from \"class-validator\";\n\nexport class ClientCredentialsDto {\n    @IsString()\n    client_id: string;\n    @IsString()\n    client_secret: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClientInitDto.html":{"url":"classes/ClientInitDto.html","title":"class - ClientInitDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClientInitDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/client-init.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/client-init.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsString } from \"class-validator\";\n\nexport class ClientInitDto {\n    @IsString()\n    @IsOptional()\n    id?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/CredentialConfig.html":{"url":"entities/CredentialConfig.html","title":"entity - CredentialConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  CredentialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                disclosureFrame\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                embeddedDisclosurePolicy\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                issuanceConfigs\n                            \n                            \n                                    \n                                key\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                keyBinding\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                keyId\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lifeTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                statusManagement\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:100\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IssuerMetadataCredentialConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:95\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        disclosureFrame\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:105\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        embeddedDisclosurePolicy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EmbeddedDisclosurePolicy\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@ApiProperty({oneOf: undefined})@Type(undefined, {discriminator: undefined, keepDiscriminatorProperty: true})@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:172\n                        \n                    \n\n            \n                \n                    Embedded disclosure policy (discriminated union by policy).\nThe discriminator makes class-transformer instantiate the right subclass,\nand then class-validator runs that subclass’s rules.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:76\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         IssuanceConfig[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, issuance => issuance.credentialConfigs, {cascade: undefined, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:179\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CertEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:123\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        keyBinding\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('boolean', {default: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:116\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        keyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lifeTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('int', {nullable: true})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:133\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SchemaResponse\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:139\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        statusManagement\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@Column('boolean', {default: false})@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:128\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:90\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         VCT\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:111\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        // --- credential-config.entity.ts ---\n\nimport {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\nexport class DisplayImage {\n    @IsString()\n    uri: string;\n}\nexport class Display {\n    @IsString()\n    name: string;\n    @IsString()\n    description: string;\n    @IsString()\n    locale: string;\n    @IsString()\n    background_color?: string;\n    @IsString()\n    text_color?: string;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    background_image?: DisplayImage;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    logo?: DisplayImage;\n}\n\nexport class IssuerMetadataCredentialConfig {\n    @IsString()\n    format: string;\n    @ValidateNested()\n    @Type(() => Display)\n    display: Display[];\n    @IsOptional()\n    @IsString()\n    scope?: string;\n}\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => IssuerMetadataCredentialConfig)\n    config!: IssuerMetadataCredentialConfig;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity)\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialConfigCreate.html":{"url":"classes/CredentialConfigCreate.html","title":"class - CredentialConfigCreate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialConfigCreate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/dto/credential-config-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(CredentialConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"issuanceConfigs\",\n    \"key\",\n])\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { CredentialConfig } from \"../entities/credential.entity\";\n\nexport class CredentialConfigCreate extends OmitType(CredentialConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"issuanceConfigs\",\n    \"key\",\n]) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialConfigMapping.html":{"url":"classes/CredentialConfigMapping.html","title":"class - CredentialConfigMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialConfigMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for mapping credential configurations in issuance.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:13\n                        \n                    \n\n            \n                \n                    Unique identifier for the credential configuration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\nimport { IssuanceConfig } from \"../entities/issuance-config.entity\";\n\n/**\n * DTO for mapping credential configurations in issuance.\n */\nexport class CredentialConfigMapping {\n    /**\n     * Unique identifier for the credential configuration.\n     */\n    @IsString()\n    id: string;\n}\n\n/**\n * DTO for mapping issuance configurations.\n */\nexport class IssuanceDto extends OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"credentialConfigs\",\n] as const) {\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    credentialConfigIds: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialConfigService.html":{"url":"injectables/CredentialConfigService.html","title":"injectable - CredentialConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credential-config/credential-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credential configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getById\n                            \n                            \n                                    Public\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                store\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(credentialConfigRepository: Repository, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credential-config/credential-config.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialConfigService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        credentialConfigRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for CredentialConfig entity.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:198\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the CredentialConfig entity to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the result of the delete operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:158\n                        \n                    \n\n\n            \n                \n                        Retrieves all credential configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to an array of CredentialConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getById\n                        \n                    \n                \n            \n            \n                \ngetById(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:171\n                        \n                    \n\n\n            \n                \n                        Retrieves a credential configuration by its ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Imports the configs\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:149\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        store\n                        \n                    \n                \n            \n            \n                \nstore(tenantId: string, config: CredentialConfigCreate)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credential-config/credential-config.service.ts:185\n                        \n                    \n\n\n            \n                \n                        Stores a credential configuration for a given tenant.\nIf the configuration already exists, it will be overwritten.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant.\n\n\n                                            \n                                        \n                                        \n                                                config\n                                            \n                                                            CredentialConfigCreate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe CredentialConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored CredentialConfig entity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../../crypto/crypto.service\";\nimport { CredentialConfigCreate } from \"../dto/credential-config-create.dto\";\nimport { CredentialConfig } from \"../entities/credential.entity\";\n\n/**\n * Service for managing credential configurations.\n */\n@Injectable()\nexport class CredentialConfigService {\n    /**\n     * Constructor for CredentialConfigService.\n     * @param credentialConfigRepository - Repository for CredentialConfig entity.\n     */\n    constructor(\n        @InjectRepository(CredentialConfig)\n        private readonly credentialConfigRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Imports the configs\n     */\n    public async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"issuance/credentials\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    try {\n                        const payload = JSON.parse(\n                            readFileSync(join(path, file), \"utf8\"),\n                        );\n\n                        const id = file.replace(\".json\", \"\");\n                        payload.id = id;\n                        const exists = await this.getById(\n                            tenant.name,\n                            id,\n                        ).catch(() => false);\n                        if (exists && !force) {\n                            continue; // Skip if config already exists and force is not set\n                        } else if (exists && force) {\n                            //delete old element so removed elements are not present\n                            await this.credentialConfigRepository.delete({\n                                id,\n                                tenantId: tenant.name,\n                            });\n                        }\n\n                        // Validate the payload against CredentialConfig\n                        const config = plainToClass(\n                            CredentialConfigCreate,\n                            payload,\n                        );\n                        const validationErrors = await validate(config, {\n                            whitelist: true,\n                            forbidUnknownValues: false, // avoid false positives on plain objects\n                            forbidNonWhitelisted: false,\n                            stopAtFirstError: false,\n                        });\n\n                        // Check if keyId is provided and if the certificate exists\n                        if (config.keyId) {\n                            const cert = await this.cryptoService.getCertEntry(\n                                tenant.name,\n                                config.keyId,\n                            );\n                            if (!cert) {\n                                this.logger.error(\n                                    {\n                                        event: \"ValidationError\",\n                                        file,\n                                        tenant: tenant.name,\n                                        errors: [\n                                            {\n                                                property: \"keyId\",\n                                                constraints: {\n                                                    isDefined:\n                                                        \"Key ID must be defined in the crypto service.\",\n                                                },\n                                                value: config.keyId,\n                                            },\n                                        ],\n                                    },\n                                    `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                                );\n                                continue; // Skip this invalid config\n                            }\n                            (config as CredentialConfig).key = cert;\n                        }\n\n                        if (validationErrors.length > 0) {\n                            this.logger.error(\n                                {\n                                    event: \"ValidationError\",\n                                    file,\n                                    tenant: tenant.name,\n                                    //we need to extract the constraints because they tell what is wrong, also from the children elements\n                                    errors: validationErrors,\n                                },\n                                `Validation failed for credentials config ${file} in tenant ${tenant.name}`,\n                            );\n                            continue; // Skip this invalid config\n                        }\n\n                        await this.store(tenant.name, config);\n                        counter++;\n                    } catch (e) {\n                        this.logger.error(\n                            {\n                                event: \"ImportError\",\n                                file,\n                                tenant: tenant.name,\n                                error: e.message,\n                            },\n                            `Failed to import credentials config ${file} in tenant ${tenant.name}`,\n                        );\n                    }\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} credential configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    async onTenantDelete(tenantId: string) {\n        await this.credentialConfigRepository.delete({ tenantId });\n    }\n\n    /**\n     * Retrieves all credential configurations for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @returns A promise that resolves to an array of CredentialConfig entities.\n     */\n    get(tenantId: string) {\n        return this.credentialConfigRepository.find({\n            where: { tenantId },\n            relations: [\"key\"],\n        });\n    }\n\n    /**\n     * Retrieves a credential configuration by its ID for a given tenant.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    getById(tenantId: string, id: string) {\n        return this.credentialConfigRepository.findOneByOrFail({\n            id,\n            tenantId,\n        });\n    }\n\n    /**\n     * Stores a credential configuration for a given tenant.\n     * If the configuration already exists, it will be overwritten.\n     * @param tenantId - The ID of the tenant.\n     * @param config - The CredentialConfig entity to store.\n     * @returns A promise that resolves to the stored CredentialConfig entity.\n     */\n    store(tenantId: string, config: CredentialConfigCreate) {\n        return this.credentialConfigRepository.save({\n            ...config,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a credential configuration for a given tenant.\n     * @param tenantId - The ID of the tenant.\n     * @param id - The ID of the CredentialConfig entity to delete.\n     * @returns A promise that resolves to the result of the delete operation.\n     */\n    delete(tenantId: string, id: string) {\n        return this.credentialConfigRepository.delete({\n            id,\n            tenantId,\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialIssuerMetadataDto.html":{"url":"classes/CredentialIssuerMetadataDto.html","title":"class - CredentialIssuerMetadataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialIssuerMetadataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/credential-issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the metadata for a credential issuer.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_server\n                            \n                            \n                                authorization_servers\n                            \n                            \n                                batch_credential_issuance\n                            \n                            \n                                credential_configurations_supported\n                            \n                            \n                                credential_endpoint\n                            \n                            \n                                credential_issuer\n                            \n                            \n                                display\n                            \n                            \n                                notification_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_server\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:41\n                        \n                    \n\n            \n                \n                    The URL of the preferred authorization server.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_servers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:12\n                        \n                    \n\n            \n                \n                    List of authorization servers that support the credential issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        batch_credential_issuance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:24\n                        \n                    \n\n            \n                \n                    Information about batch credential issuance.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_configurations_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:37\n                        \n                    \n\n            \n                \n                    Object of credentials configurations supported by the issuer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:16\n                        \n                    \n\n            \n                \n                    The URL of the credential issuance endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        credential_issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:8\n                        \n                    \n\n            \n                \n                    The issuer identifier, typically a URL.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:33\n                        \n                    \n\n            \n                \n                    Display information for the credentials that are getting issued.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        notification_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/credential-issuer-metadata.dto.ts:20\n                        \n                    \n\n            \n                \n                    The URL of the notification endpoint for credential issuance.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CredentialIssuerMetadataDto {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    credential_issuer: string;\n    /**\n     * List of authorization servers that support the credential issuer.\n     */\n    authorization_servers: string[];\n    /**\n     * The URL of the credential issuance endpoint.\n     */\n    credential_endpoint: string;\n    /**\n     * The URL of the notification endpoint for credential issuance.\n     */\n    notification_endpoint: string;\n    /**\n     * Information about batch credential issuance.\n     */\n    batch_credential_issuance: {\n        /**\n         * Amount of elements in a batch.\n         */\n        batch_size: number;\n    };\n    /**\n     * Display information for the credentials that are getting issued.\n     */\n    display: Array;\n    /**\n     * Object of credentials configurations supported by the issuer.\n     */\n    credential_configurations_supported: any;\n    /**\n     * The URL of the preferred authorization server.\n     */\n    authorization_server: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialQuery.html":{"url":"classes/CredentialQuery.html","title":"class - CredentialQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                format\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                meta\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                multiple\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                trusted_authorities\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:65\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        multiple\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        trusted_authorities\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TrustedAuthorityQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:71\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CredentialSetQuery.html":{"url":"classes/CredentialSetQuery.html","title":"class - CredentialSetQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CredentialSetQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                options\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                required\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[][]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'array', items: undefined})@IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:94\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:98\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsController.html":{"url":"controllers/CredentialsController.html","title":"controller - CredentialsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/credentials\n            \n\n\n            \n                Description\n            \n            \n                Controller for managing credential configurations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getConfigs\n                            \n                            \n                                    \n                                storeCredentialConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:58\n                        \n                    \n\n\n            \n                \n                        Deletes an credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getConfigs\n                        \n                    \n                \n            \n            \n                \n                        \n                    getConfigs(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:35\n                        \n                    \n\n\n            \n                \n                        Returns the credential configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeCredentialConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeCredentialConfiguration(config: CredentialConfigCreate, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Stores the credential configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            CredentialConfigCreate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { CredentialConfigService } from \"./credential-config/credential-config.service\";\nimport { CredentialConfigCreate } from \"./dto/credential-config-create.dto\";\n\n/**\n * Controller for managing credential configurations.\n */\n@ApiTags(\"Issuer management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"issuer-management/credentials\")\nexport class CredentialsController {\n    /**\n     * Initializes the CredentialsController with the CredentialConfigService.\n     * @param credentialsService\n     */\n    constructor(private readonly credentialsService: CredentialConfigService) {}\n\n    /**\n     * Returns the credential configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getConfigs(@Token() user: TokenPayload) {\n        return this.credentialsService.get(user.sub);\n    }\n\n    /**\n     * Stores the credential configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeCredentialConfiguration(\n        @Body() config: CredentialConfigCreate,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.store(user.sub, config);\n    }\n\n    /**\n     * Deletes an credential configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteIssuanceConfiguration(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.credentialsService.delete(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CredentialsMetadataController.html":{"url":"controllers/CredentialsMetadataController.html","title":"controller - CredentialsMetadataController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CredentialsMetadataController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/credentials-metadata.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/credentials-metadata\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                schema\n                            \n                            \n                                    \n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        schema\n                        \n                    \n                \n            \n            \n                \n                        \n                    schema(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('schema/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        vct\n                        \n                    \n                \n            \n            \n                \n                        \n                    vct(id: string, tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('vct/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/credentials-metadata/credentials-metadata.controller.ts:15\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe identifier of the credential configuration.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Param } from \"@nestjs/common\";\nimport { ApiExcludeController } from \"@nestjs/swagger\";\nimport { CredentialsService } from \"../credentials/credentials.service\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":tenantId/credentials-metadata\")\nexport class CredentialsMetadataController {\n    constructor(private readonly credentialsService: CredentialsService) {}\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) from the credentials service.\n     * @param id - The identifier of the credential configuration.\n     */\n    @Get(\"vct/:id\")\n    vct(@Param(\"id\") id: string, @Param(\"tenantId\") tenantId: string) {\n        return this.credentialsService.getVCT(id, tenantId);\n    }\n\n    /**\n     * Retrieves the schema for a specific credential\n     * @param id\n     * @returns\n     */\n    @Get(\"schema/:id\")\n    schema(@Param(\"id\") id: string, @Param(\"tenantId\") tenantId: string) {\n        return this.credentialsService.getSchema(id, tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CredentialsService.html":{"url":"injectables/CredentialsService.html","title":"injectable - CredentialsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CredentialsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/credentials.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing credentials and their configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getCredential\n                            \n                            \n                                    Async\n                                getCredentialConfigurationSupported\n                            \n                            \n                                    Async\n                                getSchema\n                            \n                            \n                                    Async\n                                getVCT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, configService: ConfigService, statusListService: StatusListService, credentialConfigRepo: Repository, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/credentials/credentials.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for CredentialsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredential\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredential(credentialConfigurationId: string, holderCnf: Jwk, session: Session, issuanceConfig: IssuanceConfig, claims?: Record>)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:107\n                        \n                    \n\n\n            \n                \n                        Issues a credential based on the provided configuration and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                holderCnf\n                                            \n                                                        Jwk\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuanceConfig\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                claims\n                                            \n                                                        Record>\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCredentialConfigurationSupported\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCredentialConfigurationSupported(session: Session, issuanceConfig: IssuanceConfig)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Returns the credential configuration that is required for oid4vci\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                issuanceConfig\n                                            \n                                                            IssuanceConfig\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSchema\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSchema(credentialConfigurationId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:229\n                        \n                    \n\n\n            \n                \n                        Retrieves the schema for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getVCT\n                        \n                    \n                \n            \n            \n                \n                        \n                    getVCT(credentialId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/credentials/credentials.service.ts:203\n                        \n                    \n\n\n            \n                \n                        Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                credentialId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport type { Jwk } from \"@openid4vc/oauth2\";\nimport { CredentialConfigurationSupported } from \"@openid4vc/openid4vci\";\nimport { digest, generateSalt } from \"@sd-jwt/crypto-nodejs\";\nimport { JWTwithStatusListPayload } from \"@sd-jwt/jwt-status-list\";\nimport { SDJwtVcInstance } from \"@sd-jwt/sd-jwt-vc\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { CryptoImplementationService } from \"../../crypto/key/crypto-implementation/crypto-implementation.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SchemaResponse } from \"../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../issuance/entities/issuance-config.entity\";\nimport { StatusListService } from \"../status-list/status-list.service\";\nimport { CredentialConfig } from \"./entities/credential.entity\";\n\n/**\n * Service for managing credentials and their configurations.\n */\n@Injectable()\nexport class CredentialsService {\n    /**\n     * Constructor for CredentialsService.\n     * @param cryptoService\n     * @param configService\n     * @param statusListService\n     * @param credentialConfigRepo\n     * @param cryptoImplementationService\n     */\n    constructor(\n        private cryptoService: CryptoService,\n        private configService: ConfigService,\n        private statusListService: StatusListService,\n        @InjectRepository(CredentialConfig)\n        private credentialConfigRepo: Repository,\n        private cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Returns the credential configuration that is required for oid4vci\n     * @param tenantId\n     * @returns\n     */\n    async getCredentialConfigurationSupported(\n        session: Session,\n        issuanceConfig: IssuanceConfig,\n    ): Promise> {\n        const credential_configurations_supported: Record = {};\n\n        const configs = await this.credentialConfigRepo.findBy({\n            tenantId: session.tenantId,\n        });\n\n        //add key binding when required:\n        const kb = {\n            proof_types_supported: {\n                jwt: {\n                    proof_signing_alg_values_supported: [\n                        this.cryptoImplementationService.getAlg(),\n                    ],\n                },\n            },\n            credential_signing_alg_values_supported: [\n                this.cryptoImplementationService.getAlg(),\n            ],\n            cryptographic_binding_methods_supported: [\"jwk\"],\n        };\n\n        for (const value of configs) {\n            const isUsed = issuanceConfig.credentialConfigs.find(\n                (config) => config.id === value.id,\n            );\n            (value.config as CredentialConfigurationSupported).vct =\n                `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.tenantId}/credentials-metadata/vct/${value.id}`;\n\n            if (value.embeddedDisclosurePolicy) {\n                delete (value.embeddedDisclosurePolicy as any).$schema;\n                (\n                    value.config as CredentialConfigurationSupported\n                ).disclosure_policy = value.embeddedDisclosurePolicy;\n            }\n\n            if (isUsed?.id)\n                value.config = {\n                    ...value.config,\n                    ...kb,\n                };\n            (\n                credential_configurations_supported as CredentialConfigurationSupported\n            )[value.id] = value.config;\n        }\n        return credential_configurations_supported;\n    }\n\n    /**\n     * Issues a credential based on the provided configuration and session.\n     * @param credentialConfigurationId\n     * @param holderCnf\n     * @param session\n     * @returns\n     */\n    async getCredential(\n        credentialConfigurationId: string,\n        holderCnf: Jwk,\n        session: Session,\n        issuanceConfig: IssuanceConfig,\n        claims?: Record>,\n    ) {\n        const credentialConfiguration = issuanceConfig.credentialConfigs.find(\n            (config) => config.id === credentialConfigurationId,\n        );\n        if (!credentialConfiguration)\n            throw new ConflictException(\n                `Credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        //use passed claims, if not provided try the ones stored in the session and the use default ones from the config is provided\n        const usedClaims =\n            claims?.[credentialConfigurationId] ??\n            session.credentialPayload?.claims?.[credentialConfigurationId] ??\n            credentialConfiguration.claims;\n        const disclosureFrame = credentialConfiguration.disclosureFrame;\n\n        const keyId =\n            credentialConfiguration?.keyId ??\n            (await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"signing\",\n            ));\n\n        //at this point it is sd-jwt specific.\n\n        const sdjwt = new SDJwtVcInstance({\n            signer: await this.cryptoService.keyService.signer(\n                session.tenantId,\n                keyId,\n            ),\n            signAlg: this.cryptoImplementationService.getAlg(),\n            hasher: digest,\n            hashAlg: \"sha-256\",\n            saltGenerator: generateSalt,\n            loadTypeMetadataFormat: true,\n        });\n\n        // If status management is enabled, create a status entry\n        let status: JWTwithStatusListPayload | undefined;\n        if (credentialConfiguration.statusManagement) {\n            status = await this.statusListService.createEntry(\n                session,\n                credentialConfigurationId,\n            );\n        }\n\n        const iat = Math.round(new Date().getTime() / 1000);\n        // Set expiration time if lifeTime is defined\n        let exp: number | undefined;\n        if (credentialConfiguration.lifeTime) {\n            exp = iat + credentialConfiguration.lifeTime;\n        }\n\n        // If key binding is enabled, include the JWK in the cnf\n        let cnf: { jwk: Jwk } | undefined;\n\n        if (credentialConfiguration.keyBinding) {\n            cnf = {\n                jwk: holderCnf,\n            };\n        }\n\n        return sdjwt.issue(\n            {\n                iss: this.configService.getOrThrow(\"PUBLIC_URL\"),\n                iat,\n                exp,\n                vct: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.tenantId}/credentials-metadata/vct/${credentialConfigurationId}`,\n                cnf,\n                ...usedClaims,\n                ...status,\n            },\n            disclosureFrame,\n            {\n                header: {\n                    x5c: await this.cryptoService.getCertChain(\n                        \"signing\",\n                        session.tenantId,\n                    ),\n                    alg: this.cryptoImplementationService.getAlg(),\n                },\n            },\n        );\n    }\n\n    /**\n     * Retrieves the VCT (Verifiable Credential Type) for a specific credential configuration.\n     * @param credentialId\n     * @param tenantId\n     * @returns\n     */\n    async getVCT(credentialId: string, tenantId: string): Promise {\n        const credentialConfig = await this.credentialConfigRepo\n            .findOneByOrFail({\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(\n                    `Credential configuration with id ${credentialId} not found`,\n                );\n            });\n        if (!credentialConfig.vct) {\n            throw new ConflictException(\n                `VCT for credential configuration with id ${credentialId} not found`,\n            );\n        }\n        const host = this.configService.getOrThrow(\"PUBLIC_URL\");\n        credentialConfig.vct.vct = `${host}/${tenantId}/credentials-metadata/vct/${credentialConfig.id}`;\n        return credentialConfig.vct;\n    }\n\n    /**\n     * Retrieves the schema for a specific credential configuration.\n     * @param id\n     * @param tenantId\n     * @returns\n     */\n    async getSchema(\n        credentialConfigurationId: string,\n        tenantId: string,\n    ): Promise {\n        const credentialConfig =\n            await this.credentialConfigRepo.findOneByOrFail({\n                tenantId,\n            });\n        if (!credentialConfig) {\n            throw new ConflictException(\n                `Credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        if (!credentialConfig.schema) {\n            throw new ConflictException(\n                `Schema for credential configuration with id ${credentialConfigurationId} not found`,\n            );\n        }\n        return credentialConfig.schema;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoImplementatationModule.html":{"url":"modules/CryptoImplementatationModule.html","title":"module - CryptoImplementatationModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoImplementatationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoImplementatationModule\n\n\n\ncluster_CryptoImplementatationModule_exports\n\n\n\ncluster_CryptoImplementatationModule_providers\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\n\n\nCryptoImplementatationModule\n\nCryptoImplementatationModule\n\nCryptoImplementationService  -->\n\nCryptoImplementatationModule->CryptoImplementationService \n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoImplementatationModule -->\n\nCryptoImplementationService->CryptoImplementatationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoImplementationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoImplementationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from \"@nestjs/common\";\nimport { ConfigModule } from \"@nestjs/config\";\nimport * as Joi from \"joi\";\nimport { CryptoImplementationService } from \"./crypto-implementation.service\";\n\nexport const CRYPTO_VALIDATION_SCHEMA = {\n    CRYPTO_ALG: Joi.string().valid(\"ES256\").default(\"ES256\"),\n};\n\n@Global()\n@Module({\n    imports: [ConfigModule],\n    providers: [CryptoImplementationService],\n    exports: [CryptoImplementationService],\n})\nexport class CryptoImplementatationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoImplementation.html":{"url":"interfaces/CryptoImplementation.html","title":"interface - CryptoImplementation","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoImplementation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface to imeplement different algorithms.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alg\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        generateKeyPair\n                                    \n                                \n                                \n                                    \n                                        getSigner\n                                    \n                                \n                                \n                                    \n                                        getVerifier\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        generateKeyPair\n                        \n                    \n                \n            \n            \n                \ngenerateKeyPair()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:19\n                        \n                    \n\n\n            \n                \n                        Generates a new keypair\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSigner\n                        \n                    \n                \n            \n            \n                \ngetSigner(privateKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:24\n                        \n                    \n\n\n            \n                \n                        creates a signer based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getVerifier\n                        \n                    \n                \n            \n            \n                \ngetVerifier(publicKeyJWK: JsonWebKey)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.ts:29\n                        \n                    \n\n\n            \n                \n                        creates a verifier based on the passed key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                publicKeyJWK\n                                            \n                                                            JsonWebKey\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alg\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alg:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        type KeyPair = {\n    publicKey: JsonWebKey;\n    privateKey: JsonWebKey;\n};\n\ntype Signer = (data: string) => Promise;\n\ntype Verifier = (data: string, signature: string) => Promise;\n\n/**\n * Generic interface to imeplement different algorithms.\n */\nexport interface CryptoImplementation {\n    //name of the algorithm\n    alg: string;\n    /**\n     * Generates a new keypair\n     */\n    generateKeyPair(): Promise;\n    /**\n     * creates a signer based on the passed key.\n     * @param privateKeyJWK\n     */\n    getSigner(privateKeyJWK: JsonWebKey): Promise;\n    /**\n     * creates a verifier based on the passed key.\n     * @param publicKeyJWK\n     */\n    getVerifier(publicKeyJWK: JsonWebKey): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoImplementationService.html":{"url":"injectables/CryptoImplementationService.html","title":"injectable - CryptoImplementationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoImplementationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAlg\n                            \n                            \n                                getCrypto\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configServie: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configServie\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAlg\n                        \n                    \n                \n            \n            \n                \ngetAlg()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Return the algorithm that is used for the crypto operations like signing.\n\n\n                        \n                            Returns :         CryptoType\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCrypto\n                        \n                    \n                \n            \n            \n                \ngetCrypto(alg)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/crypto-implementation/crypto-implementation.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Returns the crypto implementation based on the configured algorithm.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                alg\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    this.configServie.get(\"CRYPTO_ALG\")\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CryptoImplementation\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { ES256 } from \"@sd-jwt/crypto-nodejs\";\nimport { CryptoImplementation } from \"./crypto-implementation\";\nimport { ED25519 } from \"./ed25519\";\n\nexport type CryptoType = \"ES256\" | \"Ed25519\";\n\n@Injectable()\nexport class CryptoImplementationService {\n    constructor(private configServie: ConfigService) {}\n\n    /**\n     * Return the algorithm that is used for the crypto operations like signing.\n     * @returns\n     */\n    getAlg(): CryptoType {\n        return this.configServie.get(\"CRYPTO_ALG\") as CryptoType;\n    }\n\n    /**\n     * Returns the crypto implementation based on the configured algorithm.\n     * @param alg\n     * @returns\n     */\n    getCrypto(\n        alg = this.configServie.get(\"CRYPTO_ALG\"),\n    ): CryptoImplementation {\n        switch (alg) {\n            case \"Ed25519\":\n                return ED25519;\n            case \"ES256\":\n                return ES256;\n            default:\n                throw new Error(`Unsupported algorithm ${alg}`);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoModule.html":{"url":"modules/CryptoModule.html","title":"module - CryptoModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\n\nCryptoService \n\nCryptoService \n\n\n\nEncryptionService \n\nEncryptionService \n\n\n\nCryptoModule\n\nCryptoModule\n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/crypto.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            KeyController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CryptoService\n                        \n                        \n                            EncryptionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoService } from \"./crypto.service\";\nimport { EncryptionService } from \"./encryption/encryption.service\";\nimport { CertEntity } from \"./key/entities/cert.entity\";\nimport { KeyEntity } from \"./key/entities/keys.entity\";\nimport { KeyController } from \"./key/key.controller\";\n\n@Module({\n    imports: [TypeOrmModule.forFeature([CertEntity, KeyEntity])],\n    controllers: [KeyController],\n    providers: [CryptoService, EncryptionService],\n    exports: [CryptoService, EncryptionService],\n})\nexport class CryptoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DBKeyService.html":{"url":"classes/DBKeyService.html","title":"class - DBKeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DBKeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/adapters/db-key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The key service is responsible for managing the keys of the issuer.\n\n            \n\n            \n                Extends\n            \n            \n                            KeyService\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                crypto\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                getKid\n                            \n                            \n                                    Private\n                                    Async\n                                getPrivateKey\n                            \n                            \n                                    Private\n                                getPubFromPrivateKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                getPublicKey\n                            \n                            \n                                    Async\n                                getPublicKey\n                            \n                            \n                                import\n                            \n                            \n                                init\n                            \n                            \n                                    Async\n                                signer\n                            \n                            \n                                    Async\n                                signJWT\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoImplementationService, certRepository: Repository, keyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/adapters/db-key.service.ts:28\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        keyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/adapters/db-key.service.ts:28\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:86\n\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair and wrtites the private key to the file system.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getKid\n                        \n                    \n                \n            \n            \n                \ngetKid(tenantId: string, type: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:136\n\n                        \n                    \n\n\n            \n                \n                        Gets one key id for the tenant.\nIf no key exists, it will throw an error.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    \"signing\"\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        getPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPrivateKey(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Get the keys from the file system or generate them if they do not exist\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getPubFromPrivateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPubFromPrivateKey(privateKey: JWK_EC_Private)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:62\n                        \n                    \n\n\n            \n                \n                        Get the public key from the private key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                privateKey\n                                            \n                                                        JWK_EC_Private\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         EC_Public\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:152\n\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \ngetPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:153\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/adapters/db-key.service.ts:158\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        import\n                        \n                    \n                \n            \n            \n                \nimport(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:46\n\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit(tenant: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:77\n\n                        \n                    \n\n\n            \n                \n                        Initialize the key service for a specific tenant.\nThis will create the keys if they do not exist.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenant\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:109\n\n                        \n                    \n\n\n            \n                \n                        Get the signer for the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JWTHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:195\n\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWTHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         KeyService\n\n                        \n                    \n                    \n                        \n                                Defined in         KeyService:85\n\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConfigService } from \"@nestjs/config\";\nimport { Signer } from \"@sd-jwt/types\";\nimport {\n    CryptoKey,\n    exportJWK,\n    exportSPKI,\n    importJWK,\n    JWK,\n    JWK_EC_Private,\n    JWTHeaderParameters,\n    JWTPayload,\n    SignJWT,\n} from \"jose\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\nimport { CryptoImplementation } from \"../crypto-implementation/crypto-implementation\";\nimport { CryptoImplementationService } from \"../crypto-implementation/crypto-implementation.service\";\nimport { KeyImportDto } from \"../dto/key-import.dto\";\nimport { CertEntity, CertificateType } from \"../entities/cert.entity\";\nimport { KeyEntity } from \"../entities/keys.entity\";\nimport { KeyService } from \"../key.service\";\n\n/**\n * The key service is responsible for managing the keys of the issuer.\n */\nexport class DBKeyService extends KeyService {\n    private crypto: CryptoImplementation;\n\n    constructor(\n        configService: ConfigService,\n        private cryptoService: CryptoImplementationService,\n        certRepository: Repository,\n        private keyRepository: Repository,\n    ) {\n        super(configService, certRepository);\n        this.crypto = cryptoService.getCrypto();\n    }\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     * @returns\n     */\n    import(tenantId: string, body: KeyImportDto): Promise {\n        const privateKey = body.privateKey;\n        return this.keyRepository\n            .save({\n                id: privateKey.kid,\n                tenantId,\n                key: privateKey,\n            })\n            .then(() => privateKey.kid);\n    }\n\n    /**\n     * Get the public key from the private key.\n     * @param privateKey\n     * @returns\n     */\n    private getPubFromPrivateKey(privateKey: JWK_EC_Private): EC_Public {\n        const {\n            d: _d,\n            key_ops: _key_ops,\n            ext: _ext,\n            ...publicKey\n        } = privateKey;\n        return publicKey as EC_Public;\n    }\n\n    /**\n     * Initialize the key service for a specific tenant.\n     * This will create the keys if they do not exist.\n     * @param tenant\n     */\n    init(tenant: string): Promise {\n        return this.getKid(tenant).catch(async () => this.create(tenant));\n    }\n\n    /**\n     * Creates a new keypair and wrtites the private key to the file system.\n     * @param tenantId\n     * @returns key id of the generated key.\n     */\n    async create(tenantId: string): Promise {\n        const keys = await this.crypto.generateKeyPair();\n        const privateKey = keys.privateKey as JWK;\n        //add a random key id for reference\n        privateKey.kid = v4();\n        privateKey.alg = this.crypto.alg;\n\n        //remove exportable and key_ops from the private key\n        delete privateKey.ext;\n        delete privateKey.key_ops;\n\n        return this.keyRepository\n            .save({\n                id: privateKey.kid,\n                tenantId,\n                key: privateKey,\n            })\n            .then(() => privateKey.kid!);\n    }\n\n    /**\n     * Get the signer for the key service\n     */\n    async signer(tenantId: string, keyId?: string): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n        return this.crypto.getSigner(privateKey);\n    }\n\n    /**\n     * Get the keys from the file system or generate them if they do not exist\n     * @returns\n     */\n    private async getPrivateKey(tenantId: string, keyId?: string) {\n        keyId =\n            keyId ||\n            (await this.getKid(tenantId).catch(() => this.create(tenantId)));\n\n        return this.keyRepository\n            .findOneByOrFail({\n                id: keyId,\n                tenantId,\n            })\n            .then((key) => key.key);\n    }\n\n    /**\n     * Gets one key id for the tenant.\n     * If no key exists, it will throw an error.\n     * @returns\n     */\n    getKid(\n        tenantId: string,\n        type: CertificateType = \"signing\",\n    ): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                type,\n            })\n            .then((cert) => cert.id);\n    }\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    getPublicKey(type: \"jwk\", tenantId: string, keyId?: string): Promise;\n    getPublicKey(\n        type: \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    async getPublicKey(\n        type: \"pem\" | \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n\n        // Convert the private key to a public key\n        // First import the private key as a CryptoKey\n        const privateKeyInstance = await importJWK(\n            privateKey,\n            this.cryptoService.getAlg(),\n            { extractable: true },\n        );\n\n        // Export it as a JWK to get the public key components\n        const privateKeyJWK = (await exportJWK(\n            privateKeyInstance,\n        )) as JWK_EC_Private;\n\n        // Remove private key components to get only the public key\n\n        const publicKey = this.getPubFromPrivateKey(privateKeyJWK);\n\n        if (type === \"pem\") {\n            // Import the public key and export as PEM\n            const publicKeyInstance = await importJWK(\n                publicKey,\n                this.cryptoService.getAlg(),\n                { extractable: true },\n            );\n            return exportSPKI(publicKeyInstance as CryptoKey);\n        } else {\n            return publicKey;\n        }\n    }\n\n    async signJWT(\n        payload: JWTPayload,\n        header: JWTHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise {\n        const privateKey = await this.getPrivateKey(tenantId, keyId);\n        const privateKeyInstance = (await importJWK(privateKey)) as CryptoKey;\n        return new SignJWT(payload)\n            .setProtectedHeader(header)\n            .sign(privateKeyInstance);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DCQL.html":{"url":"classes/DCQL.html","title":"class - DCQL","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DCQL\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                credential_set\n                            \n                            \n                                    \n                                    \n                                    \n                                credentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        credential_set\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialSetQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:111\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:105\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule, TypeOrmModuleOptions } from \"@nestjs/typeorm\";\nimport * as Joi from \"joi\";\nimport { join } from \"path\";\n\nexport const DB_VALIDATION_SCHEMA = {\n    DB_TYPE: Joi.string().valid(\"sqlite\", \"postgres\").default(\"sqlite\"),\n    DB_HOST: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n};\n\n@Module({\n    imports: [\n        TypeOrmModule.forRootAsync({\n            imports: [ConfigModule],\n            inject: [ConfigService],\n            useFactory: (\n                configService: ConfigService,\n            ): TypeOrmModuleOptions => {\n                const dbType = configService.get(\n                    \"DB_TYPE\",\n                );\n\n                const commonOptions = {\n                    synchronize: true,\n                    autoLoadEntities: true,\n                };\n\n                if (dbType === \"postgres\") {\n                    return {\n                        type: \"postgres\",\n                        host: configService.getOrThrow(\"DB_HOST\"),\n                        port: configService.getOrThrow(\"DB_PORT\"),\n                        username:\n                            configService.getOrThrow(\"DB_USERNAME\"),\n                        password:\n                            configService.getOrThrow(\"DB_PASSWORD\"),\n                        database:\n                            configService.getOrThrow(\"DB_DATABASE\"),\n                        ...commonOptions,\n                    };\n                }\n\n                return {\n                    type: \"sqlite\",\n                    database: join(\n                        configService.getOrThrow(\"FOLDER\"),\n                        \"service.db\",\n                    ),\n                    ...commonOptions,\n                };\n            },\n        }),\n    ],\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Display.html":{"url":"classes/Display.html","title":"class - Display","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Display\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                background_color\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                background_image\n                            \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                locale\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                logo\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                    Optional\n                                text_color\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        background_color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        background_image\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayImage\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:49\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        locale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:42\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayImage\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:52\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        text_color\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:46\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\nexport class DisplayImage {\n    @IsString()\n    uri: string;\n}\nexport class Display {\n    @IsString()\n    name: string;\n    @IsString()\n    description: string;\n    @IsString()\n    locale: string;\n    @IsString()\n    background_color?: string;\n    @IsString()\n    text_color?: string;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    background_image?: DisplayImage;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    logo?: DisplayImage;\n}\n\nexport class IssuerMetadataCredentialConfig {\n    @IsString()\n    format: string;\n    @ValidateNested()\n    @Type(() => Display)\n    display: Display[];\n    @IsOptional()\n    @IsString()\n    scope?: string;\n}\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => IssuerMetadataCredentialConfig)\n    config!: IssuerMetadataCredentialConfig;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity)\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/DisplayController.html":{"url":"controllers/DisplayController.html","title":"controller - DisplayController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  DisplayController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/display.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                display\n            \n\n\n            \n                Description\n            \n            \n                Display Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createDisplay\n                            \n                            \n                                    \n                                getDisplay\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createDisplay\n                        \n                    \n                \n            \n            \n                \n                        \n                    createDisplay(user: TokenPayload, displayData: DisplayCreateDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/display/display.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Create a new display for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user token payload\n\n                                            \n                                        \n                                        \n                                                displayData\n                                            \n                                                            DisplayCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The display data to create\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The created display information\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDisplay\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDisplay(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/display/display.controller.ts:27\n                        \n                    \n\n\n            \n                \n                        Get display information for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user token payload\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The display information\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseGuards } from \"@nestjs/common\";\nimport { ApiSecurity } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { DisplayService } from \"./display.service\";\nimport { DisplayCreateDto } from \"./dto/display-create.dto\";\n\n/**\n * Display Controller\n */\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"display\")\nexport class DisplayController {\n    /**\n     * Display Controller\n     * @param displayService\n     */\n    constructor(private readonly displayService: DisplayService) {}\n\n    /**\n     * Get display information for a user\n     * @param user The user token payload\n     * @returns The display information\n     */\n    @Get()\n    getDisplay(@Token() user: TokenPayload) {\n        return this.displayService.get(user.sub);\n    }\n\n    /**\n     * Create a new display for a user\n     * @param user The user token payload\n     * @param displayData The display data to create\n     * @returns The created display information\n     */\n    @Post()\n    createDisplay(\n        @Token() user: TokenPayload,\n        @Body() displayData: DisplayCreateDto,\n    ) {\n        return this.displayService.create(user.sub, displayData);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayCreateDto.html":{"url":"classes/DisplayCreateDto.html","title":"class - DisplayCreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayCreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/dto/display-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(DisplayEntity, [\n    \"tenant\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { DisplayEntity } from \"../entities/display.entity\";\n\nexport class DisplayCreateDto extends OmitType(DisplayEntity, [\n    \"tenant\",\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/DisplayEntity.html":{"url":"entities/DisplayEntity.html","title":"entity - DisplayEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  DisplayEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/entities/display.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                    \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:32\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :     DisplayInfo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)@Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:40\n                        \n                    \n\n            \n                \n                    The display information.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsString, ValidateNested } from \"class-validator\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\nclass DisplayLogo {\n    @IsString()\n    url: string;\n}\nexport class DisplayInfo {\n    @IsString()\n    name: string;\n    @IsString()\n    locale: string;\n\n    @ValidateNested()\n    @Type(() => DisplayLogo)\n    logo: DisplayLogo;\n}\n\n@Entity()\nexport class DisplayEntity {\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The display information.\n     */\n    @ValidateNested()\n    @Type(() => DisplayInfo)\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayImage.html":{"url":"classes/DisplayImage.html","title":"class - DisplayImage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayImage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:34\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\nexport class DisplayImage {\n    @IsString()\n    uri: string;\n}\nexport class Display {\n    @IsString()\n    name: string;\n    @IsString()\n    description: string;\n    @IsString()\n    locale: string;\n    @IsString()\n    background_color?: string;\n    @IsString()\n    text_color?: string;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    background_image?: DisplayImage;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    logo?: DisplayImage;\n}\n\nexport class IssuerMetadataCredentialConfig {\n    @IsString()\n    format: string;\n    @ValidateNested()\n    @Type(() => Display)\n    display: Display[];\n    @IsOptional()\n    @IsString()\n    scope?: string;\n}\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => IssuerMetadataCredentialConfig)\n    config!: IssuerMetadataCredentialConfig;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity)\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayInfo.html":{"url":"classes/DisplayInfo.html","title":"class - DisplayInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/entities/display.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                locale\n                            \n                            \n                                    \n                                    \n                                logo\n                            \n                            \n                                    \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        locale\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DisplayLogo\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsString, ValidateNested } from \"class-validator\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\nclass DisplayLogo {\n    @IsString()\n    url: string;\n}\nexport class DisplayInfo {\n    @IsString()\n    name: string;\n    @IsString()\n    locale: string;\n\n    @ValidateNested()\n    @Type(() => DisplayLogo)\n    logo: DisplayLogo;\n}\n\n@Entity()\nexport class DisplayEntity {\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The display information.\n     */\n    @ValidateNested()\n    @Type(() => DisplayInfo)\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DisplayLogo.html":{"url":"classes/DisplayLogo.html","title":"class - DisplayLogo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DisplayLogo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/entities/display.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/display/entities/display.entity.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport { IsString, ValidateNested } from \"class-validator\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\nclass DisplayLogo {\n    @IsString()\n    url: string;\n}\nexport class DisplayInfo {\n    @IsString()\n    name: string;\n    @IsString()\n    locale: string;\n\n    @ValidateNested()\n    @Type(() => DisplayLogo)\n    logo: DisplayLogo;\n}\n\n@Entity()\nexport class DisplayEntity {\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The display information.\n     */\n    @ValidateNested()\n    @Type(() => DisplayInfo)\n    @Column(\"json\")\n    value: DisplayInfo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DisplayService.html":{"url":"injectables/DisplayService.html","title":"injectable - DisplayService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DisplayService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/display/display.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Display Service\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                get\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(displayRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/display/display.service.ts:11\n                            \n                        \n\n                \n                    \n                            Display Service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        displayRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(tenantId: string, displayData: DisplayCreateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/display/display.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Create a new display for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant\n\n                                            \n                                        \n                                        \n                                                displayData\n                                            \n                                                            DisplayCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The display data to create\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The created display information\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/display/display.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Get display information for a user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The display information for the tenant\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { DisplayCreateDto } from \"./dto/display-create.dto\";\nimport { DisplayEntity } from \"./entities/display.entity\";\n\n/**\n * Display Service\n */\n@Injectable()\nexport class DisplayService {\n    /**\n     * Display Service\n     * @param displayRepository\n     */\n    constructor(\n        @InjectRepository(DisplayEntity)\n        private readonly displayRepository: Repository,\n    ) {}\n\n    /**\n     * Get display information for a user\n     * @param tenantId The ID of the tenant\n     * @returns The display information for the tenant\n     */\n    get(tenantId: string): Promise {\n        return this.displayRepository.findOne({\n            where: { tenantId },\n        });\n    }\n\n    /**\n     * Create a new display for a user\n     * @param tenantId The ID of the tenant\n     * @param displayData The display data to create\n     * @returns The created display information\n     */\n    create(\n        tenantId: string,\n        displayData: DisplayCreateDto,\n    ): Promise {\n        const displayEntity = this.displayRepository.create({\n            ...displayData,\n            tenantId,\n        });\n        return this.displayRepository.save(displayEntity);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EC_Public.html":{"url":"classes/EC_Public.html","title":"class - EC_Public","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EC_Public\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\nThis class is used to define the structure of EC public keys in JWK format.\n\n            \n\n\n            \n                Implements\n            \n            \n                            JWK_EC_Public\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crv\n                            \n                            \n                                kty\n                            \n                            \n                                x\n                            \n                            \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:15\n                        \n                    \n\n            \n                \n                    The algorithm intended for use with the key, such as 'ES256'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        kty\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:11\n                        \n                    \n\n            \n                \n                    The key type, which is always 'EC' for Elliptic Curve keys.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:19\n                        \n                    \n\n            \n                \n                    The x coordinate of the EC public key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:23\n                        \n                    \n\n            \n                \n                    The y coordinate of the EC public key.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from \"jose\";\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: \"EC\";\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EmbeddedDisclosurePolicy.html":{"url":"classes/EmbeddedDisclosurePolicy.html","title":"class - EmbeddedDisclosurePolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EmbeddedDisclosurePolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                policy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:24\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EncryptionService.html":{"url":"injectables/EncryptionService.html","title":"injectable - EncryptionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EncryptionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/encryption/encryption.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling encryption and decryption operations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                decryptJwe\n                            \n                            \n                                getEncryptionPublicKey\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(keyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/encryption/encryption.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for the EncryptionService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        keyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        decryptJwe\n                        \n                    \n                \n            \n            \n                \n                        \n                    decryptJwe(response: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:54\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        Encrypts a response using JWE (JSON Web Encryption).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe response to encrypt.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to encrypt the response.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The encrypted response as a JWE string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getEncryptionPublicKey\n                        \n                    \n                \n            \n            \n                \ngetEncryptionPublicKey(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:74\n                        \n                    \n\n\n            \n                \n                        Retrieves the public encryption key for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the public key.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                The public encryption key as a JWK.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:44\n                        \n                    \n\n\n            \n                \n                        Deletes the encryption keys for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the keys.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/encryption/encryption.service.ts:26\n                        \n                    \n\n\n            \n                \n                        Initializes the encryption keys for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to initialize the keys.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { exportJWK, generateKeyPair, importJWK, JWK, jwtDecrypt } from \"jose\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { v4 } from \"uuid\";\nimport { KeyEntity } from \"../key/entities/keys.entity\";\n\n/**\n * Service for handling encryption and decryption operations.\n */\n@Injectable()\nexport class EncryptionService {\n    /**\n     * Constructor for the EncryptionService.\n     * @param configService\n     */\n    constructor(\n        @InjectRepository(KeyEntity)\n        private keyRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the encryption keys for a given tenant.\n     * @param tenantId - The ID of the tenant for which to initialize the keys.\n     */\n    async onTenantInit(tenantId: string) {\n        const privateKey = await generateKeyPair(\"ECDH-ES\", {\n            crv: \"P-256\",\n            extractable: true,\n        }).then(async (secret) => exportJWK(secret.privateKey));\n\n        this.keyRepository.save({\n            id: v4(),\n            tenantId,\n            key: privateKey,\n            usage: \"encrypt\",\n        });\n    }\n\n    /**\n     * Deletes the encryption keys for a given tenant.\n     * @param tenantId - The ID of the tenant for which to delete the keys.\n     */\n    async onTenantDelete(tenantId: string) {\n        await this.keyRepository.delete({ tenantId });\n    }\n\n    /**\n     * Encrypts a response using JWE (JSON Web Encryption).\n     * @param response - The response to encrypt.\n     * @param tenantId - The ID of the tenant for which to encrypt the response.\n     * @returns The encrypted response as a JWE string.\n     */\n    async decryptJwe(response: string, tenantId: string): Promise {\n        const privateEncryptionKey = await this.keyRepository\n            .findOneByOrFail({\n                tenantId,\n                usage: \"encrypt\",\n            })\n            .then(\n                (keyEntity) =>\n                    importJWK(keyEntity.key, \"ECDH-ES\") as Promise,\n            );\n\n        const res = await jwtDecrypt(response, privateEncryptionKey);\n        return res.payload;\n    }\n\n    /**\n     * Retrieves the public encryption key for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve the public key.\n     * @returns The public encryption key as a JWK.\n     */\n    getEncryptionPublicKey(tenantId: string): Promise {\n        return this.keyRepository\n            .findOneByOrFail({\n                tenantId,\n                usage: \"encrypt\",\n            })\n            .then((entry) => {\n                delete entry.key.d;\n                return entry.key;\n            });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/FileEntity.html":{"url":"entities/FileEntity.html","title":"entity - FileEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  FileEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/entities/files.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/entities/files.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/entities/files.entity.ts:19\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/entities/files.entity.ts:13\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryColumn } from \"typeorm\";\nimport { TenantEntity } from \"../../auth/entitites/tenant.entity\";\n\n@Entity()\nexport class FileEntity {\n    @PrimaryColumn()\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileStorage.html":{"url":"interfaces/FileStorage.html","title":"interface - FileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/storage.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        delete\n                                    \n                                \n                                \n                                    \n                                        exists\n                                    \n                                \n                                \n                                        Optional\n                                    \n                                        getSignedUrl\n                                    \n                                \n                                \n                                    \n                                        getStream\n                                    \n                                \n                                \n                                    \n                                        put\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        getSignedUrl\n                        \n                    \n                \n            \n            \n                \ngetSignedUrl(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        put\n                        \n                    \n                \n            \n            \n                \nput(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.types.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Readable } from \"stream\";\n\nexport type PutOptions = {\n    contentType?: string;\n    metadata?: Record;\n    acl?: \"private\" | \"public\";\n    checksum?: string; // e.g., sha256 base64\n};\n\nexport type StoredObject = {\n    key: string; // canonical key (e.g. \"tenant/2025/08/14/uuid.ext\")\n    etag?: string;\n    size?: number;\n    url?: string; // public URL if ACL=public or a presigned URL\n    contentType?: string;\n    metadata?: Record;\n};\n\nexport interface FileStorage {\n    put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise;\n\n    getStream(\n        key: string,\n    ): Promise;\n\n    delete(key: string): Promise;\n\n    exists(key: string): Promise;\n\n    getSignedUrl?(key: string): Promise; // optional for local\n}\n\nexport const FILE_STORAGE = Symbol(\"FILE_STORAGE\");\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FileUploadDto.html":{"url":"classes/FileUploadDto.html","title":"class - FileUploadDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FileUploadDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/dto/file-upload.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                file\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        file\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'string', format: 'binary'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/storage/dto/file-upload.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class FileUploadDto {\n    @ApiProperty({ type: \"string\", format: \"binary\" })\n    file: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/files.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                    Async\n                                deleteByTenant\n                            \n                            \n                                getDownloadUrl\n                            \n                            \n                                getStream\n                            \n                            \n                                    Async\n                                saveUserUpload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(storage: FileStorage, fileRepository: Repository, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/storage/files.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        storage\n                                                  \n                                                        \n                                                                        FileStorage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fileRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:73\n                        \n                    \n\n\n            \n                \n                        Deletes a file from the storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The unique identifier of the file.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the file is deleted.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteByTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteByTenant(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Deletes all files associated with a specific tenant\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant whose files should be deleted.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getDownloadUrl\n                        \n                    \n                \n            \n            \n                \ngetDownloadUrl(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:77\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Retrieves a readable stream of the file associated with the given key.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The unique identifier of the file.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to a readable stream of the file.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        saveUserUpload\n                        \n                    \n                \n            \n            \n                \n                        \n                    saveUserUpload(tenantId: string, file: Express.Multer.File, isPublic)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/files.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Saves a user-uploaded file to the storage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The ID of the tenant uploading the file.\n\n                                            \n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                                    The file to upload.\n\n                                            \n                                        \n                                        \n                                                isPublic\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    false\n                                            \n\n                                            \n                                                    Whether the file should be publicly accessible.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The metadata of the stored file.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { randomUUID } from \"crypto\";\nimport { extname } from \"path\";\nimport { Repository } from \"typeorm\";\nimport {\n    FILE_STORAGE,\n    FileStorage,\n    StoredObject,\n} from \"../storage/storage.types\";\nimport { FileEntity } from \"./entities/files.entity\";\n\n@Injectable()\nexport class FilesService {\n    constructor(\n        @Inject(FILE_STORAGE) private storage: FileStorage,\n        @InjectRepository(FileEntity)\n        private fileRepository: Repository,\n        private configService: ConfigService,\n    ) {}\n\n    /**\n     * Saves a user-uploaded file to the storage.\n     * @param tenantId The ID of the tenant uploading the file.\n     * @param file The file to upload.\n     * @param isPublic Whether the file should be publicly accessible.\n     * @returns The metadata of the stored file.\n     */\n    async saveUserUpload(\n        tenantId: string,\n        file: Express.Multer.File,\n        isPublic = false,\n    ): Promise {\n        const safeExt = extname(file.originalname || \"\")\n            .toLowerCase()\n            .slice(1);\n        const key = `${new Date().toISOString().slice(0, 10)}-${randomUUID()}${safeExt ? \".\" + safeExt : \"\"}`;\n\n        // TODO: add checksum if you want tamper detection:\n        // const checksum = createHash('sha256').update(bufferOrStreamToBuffer(body)).digest('base64');\n\n        const response = await this.storage.put(key, file.buffer, {\n            contentType: file.mimetype,\n            acl: isPublic ? \"public\" : \"private\",\n            metadata: { originalName: file.originalname },\n        });\n        await this.fileRepository.save({\n            id: key,\n            tenantId,\n        });\n        const url = await this.getDownloadUrl(response.key);\n        return {\n            key: response.key,\n            url,\n        };\n    }\n\n    /**\n     * Retrieves a readable stream of the file associated with the given key.\n     * @param key The unique identifier of the file.\n     * @returns A promise that resolves to a readable stream of the file.\n     */\n    getStream(key: string) {\n        return Promise.resolve(this.storage.getStream(key));\n    }\n\n    /**\n     * Deletes a file from the storage.\n     * @param key The unique identifier of the file.\n     * @returns A promise that resolves when the file is deleted.\n     */\n    delete(key: string) {\n        return Promise.resolve(this.storage.delete(key));\n    }\n\n    getDownloadUrl(key: string) {\n        if (this.storage.getSignedUrl) return this.storage.getSignedUrl(key);\n        return Promise.resolve(\n            `${this.configService.get(\"PUBLIC_URL\")}/storage/${key}`,\n        );\n    }\n\n    /**\n     * Deletes all files associated with a specific tenant\n     * @param tenantId The ID of the tenant whose files should be deleted.\n     */\n    async deleteByTenant(tenantId: string) {\n        const files = await this.fileRepository.find({ where: { tenantId } });\n        await Promise.all(files.map((file) => this.storage.delete(file.id)));\n        await this.fileRepository.delete({ tenantId });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GenerateTokenOptions.html":{"url":"interfaces/GenerateTokenOptions.html","title":"interface - GenerateTokenOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GenerateTokenOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            audience\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            expiresIn\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        audience\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        audience:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expiresIn:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { jwtVerify, SignJWT } from \"jose\";\nimport { DEFAULT_JWT_SECRET } from \"./auth.module\";\nimport { TokenPayload } from \"./token.decorator\";\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {\n        if (\n            this.configService.get(\"JWT_SECRET\") === DEFAULT_JWT_SECRET\n        ) {\n            console.warn(\n                \"Using default JWT secret. This is not secure for production environments.\",\n            );\n        }\n    }\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow(\"JWT_EXPIRES_IN\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: \"HS256\" })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token verification is handled by external OIDC provider.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: [\"HS256\"],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get(\"OIDC\") !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/HealthController.html":{"url":"controllers/HealthController.html","title":"controller - HealthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  HealthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/health/health.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                health\n            \n\n\n            \n                Description\n            \n            \n                HealthController is responsible for providing health check endpoints.\nIt uses the HealthCheckService to perform checks on the database connection.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                check\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        check\n                        \n                    \n                \n            \n            \n                \n                        \n                    check()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@HealthCheck()\n                \n            \n\n                    \n                        \n                            Defined in src/health/health.controller.ts:25\n                        \n                    \n\n\n            \n                \n                        Endpoint to check the health of the service.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \"@nestjs/common\";\nimport {\n    HealthCheck,\n    HealthCheckService,\n    TypeOrmHealthIndicator,\n} from \"@nestjs/terminus\";\n\n/**\n * HealthController is responsible for providing health check endpoints.\n * It uses the HealthCheckService to perform checks on the database connection.\n */\n@Controller(\"health\")\nexport class HealthController {\n    constructor(\n        private health: HealthCheckService,\n        private db: TypeOrmHealthIndicator,\n    ) {}\n\n    /**\n     * Endpoint to check the health of the service.\n     * @returns\n     */\n    @Get()\n    @HealthCheck()\n    check() {\n        return this.health.check([() => this.db.pingCheck(\"database\")]);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HealthModule.html":{"url":"modules/HealthModule.html","title":"module - HealthModule","body":"\n                   \n\n\n\n\n    Modules\n    HealthModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/health/health.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            HealthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TerminusModule } from \"@nestjs/terminus\";\nimport { HealthController } from \"./health.controller\";\n\n@Module({\n    imports: [TerminusModule],\n    controllers: [HealthController],\n})\nexport class HealthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/IssuanceConfig.html":{"url":"entities/IssuanceConfig.html","title":"entity - IssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  IssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/entities/issuance-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity to manage issuance configs\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                authenticationConfig\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                batchSize\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                credentialConfigs\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                dPopRequired\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        authenticationConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthenticationMethodNone | AuthenticationMethodAuth | AuthenticationMethodPresentation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@ValidateNested()@ApiProperty({oneOf: undefined})@Type(undefined, {discriminator: undefined, keepDiscriminatorProperty: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:114\n                        \n                    \n\n            \n                \n                    Authentication configuration for the issuance process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        batchSize\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Column('int', {default: 1})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:156\n                        \n                    \n\n            \n                \n                    Value to determine the amount of credentials that are issued in a batch.\nDefault is 1.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:138\n                        \n                    \n\n            \n                \n                    Webhook to receive claims for the issuance process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:123\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credentialConfigs\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialConfig[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToMany(undefined, credential => credential.issuanceConfigs)@JoinTable()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:80\n                        \n                    \n\n            \n                \n                    Links to all credential config bindings that are included in this issuance config.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:70\n                        \n                    \n\n            \n                \n                    Description of the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        dPopRequired\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@IsOptional()@Column('boolean', {default: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:164\n                        \n                    \n\n            \n                \n                    Indicates whether DPoP is required for the issuance process. Default value is true.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:49\n                        \n                    \n\n            \n                \n                    Unique identifier for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:147\n                        \n                    \n\n            \n                \n                    Webhook to send the result of the notification response\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:62\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:56\n                        \n                    \n\n            \n                \n                    Tenant ID for the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/entities/issuance-config.entity.ts:129\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    JoinTable,\n    ManyToMany,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { CredentialConfig } from \"../../credentials/entities/credential.entity\";\nimport {\n    AuthenticationMethod,\n    AuthenticationMethodAuth,\n    AuthenticationMethodNone,\n    AuthenticationMethodPresentation,\n} from \"../dto/authentication-config.dto\";\n\n/**\n * Entity to manage issuance configs\n */\n@ApiExtraModels(\n    AuthenticationMethodNone,\n    AuthenticationMethodAuth,\n    AuthenticationMethodPresentation,\n)\n@Entity()\nexport class IssuanceConfig {\n    /**\n     * Unique identifier for the issuance configuration.\n     */\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the issuance configuration.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the issuance configuration.\n     */\n    @IsString()\n    @IsOptional()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    /**\n     * Links to all credential config bindings that are included in this issuance config.\n     */\n    @ManyToMany(\n        () => CredentialConfig,\n        (credential) => credential.issuanceConfigs,\n    )\n    @JoinTable()\n    credentialConfigs: CredentialConfig[];\n\n    /**\n     * Authentication configuration for the issuance process.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AuthenticationMethodNone) },\n            { $ref: getSchemaPath(AuthenticationMethodAuth) },\n            { $ref: getSchemaPath(AuthenticationMethodPresentation) },\n        ],\n    })\n    @Type(() => AuthenticationMethodNone, {\n        discriminator: {\n            property: \"method\",\n            subTypes: [\n                {\n                    name: AuthenticationMethod.NONE,\n                    value: AuthenticationMethodNone,\n                },\n                {\n                    name: AuthenticationMethod.AUTH,\n                    value: AuthenticationMethodAuth,\n                },\n                {\n                    name: AuthenticationMethod.PRESENTATION_DURING_ISSUANCE,\n                    value: AuthenticationMethodPresentation,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    authenticationConfig:\n        | AuthenticationMethodNone\n        | AuthenticationMethodAuth\n        | AuthenticationMethodPresentation;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Webhook to receive claims for the issuance process.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @Column(\"json\", { nullable: true })\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Webhook to send the result of the notification response\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @Column(\"json\", { nullable: true })\n    notifyWebhook?: WebhookConfig;\n\n    /**\n     * Value to determine the amount of credentials that are issued in a batch.\n     * Default is 1.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 1 })\n    batchSize?: number;\n\n    /**\n     * Indicates whether DPoP is required for the issuance process. Default value is true.\n     */\n    @IsBoolean()\n    @IsOptional()\n    @Column(\"boolean\", { default: true })\n    dPopRequired?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuanceController.html":{"url":"controllers/IssuanceController.html","title":"controller - IssuanceController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuanceController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management/issuance\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    \n                                getIssuanceConfigurations\n                            \n                            \n                                    \n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteIssuanceConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Deletes an issuance configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIssuanceConfigurations\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfigurations(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:28\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(config: IssuanceDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Stores the issuance configuration for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { IssuanceDto } from \"./dto/issuance.dto\";\nimport { IssuanceService } from \"./issuance.service\";\n\n@ApiTags(\"Issuer management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"issuer-management/issuance\")\nexport class IssuanceController {\n    constructor(private readonly issuanceService: IssuanceService) {}\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @returns\n     */\n    @Get()\n    getIssuanceConfigurations(@Token() user: TokenPayload) {\n        return this.issuanceService.getIssuanceConfiguration(user.sub);\n    }\n\n    /**\n     * Stores the issuance configuration for this tenant.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storeIssuanceConfiguration(\n        @Body() config: IssuanceDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.storeIssuanceConfiguration(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes an issuance configuration.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteIssuanceConfiguration(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ) {\n        return this.issuanceService.deleteIssuanceConfiguration(user.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IssuanceDto.html":{"url":"classes/IssuanceDto.html","title":"class - IssuanceDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IssuanceDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/issuance.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for mapping issuance configurations.\n\n            \n\n            \n                Extends\n            \n            \n                            OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"credentialConfigs\",\n] as const)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigIds\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/issuance.dto.ts:30\n                        \n                    \n\n            \n                \n                    Ids of the credential configurations associated with this issuance configuration.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { IsArray, IsString } from \"class-validator\";\nimport { IssuanceConfig } from \"../entities/issuance-config.entity\";\n\n/**\n * DTO for mapping credential configurations in issuance.\n */\nexport class CredentialConfigMapping {\n    /**\n     * Unique identifier for the credential configuration.\n     */\n    @IsString()\n    id: string;\n}\n\n/**\n * DTO for mapping issuance configurations.\n */\nexport class IssuanceDto extends OmitType(IssuanceConfig, [\n    \"tenantId\",\n    \"tenant\",\n    \"createdAt\",\n    \"updatedAt\",\n    \"credentialConfigs\",\n] as const) {\n    /**\n     * Ids of the credential configurations associated with this issuance configuration.\n     */\n    @IsArray()\n    credentialConfigIds: string[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IssuanceService.html":{"url":"injectables/IssuanceService.html","title":"injectable - IssuanceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IssuanceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/issuance.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing issuance configurations.\nIt provides methods to get, store, and delete issuance configurations.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteIssuanceConfiguration\n                            \n                            \n                                    Public\n                                getIssuanceConfiguration\n                            \n                            \n                                getIssuanceConfigurationById\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                storeIssuanceConfiguration\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(issuanceConfigRepo: Repository, credentialsConfigService: CredentialConfigService, configService: ConfigService, logger: PinoLogger, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/issuance/issuance.service.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor for IssuanceService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        issuanceConfigRepo\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        credentialsConfigService\n                                                  \n                                                        \n                                                                        CredentialConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \ndeleteIssuanceConfiguration(tenantId: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Deletes a credential configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        getIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuanceConfiguration(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:168\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configurations for this tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getIssuanceConfigurationById\n                        \n                    \n                \n            \n            \n                \ngetIssuanceConfigurationById(issuanceConfigId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:181\n                        \n                    \n\n\n            \n                \n                        Returns the issuance configuration by ID for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuanceConfigId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Import issuance configurations and the credential configurations from the configured folder.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:159\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        storeIssuanceConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeIssuanceConfiguration(tenantId: string, value: IssuanceDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/issuance/issuance.service.ts:197\n                        \n                    \n\n\n            \n                \n                        Store the config. If it already exist, overwrite it.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            IssuanceDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { CredentialConfigService } from \"../credentials/credential-config/credential-config.service\";\nimport { CredentialConfig } from \"../credentials/entities/credential.entity\";\nimport { IssuanceDto } from \"./dto/issuance.dto\";\nimport { IssuanceConfig } from \"./entities/issuance-config.entity\";\n\n/**\n * Service for managing issuance configurations.\n * It provides methods to get, store, and delete issuance configurations.\n */\n@Injectable()\nexport class IssuanceService implements OnApplicationBootstrap {\n    /**\n     * Constructor for IssuanceService.\n     * @param issuanceConfigRepo\n     * @param credentialsConfigService\n     */\n    constructor(\n        @InjectRepository(IssuanceConfig)\n        private issuanceConfigRepo: Repository,\n        private credentialsConfigService: CredentialConfigService,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Import issuance configurations and the credential configurations from the configured folder.\n     */\n    async onApplicationBootstrap() {\n        await this.cryptoService.import();\n        await this.credentialsConfigService.import();\n        await this.import();\n    }\n\n    /**\n     * Import issuance configurations from the configured folder.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"issuance/issuance\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    payload.id = file.replace(\".json\", \"\");\n                    const exists = await this.getIssuanceConfigurationById(\n                        payload.id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (exists && !force) {\n                        continue; // Skip if config already exists and force is not set.\n                    } else if (exists && force) {\n                        //delete old element so removed elements are not present\n                        await this.issuanceConfigRepo.delete({\n                            id: payload.id,\n                            tenantId: tenant.name,\n                        });\n                    }\n\n                    // Validate the payload against IssuanceDto\n                    const issuanceDto = plainToClass(IssuanceDto, payload);\n                    //TOODO: it does not validate the different config options\n                    const validationErrors = await validate(issuanceDto, {\n                        whitelist: true,\n                        forbidUnknownValues: false, // avoid false positives on plain objects\n                        forbidNonWhitelisted: false,\n                        stopAtFirstError: false,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        const extractErrorMessages = (error: any): string[] => {\n                            const messages: string[] = [];\n\n                            // Add constraints from the current level\n                            if (error.constraints) {\n                                messages.push(\n                                    ...Object.values(\n                                        error.constraints as Record,\n                                    ),\n                                );\n                            }\n\n                            // Recursively add constraints from children\n                            if (error.children && error.children.length > 0) {\n                                for (const child of error.children) {\n                                    messages.push(\n                                        ...extractErrorMessages(child),\n                                    );\n                                }\n                            }\n\n                            return messages;\n                        };\n\n                        const errorMessages = validationErrors\n                            .map((error) => {\n                                const messages = extractErrorMessages(error);\n                                return messages.length > 0\n                                    ? `${error.property}: ${messages.join(\", \")}`\n                                    : error.property;\n                            })\n                            .join(\"; \");\n\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for issuance config ${file} in tenant ${tenant.name}: ${errorMessages}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n                    await this.storeIssuanceConfiguration(\n                        tenant.name,\n                        issuanceDto,\n                    );\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} issuance configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    async onTenantDelete(tenantId: string) {\n        await this.issuanceConfigRepo.delete({ tenantId });\n    }\n\n    /**\n     * Returns the issuance configurations for this tenant.\n     * @param tenantId\n     * @returns\n     */\n    public getIssuanceConfiguration(tenantId: string) {\n        return this.issuanceConfigRepo.find({\n            where: { tenantId },\n            relations: [\"credentialConfigs\"],\n        });\n    }\n\n    /**\n     * Returns the issuance configuration by ID for a given tenant.\n     * @param issuanceConfigId\n     * @param tenantId\n     * @returns\n     */\n    getIssuanceConfigurationById(\n        issuanceConfigId: string,\n        tenantId: string,\n    ): Promise {\n        return this.issuanceConfigRepo.findOneOrFail({\n            where: { id: issuanceConfigId, tenantId },\n            relations: [\"credentialConfigs\"],\n        });\n    }\n\n    /**\n     * Store the config. If it already exist, overwrite it.\n     * @param tenantId\n     * @param value\n     * @returns\n     */\n    async storeIssuanceConfiguration(tenantId: string, value: IssuanceDto) {\n        const credentials: CredentialConfig[] = [];\n        //check if all credential configs exist\n        for (const credentialConfigId of value.credentialConfigIds) {\n            const credential = await this.credentialsConfigService.getById(\n                tenantId,\n                credentialConfigId,\n            );\n            credentials.push(credential);\n        }\n        const issuanceConfig = await this.issuanceConfigRepo.save({\n            ...value,\n            tenantId,\n            credentialConfigs: credentials,\n        });\n        return issuanceConfig;\n    }\n\n    /**\n     * Deletes a credential configuration.\n     * @param tenantId\n     * @param id\n     * @returns\n     */\n    deleteIssuanceConfiguration(tenantId: string, id: string) {\n        return this.issuanceConfigRepo.delete({ tenantId, id });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/IssuerManagementController.html":{"url":"controllers/IssuerManagementController.html","title":"controller - IssuerManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  IssuerManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuer-management/issuer-management.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                issuer-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: OfferRequestDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@ApiBody({type: OfferRequestDto, examples: undefined})@Post('offer')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/issuer-management/issuer-management.controller.ts:83\n                        \n                    \n\n\n            \n                \n                        Create an offer for a credential.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            OfferRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Res, UseGuards } from \"@nestjs/common\";\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { Response } from \"express\";\nimport * as QRCode from \"qrcode\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { ResponseType } from \"../../verifier/oid4vp/dto/presentation-request.dto\";\nimport {\n    OfferRequestDto,\n    OfferResponse,\n} from \"../oid4vci/dto/offer-request.dto\";\n\n@ApiTags(\"Issuer management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"issuer-management\")\nexport class IssuerManagementController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Create an offer for a credential.\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: \"JSON response\",\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            \"application/json\": { schema: { type: \"object\" } },\n            \"image/png\": { schema: { type: \"string\", format: \"binary\" } },\n        },\n    })\n    @ApiProduces(\"application/json\", \"image/png\")\n    @ApiBody({\n        type: OfferRequestDto,\n        examples: {\n            qrcode: {\n                summary: \"QR-Code Example\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid\",\n                } as OfferRequestDto,\n            },\n            uri: {\n                summary: \"URI\",\n                value: {\n                    response_type: ResponseType.URI,\n                    issuanceId: \"pid\",\n                } as OfferRequestDto,\n            },\n            authfixed: {\n                summary: \"Auth flow with fixed session\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid\",\n                    session: \"fd3ebf28-8ad6-4909-8a7a-a739c2c412c0\",\n                } as OfferRequestDto,\n            },\n            override: {\n                summary: \"Override\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    issuanceId: \"pid-none\",\n                    claims: {\n                        pid: {\n                            given_name: \"Max\",\n                        },\n                    },\n                } as OfferRequestDto,\n            },\n        },\n    })\n    @Post(\"offer\")\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: OfferRequestDto,\n        @Token() user: TokenPayload,\n    ) {\n        // For now, we'll just pass the body to the service as before\n        // You can modify the service later to accept user information if needed\n        const values = await this.oid4vciService.createOffer(\n            body,\n            user,\n            user.sub,\n        );\n\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader(\"Content-Type\", \"image/png\");\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IssuerMetadata.html":{"url":"interfaces/IssuerMetadata.html","title":"interface - IssuerMetadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IssuerMetadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/dto/issuer-metadata.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the issuer metadata.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            issuer\n                                        \n                                \n                                \n                                        \n                                            jwks\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        issuer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        issuer:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The issuer identifier, typically a URL.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwks:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { JWK } from \"jose\";\n\n/**\n * Interface representing the issuer metadata.\n */\nexport interface IssuerMetadata {\n    /**\n     * The issuer identifier, typically a URL.\n     */\n    issuer: string;\n    /**\n     * The JSON Web Key Set (JWKS) containing the public keys for the issuer.\n     */\n    jwks: {\n        /**\n         * List of keys in the JWKS.\n         */\n        keys: JWK[];\n    };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IssuerMetadataCredentialConfig.html":{"url":"classes/IssuerMetadataCredentialConfig.html","title":"class - IssuerMetadataCredentialConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IssuerMetadataCredentialConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/credential.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                display\n                            \n                            \n                                    \n                                format\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        display\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Display[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/credential.entity.ts:63\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    ApiExtraModels,\n    ApiHideProperty,\n    ApiProperty,\n    getSchemaPath,\n} from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsBoolean,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { Column, Entity, ManyToMany, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { CertEntity } from \"../../../crypto/key/entities/cert.entity\";\nimport { SchemaResponse } from \"../../credentials-metadata/dto/schema-response.dto\";\nimport { VCT } from \"../../credentials-metadata/dto/vct.dto\";\nimport { IssuanceConfig } from \"../../issuance/entities/issuance-config.entity\";\nimport {\n    AllowListPolicy,\n    AttestationBasedPolicy,\n    EmbeddedDisclosurePolicy,\n    NoneTrustPolicy,\n    RootOfTrustPolicy,\n} from \"./policies.dto\";\n\nexport class DisplayImage {\n    @IsString()\n    uri: string;\n}\nexport class Display {\n    @IsString()\n    name: string;\n    @IsString()\n    description: string;\n    @IsString()\n    locale: string;\n    @IsString()\n    background_color?: string;\n    @IsString()\n    text_color?: string;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    background_image?: DisplayImage;\n    @ValidateNested()\n    @Type(() => DisplayImage)\n    logo?: DisplayImage;\n}\n\nexport class IssuerMetadataCredentialConfig {\n    @IsString()\n    format: string;\n    @ValidateNested()\n    @Type(() => Display)\n    display: Display[];\n    @IsOptional()\n    @IsString()\n    scope?: string;\n}\n\n@ApiExtraModels(\n    AttestationBasedPolicy,\n    NoneTrustPolicy,\n    AllowListPolicy,\n    RootOfTrustPolicy,\n)\n@Entity()\nexport class CredentialConfig {\n    @IsString()\n    @Column(\"varchar\", { primary: true })\n    id!: string;\n\n    @IsString()\n    @Column(\"varchar\", { nullable: true })\n    description?: string;\n\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId!: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => IssuerMetadataCredentialConfig)\n    config!: IssuerMetadataCredentialConfig;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    claims?: Record;\n\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @IsObject()\n    disclosureFrame?: Record;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => VCT)\n    @Column(\"json\", { nullable: true })\n    vct?: VCT;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    keyBinding?: boolean;\n\n    @IsOptional()\n    @IsString()\n    keyId?: string;\n\n    @ManyToOne(() => CertEntity)\n    key!: CertEntity;\n\n    @IsOptional()\n    @Column(\"boolean\", { default: false })\n    @IsBoolean()\n    statusManagement?: boolean;\n\n    @IsOptional()\n    @Column(\"int\", { nullable: true })\n    @IsNumber()\n    lifeTime?: number;\n\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => SchemaResponse)\n    @Column(\"json\", { nullable: true })\n    schema?: SchemaResponse;\n\n    /**\n     * Embedded disclosure policy (discriminated union by `policy`).\n     * The discriminator makes class-transformer instantiate the right subclass,\n     * and then class-validator runs that subclass’s rules.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(AttestationBasedPolicy) },\n            { $ref: getSchemaPath(NoneTrustPolicy) },\n            { $ref: getSchemaPath(AllowListPolicy) },\n            { $ref: getSchemaPath(RootOfTrustPolicy) },\n        ],\n    })\n    @Type(() => AttestationBasedPolicy, {\n        discriminator: {\n            property: \"policy\",\n            subTypes: [\n                { name: \"none\", value: NoneTrustPolicy },\n                { name: \"allowList\", value: AllowListPolicy },\n                { name: \"rootOfTrust\", value: RootOfTrustPolicy },\n                {\n                    name: \"attestationBased\",\n                    value: AttestationBasedPolicy,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true, // keep `policy` on the instance\n    })\n    @Column(\"json\", { nullable: true })\n    embeddedDisclosurePolicy?: EmbeddedDisclosurePolicy;\n\n    @ManyToMany(\n        () => IssuanceConfig,\n        (issuance) => issuance.credentialConfigs,\n        { cascade: [\"remove\"], onDelete: \"CASCADE\" },\n    )\n    issuanceConfigs!: IssuanceConfig[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/IssuerModule.html":{"url":"modules/IssuerModule.html","title":"module - IssuerModule","body":"\n                   \n\n\n\n\n    Modules\n    IssuerModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nCredentialConfigService \n\nCredentialConfigService \n\nCredentialConfigService  -->\n\nIssuerModule->CredentialConfigService \n\n\n\n\n\nIssuanceService \n\nIssuanceService \n\nIssuanceService  -->\n\nIssuerModule->IssuanceService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nDisplayService\n\nDisplayService\n\nIssuerModule -->\n\nDisplayService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/issuer.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            CredentialsService\n                        \n                        \n                            DisplayService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vciController\n                        \n                        \n                            AuthorizeController\n                        \n                        \n                            CredentialsController\n                        \n                        \n                            IssuerManagementController\n                        \n                        \n                            IssuanceController\n                        \n                        \n                            CredentialsMetadataController\n                        \n                        \n                            DisplayController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthorizeService\n                        \n                        \n                            CredentialConfigService\n                        \n                        \n                            IssuanceService\n                        \n                        \n                            Oid4vciService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { setGlobalConfig } from \"@openid4vc/openid4vci\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { SessionLoggerInterceptor } from \"../utils/logger/session-logger.interceptor\";\nimport { SessionLoggerService } from \"../utils/logger/session-logger.service\";\nimport { WebhookService } from \"../utils/webhook/webhook.service\";\nimport { Oid4vpModule } from \"../verifier/oid4vp/oid4vp.module\";\nimport { AuthorizeController } from \"./authorize/authorize.controller\";\nimport { AuthorizeService } from \"./authorize/authorize.service\";\nimport { CredentialConfigService } from \"./credentials/credential-config/credential-config.service\";\nimport { CredentialsController } from \"./credentials/credentials.controller\";\nimport { CredentialsService } from \"./credentials/credentials.service\";\nimport { CredentialConfig } from \"./credentials/entities/credential.entity\";\nimport { CredentialsMetadataController } from \"./credentials-metadata/credentials-metadata.controller\";\nimport { DisplayController } from \"./display/display.controller\";\nimport { DisplayEntity } from \"./display/entities/display.entity\";\nimport { IssuanceConfig } from \"./issuance/entities/issuance-config.entity\";\nimport { IssuanceController } from \"./issuance/issuance.controller\";\nimport { IssuanceService } from \"./issuance/issuance.service\";\nimport { IssuerManagementController } from \"./issuer-management/issuer-management.controller\";\nimport { Oid4vciController } from \"./oid4vci/oid4vci.controller\";\nimport { Oid4vciService } from \"./oid4vci/oid4vci.service\";\nimport { StatusListModule } from \"./status-list/status-list.module\";\nimport { DisplayService } from \"./display/display.service\";\n\nexport const ISSUER_VALIDATION_SCHEMA = {\n    PUBLIC_URL: Joi.string().default(\"http://localhost:3000\"),\n};\n\n@Module({\n    imports: [\n        CryptoModule,\n        StatusListModule,\n        Oid4vpModule,\n        SessionModule,\n        HttpModule,\n        TypeOrmModule.forFeature([\n            IssuanceConfig,\n            CredentialConfig,\n            DisplayEntity,\n        ]),\n    ],\n    controllers: [\n        Oid4vciController,\n        AuthorizeController,\n        CredentialsController,\n        IssuerManagementController,\n        IssuanceController,\n        CredentialsMetadataController,\n        DisplayController,\n    ],\n    providers: [\n        AuthorizeService,\n        CredentialsService,\n        Oid4vciService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        IssuanceService,\n        CredentialConfigService,\n        WebhookService,\n        DisplayService,\n    ],\n    exports: [\n        AuthorizeService,\n        Oid4vciService,\n        IssuanceService,\n        CredentialConfigService,\n    ],\n})\nexport class IssuerModule {\n    constructor(configService: ConfigService) {\n        const unsecure = configService\n            .getOrThrow(\"PUBLIC_URL\")\n            .startsWith(\"http://\");\n        setGlobalConfig({ allowInsecureUrls: unsecure });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwksResponseDto.html":{"url":"classes/JwksResponseDto.html","title":"class - JwksResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwksResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/jwks-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/jwks-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    An array of EC public keys in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { JWK_EC_Public } from \"jose\";\n\n/**\n * Represents a JSON Web Key (JWK) for an Elliptic Curve (EC) public key.\n * This class is used to define the structure of EC public keys in JWK format.\n */\nexport class EC_Public implements JWK_EC_Public {\n    /**\n     * The key type, which is always 'EC' for Elliptic Curve keys.\n     */\n    kty: \"EC\";\n    /**\n     * The algorithm intended for use with the key, such as 'ES256'.\n     */\n    crv: string;\n    /**\n     * The x coordinate of the EC public key.\n     */\n    x: string;\n    /**\n     * The y coordinate of the EC public key.\n     */\n    y: string;\n}\n\n/**\n * Represents a JSON Web Key Set (JWKS) response containing an array of EC public keys.\n */\nexport class JwksResponseDto {\n    /**\n     * An array of EC public keys in JWK format.\n     */\n    keys: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard(\"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.guard.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from \"@nestjs/common\";\nimport { Reflector } from \"@nestjs/core\";\nimport { AuthGuard } from \"@nestjs/passport\";\nimport { IS_PUBLIC_KEY } from \"./public.decorator\";\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard(\"jwt\") {\n    constructor(private reflector: Reflector) {\n        super();\n    }\n\n    canActivate(context: ExecutionContext) {\n        const isPublic = this.reflector.getAllAndOverride(\n            IS_PUBLIC_KEY,\n            [context.getHandler(), context.getClass()],\n        );\n        if (isPublic) {\n            return true;\n        }\n        return super.canActivate(context);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtService.html":{"url":"injectables/JwtService.html","title":"injectable - JwtService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                isUsingExternalOIDC\n                            \n                            \n                                    Async\n                                verifyToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(payload: TokenPayload, options: GenerateTokenOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:28\n                        \n                    \n\n\n            \n                \n                        Generate a JWT token for integrated OAuth2 server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                options\n                                            \n                                                            GenerateTokenOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    {}\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsingExternalOIDC\n                        \n                    \n                \n            \n            \n                \nisUsingExternalOIDC()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:91\n                        \n                    \n\n\n            \n                \n                        Check if the service is using external OIDC provider\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        verifyToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    verifyToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.service.ts:65\n                        \n                    \n\n\n            \n                \n                        Verify a JWT token (for additional validation if needed)\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { jwtVerify, SignJWT } from \"jose\";\nimport { DEFAULT_JWT_SECRET } from \"./auth.module\";\nimport { TokenPayload } from \"./token.decorator\";\n\nexport interface GenerateTokenOptions {\n    expiresIn?: string;\n    audience?: string;\n    subject?: string;\n}\n\n@Injectable()\nexport class JwtService {\n    constructor(private configService: ConfigService) {\n        if (\n            this.configService.get(\"JWT_SECRET\") === DEFAULT_JWT_SECRET\n        ) {\n            console.warn(\n                \"Using default JWT secret. This is not secure for production environments.\",\n            );\n        }\n    }\n\n    /**\n     * Generate a JWT token for integrated OAuth2 server\n     */\n    async generateToken(\n        payload: TokenPayload,\n        options: GenerateTokenOptions = {},\n    ): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token generation is not available when using external OIDC provider. Use your external OIDC provider for token generation.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n        const expiresIn =\n            options.expiresIn ||\n            this.configService.getOrThrow(\"JWT_EXPIRES_IN\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        const jwt = new SignJWT({\n            ...payload,\n        })\n            .setProtectedHeader({ alg: \"HS256\" })\n            .setIssuedAt()\n            .setIssuer(issuer)\n            .setSubject(options.subject || payload.sub)\n            .setExpirationTime(expiresIn);\n\n        if (options.audience) {\n            jwt.setAudience(options.audience);\n        }\n\n        return await jwt.sign(secretKey);\n    }\n\n    /**\n     * Verify a JWT token (for additional validation if needed)\n     */\n    async verifyToken(token: string): Promise {\n        if (this.isUsingExternalOIDC()) {\n            throw new Error(\n                \"Token verification is handled by external OIDC provider.\",\n            );\n        }\n\n        const secret = this.configService.getOrThrow(\"JWT_SECRET\");\n        const issuer = this.configService.getOrThrow(\"JWT_ISSUER\");\n\n        const secretKey = new TextEncoder().encode(secret);\n\n        try {\n            const { payload } = (await jwtVerify(token, secretKey, {\n                issuer,\n                algorithms: [\"HS256\"],\n            })) as { payload: TokenPayload };\n            return payload;\n        } catch (error) {\n            throw new Error(`Invalid token: ${error.message}`);\n        }\n    }\n\n    /**\n     * Check if the service is using external OIDC provider\n     */\n    isUsingExternalOIDC(): boolean {\n        return this.configService.get(\"OIDC\") !== undefined;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy, \"jwt\")\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Private\n                                    Static\n                                getExternalOIDCConfig\n                            \n                            \n                                    Private\n                                    Static\n                                getIntegratedOAuth2Config\n                            \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(req: any, options?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getExternalOIDCConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExternalOIDCConfig(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         { secretOrKeyProvider: any; jwtFromRequest: any; algorithms: {}; issuer: any; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                        getIntegratedOAuth2Config\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIntegratedOAuth2Config(configService: ConfigService)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                configService\n                                            \n                                                        ConfigService\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(payload: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/jwt.strategy.ts:79\n                        \n                    \n\n\n            \n                \n                        Validate the JWT payload. It will also check if the client is set up.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The JWT payload\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The validated payload or an error\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PassportStrategy } from \"@nestjs/passport\";\nimport { passportJwtSecret } from \"jwks-rsa\";\nimport { ExtractJwt, Strategy } from \"passport-jwt\";\nimport { TokenPayload } from \"./token.decorator\";\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy, \"jwt\") {\n    constructor(private configService: ConfigService) {\n        const useExternalOIDC = configService.get(\"OIDC\");\n\n        const config = useExternalOIDC\n            ? JwtStrategy.getExternalOIDCConfig(configService)\n            : JwtStrategy.getIntegratedOAuth2Config(configService);\n        super(config);\n    }\n\n    // Override authenticate to add debugging\n    authenticate(req: any, options?: any) {\n        return super.authenticate(req, {\n            ...options,\n            failWithError: true, // This will throw errors instead of just returning 401\n        });\n    }\n\n    private static getExternalOIDCConfig(configService: ConfigService) {\n        const keycloakIssuerUrl = configService.get(\"OIDC_INTERNAL_ISSUER_URL\");\n        const jwksUri = `${keycloakIssuerUrl}/protocol/openid-connect/certs`;\n\n        return {\n            secretOrKeyProvider: passportJwtSecret({\n                cache: true,\n                rateLimit: true,\n                jwksRequestsPerMinute: 5,\n                jwksUri: jwksUri,\n                handleSigningKeyError: (err, cb) => {\n                    console.error(\"❌ Keycloak JWKS error:\", err);\n                    if (err instanceof Error) {\n                        return cb(err);\n                    }\n                    return cb(\n                        new Error(\n                            \"Could not get the signing key from Keycloak\",\n                        ),\n                    );\n                },\n            }),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: [configService.get(\"OIDC_ALGORITHM\")],\n            issuer: keycloakIssuerUrl,\n        };\n    }\n\n    private static getIntegratedOAuth2Config(\n        configService: ConfigService,\n    ): any {\n        const config = {\n            secretOrKey: configService.get(\"JWT_SECRET\"),\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            algorithms: [\"HS256\"], // Using symmetric key for integrated OAuth2\n            ignoreExpiration: false, // Ensure tokens expire\n        };\n\n        // Add issuer validation only if JWT_ISSUER is configured\n        const issuer = configService.get(\"JWT_ISSUER\");\n        if (issuer) {\n            (config as any).issuer = issuer;\n        }\n\n        return config;\n    }\n\n    /**\n     * Validate the JWT payload. It will also check if the client is set up.\n     * @param payload The JWT payload\n     * @returns The validated payload or an error\n     */\n    validate(payload: TokenPayload): any {\n        const useExternalOIDC =\n            this.configService.get(\"OIDC\") !== undefined;\n        let sub = payload.sub;\n        if (useExternalOIDC) {\n            const key = this.configService.getOrThrow(\"OIDC_SUB\");\n            sub = (payload as any)[key] as string;\n        }\n\n        return { sub, admin: payload.admin || false };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Key.html":{"url":"classes/Key.html","title":"class - Key","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Key\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        JWK\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                alg\n                            \n                            \n                                    \n                                crv\n                            \n                            \n                                    \n                                d\n                            \n                            \n                                    \n                                kid\n                            \n                            \n                                    \n                                kty\n                            \n                            \n                                    \n                                x\n                            \n                            \n                                    \n                                y\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        alg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        crv\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        d\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kid\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        kty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['EC'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        x\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        y\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsEnum, IsOptional, IsString, ValidateNested } from \"class-validator\";\nimport { JWK } from \"jose\";\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum([\"EC\"])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @ValidateNested()\n    @Type(() => Key)\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n\n    /**\n     * Description of the key.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/KeyController.html":{"url":"controllers/KeyController.html","title":"controller - KeyController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  KeyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                key\n            \n\n\n            \n                Description\n            \n            \n                KeyController is responsible for managing keys in the system.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Async\n                                addKey\n                            \n                            \n                                    \n                                deleteKey\n                            \n                            \n                                    \n                                getKeys\n                            \n                            \n                                    \n                                    Async\n                                updateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        addKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    addKey(token: TokenPayload, body: KeyImportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:51\n                        \n                    \n\n\n            \n                \n                        Add a new key to the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteKey(token: TokenPayload, id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:82\n                        \n                    \n\n\n            \n                \n                        Delete a key from the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getKeys\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKeys(token: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:39\n                        \n                    \n\n\n            \n                \n                        Get all keys for the tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        updateKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateKey(token: TokenPayload, id: string, body: UpdateKeyDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/crypto/key/key.controller.ts:67\n                        \n                    \n\n\n            \n                \n                        Updates an existing key in the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            UpdateKeyDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Inject,\n    Param,\n    Post,\n    Put,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { CryptoService } from \"../crypto.service\";\nimport { KeyImportDto } from \"./dto/key-import.dto\";\nimport { UpdateKeyDto } from \"./dto/key-update.dto\";\nimport { CertEntity } from \"./entities/cert.entity\";\nimport { KeyService } from \"./key.service\";\n\n/**\n * KeyController is responsible for managing keys in the system.\n */\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"key\")\nexport class KeyController {\n    constructor(\n        @Inject(\"KeyService\") public readonly keyService: KeyService,\n        private cryptoService: CryptoService,\n    ) {}\n\n    /**\n     * Get all keys for the tenant.\n     * @param token\n     * @returns\n     */\n    @Get()\n    getKeys(@Token() token: TokenPayload): Promise {\n        const tenantId = token.sub;\n        return this.cryptoService.getCerts(tenantId);\n    }\n\n    /**\n     * Add a new key to the key service.\n     * @param token\n     * @param body\n     * @returns\n     */\n    @Post()\n    async addKey(\n        @Token() token: TokenPayload,\n        @Body() body: KeyImportDto,\n    ): Promise {\n        const tenantId = token.sub;\n        const id = await this.cryptoService.importKey(tenantId, body);\n        return { id };\n    }\n\n    /**\n     * Updates an existing key in the key service.\n     * @param token\n     * @param id\n     * @param body\n     */\n    @Put(\":id\")\n    async updateKey(\n        @Token() token: TokenPayload,\n        @Param(\"id\") id: string,\n        @Body() body: UpdateKeyDto,\n    ): Promise {\n        const tenantId = token.sub;\n        await this.cryptoService.updateCert(tenantId, id, body);\n    }\n\n    /**\n     * Delete a key from the key service.\n     * @param token\n     * @param id\n     */\n    @Delete(\":id\")\n    deleteKey(@Token() token: TokenPayload, @Param(\"id\") id: string) {\n        return this.cryptoService.deleteKey(token.sub, id);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/KeyEntity.html":{"url":"entities/KeyEntity.html","title":"entity - KeyEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  KeyEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/entities/keys.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                key\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                usage\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:16\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :     JWK\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:34\n                        \n                    \n\n            \n                \n                    The key material.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:28\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:22\n                        \n                    \n\n            \n                \n                    Tenant ID for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        usage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KeyUsage\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {default: 'sign'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/entities/keys.entity.ts:40\n                        \n                    \n\n            \n                \n                    The usage type of the key.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { JWK } from \"jose\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\n/**\n * Key usage types.\n */\nexport type KeyUsage = \"sign\" | \"encrypt\";\n\n@Entity()\nexport class KeyEntity {\n    /**\n     * Unique identifier for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    id: string;\n\n    /**\n     * Tenant ID for the key.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The key material.\n     */\n    @Column(\"json\")\n    key: JWK;\n\n    /**\n     * The usage type of the key.\n     */\n    @Column(\"varchar\", { default: \"sign\" })\n    usage: KeyUsage;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyImportDto.html":{"url":"classes/KeyImportDto.html","title":"class - KeyImportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyImportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-import.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for importing a key.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                crt\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                privateKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:38\n                        \n                    \n\n            \n                \n                    Optional certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:45\n                        \n                    \n\n            \n                \n                    Description of the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        privateKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Key\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-import.dto.ts:31\n                        \n                    \n\n            \n                \n                    The private key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport { IsEnum, IsOptional, IsString, ValidateNested } from \"class-validator\";\nimport { JWK } from \"jose\";\n\nclass Key implements JWK {\n    @IsString()\n    kid: string; // Key ID\n    @IsEnum([\"EC\"])\n    kty: string; // Key Type\n    @IsString()\n    x: string; // X coordinate for EC keys\n    @IsString()\n    y: string; // Y coordinate for EC keys\n    @IsString()\n    crv: string; // Curve name for EC keys\n    @IsString()\n    d: string; // Private key value for EC keys\n    @IsString()\n    alg: string; // Algorithm used with the key\n}\n\n/**\n * DTO for importing a key.\n */\nexport class KeyImportDto {\n    /**\n     * The private key in JWK format.\n     */\n    @ValidateNested()\n    @Type(() => Key)\n    privateKey: Key;\n\n    /**\n     * Optional certificate in PEM format.\n     */\n    @IsString()\n    @IsOptional()\n    crt?: string;\n\n    /**\n     * Description of the key.\n     */\n    @IsString()\n    @IsOptional()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/KeyModule.html":{"url":"modules/KeyModule.html","title":"module - KeyModule","body":"\n                   \n\n\n\n\n    Modules\n    KeyModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/crypto/key/key.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.module.ts:33\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { HttpModule, HttpService } from \"@nestjs/axios\";\nimport { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { getRepositoryToken, TypeOrmModule } from \"@nestjs/typeorm\";\nimport * as Joi from \"joi\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { DBKeyService } from \"./adapters/db-key.service\";\nimport { VaultKeyService } from \"./adapters/vault-key.service\";\nimport { CryptoImplementatationModule } from \"./crypto-implementation/crypto-implementation.module\";\nimport { CryptoImplementationService } from \"./crypto-implementation/crypto-implementation.service\";\nimport { CertEntity } from \"./entities/cert.entity\";\nimport { KeyEntity } from \"./entities/keys.entity\";\n\nexport const KEY_VALIDATION_SCHEMA = {\n    KM_TYPE: Joi.string().valid(\"db\", \"vault\").default(\"db\"),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class KeyModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: KeyModule,\n            imports: [\n                HttpModule,\n                ConfigModule,\n                CryptoImplementatationModule,\n                TypeOrmModule.forFeature([CertEntity, KeyEntity]),\n            ],\n            providers: [\n                {\n                    provide: \"KeyService\",\n                    useFactory: (\n                        configService: ConfigService,\n                        httpService: HttpService,\n                        cryptoService: CryptoImplementationService,\n                        certRepository: Repository,\n                        keyRepository: Repository,\n                    ) => {\n                        const kmType = configService.get(\n                            \"KM_TYPE\",\n                        );\n                        if (kmType === \"vault\") {\n                            return new VaultKeyService(\n                                httpService,\n                                configService,\n                                cryptoService,\n                                certRepository,\n                            );\n                        }\n\n                        return new DBKeyService(\n                            configService,\n                            cryptoService,\n                            certRepository,\n                            keyRepository,\n                        );\n                    },\n                    inject: [\n                        ConfigService,\n                        HttpService,\n                        CryptoImplementationService,\n                        getRepositoryToken(CertEntity),\n                        getRepositoryToken(KeyEntity),\n                    ],\n                },\n            ],\n            exports: [\"KeyService\"],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyObj.html":{"url":"classes/KeyObj.html","title":"class - KeyObj","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyObj\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-object.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a key entity with its unique identifier, public key, and certificate.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                crt\n                            \n                            \n                                id\n                            \n                            \n                                publicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        crt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:19\n                        \n                    \n\n            \n                \n                    Certificate in PEM format.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:11\n                        \n                    \n\n            \n                \n                    Unique identifier for the key.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        publicKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EC_Public\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-object.dto.ts:15\n                        \n                    \n\n            \n                \n                    Public key in JWK format.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\n\n/**\n * Represents a key entity with its unique identifier, public key, and certificate.\n */\n\nexport class KeyObj {\n    /**\n     * Unique identifier for the key.\n     */\n    id: string;\n    /**\n     * Public key in JWK format.\n     */\n    publicKey: EC_Public;\n    /**\n     * Certificate in PEM format.\n     */\n    crt: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyResponseDto.html":{"url":"classes/KeyResponseDto.html","title":"class - KeyResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                keys\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        keys\n                        \n                    \n                \n            \n                \n                    \n                        Type :         EC_Public[]\n\n                    \n                \n                    \n                        \n                                Defined in src/crypto/key/dto/key-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { EC_Public } from \"../../../well-known/dto/jwks-response.dto\";\n\nexport class KeyResponseDto {\n    keys: EC_Public[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/KeyService.html":{"url":"classes/KeyService.html","title":"class - KeyService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  KeyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/key.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface for a key service\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                create\n                            \n                            \n                                    Protected\n                                getCertificate\n                            \n                            \n                                    Abstract\n                                getKid\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                getPublicKey\n                            \n                            \n                                    Abstract\n                                import\n                            \n                            \n                                    Abstract\n                                init\n                            \n                            \n                                    Abstract\n                                signer\n                            \n                            \n                                    Abstract\n                                signJWT\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, certRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/crypto/key/key.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        certRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Creates a new keypair\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the generated key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Protected\n                        getCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCertificate(tenantId: string, keyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:85\n                        \n                    \n\n\n            \n                \n                        Get the certificate for the given key id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getKid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getKid(tenantId: string, type?: CertificateType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Get the key id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                type\n                                            \n                                                            CertificateType\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Get the public key\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getPublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPublicKey(type: \"pem\" | \"jwk\", tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                        \"pem\" | \"jwk\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import(tenantId: string, body: KeyImportDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Import a key into the key service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            KeyImportDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        init\n                        \n                    \n                \n            \n            \n                \n                        \n                    init(tenantId)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Initialize the key service\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                key id of the initialized key.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signer\n                        \n                    \n                \n            \n            \n                \n                        \n                    signer(tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:43\n                        \n                    \n\n\n            \n                \n                        Get the callback for the signer function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        signJWT\n                        \n                    \n                \n            \n            \n                \n                        \n                    signJWT(payload: JWTPayload, header: JoseHeaderParameters, tenantId: string, keyId?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/crypto/key/key.service.ts:72\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JoseHeaderParameters\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ConflictException } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Signer } from \"@sd-jwt/types\";\nimport { JoseHeaderParameters, JWK, JWTPayload } from \"jose\";\nimport { Repository } from \"typeorm\";\nimport { KeyImportDto } from \"./dto/key-import.dto\";\nimport { CertEntity, CertificateType } from \"./entities/cert.entity\";\n\n/**\n * Generic interface for a key service\n */\nexport abstract class KeyService {\n    constructor(\n        protected configService: ConfigService,\n        protected certRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the key service\n     * @param tenantId\n     * @returns key id of the initialized key.\n     */\n    abstract init(tenantId): Promise;\n\n    /**\n     * Creates a new keypair\n     * @param tenantId\n     * @return key id of the generated key.\n     */\n    abstract create(tenantId): Promise;\n\n    /**\n     * Import a key into the key service.\n     * @param tenantId\n     * @param body\n     */\n    abstract import(tenantId: string, body: KeyImportDto): Promise;\n\n    /**\n     * Get the callback for the signer function\n     * @param tenantId\n     */\n    abstract signer(tenantId: string, keyId?: string): Promise;\n\n    /**\n     * Get the key id\n     * @returns\n     */\n    abstract getKid(tenantId: string, type?: CertificateType): Promise;\n\n    /**\n     * Get the public key\n     * @returns\n     */\n    abstract getPublicKey(\n        type: \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: \"pem\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n    abstract getPublicKey(\n        type: \"pem\" | \"jwk\",\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    //TODO: this can be handled via the signer callback\n    abstract signJWT(\n        payload: JWTPayload,\n        header: JoseHeaderParameters,\n        tenantId: string,\n        keyId?: string,\n    ): Promise;\n\n    /**\n     * Get the certificate for the given key id.\n     * @param tenantId\n     * @param keyId\n     * @returns\n     */\n    protected getCertificate(tenantId: string, keyId: string): Promise {\n        return this.certRepository\n            .findOneByOrFail({\n                tenantId,\n                id: keyId,\n            })\n            .then(\n                (cert) => cert.crt,\n                () => {\n                    throw new ConflictException(\"Certificate not found\");\n                },\n            );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalFileStorage.html":{"url":"classes/LocalFileStorage.html","title":"class - LocalFileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalFileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/adapters/local.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            FileStorage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                delete\n                            \n                            \n                                exists\n                            \n                            \n                                getStream\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseDir: string)\n                    \n                \n                        \n                            \n                                Defined in src/storage/adapters/local.storage.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        baseDir\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        exists\n                        \n                    \n                \n            \n            \n                \nexists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getStream\n                        \n                    \n                \n            \n            \n                \ngetStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/local.storage.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    createReadStream,\n    createWriteStream,\n    existsSync,\n    mkdirSync,\n    rmSync,\n    statSync,\n} from \"fs\";\nimport { dirname, join } from \"path\";\nimport { Readable } from \"stream\";\nimport { FileStorage, PutOptions, StoredObject } from \"../storage.types\";\n\nexport class LocalFileStorage implements FileStorage {\n    constructor(private baseDir: string) {}\n\n    async put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise {\n        const fullPath = join(this.baseDir, key);\n        mkdirSync(dirname(fullPath), { recursive: true });\n\n        await new Promise((resolve, reject) => {\n            const write = createWriteStream(fullPath);\n            const src = body instanceof Readable ? body : Readable.from(body);\n            src.pipe(write)\n                .on(\"finish\", () => resolve())\n                .on(\"error\", reject);\n        });\n\n        const st = statSync(fullPath);\n\n        return { key, size: st.size, contentType: opts?.contentType };\n    }\n\n    getStream(key: string) {\n        const fullPath = join(this.baseDir, key);\n        return Promise.resolve({ stream: createReadStream(fullPath) });\n    }\n\n    delete(key: string) {\n        return Promise.resolve(rmSync(join(this.baseDir, key)));\n    }\n\n    exists(key: string) {\n        return Promise.resolve(existsSync(join(this.baseDir, key)));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggerConfigService.html":{"url":"injectables/LoggerConfigService.html","title":"injectable - LoggerConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoggerConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing logger configuration\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                config\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getConfiguration\n                            \n                            \n                                getLogFormat\n                            \n                            \n                                getLogLevel\n                            \n                            \n                                isDebugModeEnabled\n                            \n                            \n                                isHttpLoggerEnabled\n                            \n                            \n                                isSessionLoggerEnabled\n                            \n                            \n                                    Private\n                                loadConfiguration\n                            \n                            \n                                    Private\n                                parseLogLevel\n                            \n                            \n                                reloadConfiguration\n                            \n                            \n                                shouldEnableAutoLogging\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getConfiguration\n                        \n                    \n                \n            \n            \n                \ngetConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         LoggerConfiguration\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogFormat\n                        \n                    \n                \n            \n            \n                \ngetLogFormat()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     \"json\" | \"pretty\"\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getLogLevel\n                        \n                    \n                \n            \n            \n                \ngetLogLevel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     LogLevel\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDebugModeEnabled\n                        \n                    \n                \n            \n            \n                \nisDebugModeEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHttpLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisHttpLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:67\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isSessionLoggerEnabled\n                        \n                    \n                \n            \n            \n                \nisSessionLoggerEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:63\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        parseLogLevel\n                        \n                    \n                \n            \n            \n                \n                        \n                    parseLogLevel(level: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                level\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     LogLevel\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        reloadConfiguration\n                        \n                    \n                \n            \n            \n                \nreloadConfiguration()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Hot reload configuration from environment\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        shouldEnableAutoLogging\n                        \n                    \n                \n            \n            \n                \nshouldEnableAutoLogging()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/logger-config.service.ts:94\n                        \n                    \n\n\n            \n                \n                        Check if automatic HTTP request/response logging should be enabled\nThis is used by the LoggerModule configuration\n\n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         LoggerConfiguration\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/logger-config.service.ts:17\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, LogLevel } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: \"json\" | \"pretty\";\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get(\"LOG_LEVEL\", \"info\"),\n            ),\n            enableSessionLogger: this.configService.get(\n                \"LOG_ENABLE_SESSION_LOGGER\",\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                \"LOG_ENABLE_HTTP_LOGGER\",\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                \"LOG_DEBUG_MODE\",\n                false,\n            ),\n            logFormat: this.configService.get(\n                \"LOG_FORMAT\",\n                \"pretty\",\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: \"verbose\",\n            debug: \"debug\",\n            log: \"log\",\n            warn: \"warn\",\n            error: \"error\",\n            fatal: \"fatal\",\n        };\n        return levels[level.toLowerCase()] || \"log\";\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): \"json\" | \"pretty\" {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggerConfiguration.html":{"url":"interfaces/LoggerConfiguration.html","title":"interface - LoggerConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoggerConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/logger-config.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            enableDebugMode\n                                        \n                                \n                                \n                                        \n                                            enableHttpLogger\n                                        \n                                \n                                \n                                        \n                                            enableSessionLogger\n                                        \n                                \n                                \n                                        \n                                            level\n                                        \n                                \n                                \n                                        \n                                            logFormat\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableDebugMode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableDebugMode:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableHttpLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableHttpLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        enableSessionLogger\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableSessionLogger:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        level:     LogLevel\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LogLevel\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logFormat\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        logFormat:     \"json\" | \"pretty\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"json\" | \"pretty\"\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable, LogLevel } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\n\nexport interface LoggerConfiguration {\n    level: LogLevel;\n    enableSessionLogger: boolean;\n    enableHttpLogger: boolean;\n    enableDebugMode: boolean;\n    logFormat: \"json\" | \"pretty\";\n}\n\n/**\n * Service for managing logger configuration\n */\n@Injectable()\nexport class LoggerConfigService {\n    private config: LoggerConfiguration;\n\n    constructor(private readonly configService: ConfigService) {\n        this.loadConfiguration();\n    }\n\n    private loadConfiguration(): void {\n        this.config = {\n            level: this.parseLogLevel(\n                this.configService.get(\"LOG_LEVEL\", \"info\"),\n            ),\n            enableSessionLogger: this.configService.get(\n                \"LOG_ENABLE_SESSION_LOGGER\",\n                false,\n            ),\n            enableHttpLogger: this.configService.get(\n                \"LOG_ENABLE_HTTP_LOGGER\",\n                false,\n            ),\n            enableDebugMode: this.configService.get(\n                \"LOG_DEBUG_MODE\",\n                false,\n            ),\n            logFormat: this.configService.get(\n                \"LOG_FORMAT\",\n                \"pretty\",\n            ),\n        };\n    }\n\n    private parseLogLevel(level: string): LogLevel {\n        const levels: Record = {\n            verbose: \"verbose\",\n            debug: \"debug\",\n            log: \"log\",\n            warn: \"warn\",\n            error: \"error\",\n            fatal: \"fatal\",\n        };\n        return levels[level.toLowerCase()] || \"log\";\n    }\n\n    getConfiguration(): LoggerConfiguration {\n        return { ...this.config };\n    }\n\n    isSessionLoggerEnabled(): boolean {\n        return this.config.enableSessionLogger;\n    }\n\n    isHttpLoggerEnabled(): boolean {\n        return this.config.enableHttpLogger;\n    }\n\n    isDebugModeEnabled(): boolean {\n        return this.config.enableDebugMode;\n    }\n\n    getLogLevel(): LogLevel {\n        return this.config.level;\n    }\n\n    getLogFormat(): \"json\" | \"pretty\" {\n        return this.config.logFormat;\n    }\n\n    /**\n     * Hot reload configuration from environment\n     */\n    reloadConfiguration(): void {\n        this.loadConfiguration();\n    }\n\n    /**\n     * Check if automatic HTTP request/response logging should be enabled\n     * This is used by the LoggerModule configuration\n     */\n    shouldEnableAutoLogging(): boolean {\n        return this.isHttpLoggerEnabled();\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MetricModule.html":{"url":"modules/MetricModule.html","title":"module - MetricModule","body":"\n                   \n\n\n\n\n    Modules\n    MetricModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/metric/metric.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { PrometheusModule } from \"@willsoto/nestjs-prometheus\";\n\n@Module({\n    imports: [\n        //TODO: add a guard to protect the metrics endpoint\n        PrometheusModule.register({\n            defaultMetrics: {\n                enabled: false,\n            },\n        }),\n    ],\n})\nexport class MetricModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NoneTrustPolicy.html":{"url":"classes/NoneTrustPolicy.html","title":"class - NoneTrustPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NoneTrustPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                none\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['none'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:54\n\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NotificationRequestDto.html":{"url":"classes/NotificationRequestDto.html","title":"class - NotificationRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NotificationRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/notification-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                event\n                            \n                            \n                                    \n                                notification_id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        event\n                        \n                    \n                \n            \n                \n                    \n                        Type :         NotificationEvent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(['credential_accepted', 'credential_revoked'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notification_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/notification-request.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { NotificationEvent } from \"@openid4vc/openid4vci\";\nimport { IsEnum, IsString } from \"class-validator\";\n\nexport class NotificationRequestDto {\n    @IsString()\n    notification_id: string;\n\n    @IsEnum([\"credential_accepted\", \"credential_revoked\"])\n    event: NotificationEvent;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/OAuthController.html":{"url":"controllers/OAuthController.html","title":"controller - OAuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  OAuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/oauth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                oauth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                getToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        getToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    getToken(tokenRequest: TokenRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'OAuth 2.0 Token Endpoint', description: 'Obtain an access token using client credentials grant type.'})@Post('token')\n                \n            \n\n                    \n                        \n                            Defined in src/oauth/oauth.controller.ts:22\n                        \n                    \n\n\n            \n                \n                        OAuth 2.0 token endpoint for client credentials flow.\nThis endpoint allows clients to obtain access tokens using their client credentials.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tokenRequest\n                                            \n                                                            TokenRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from \"@nestjs/common\";\nimport { ApiOperation, ApiTags } from \"@nestjs/swagger\";\nimport { TokenRequestDto } from \"./dto/token-request.dto\";\nimport { TokenResponseDto } from \"./dto/token-response.dto\";\nimport { OAuthService } from \"./oauth.service\";\n\n@ApiTags(\"OAuth 2.0\")\n@Controller(\"oauth\")\nexport class OAuthController {\n    constructor(private readonly oauthService: OAuthService) {}\n\n    /**\n     * OAuth 2.0 token endpoint for client credentials flow.\n     * This endpoint allows clients to obtain access tokens using their client credentials.\n     */\n    @ApiOperation({\n        summary: \"OAuth 2.0 Token Endpoint\",\n        description:\n            \"Obtain an access token using client credentials grant type.\",\n    })\n    @Post(\"token\")\n    async getToken(\n        @Body() tokenRequest: TokenRequestDto,\n    ): Promise {\n        return await this.oauthService.handleClientCredentialsGrant(\n            tokenRequest,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/OAuthModule.html":{"url":"modules/OAuthModule.html","title":"module - OAuthModule","body":"\n                   \n\n\n\n\n    Modules\n    OAuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OAuthModule\n\n\n\ncluster_OAuthModule_exports\n\n\n\ncluster_OAuthModule_providers\n\n\n\ncluster_OAuthModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOAuthModule\n\nOAuthModule\n\nOAuthModule -->\n\nCryptoModule->OAuthModule\n\n\n\n\n\nOAuthService \n\nOAuthService \n\nOAuthService  -->\n\nOAuthModule->OAuthService \n\n\n\n\n\nOAuthService\n\nOAuthService\n\nOAuthModule -->\n\nOAuthService->OAuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/oauth/oauth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OAuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OAuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            OAuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { OAuthController } from \"./oauth.controller\";\nimport { OAuthService } from \"./oauth.service\";\n\nexport const OAUTH_VALIDATION_SCHEMA = {\n    OAUTH_CLIENT_ID: Joi.string().optional(),\n    OAUTH_CLIENT_SECRET: Joi.string().optional(),\n};\n\n@Module({\n    imports: [CryptoModule],\n    controllers: [OAuthController],\n    providers: [OAuthService],\n    exports: [OAuthService],\n})\nexport class OAuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/OAuthService.html":{"url":"injectables/OAuthService.html","title":"injectable - OAuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  OAuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/oauth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                clients\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addClient\n                            \n                            \n                                    Private\n                                    Async\n                                generateAccessToken\n                            \n                            \n                                    Async\n                                handleClientCredentialsGrant\n                            \n                            \n                                hasClient\n                            \n                            \n                                    Private\n                                initializeClients\n                            \n                            \n                                removeClient\n                            \n                            \n                                    Private\n                                validateClientCredentials\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService)\n                    \n                \n                        \n                            \n                                Defined in src/oauth/oauth.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addClient\n                        \n                    \n                \n            \n            \n                \naddClient(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:92\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAccessToken(clientId: string, scope?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                scope\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        handleClientCredentialsGrant\n                        \n                    \n                \n            \n            \n                \n                        \n                    handleClientCredentialsGrant(request: TokenRequestDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                request\n                                            \n                                                            TokenRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hasClient\n                        \n                    \n                \n            \n            \n                \nhasClient(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        initializeClients\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeClients()\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeClient\n                        \n                    \n                \n            \n            \n                \nremoveClient(clientId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:96\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        validateClientCredentials\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateClientCredentials(clientId: string, clientSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/oauth/oauth.service.ts:60\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                clientId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                clientSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        clients\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Map()\n                    \n                \n                    \n                        \n                                Defined in src/oauth/oauth.service.ts:10\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { TokenRequestDto } from \"./dto/token-request.dto\";\nimport { TokenResponseDto } from \"./dto/token-response.dto\";\n\n@Injectable()\nexport class OAuthService {\n    // In a real implementation, you'd store these securely in a database\n    private readonly clients = new Map();\n\n    constructor(\n        private readonly configService: ConfigService,\n        private readonly cryptoService: CryptoService,\n    ) {\n        // Initialize with some default clients - you can move this to configuration\n        this.initializeClients();\n    }\n\n    private initializeClients() {\n        // Add default client from environment variables if available\n        const defaultClientId =\n            this.configService.get(\"OAUTH_CLIENT_ID\");\n        const defaultClientSecret = this.configService.get(\n            \"OAUTH_CLIENT_SECRET\",\n        );\n\n        if (defaultClientId && defaultClientSecret) {\n            this.clients.set(defaultClientId, defaultClientSecret);\n        }\n    }\n\n    async handleClientCredentialsGrant(\n        request: TokenRequestDto,\n    ): Promise {\n        // Validate client credentials\n        if (\n            !this.validateClientCredentials(\n                request.client_id,\n                request.client_secret,\n            )\n        ) {\n            throw new UnauthorizedException(\"Invalid client credentials\");\n        }\n\n        // Generate access token\n        const accessToken = await this.generateAccessToken(\n            request.client_id,\n            request.scope,\n        );\n\n        return {\n            access_token: accessToken,\n            token_type: \"Bearer\",\n            expires_in: 3600, // 1 hour\n            scope: request.scope || \"openid\",\n        };\n    }\n\n    private validateClientCredentials(\n        clientId: string,\n        clientSecret: string,\n    ): boolean {\n        const storedSecret = this.clients.get(clientId);\n        return storedSecret === clientSecret;\n    }\n\n    private async generateAccessToken(\n        clientId: string,\n        scope?: string,\n    ): Promise {\n        const payload = {\n            sub: clientId,\n            aud: this.configService.getOrThrow(\"PUBLIC_URL\"),\n            iss: this.configService.getOrThrow(\"PUBLIC_URL\"),\n            scope: scope || \"openid\",\n            exp: Math.floor(Date.now() / 1000) + 3600, // 1 hour from now\n            iat: Math.floor(Date.now() / 1000),\n        };\n\n        // For now, we'll use the root tenant for signing\n        // In a real implementation, you might want to use a dedicated OAuth signing key\n        const tenantId = \"root\";\n        return await this.cryptoService.signJwt(\n            payload,\n            { alg: \"RS256\" },\n            tenantId,\n        );\n    }\n\n    // Methods to manage clients dynamically\n    addClient(clientId: string, clientSecret: string): void {\n        this.clients.set(clientId, clientSecret);\n    }\n\n    removeClient(clientId: string): void {\n        this.clients.delete(clientId);\n    }\n\n    hasClient(clientId: string): boolean {\n        return this.clients.has(clientId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Oauth2AuthorizationServerResponse.html":{"url":"classes/Oauth2AuthorizationServerResponse.html","title":"class - Oauth2AuthorizationServerResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Oauth2AuthorizationServerResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/dto/oauth-authorization-server-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents the response from an OAuth2 authorization server.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                authorization_challenge_endpoint\n                            \n                            \n                                authorization_endpoint\n                            \n                            \n                                code_challenge_methods_supported\n                            \n                            \n                                dpop_signing_alg_values_supported\n                            \n                            \n                                issuer\n                            \n                            \n                                jwks_uri\n                            \n                            \n                                pushed_authorization_request_endpoint\n                            \n                            \n                                require_pushed_authorization_requests\n                            \n                            \n                                token_endpoint\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_challenge_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:37\n                        \n                    \n\n            \n                \n                    The URL of the authorization challenge endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        authorization_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:13\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's authorization endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        code_challenge_methods_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:21\n                        \n                    \n\n            \n                \n                    List of supported algorithms to sign the challenge\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dpop_signing_alg_values_supported\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:25\n                        \n                    \n\n            \n                \n                    List of supported algorithms for DPoP signing.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        issuer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        jwks_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:17\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pushed_authorization_request_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:33\n                        \n                    \n\n            \n                \n                    The URL of the pushed authorization request endpoint.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        require_pushed_authorization_requests\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:29\n                        \n                    \n\n            \n                \n                    Indicates whether the server requires pushed authorization requests.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_endpoint\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/well-known/dto/oauth-authorization-server-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The URL of the OAuth2 authorization server's token endpoint.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Oauth2AuthorizationServerResponse {\n    issuer: string;\n    /**\n     * The URL of the OAuth2 authorization server's token endpoint.\n     */\n    token_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's authorization endpoint.\n     */\n    authorization_endpoint: string;\n    /**\n     * The URL of the OAuth2 authorization server's jwks (JSON Web Key Set) endpoint.\n     */\n    jwks_uri: string;\n    /**\n     * List of supported algorithms to sign the challenge\n     */\n    code_challenge_methods_supported: string[];\n    /**\n     * List of supported algorithms for DPoP signing.\n     */\n    dpop_signing_alg_values_supported: string[];\n    /**\n     * Indicates whether the server requires pushed authorization requests.\n     */\n    require_pushed_authorization_requests: boolean;\n    /**\n     * The URL of the pushed authorization request endpoint.\n     */\n    pushed_authorization_request_endpoint: string;\n    /**\n     * The URL of the authorization challenge endpoint.\n     */\n    authorization_challenge_endpoint: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferRequestDto.html":{"url":"classes/OfferRequestDto.html","title":"class - OfferRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationIds\n                            \n                            \n                                    \n                                issuanceId\n                            \n                            \n                                    \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                session\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record>\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: 'object', description: 'Override the default values for the credential claims.', properties: undefined, examples: undefined})@IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:58\n                        \n                    \n\n            \n                \n                    Override the default values for the credential claims.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@Type(undefined)@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:66\n                        \n                    \n\n            \n                \n                    Webhook configuration for claims\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationIds\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:38\n                        \n                    \n\n            \n                \n                    Overrides the default values for the credential ids.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:31\n                        \n                    \n\n            \n                \n                    Issuance config id to reference the issuance configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({examples: undefined, description: 'The type of response expected for the offer request.'})@IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUUID()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:73\n                        \n                    \n\n            \n                \n                    Pre defined session id\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUUID,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { ResponseType } from \"../../../verifier/oid4vp/dto/presentation-request.dto\";\n\nexport class OfferRequestDto {\n    @ApiProperty({\n        examples: [\n            {\n                value: \"qrcode\",\n            },\n        ],\n        description: \"The type of response expected for the offer request.\",\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Issuance config id to reference the issuance configuration.\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * Overrides the default values for the credential ids.\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    /**\n     * Override the default values for the credential claims.\n     */\n    @ApiProperty({\n        type: \"object\",\n        description: \"Override the default values for the credential claims.\",\n        properties: {},\n        examples: [\n            {\n                pid: {\n                    given_name: \"ERIKA\",\n                    family_name: \"MUSTERMANN\",\n                },\n            },\n        ],\n    })\n    @IsObject()\n    @IsOptional()\n    claims?: Record>;\n\n    /**\n     * Webhook configuration for claims\n     */\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @IsOptional()\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Pre defined session id\n     */\n    @IsUUID()\n    @IsOptional()\n    session?: string;\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OfferResponse.html":{"url":"classes/OfferResponse.html","title":"class - OfferResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OfferResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/dto/offer-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                session\n                            \n                            \n                                uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        session\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:78\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/oid4vci/dto/offer-request.dto.ts:77\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsEnum,\n    IsObject,\n    IsOptional,\n    IsString,\n    IsUUID,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { ResponseType } from \"../../../verifier/oid4vp/dto/presentation-request.dto\";\n\nexport class OfferRequestDto {\n    @ApiProperty({\n        examples: [\n            {\n                value: \"qrcode\",\n            },\n        ],\n        description: \"The type of response expected for the offer request.\",\n    })\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Issuance config id to reference the issuance configuration.\n     */\n    @IsString()\n    issuanceId: string;\n\n    /**\n     * Overrides the default values for the credential ids.\n     */\n    @IsArray()\n    @IsOptional()\n    credentialConfigurationIds?: string[];\n\n    /**\n     * Override the default values for the credential claims.\n     */\n    @ApiProperty({\n        type: \"object\",\n        description: \"Override the default values for the credential claims.\",\n        properties: {},\n        examples: [\n            {\n                pid: {\n                    given_name: \"ERIKA\",\n                    family_name: \"MUSTERMANN\",\n                },\n            },\n        ],\n    })\n    @IsObject()\n    @IsOptional()\n    claims?: Record>;\n\n    /**\n     * Webhook configuration for claims\n     */\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    @IsOptional()\n    claimsWebhook?: WebhookConfig;\n\n    /**\n     * Pre defined session id\n     */\n    @IsUUID()\n    @IsOptional()\n    session?: string;\n}\n\nexport class OfferResponse {\n    uri: string;\n    session: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vciController.html":{"url":"controllers/Oid4vciController.html","title":"controller - Oid4vciController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vciController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/oid4vci/oid4vci.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/vci\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                credential\n                            \n                            \n                                    \n                                    \n                                nonce\n                            \n                            \n                                    \n                                    \n                                notifications\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        credential\n                        \n                    \n                \n            \n            \n                \n                        \n                    credential(req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('credential')@SessionLogger('session', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:29\n                        \n                    \n\n\n            \n                \n                        Endpoint to issue credentials\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        nonce\n                        \n                    \n                \n            \n            \n                \n                        \n                    nonce(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('nonce')@SessionLogger('nonce', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        notifications\n                        \n                    \n                \n            \n            \n                \n                        \n                    notifications(body: NotificationRequestDto, req: Request, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('notification')@SessionLogger('notification_id', 'OID4VCI')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/oid4vci/oid4vci.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Notification endpoint\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            NotificationRequestDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseInterceptors } from \"@nestjs/common\";\nimport { ApiExcludeController, ApiParam } from \"@nestjs/swagger\";\nimport type { CredentialResponse } from \"@openid4vc/openid4vci\";\nimport type { Request } from \"express\";\nimport { Oid4vciService } from \"../../issuer/oid4vci/oid4vci.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionLogger } from \"../../utils/logger//session-logger.decorator\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { NotificationRequestDto } from \"./dto/notification-request.dto\";\n\n/**\n * Controller for handling OID4VCI (OpenID for Verifiable Credential Issuance) requests.\n */\n@ApiParam({ name: \"session\", required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@Controller(\":session/vci\")\n@UseInterceptors(SessionLoggerInterceptor)\nexport class Oid4vciController {\n    constructor(private readonly oid4vciService: Oid4vciService) {}\n\n    /**\n     * Endpoint to issue credentials\n     * @param req\n     * @returns\n     */\n    @Post(\"credential\")\n    @SessionLogger(\"session\", \"OID4VCI\")\n    credential(\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ): Promise {\n        return this.oid4vciService.getCredential(req, session);\n    }\n\n    /**\n     * Notification endpoint\n     * @param body\n     * @returns\n     */\n    @Post(\"notification\")\n    @SessionLogger(\"notification_id\", \"OID4VCI\")\n    notifications(\n        @Body() body: NotificationRequestDto,\n        @Req() req: Request,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vciService.handleNotification(req, body, session);\n    }\n\n    @Post(\"nonce\")\n    @SessionLogger(\"nonce\", \"OID4VCI\")\n    nonce(@SessionEntity() session: Session) {\n        return this.oid4vciService.nonceRequest(session);\n    }\n\n    //TODO: this endpoint may be relevant for the wallet attestation.\n    /* @Get('session')\n  session() {\n    console.log('Session requested');\n    //TODO store session and created at\n    const session = randomUUID();\n    return {\n      session_id: session,\n    };\n  } */\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/Oid4vpController.html":{"url":"controllers/Oid4vpController.html","title":"controller - Oid4vpController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  Oid4vpController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/oid4vp\n            \n\n\n            \n                Description\n            \n            \n                Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getRequestWithSession\n                            \n                            \n                                    \n                                    \n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getRequestWithSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getRequestWithSession(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Returns the authorization request for a given requestId and session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@SessionLogger('session', 'OID4VP')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Endpoint to receive the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseInterceptors } from \"@nestjs/common\";\nimport { ApiExcludeController, ApiParam } from \"@nestjs/swagger\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionEntity } from \"../../session/session.decorator\";\nimport { SessionLogger } from \"../../utils/logger/session-logger.decorator\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { AuthorizationResponse } from \"./dto/authorization-response.dto\";\nimport { Oid4vpService } from \"./oid4vp.service\";\n\n/**\n * Controller for handling OID4VP (OpenID for Verifiable Presentations) requests.\n */\n@Controller(\":session/oid4vp\")\n@UseInterceptors(SessionLoggerInterceptor)\n@ApiParam({ name: \"session\", required: true })\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\nexport class Oid4vpController {\n    /**\n     * Constructor for the Oid4vpController.\n     * @param oid4vpService - Instance of Oid4vpService for handling OID4VP operations.\n     */\n    constructor(private readonly oid4vpService: Oid4vpService) {}\n\n    /**\n     * Returns the authorization request for a given requestId and session.\n     * @param requestId\n     * @param session\n     * @returns\n     */\n    @Get()\n    @SessionLogger(\"session\", \"OID4VP\")\n    getRequestWithSession(@SessionEntity() session: Session) {\n        return this.oid4vpService.createAuthorizationRequest(session);\n    }\n\n    /**\n     * Endpoint to receive the response from the wallet.\n     * @param body\n     * @returns\n     */\n    @Post()\n    @SessionLogger(\"session\", \"OID4VP\")\n    getResponse(\n        @Body() body: AuthorizationResponse,\n        @SessionEntity() session: Session,\n    ) {\n        return this.oid4vpService.getResponse(body, session);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/Oid4vpModule.html":{"url":"modules/Oid4vpModule.html","title":"module - Oid4vpModule","body":"\n                   \n\n\n\n\n    Modules\n    Oid4vpModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_imports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            Oid4vpService\n                        \n                        \n                            SessionLoggerInterceptor\n                        \n                        \n                            SessionLoggerService\n                        \n                        \n                            WebhookService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            Oid4vpController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            Oid4vpService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { forwardRef, Module } from \"@nestjs/common\";\nimport { CryptoModule } from \"../../crypto/crypto.module\";\nimport { RegistrarModule } from \"../../registrar/registrar.module\";\nimport { SessionModule } from \"../../session/session.module\";\nimport { SessionLoggerInterceptor } from \"../../utils/logger/session-logger.interceptor\";\nimport { SessionLoggerService } from \"../../utils/logger/session-logger.service\";\nimport { WebhookService } from \"../../utils/webhook/webhook.service\";\nimport { PresentationsModule } from \"../presentations/presentations.module\";\nimport { Oid4vpController } from \"./oid4vp.controller\";\nimport { Oid4vpService } from \"./oid4vp.service\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        forwardRef(() => RegistrarModule),\n        forwardRef(() => PresentationsModule),\n        SessionModule,\n        HttpModule,\n    ],\n    controllers: [Oid4vpController],\n    providers: [\n        Oid4vpService,\n        SessionLoggerService,\n        SessionLoggerInterceptor,\n        WebhookService,\n    ],\n    exports: [Oid4vpService],\n})\nexport class Oid4vpModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/Oid4vpService.html":{"url":"injectables/Oid4vpService.html","title":"injectable - Oid4vpService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  Oid4vpService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/oid4vp.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAuthorizationRequest\n                            \n                            \n                                    Async\n                                createRequest\n                            \n                            \n                                    Async\n                                getResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cryptoService: CryptoService, encryptionService: EncryptionService, configService: ConfigService, registrarService: RegistrarService, presentationsService: PresentationsService, sessionService: SessionService, sessionLogger: SessionLoggerService, webhookService: WebhookService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/oid4vp/oid4vp.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        webhookService\n                                                  \n                                                        \n                                                                        WebhookService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createAuthorizationRequest(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Creates an authorization request for the OID4VP flow.\nThis method generates a JWT that includes the necessary parameters for the authorization request.\nIt initializes the session logging context and logs the start of the flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createRequest\n                        \n                    \n                \n            \n            \n                \n                        \n                    createRequest(requestId: string, values: PresentationRequestOptions, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:205\n                        \n                    \n\n\n            \n                \n                        Creates a request for the OID4VP flow.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            PresentationRequestOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getResponse\n                        \n                    \n                \n            \n            \n                \n                        \n                    getResponse(body: AuthorizationResponse, session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/oid4vp/oid4vp.service.ts:264\n                        \n                    \n\n\n            \n                \n                        Processes the response from the wallet.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            AuthorizationResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { v4 } from \"uuid\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { EncryptionService } from \"../../crypto/encryption/encryption.service\";\nimport { OfferResponse } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport { RegistrarService } from \"../../registrar/registrar.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../../utils/logger/session-logger.service\";\nimport { SessionLogContext } from \"../../utils/logger/session-logger-context\";\nimport { WebhookService } from \"../../utils/webhook/webhook.service\";\nimport { AuthResponse } from \"../presentations/dto/auth-response.dto\";\nimport { PresentationsService } from \"../presentations/presentations.service\";\nimport { AuthorizationResponse } from \"./dto/authorization-response.dto\";\nimport { PresentationRequestOptions } from \"./dto/presentation-request-options.dto\";\n\n@Injectable()\nexport class Oid4vpService {\n    constructor(\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private configService: ConfigService,\n        private registrarService: RegistrarService,\n        private presentationsService: PresentationsService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n        private webhookService: WebhookService,\n    ) {}\n\n    /**\n     * Creates an authorization request for the OID4VP flow.\n     * This method generates a JWT that includes the necessary parameters for the authorization request.\n     * It initializes the session logging context and logs the start of the flow.\n     * @param requestId\n     * @param tenantId\n     * @param auth_session\n     * @returns\n     */\n    async createAuthorizationRequest(session: Session): Promise {\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: session.id,\n            tenantId: session.tenantId,\n            flowType: \"OID4VP\",\n            stage: \"authorization_request\",\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            requestId: session.requestId,\n            action: \"create_authorization_request\",\n        });\n\n        try {\n            const host = this.configService.getOrThrow(\"PUBLIC_URL\");\n            const tenantHost = `${host}/${session.tenantId}`;\n\n            const presentationConfig =\n                await this.presentationsService.getPresentationConfig(\n                    session.requestId!,\n                    session.tenantId,\n                );\n            let regCert: string | undefined = undefined;\n\n            const dcql_query = JSON.parse(\n                JSON.stringify(presentationConfig.dcql_query).replace(\n                    //g,\n                    tenantHost,\n                ),\n            );\n\n            if (this.registrarService.isEnabled()) {\n                const registrationCert = JSON.parse(\n                    JSON.stringify(presentationConfig.registrationCert).replace(\n                        //g,\n                        tenantHost,\n                    ),\n                );\n                regCert =\n                    await this.registrarService.addRegistrationCertificate(\n                        registrationCert,\n                        dcql_query,\n                        session.requestId!,\n                        session.tenantId,\n                    );\n            }\n            const nonce = randomUUID();\n            await this.sessionService.add(session.id, {\n                vp_nonce: nonce,\n            });\n\n            this.sessionLogger.logAuthorizationRequest(logContext, {\n                requestId: session.requestId,\n                nonce,\n                regCert,\n                dcqlQueryCount: Array.isArray(dcql_query)\n                    ? dcql_query.length\n                    : 1,\n            });\n\n            const hostname = new URL(\n                this.configService.getOrThrow(\"PUBLIC_URL\"),\n            ).hostname;\n\n            const lifeTime = 60 * 60;\n\n            const request = {\n                payload: {\n                    response_type: \"vp_token\",\n                    client_id: \"x509_san_dns:\" + hostname,\n                    response_uri: `${host}/${session.id}/oid4vp`,\n                    response_mode: \"direct_post.jwt\",\n                    nonce,\n                    dcql_query,\n                    client_metadata: {\n                        jwks: {\n                            keys: [\n                                await this.encryptionService.getEncryptionPublicKey(\n                                    session.tenantId,\n                                ),\n                            ],\n                        },\n                        vp_formats: {\n                            mso_mdoc: {\n                                alg: [\"ES256\"],\n                            },\n                            \"dc+sd-jwt\": {\n                                \"kb-jwt_alg_values\": [\"ES256\"],\n                                \"sd-jwt_alg_values\": [\"ES256\"],\n                            },\n                        },\n                        authorization_encrypted_response_alg: \"ECDH-ES\",\n                        authorization_encrypted_response_enc: \"A128GCM\",\n                        client_name:\n                            this.configService.getOrThrow(\"RP_NAME\"),\n                        response_types_supported: [\"vp_token\"],\n                    },\n                    state: session.id,\n                    aud: host,\n                    exp: Math.floor(Date.now() / 1000) + lifeTime,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    verifier_attestations: regCert\n                        ? [\n                              {\n                                  format: \"jwt\",\n                                  data: regCert,\n                              },\n                          ]\n                        : undefined,\n                },\n                header: {\n                    typ: \"oauth-authz-req+jwt\",\n                },\n            };\n\n            const accessCert = await this.cryptoService.getCertChain(\n                \"access\",\n                session.tenantId,\n            );\n\n            const header = {\n                ...request.header,\n                alg: \"ES256\",\n                x5c: accessCert,\n            };\n\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"access\",\n            );\n            const signedJwt = await this.cryptoService.signJwt(\n                header,\n                request.payload,\n                session.tenantId,\n                keyId,\n            );\n\n            this.sessionLogger.logSession(\n                logContext,\n                \"Authorization request created successfully\",\n                {\n                    signedJwtLength: signedJwt.length,\n                    certificateChainLength: accessCert?.length || 0,\n                },\n            );\n\n            return signedJwt;\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                requestId: session.requestId,\n                action: \"create_authorization_request\",\n            });\n            throw error;\n        }\n    }\n\n    /**\n     * Creates a request for the OID4VP flow.\n     * @param requestId\n     * @param values\n     * @param tenantId\n     * @returns\n     */\n    async createRequest(\n        requestId: string,\n        values: PresentationRequestOptions,\n        tenantId: string,\n    ): Promise {\n        const presentationConfig =\n            await this.presentationsService.getPresentationConfig(\n                requestId,\n                tenantId,\n            );\n        const fresh = values.session === undefined;\n        values.session = values.session || v4();\n\n        const hostname = new URL(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n        ).hostname;\n        const params = {\n            client_id: `x509_san_dns:${hostname}`,\n            request_uri: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${values.session}/oid4vp`,\n        };\n        const queryString = Object.entries(params)\n            .map(\n                ([key, value]) =>\n                    `${encodeURIComponent(key)}=${encodeURIComponent(value)}`,\n            )\n            .join(\"&\");\n\n        const expiresAt = new Date(\n            Date.now() + (presentationConfig.lifeTime ?? 300) * 1000,\n        );\n\n        if (fresh) {\n            await this.sessionService.create({\n                id: values.session,\n                claimsWebhook: values.webhook ?? presentationConfig.webhook,\n                tenantId,\n                requestId,\n                requestUrl: `openid4vp://?${queryString}`,\n                expiresAt,\n            });\n        } else {\n            await this.sessionService.add(values.session, {\n                claimsWebhook: values.webhook ?? presentationConfig.webhook,\n                requestUrl: `openid4vp://?${queryString}`,\n                expiresAt,\n            });\n        }\n\n        return {\n            uri: queryString,\n            session: values.session,\n        };\n    }\n\n    /**\n     * Processes the response from the wallet.\n     * @param body\n     * @param tenantId\n     */\n    async getResponse(body: AuthorizationResponse, session: Session) {\n        const res = await this.encryptionService.decryptJwe(\n            body.response,\n            session.tenantId,\n        );\n        if (!res.state) {\n            throw new ConflictException(\"No state found in the response\");\n        }\n\n        // Create session logging context\n        const logContext: SessionLogContext = {\n            sessionId: res.state,\n            tenantId: session.tenantId,\n            flowType: \"OID4VP\",\n            stage: \"response_processing\",\n        };\n\n        this.sessionLogger.logFlowStart(logContext, {\n            action: \"process_presentation_response\",\n            hasWebhook: !!session.claimsWebhook,\n        });\n\n        try {\n            //TODO: load required fields from the config\n            const credentials = await this.presentationsService.parseResponse(\n                res,\n                [],\n                session.vp_nonce as string,\n            );\n\n            this.sessionLogger.logCredentialVerification(\n                logContext,\n                !!credentials && credentials.length > 0,\n                {\n                    credentialCount: credentials?.length || 0,\n                    nonce: session.vp_nonce,\n                },\n            );\n\n            //tell the auth server the result of the session.\n            await this.sessionService.add(res.state, {\n                //TODO: not clear why it has to be any\n                credentials: credentials as any,\n            });\n            // if there a a webook URL, send the response there\n            //TODO: move to dedicated service to reuse it also in the oid4vci flow.\n            if (session.claimsWebhook) {\n                await this.webhookService.sendWebhook(\n                    session,\n                    logContext,\n                    credentials,\n                    false,\n                );\n            }\n\n            this.sessionLogger.logFlowComplete(logContext, {\n                credentialCount: credentials?.length || 0,\n                webhookSent: !!session.claimsWebhook,\n            });\n        } catch (error) {\n            this.sessionLogger.logFlowError(logContext, error as Error, {\n                action: \"process_presentation_response\",\n            });\n            throw error;\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ParResponseDto.html":{"url":"classes/ParResponseDto.html","title":"class - ParResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ParResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/dto/par-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                expires_in\n                            \n                            \n                                request_uri\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:9\n                        \n                    \n\n            \n                \n                    The expiration time for the request URI in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/issuer/authorize/dto/par-response.dto.ts:5\n                        \n                    \n\n            \n                \n                    The request URI for the Pushed Authorization Request.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class ParResponseDto {\n    /**\n     * The request URI for the Pushed Authorization Request.\n     */\n    request_uri: string;\n    /**\n     * The expiration time for the request URI in seconds.\n     */\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenAuthorizationCodeRequestGrant.html","title":"interface - ParsedAccessTokenAuthorizationCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenAuthorizationCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            code\n                                        \n                                \n                                \n                                        \n                                            grantType\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        code\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        code:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     AuthorizationCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AuthorizationCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session.tenantId,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html":{"url":"interfaces/ParsedAccessTokenPreAuthorizedCodeRequestGrant.html","title":"interface - ParsedAccessTokenPreAuthorizedCodeRequestGrant","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ParsedAccessTokenPreAuthorizedCodeRequestGrant\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/authorize/authorize.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            grantType\n                                        \n                                \n                                \n                                        \n                                            preAuthorizedCode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            txCode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        grantType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        grantType:     PreAuthorizedCodeGrantIdentifier\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PreAuthorizedCodeGrantIdentifier\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        preAuthorizedCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        preAuthorizedCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        txCode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        txCode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { randomUUID } from \"node:crypto\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport {\n    type AuthorizationCodeGrantIdentifier,\n    type AuthorizationServerMetadata,\n    authorizationCodeGrantIdentifier,\n    type HttpMethod,\n    Jwk,\n    Oauth2AuthorizationServer,\n    PkceCodeChallengeMethod,\n    PreAuthorizedCodeGrantIdentifier,\n    preAuthorizedCodeGrantIdentifier,\n} from \"@openid4vc/oauth2\";\nimport type { Request, Response } from \"express\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\nimport { Oid4vpService } from \"../../verifier/oid4vp/oid4vp.service\";\nimport { IssuanceService } from \"../issuance/issuance.service\";\nimport { getHeadersFromRequest } from \"../oid4vci/util\";\nimport { AuthorizeQueries } from \"./dto/authorize-request.dto\";\n\nexport interface ParsedAccessTokenAuthorizationCodeRequestGrant {\n    grantType: AuthorizationCodeGrantIdentifier;\n    code: string;\n}\n\ninterface ParsedAccessTokenPreAuthorizedCodeRequestGrant {\n    grantType: PreAuthorizedCodeGrantIdentifier;\n    preAuthorizedCode: string;\n    txCode?: string;\n}\n\n@Injectable()\nexport class AuthorizeService {\n    //public authorizationServer: Oauth2AuthorizationServer;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private oid4vpService: Oid4vpService,\n        private sessionService: SessionService,\n        private issuanceService: IssuanceService,\n    ) {}\n\n    getAuthorizationServer(tenantId: string): Oauth2AuthorizationServer {\n        const callbacks = this.cryptoService.getCallbackContext(tenantId);\n        return new Oauth2AuthorizationServer({\n            callbacks,\n        });\n    }\n\n    authzMetadata(session: Session): AuthorizationServerMetadata {\n        const authServer =\n            this.configService.getOrThrow(\"PUBLIC_URL\") +\n            `/${session.id}`;\n        return this.getAuthorizationServer(\n            session.tenantId,\n        ).createAuthorizationServerMetadata({\n            issuer: authServer,\n            token_endpoint: `${authServer}/authorize/token`,\n            authorization_endpoint: `${authServer}/authorize`,\n            jwks_uri: `${authServer}/.well-known/jwks.json`,\n            dpop_signing_alg_values_supported: [\"ES256\"],\n            // TODO: verify this on the server\n            require_pushed_authorization_requests: true,\n            pushed_authorization_request_endpoint: `${authServer}/authorize/par`,\n            code_challenge_methods_supported: [PkceCodeChallengeMethod.S256],\n            authorization_challenge_endpoint: `${authServer}/authorize/challenge`,\n            /*         token_endpoint_auth_methods_supported: [\n          SupportedAuthenticationScheme.ClientAttestationJwt,\n        ], */\n        });\n    }\n\n    async sendAuthorizationResponse(\n        queries: AuthorizeQueries,\n        res: Response>,\n    ) {\n        let values = queries;\n        if (queries.request_uri) {\n            await this.sessionService\n                .getBy({ request_uri: queries.request_uri })\n                .then((session) => {\n                    values = session.auth_queries!;\n                })\n                .catch(() => {\n                    throw new ConflictException(\n                        \"request_uri not found or not provided in the request\",\n                    );\n                });\n        } else {\n            throw new ConflictException(\n                \"request_uri not found or not provided in the request\",\n            );\n        }\n        const code = await this.setAuthCode(values.issuer_state!);\n        res.redirect(`${values.redirect_uri}?code=${code}`);\n    }\n\n    async validateTokenRequest(\n        body: any,\n        req: Request,\n        session: Session,\n    ): Promise {\n        const url = `${this.configService.getOrThrow(\"PUBLIC_URL\")}${req.url}`;\n        const tenantId = session.tenantId;\n        const parsedAccessTokenRequest = this.getAuthorizationServer(\n            tenantId,\n        ).parseAccessTokenRequest({\n            accessTokenRequest: body,\n            request: {\n                method: req.method as HttpMethod,\n                url,\n                headers: getHeadersFromRequest(req),\n            },\n        });\n\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                session.issuanceId!,\n                session.tenantId,\n            );\n\n        const authorizationServerMetadata = this.authzMetadata(session);\n        let dpopValue;\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            preAuthorizedCodeGrantIdentifier\n        ) {\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyPreAuthorizedCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenPreAuthorizedCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n\n                authorizationServerMetadata,\n\n                expectedPreAuthorizedCode:\n                    parsedAccessTokenRequest.grant.preAuthorizedCode,\n                expectedTxCode: parsedAccessTokenRequest.grant.txCode,\n            });\n            dpopValue = dpop;\n        }\n\n        if (\n            parsedAccessTokenRequest.grant.grantType ===\n            authorizationCodeGrantIdentifier\n        ) {\n            //TODO: handle response\n            const { dpop } = await this.getAuthorizationServer(\n                tenantId,\n            ).verifyAuthorizationCodeAccessTokenRequest({\n                grant: parsedAccessTokenRequest.grant as ParsedAccessTokenAuthorizationCodeRequestGrant,\n                accessTokenRequest: parsedAccessTokenRequest.accessTokenRequest,\n                expectedCode: session.authorization_code as string,\n                request: {\n                    method: req.method as HttpMethod,\n                    url,\n                    headers: getHeadersFromRequest(req),\n                },\n                dpop: {\n                    required: issuanceConfig.dPopRequired,\n                    allowedSigningAlgs:\n                        authorizationServerMetadata.dpop_signing_alg_values_supported,\n                    jwt: parsedAccessTokenRequest.dpop?.jwt,\n                },\n                authorizationServerMetadata,\n            });\n            dpopValue = dpop;\n        }\n        //const cNonce = randomUUID();\n        return this.getAuthorizationServer(tenantId).createAccessTokenResponse({\n            audience: `${this.configService.getOrThrow(\"PUBLIC_URL\")}/${session.id}`,\n            signer: {\n                method: \"jwk\",\n                alg: \"ES256\",\n                publicJwk: (await this.cryptoService.keyService.getPublicKey(\n                    \"jwk\",\n                    tenantId,\n                )) as Jwk,\n            },\n            subject: session.id,\n            expiresInSeconds: 300,\n            authorizationServer: authorizationServerMetadata.issuer,\n            /* cNonce,\n            cNonceExpiresIn: 100, */\n            clientId: \"wallet\", // must be same as the client attestation\n            dpop: dpopValue,\n        });\n    }\n\n    async parseChallengeRequest(\n        body: AuthorizeQueries,\n        tenantId: string,\n        webhook?: WebhookConfig,\n    ) {\n        // re using the issuer state as auth session\n        const auth_session = body.issuer_state;\n        const presentation = `openid4vp://?${(await this.oid4vpService.createRequest(\"pid\", { session: auth_session, webhook }, tenantId)).uri}`;\n        const res = {\n            error: \"insufficient_authorization\",\n            auth_session,\n            presentation,\n            error_description:\n                \"Presentation of credential required before issuance\",\n        };\n        return res;\n    }\n\n    async authorizationChallengeEndpoint(\n        res: Response>,\n        body: AuthorizeQueries,\n        session: Session,\n    ) {\n        // auth session and issuer state have the same value\n        if (body.auth_session) {\n            /* const session = await this.sessionService.get(body.auth_session);\n            // if session is not found, we assume that the auth session is the\n            if (!session) {\n                throw new ConflictException(\n                    'auth_session not found or not provided in the request',\n                );\n            }\n */\n            //check if session has valid presentation, we assume for now\n            if (session.credentials) {\n                await this.sendAuthorizationCode(res, body.auth_session);\n                return;\n            } else {\n                //TODO: needs to be checked if this is the correct response\n                throw new ConflictException(\n                    \"Session does not have valid credentials for issuance\",\n                );\n            }\n        }\n\n        /* const session = await this.sessionService.get(body.issuer_state!);\n        if (!session) {\n            throw new Error('Credential offer not found');\n        } */\n        const issuanceId = session.issuanceId!;\n        const issuanceConfig =\n            await this.issuanceService.getIssuanceConfigurationById(\n                issuanceId,\n                session.tenantId,\n            );\n\n        // Use the new authentication configuration structure\n        const authConfig = issuanceConfig.authenticationConfig;\n\n        if (!authConfig) {\n            throw new Error(\n                \"No authentication configuration found for issuance config\",\n            );\n        }\n\n        switch (authConfig.method) {\n            case \"presentationDuringIssuance\": {\n                // OID4VP flow - credential presentation required\n                const webhook = issuanceConfig.claimsWebhook;\n                const response = await this.parseChallengeRequest(\n                    body,\n                    session.tenantId,\n                    webhook,\n                );\n                res.status(400).send(response);\n                break;\n            }\n            case \"auth\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            case \"none\":\n                await this.sendAuthorizationCode(res, body.issuer_state!);\n                break;\n            default:\n                throw new Error(\n                    `Unsupported authentication method: ${(authConfig as any).method}`,\n                );\n        }\n    }\n\n    private async sendAuthorizationCode(res: Response, issuer_state: string) {\n        const authorization_code = await this.setAuthCode(issuer_state);\n        res.send({\n            authorization_code,\n        });\n    }\n\n    async setAuthCode(issuer_state: string) {\n        const code = randomUUID();\n        await this.sessionService.add(issuer_state, {\n            authorization_code: code,\n        });\n        return code;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PolicyCredential.html":{"url":"classes/PolicyCredential.html","title":"class - PolicyCredential","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PolicyCredential\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                attestationBased\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                claims\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                credential_sets\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                credentials\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        claims\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ClaimsQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:62\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        credential_sets\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialSetQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CredentialQuery[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:68\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationAttachment.html":{"url":"classes/PresentationAttachment.html","title":"class - PresentationAttachment","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationAttachment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Attached attestations\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credential_ids\n                            \n                            \n                                    \n                                data\n                            \n                            \n                                    \n                                format\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credential_ids\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        data\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        format\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/PresentationConfig.html":{"url":"entities/PresentationConfig.html","title":"entity - PresentationConfig","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  PresentationConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a configuration for a Verifiable Presentation (VP) request.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                attached\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    \n                                    \n                                dcql_query\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                lifeTime\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                registrationCert\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        attached\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PresentationAttachment[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsArray()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:199\n                        \n                    \n\n            \n                \n                    Attestation that should be attached\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:183\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        dcql_query\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DCQL\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')@ValidateNested()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:161\n                        \n                    \n\n            \n                \n                    The DCQL query to be used for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})@IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:145\n                        \n                    \n\n            \n                \n                    Description of the presentation configuration.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:124\n                        \n                    \n\n            \n                \n                    Unique identifier for the VP request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        lifeTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsOptional()@Column('int', {default: 300})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:153\n                        \n                    \n\n            \n                \n                    Lifetime how long the presentation request is valid after creation, in seconds.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        registrationCert\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistrationCertificateRequest\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@ValidateNested()@Type(undefined)@Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:169\n                        \n                    \n\n            \n                \n                    The registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:137\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiHideProperty()@Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:131\n                        \n                    \n\n            \n                \n                    The tenant ID for which the VP request is made.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:189\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})@IsOptional()@Validate(WebhookConfig)@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:177\n                        \n                    \n\n            \n                \n                    Optional webhook URL to receive the response.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationConfigCreateDto.html":{"url":"classes/PresentationConfigCreateDto.html","title":"class - PresentationConfigCreateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationConfigCreateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/presentation-config-create.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            OmitType(PresentationConfig, [\n    \"tenantId\",\n    \"createdAt\",\n    \"updatedAt\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { PresentationConfig } from \"../entities/presentation-config.entity\";\n\nexport class PresentationConfigCreateDto extends OmitType(PresentationConfig, [\n    \"tenantId\",\n    \"createdAt\",\n    \"updatedAt\",\n] as const) {\n    // Define the properties for the presentation config create DTO\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationDuringIssuanceConfig.html":{"url":"classes/PresentationDuringIssuanceConfig.html","title":"class - PresentationDuringIssuanceConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationDuringIssuanceConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/issuance/dto/authentication-config.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for authentication method 'presentationDuringIssuance'\nUsed for OID4VP flow where a credential presentation request is sent\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/issuance/dto/authentication-config.dto.ts:41\n                        \n                    \n\n            \n                \n                    Link to the presentation configuration that is relevant for the issuance process\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsIn,\n    IsObject,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Configuration for authentication method 'auth'\n * Used for OID4VCI authorized code flow where the user will be redirected for authentication\n */\nexport class AuthenticationUrlConfig {\n    /**\n     * The URL used in the OID4VCI authorized code flow.\n     * This URL is where users will be redirected for authentication.\n     */\n    @IsString()\n    url: string;\n\n    /**\n     * Optional webhook configuration for authentication callbacks\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n}\n\n/**\n * Configuration for authentication method 'presentationDuringIssuance'\n * Used for OID4VP flow where a credential presentation request is sent\n */\nexport class PresentationDuringIssuanceConfig {\n    /**\n     * Link to the presentation configuration that is relevant for the issuance process\n     */\n    @IsString()\n    type: string;\n}\n\nexport class AuthenticationMethodPresentation\n    implements AuthenticationMethodInterface\n{\n    @IsString()\n    @IsIn([\"presentationDuringIssuance\"])\n    method: \"presentationDuringIssuance\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => PresentationDuringIssuanceConfig)\n    config: PresentationDuringIssuanceConfig;\n}\n\nexport class AuthenticationMethodAuth implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"auth\"])\n    method: \"auth\";\n    @IsObject()\n    @ValidateNested()\n    @Type(() => AuthenticationUrlConfig)\n    config: AuthenticationUrlConfig;\n}\n\nexport class AuthenticationMethodNone implements AuthenticationMethodInterface {\n    @IsString()\n    @IsIn([\"none\"])\n    method: \"none\";\n}\n\nexport interface AuthenticationMethodInterface {\n    method: \"none\" | \"auth\" | \"presentationDuringIssuance\";\n}\n\nexport enum AuthenticationMethod {\n    NONE = \"none\",\n    AUTH = \"auth\",\n    PRESENTATION_DURING_ISSUANCE = \"presentationDuringIssuance\",\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PresentationManagementController.html":{"url":"controllers/PresentationManagementController.html","title":"controller - PresentationManagementController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PresentationManagementController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                presentation-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                configuration\n                            \n                            \n                                    \n                                deleteConfiguration\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                getOffer\n                            \n                            \n                                    \n                                storePresentationConfig\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        configuration\n                        \n                    \n                \n            \n            \n                \n                        \n                    configuration(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:111\n                        \n                    \n\n\n            \n                \n                        Returns the presentation request configurations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteConfiguration\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteConfiguration(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:137\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation request configuration by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                            Async\n                        getOffer\n                        \n                    \n                \n            \n            \n                \n                        \n                    getOffer(res: Response, body: PresentationRequest, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiResponse({description: 'JSON response', status: 201, type: OfferResponse, content: undefined})@ApiProduces('application/json', 'image/png')@UseGuards(JwtAuthGuard)@ApiSecurity('oauth2')@ApiBody({type: PresentationRequest, examples: undefined})@Post('request')\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:79\n                        \n                    \n\n\n            \n                \n                        Create an presentation request that can be sent to the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                            PresentationRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \n                        \n                    storePresentationConfig(config: PresentationConfigCreateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.controller.ts:121\n                        \n                    \n\n\n            \n                \n                        Store a presentation request configuration. If it already exists, it will be updated.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                config\n                                            \n                                                            PresentationConfigCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    Res,\n    UseGuards,\n} from \"@nestjs/common\";\nimport {\n    ApiBody,\n    ApiProduces,\n    ApiResponse,\n    ApiSecurity,\n    ApiTags,\n} from \"@nestjs/swagger\";\nimport { Response } from \"express\";\nimport * as QRCode from \"qrcode\";\nimport { JwtAuthGuard } from \"../../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../../auth/token.decorator\";\nimport { OfferResponse } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport {\n    PresentationRequest,\n    ResponseType,\n} from \"../oid4vp/dto/presentation-request.dto\";\nimport { Oid4vpService } from \"../oid4vp/oid4vp.service\";\nimport { PresentationConfigCreateDto } from \"./dto/presentation-config-create.dto\";\nimport { PresentationsService } from \"./presentations.service\";\n\n@ApiTags(\"Presentation management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\", [\"api:read\", \"api:write\"])\n@Controller(\"presentation-management\")\nexport class PresentationManagementController {\n    constructor(\n        private readonly presentationsService: PresentationsService,\n        private readonly oid4vpService: Oid4vpService,\n    ) {}\n\n    /**\n     * Create an presentation request that can be sent to the user\n     * @param res\n     * @param body\n     */\n    @ApiResponse({\n        description: \"JSON response\",\n        status: 201,\n        //TODO: do not use type, otherwhise the response can not deal with both JSON and PNG.\n        type: OfferResponse,\n        content: {\n            \"application/json\": { schema: { type: \"object\" } },\n            \"image/png\": { schema: { type: \"string\", format: \"binary\" } },\n        },\n    })\n    @ApiProduces(\"application/json\", \"image/png\")\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity(\"oauth2\")\n    @ApiBody({\n        type: PresentationRequest,\n        examples: {\n            qrcode: {\n                summary: \"QR-Code Example\",\n                value: {\n                    response_type: ResponseType.QRCode,\n                    requestId: \"pid\",\n                },\n            },\n            uri: {\n                summary: \"URI\",\n                value: {\n                    response_type: ResponseType.URI,\n                    requestId: \"pid\",\n                },\n            },\n        },\n    })\n    @Post(\"request\")\n    async getOffer(\n        @Res() res: Response,\n        @Body() body: PresentationRequest,\n        @Token() user: TokenPayload,\n    ) {\n        const values = await this.oid4vpService.createRequest(\n            body.requestId,\n            {\n                webhook: body.webhook,\n            },\n            user.sub,\n        );\n        values.uri = `openid4vp://?${values.uri}`;\n        if (body.response_type === ResponseType.QRCode) {\n            // Generate QR code as a PNG buffer\n            const qrCodeBuffer = await QRCode.toBuffer(values.uri);\n\n            // Set the response content type to image/png\n            res.setHeader(\"Content-Type\", \"image/png\");\n\n            // Send the QR code image as the response\n            res.send(qrCodeBuffer);\n        } else {\n            res.send(values);\n        }\n    }\n\n    /**\n     * Returns the presentation request configurations.\n     * @returns\n     */\n    @Get()\n    configuration(@Token() user: TokenPayload) {\n        return this.presentationsService.getPresentationConfigs(user.sub);\n    }\n\n    /**\n     * Store a presentation request configuration. If it already exists, it will be updated.\n     * @param config\n     * @returns\n     */\n    @Post()\n    storePresentationConfig(\n        @Body() config: PresentationConfigCreateDto,\n        @Token() user: TokenPayload,\n    ) {\n        return this.presentationsService.storePresentationConfig(\n            user.sub,\n            config,\n        );\n    }\n\n    /**\n     * Deletes a presentation request configuration by its ID.\n     * @param id\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteConfiguration(@Param(\"id\") id: string, @Token() user: TokenPayload) {\n        return this.presentationsService.deletePresentationConfig(id, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PresentationRequest.html":{"url":"classes/PresentationRequest.html","title":"class - PresentationRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PresentationRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                DTO for the presentation request containing the response type and request ID.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                requestId\n                            \n                            \n                                    \n                                response_type\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                webhook\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:32\n                        \n                    \n\n            \n                \n                    Identifier of the presentation configuration\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        response_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ResponseType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(ResponseType)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:26\n                        \n                    \n\n            \n                \n                    The type of response expected from the presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        webhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/oid4vp/dto/presentation-request.dto.ts:40\n                        \n                    \n\n            \n                \n                    Webhook configuration to receive the response.\nIf not provided, the configured webhook from the configuration will be used.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEnum, IsObject, IsOptional, IsString } from \"class-validator\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * Enum for the type of response expected from the presentation request.\n */\nexport enum ResponseType {\n    /**\n     * Response type indicating a QR code will be returned.\n     */\n    QRCode = \"qrcode\",\n    /**\n     * Response type indicating a URI will be returned.\n     */\n    URI = \"uri\",\n}\n\n/**\n * DTO for the presentation request containing the response type and request ID.\n */\nexport class PresentationRequest {\n    /**\n     * The type of response expected from the presentation request.\n     */\n    @IsEnum(ResponseType)\n    response_type: ResponseType;\n\n    /**\n     * Identifier of the presentation configuration\n     */\n    @IsString()\n    requestId: string;\n\n    /**\n     * Webhook configuration to receive the response.\n     * If not provided, the configured webhook from the configuration will be used.\n     */\n    @IsObject()\n    @IsOptional()\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PresentationRequestOptions.html":{"url":"interfaces/PresentationRequestOptions.html","title":"interface - PresentationRequestOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PresentationRequestOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                PresentationRequestOptions DTO\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            session\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            webhook\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional session identifier for tracking the request.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        webhook\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        webhook:         WebhookConfig\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         WebhookConfig\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional webhook configuration to receive the response.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\n\n/**\n * PresentationRequestOptions DTO\n */\nexport interface PresentationRequestOptions {\n    /**\n     * Optional session identifier for tracking the request.\n     */\n    session?: string;\n    /**\n     * Optional webhook configuration to receive the response.\n     */\n    webhook?: WebhookConfig;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PresentationsModule.html":{"url":"modules/PresentationsModule.html","title":"module - PresentationsModule","body":"\n                   \n\n\n\n\n    Modules\n    PresentationsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/presentations/presentations.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PresentationManagementController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ResolverModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PresentationsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { forwardRef, Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Oid4vpModule } from \"../oid4vp/oid4vp.module\";\nimport { ResolverModule } from \"../resolver/resolver.module\";\nimport { PresentationConfig } from \"./entities/presentation-config.entity\";\nimport { PresentationManagementController } from \"./presentations.controller\";\nimport { PresentationsService } from \"./presentations.service\";\n\n@Module({\n    imports: [\n        ResolverModule,\n        HttpModule,\n        forwardRef(() => Oid4vpModule),\n        TypeOrmModule.forFeature([PresentationConfig]),\n    ],\n    controllers: [PresentationManagementController],\n    providers: [PresentationsService],\n    exports: [PresentationsService],\n})\nexport class PresentationsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PresentationsService.html":{"url":"injectables/PresentationsService.html","title":"injectable - PresentationsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PresentationsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/presentations.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                kbVerifier\n                            \n                            \n                                sdjwtInstance\n                            \n                            \n                                    Private\n                                statusListFetcher\n                            \n                            \n                                verifier\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deletePresentationConfig\n                            \n                            \n                                getPresentationConfig\n                            \n                            \n                                getPresentationConfigs\n                            \n                            \n                                    Private\n                                    Async\n                                import\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                parseResponse\n                            \n                            \n                                storePresentationConfig\n                            \n                            \n                                    Public\n                                storeRCID\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, resolverService: ResolverService, vpRequestRepository: Repository, configService: ConfigService, logger: PinoLogger)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/presentations/presentations.service.ts:33\n                            \n                        \n\n                \n                    \n                            Constructor for the PresentationsService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of HttpService for making HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        resolverService\n                                                  \n                                                        \n                                                                        ResolverService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ResolverService for resolving DID documents.\n\n\n                                                        \n                                                \n                                                \n                                                        vpRequestRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nRepository for managing VP request configurations.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deletePresentationConfig\n                        \n                    \n                \n            \n            \n                \ndeletePresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Deletes a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to delete.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to delete the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves when the deletion is complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfig\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfig(id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:186\n                        \n                    \n\n\n            \n                \n                        Retrieves a presentation configuration by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve the configuration.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to the requested PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPresentationConfigs\n                        \n                    \n                \n            \n            \n                \ngetPresentationConfigs(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:147\n                        \n                    \n\n\n            \n                \n                        Retrieves all presentation configurations for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to retrieve configurations.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A promise that resolves to an array of PresentationConfig entities.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        import\n                        \n                    \n                \n            \n            \n                \n                        \n                    import()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:53\n                        \n                    \n\n\n            \n                \n                        Imports presentation configurations from a predefined directory structure.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseResponse\n                        \n                    \n                \n            \n            \n                \nparseResponse(res: AuthResponse, requiredFields: string[], keyBindingNonce: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:275\n                        \n                    \n\n\n            \n                \n                        Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                res\n                                            \n                                                            AuthResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requiredFields\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                keyBindingNonce\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        storePresentationConfig\n                        \n                    \n                \n            \n            \n                \nstorePresentationConfig(tenantId: string, vprequest: PresentationConfigCreateDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:160\n                        \n                    \n\n\n            \n                \n                        Stores a new presentation configuration.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the configuration.\n\n\n                                            \n                                        \n                                        \n                                                vprequest\n                                            \n                                                            PresentationConfigCreateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe PresentationConfig entity to store.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves to the stored PresentationConfig entity.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        storeRCID\n                        \n                    \n                \n            \n            \n                \n                        \n                    storeRCID(registrationCertId: string, id: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/presentations/presentations.service.ts:207\n                        \n                    \n\n\n            \n                \n                        Stores the new registration certificate.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                registrationCertId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the registration certificate to store.\n\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the presentation configuration to update.\n\n\n                                            \n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the tenant for which to store the registration certificate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        kbVerifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         KbVerifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:258\n                        \n                    \n\n            \n                \n                    Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                            \n                                            \n                                                    signature\n                                            \n                                            \n                                                    payload\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sdjwtInstance\n                        \n                    \n                \n            \n                \n                    \n                        Type :     SDJwtVcInstance\n\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:33\n                        \n                    \n\n            \n                \n                    Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        statusListFetcher\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:243\n                        \n                    \n\n            \n                \n                    Fetch the status list from the uri.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                        \n                                    \n                                    \n                                            \n                                                    uri\n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verifier\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Verifier\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/presentations.service.ts:220\n                        \n                    \n\n            \n                \n                    Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n\n                \n            \n\n                \n                    \n                        \n                                Parameters :\n                                \n                                    \n                                        \n                                            Name\n                                                Description\n                                        \n                                    \n                                    \n                                            \n                                                    data\n                                                    \n                                                            \nThe data part of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                            \n                                                    signature\n                                                    \n                                                            \nThe signature of the SD-JWT-VC.\n\n\n                                                    \n                                            \n                                    \n                                \n                        \n                    \n                \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport {\n    ConflictException,\n    Injectable,\n    OnApplicationBootstrap,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { digest, ES256 } from \"@sd-jwt/crypto-nodejs\";\nimport { SDJwtVcInstance } from \"@sd-jwt/sd-jwt-vc\";\nimport { KbVerifier, Verifier } from \"@sd-jwt/types\";\nimport { plainToClass } from \"class-transformer\";\nimport { validate } from \"class-validator\";\nimport { readdirSync, readFileSync } from \"fs\";\nimport { importJWK, JWK, JWTPayload, jwtVerify } from \"jose\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { join } from \"path\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { ResolverService } from \"../resolver/resolver.service\";\nimport { AuthResponse } from \"./dto/auth-response.dto\";\nimport { PresentationConfigCreateDto } from \"./dto/presentation-config-create.dto\";\nimport { PresentationConfig } from \"./entities/presentation-config.entity\";\n\n/**\n * Service for managing Verifiable Presentations (VPs) and handling SD-JWT-VCs.\n */\n@Injectable()\nexport class PresentationsService implements OnApplicationBootstrap {\n    /**\n     * Instance of SDJwtVcInstance for handling SD-JWT-VCs.\n     */\n    sdjwtInstance: SDJwtVcInstance;\n\n    /**\n     * Constructor for the PresentationsService.\n     * @param httpService - Instance of HttpService for making HTTP requests.\n     * @param resolverService - Instance of ResolverService for resolving DID documents.\n     * @param vpRequestRepository - Repository for managing VP request configurations.\n     */\n    constructor(\n        private httpService: HttpService,\n        private resolverService: ResolverService,\n        @InjectRepository(PresentationConfig)\n        private vpRequestRepository: Repository,\n        private configService: ConfigService,\n        private logger: PinoLogger,\n    ) {}\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    async onApplicationBootstrap() {\n        this.sdjwtInstance = new SDJwtVcInstance({\n            hasher: digest,\n            verifier: this.verifier.bind(this),\n            kbVerifier: this.kbVerifier.bind(this),\n            statusListFetcher: this.statusListFetcher.bind(this),\n        });\n        await this.import();\n    }\n\n    /**\n     * Imports presentation configurations from a predefined directory structure.\n     */\n    private async import() {\n        const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n        const subfolder = \"presentation\";\n        const force = this.configService.get(\"CONFIG_IMPORT_FORCE\");\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const tenantFolders = readdirSync(configPath, {\n                withFileTypes: true,\n            }).filter((tenant) => tenant.isDirectory());\n            for (const tenant of tenantFolders) {\n                let counter = 0;\n                //iterate over all elements in the folder and import them\n                const path = join(configPath, tenant.name, subfolder);\n                const files = readdirSync(path);\n                for (const file of files) {\n                    const payload = JSON.parse(\n                        readFileSync(join(path, file), \"utf8\"),\n                    );\n\n                    const id = file.replace(\".json\", \"\");\n                    payload.id = id;\n                    const presentationExists = await this.getPresentationConfig(\n                        id,\n                        tenant.name,\n                    ).catch(() => false);\n                    if (presentationExists && !force) {\n                        continue; // Skip if config already exists and force is not set\n                    } else if (presentationExists && force) {\n                        //delete old element so removed elements are not present\n                        await this.vpRequestRepository.delete({\n                            id,\n                            tenantId: tenant.name,\n                        });\n                    }\n\n                    // Validate the payload against PresentationConfig\n                    const config = plainToClass(\n                        PresentationConfigCreateDto,\n                        payload,\n                    );\n                    const validationErrors = await validate(config, {\n                        whitelist: true,\n                        forbidUnknownValues: false, // avoid false positives on plain objects\n                        forbidNonWhitelisted: false,\n                        stopAtFirstError: false,\n                    });\n\n                    if (validationErrors.length > 0) {\n                        this.logger.error(\n                            {\n                                event: \"ValidationError\",\n                                file,\n                                tenant: tenant.name,\n                                errors: validationErrors.map((error) => ({\n                                    property: error.property,\n                                    constraints: error.constraints,\n                                    value: error.value,\n                                })),\n                            },\n                            `Validation failed for presentation config ${file} in tenant ${tenant.name}`,\n                        );\n                        continue; // Skip this invalid config\n                    }\n\n                    await this.storePresentationConfig(tenant.name, config);\n                    counter++;\n                }\n                this.logger.info(\n                    {\n                        event: \"Import\",\n                    },\n                    `${counter} presentation configs imported for ${tenant.name}`,\n                );\n            }\n        }\n    }\n\n    /**\n     * Retrieves all presentation configurations for a given tenant.\n     * @param tenantId - The ID of the tenant for which to retrieve configurations.\n     * @returns A promise that resolves to an array of PresentationConfig entities.\n     */\n    getPresentationConfigs(tenantId: string): Promise {\n        return this.vpRequestRepository.find({\n            where: { tenantId },\n            order: { createdAt: \"DESC\" },\n        });\n    }\n\n    /**\n     * Stores a new presentation configuration.\n     * @param tenantId - The ID of the tenant for which to store the configuration.\n     * @param vprequest - The PresentationConfig entity to store.\n     * @returns A promise that resolves to the stored PresentationConfig entity.\n     */\n    storePresentationConfig(\n        tenantId: string,\n        vprequest: PresentationConfigCreateDto,\n    ) {\n        return this.vpRequestRepository.save({\n            ...vprequest,\n            tenantId,\n        });\n    }\n\n    /**\n     * Deletes a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to delete.\n     * @param tenantId - The ID of the tenant for which to delete the configuration.\n     * @returns A promise that resolves when the deletion is complete.\n     */\n    deletePresentationConfig(id: string, tenantId: string) {\n        return this.vpRequestRepository.delete({ id, tenantId });\n    }\n\n    /**\n     * Retrieves a presentation configuration by its ID and tenant ID.\n     * @param id - The ID of the presentation configuration to retrieve.\n     * @param tenantId - The ID of the tenant for which to retrieve the configuration.\n     * @returns A promise that resolves to the requested PresentationConfig entity.\n     */\n    getPresentationConfig(\n        id: string,\n        tenantId: string,\n    ): Promise {\n        return this.vpRequestRepository\n            .findOneByOrFail({\n                id,\n                tenantId,\n            })\n            .catch(() => {\n                throw new ConflictException(`Request ID ${id} not found`);\n            });\n    }\n\n    /**\n     * Stores the new registration certificate.\n     * @param registrationCertId - The ID of the registration certificate to store.\n     * @param id - The ID of the presentation configuration to update.\n     * @param tenantId - The ID of the tenant for which to store the registration certificate.\n     * @returns\n     */\n    public storeRCID(registrationCertId: string, id: string, tenantId: string) {\n        return this.vpRequestRepository.update(\n            { id, tenantId },\n            { registrationCert: { id: registrationCertId } },\n        );\n    }\n\n    /**\n     * Verifier for SD-JWT-VCs. It will verify the signature of the SD-JWT-VC and return true if it is valid.\n     * @param data - The data part of the SD-JWT-VC.\n     * @param signature - The signature of the SD-JWT-VC.\n     * @returns\n     */\n    verifier: Verifier = async (data, signature) => {\n        const instance = new SDJwtVcInstance({\n            hasher: digest,\n        });\n        const decodedVC = await instance.decode(`${data}.${signature}`);\n        const payload = decodedVC.jwt?.payload as JWTPayload;\n        const header = decodedVC.jwt?.header as JWK;\n        const publicKey = await this.resolverService.resolvePublicKey(\n            payload,\n            header,\n        );\n        const verify = await ES256.getVerifier(publicKey);\n        return verify(data, signature).catch((err) => {\n            console.log(err);\n            return false;\n        });\n    };\n\n    /**\n     * Fetch the status list from the uri.\n     * @param uri\n     * @returns\n     */\n    private statusListFetcher: (uri: string) => Promise = (\n        uri: string,\n    ) => {\n        return firstValueFrom(this.httpService.get(uri)).then(\n            (res) => res.data,\n        );\n    };\n\n    /**\n     * Verifier for keybindings. It will verify the signature of the keybinding and return true if it is valid.\n     * @param data\n     * @param signature\n     * @param payload\n     * @returns\n     */\n    private kbVerifier: KbVerifier = async (data, signature, payload) => {\n        if (!payload.cnf) {\n            throw new Error(\"No cnf found in the payload\");\n        }\n        const key = await importJWK(payload.cnf.jwk as JWK, \"ES256\");\n        return jwtVerify(`${data}.${signature}`, key).then(\n            () => true,\n            () => false,\n        );\n    };\n\n    /**\n     * Parse the response from the wallet. It will verify the SD-JWT-VCs in the vp_token and return the parsed attestations.\n     * @param res\n     * @param requiredFields\n     * @returns\n     */\n    parseResponse(\n        res: AuthResponse,\n        requiredFields: string[],\n        keyBindingNonce: string,\n    ) {\n        const attestations = Object.keys(res.vp_token);\n        const att = attestations.map((att) =>\n            this.sdjwtInstance\n                .verify(res.vp_token[att], {\n                    requiredClaimKeys: requiredFields,\n                    keyBindingNonce,\n                })\n                .then(\n                    (result) => {\n                        return {\n                            id: att,\n                            values: {\n                                ...result.payload,\n                                cnf: undefined, // remove cnf for simplicity\n                                status: undefined, // remove status for simplicity\n                            },\n                        };\n                    },\n                    /* (err) => {\n                        throw new Error\n                        //(console.log(err);\n                        return {\n                            id: att,\n                            error: err.message,\n                        };\n                    }, */\n                ),\n        );\n        return Promise.all(att);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/RegistrarEntity.html":{"url":"entities/RegistrarEntity.html","title":"entity - RegistrarEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  RegistrarEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/entities/registrar.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                accessCertificateId\n                            \n                            \n                                    \n                                relyingPartyId\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        accessCertificateId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        relyingPartyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:13\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/registrar/entities/registrar.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../auth/entitites/tenant.entity\";\n\n@Entity()\nexport class RegistrarEntity {\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column(\"varchar\")\n    relyingPartyId: string;\n\n    @Column(\"varchar\")\n    accessCertificateId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegistrarModule.html":{"url":"modules/RegistrarModule.html","title":"module - RegistrarModule","body":"\n                   \n\n\n\n\n    Modules\n    RegistrarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_RegistrarModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/registrar/registrar.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            RegistrarModule is responsible for managing the registrar service.\nIt provides the RegistrarService and imports necessary modules.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            PresentationsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RegistrarService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport * as Joi from \"joi\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { PresentationsModule } from \"../verifier/presentations/presentations.module\";\nimport { RegistrarEntity } from \"./entities/registrar.entity\";\nimport { RegistrarService } from \"./registrar.service\";\n\n/**\n * Validation schema for the registrar module.\n * Defines the required environment variables and their types.\n */\nexport const REGISTRAR_VALIDATION_SCHEMA = {\n    REGISTRAR_URL: Joi.string(),\n    REGISTRAR_OIDC_URL: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n};\n\n/**\n * RegistrarModule is responsible for managing the registrar service.\n * It provides the RegistrarService and imports necessary modules.\n */\n@Module({\n    imports: [\n        CryptoModule,\n        PresentationsModule,\n        TypeOrmModule.forFeature([RegistrarEntity]),\n    ],\n    providers: [RegistrarService],\n    exports: [RegistrarService],\n})\nexport class RegistrarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RegistrarService.html":{"url":"injectables/RegistrarService.html","title":"injectable - RegistrarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RegistrarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/registrar/registrar.service.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrarService is responsible for managing the interaction with the registrar,\nincluding adding relying parties, access certificates, and registration certificates.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                accessToken\n                            \n                            \n                                    Private\n                                client\n                            \n                            \n                                    Private\n                                oauth2Client\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                addAccessCertificate\n                            \n                            \n                                    Async\n                                addRegistrationCertificate\n                            \n                            \n                                addRp\n                            \n                            \n                                    Private\n                                getExistingRp\n                            \n                            \n                                isEnabled\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                onModuleInit\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Async\n                                refreshAccessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, presentationsService: PresentationsService, registrarRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/registrar/registrar.service.ts:40\n                            \n                        \n\n                \n                    \n                            Constructor for the RegistrarService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of ConfigService for accessing configuration values.\n\n\n                                                        \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of CryptoService for cryptographic operations.\n\n\n                                                        \n                                                \n                                                \n                                                        presentationsService\n                                                  \n                                                        \n                                                                        PresentationsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of PresentationsService for handling presentations.\n\n\n                                                        \n                                                \n                                                \n                                                        registrarRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        addAccessCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addAccessCertificate(tenantId: string, relyingPartyId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:198\n                        \n                    \n\n\n            \n                \n                        Add a new access certificate to the registrar.\nThis is only needed once, when the access certificate is created.\nIf the access certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                relyingPartyId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addRegistrationCertificate\n                        \n                    \n                \n            \n            \n                \n                        \n                    addRegistrationCertificate(req: RegistrationCertificateRequest, dcql_query: any, requestId: string, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:240\n                        \n                    \n\n\n            \n                \n                        Add a new registration certificate to the registrar.\nThis is only needed once, when the registration certificate is created.\nIf the registration certificate already exists, it will be returned.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RegistrationCertificateRequest\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dcql_query\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                requestId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRp\n                        \n                    \n                \n            \n            \n                \naddRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:158\n                        \n                    \n\n\n            \n                \n                        Adds a new relying party to the registrar.\nThis is only needed once, when the relying party is created.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getExistingRp\n                        \n                    \n                \n            \n            \n                \n                        \n                    getExistingRp(name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:181\n                        \n                    \n\n\n            \n                \n                        Stores the existing relying party ID based on the name.\nThis is used when the relying party already exists in the registrar.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe name of the relying party.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The ID of the existing relying party.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEnabled\n                        \n                    \n                \n            \n            \n                \nisEnabled()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Checks if the registrar service is enabled based on the configuration.\n\n\n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if the registrar service is enabled, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:100\n                        \n                    \n\n\n            \n                \n                        This function is called when the application starts.\nIt will refresh the access token for the registrar.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \nonModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Initializes the OAuth2 client and registrar client with the necessary configurations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:133\n                        \n                    \n\n\n            \n                \n                        Deletes all registrar entries for a specific tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:111\n                        \n                    \n\n\n            \n                \n                        This function is called when a tenant is initialized.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        refreshAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    refreshAccessToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/registrar/registrar.service.ts:141\n                        \n                    \n\n\n            \n                \n                        Refreshes the access token for the registrar using client credentials.\nThis method is called periodically to ensure the access token is valid.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:40\n                        \n                    \n\n            \n                \n                    Access token for authenticating requests to the registrar.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        client\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:36\n                        \n                    \n\n            \n                \n                    Client for interacting with the registrar API.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        oauth2Client\n                        \n                    \n                \n            \n                \n                    \n                        Type :     OAuth2Client\n\n                    \n                \n                    \n                        \n                                Defined in src/registrar/registrar.service.ts:32\n                        \n                    \n\n            \n                \n                    OAuth2 client for interacting with the OIDC provider.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { OAuth2Client } from \"@badgateway/oauth2-client\";\nimport {\n    Injectable,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { RegistrationCertificateRequest } from \"../verifier/presentations/dto/vp-request.dto\";\nimport { PresentationsService } from \"../verifier/presentations/presentations.service\";\nimport { RegistrarEntity } from \"./entities/registrar.entity\";\nimport {\n    accessCertificateControllerRegister,\n    registrationCertificateControllerAll,\n    registrationCertificateControllerRegister,\n    relyingPartyControllerFindAll,\n    relyingPartyControllerRegister,\n} from \"./generated\";\nimport { client } from \"./generated/client.gen\";\n\n/**\n * RegistrarService is responsible for managing the interaction with the registrar,\n * including adding relying parties, access certificates, and registration certificates.\n */\n@Injectable()\nexport class RegistrarService implements OnApplicationBootstrap, OnModuleInit {\n    /**\n     * OAuth2 client for interacting with the OIDC provider.\n     */\n    private oauth2Client: OAuth2Client;\n    /**\n     * Client for interacting with the registrar API.\n     */\n    private client: typeof client;\n    /**\n     * Access token for authenticating requests to the registrar.\n     */\n    private accessToken: string;\n\n    /**\n     * Constructor for the RegistrarService.\n     * @param configService - Instance of ConfigService for accessing configuration values.\n     * @param cryptoService - Instance of CryptoService for cryptographic operations.\n     * @param presentationsService - Instance of PresentationsService for handling presentations.\n     */\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private presentationsService: PresentationsService,\n        @InjectRepository(RegistrarEntity)\n        private registrarRepository: Repository,\n    ) {}\n\n    /**\n     * Initializes the OAuth2 client and registrar client with the necessary configurations.\n     */\n    onModuleInit() {\n        //when not set, we will not use the registrar\n        if (!this.isEnabled()) {\n            return;\n        }\n\n        const oidcIssuerUrl =\n            this.configService.getOrThrow(\"REGISTRAR_OIDC_URL\");\n        const clientId = this.configService.getOrThrow(\n            \"REGISTRAR_OIDC_CLIENT_ID\",\n        );\n        const clientSecret = this.configService.getOrThrow(\n            \"REGISTRAR_OIDC_CLIENT_SECRET\",\n        );\n\n        this.oauth2Client = new OAuth2Client({\n            server: `${oidcIssuerUrl}/protocol/openid-connect/token`,\n            clientId,\n            clientSecret,\n            discoveryEndpoint: `${oidcIssuerUrl}/.well-known/openid-configuration`,\n        });\n\n        this.client = client;\n        this.client.setConfig({\n            baseUrl: this.configService.getOrThrow(\"REGISTRAR_URL\"),\n            auth: () => this.accessToken,\n        });\n    }\n\n    /**\n     * Checks if the registrar service is enabled based on the configuration.\n     * @returns True if the registrar service is enabled, false otherwise.\n     */\n    isEnabled() {\n        return !!this.configService.get(\"REGISTRAR_URL\");\n    }\n\n    /**\n     * This function is called when the application starts.\n     * It will refresh the access token for the registrar.\n     */\n    async onApplicationBootstrap() {\n        if (!this.configService.get(\"REGISTRAR_URL\")) {\n            return;\n        }\n        await this.refreshAccessToken();\n    }\n\n    /**\n     * This function is called when a tenant is initialized.\n     * @param tenantId\n     */\n    async onTenantInit(tenantId: string) {\n        if (!this.isEnabled()) {\n            return;\n        }\n        //TODO: pass name by call\n        const name = this.configService.getOrThrow(\"RP_NAME\");\n        const relyingPartyId = await this.addRp(name);\n        const accessCertificateId = await this.addAccessCertificate(\n            tenantId,\n            relyingPartyId,\n        );\n        await this.registrarRepository.save({\n            tenantId,\n            relyingPartyId,\n            accessCertificateId,\n        });\n    }\n\n    /**\n     * Deletes all registrar entries for a specific tenant.\n     * @param tenantId\n     */\n    async onTenantDelete(tenantId: string) {\n        await this.registrarRepository.delete({ tenantId });\n    }\n\n    /**\n     * Refreshes the access token for the registrar using client credentials.\n     * This method is called periodically to ensure the access token is valid.\n     */\n    async refreshAccessToken() {\n        await this.oauth2Client.clientCredentials().then((token) => {\n            this.accessToken = token.accessToken;\n            const date = new Date();\n            const expirationDate = new Date(token.expiresAt as number);\n            setTimeout(\n                // eslint-disable-next-line @typescript-eslint/no-misused-promises\n                () => this.refreshAccessToken(),\n                expirationDate.getTime() - date.getTime() - 1000,\n            );\n        });\n    }\n\n    /**\n     * Adds a new relying party to the registrar.\n     * This is only needed once, when the relying party is created.\n     */\n    addRp(name: string): Promise {\n        return relyingPartyControllerRegister({\n            client: this.client,\n            body: {\n                name,\n            },\n        }).then(async (response) => {\n            let rpId: string;\n            if (response.error) {\n                rpId = await this.getExistingRp(name);\n            } else {\n                rpId = response.data![\"id\"];\n            }\n            return rpId;\n        });\n    }\n\n    /**\n     * Stores the existing relying party ID based on the name.\n     * This is used when the relying party already exists in the registrar.\n     * @param name - The name of the relying party.\n     * @returns The ID of the existing relying party.\n     */\n    private getExistingRp(name: string) {\n        return relyingPartyControllerFindAll({\n            client: this.client,\n            query: {\n                name,\n            },\n        }).then((response) => {\n            return response.data!.find((item) => item.name === name)?.id!;\n        });\n    }\n\n    /**\n     * Add a new access certificate to the registrar.\n     * This is only needed once, when the access certificate is created.\n     * If the access certificate already exists, it will be returned.\n     * @returns\n     */\n    private async addAccessCertificate(\n        tenantId: string,\n        relyingPartyId: string,\n    ): Promise {\n        const keyId = await this.cryptoService.keyService.getKid(tenantId);\n        const host = this.configService\n            .getOrThrow(\"PUBLIC_URL\")\n            .replace(\"https://\", \"\");\n        return accessCertificateControllerRegister({\n            client: this.client,\n            body: {\n                publicKey: await this.cryptoService.keyService.getPublicKey(\n                    \"pem\",\n                    tenantId,\n                    keyId,\n                ),\n                dns: [host],\n            },\n            path: {\n                rp: relyingPartyId,\n            },\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\"Error adding access certificate:\", res.error);\n                throw new Error(\"Error adding access certificate\");\n            }\n            //store the cert\n            await this.cryptoService.storeAccessCertificate(\n                res.data![\"crt\"],\n                tenantId,\n                keyId,\n            );\n            return res.data![\"id\"];\n        });\n    }\n\n    /**\n     * Add a new registration certificate to the registrar.\n     * This is only needed once, when the registration certificate is created.\n     * If the registration certificate already exists, it will be returned.\n     * @returns\n     */\n    async addRegistrationCertificate(\n        req: RegistrationCertificateRequest,\n        //TODO: check if the dcql_query is covered by the registration certificate. If not, we need to throw an error since we do not know the new purpose for it.\n        dcql_query: any,\n        requestId: string,\n        tenantId: string,\n    ) {\n        const entry = await this.registrarRepository.findOneByOrFail({\n            tenantId,\n        });\n\n        //TODO: need to check if the access certificate is bound to the access certificate with the subject. Also that the requested fields are matching.\n\n        const certs =\n            (await registrationCertificateControllerAll({\n                client: this.client,\n                path: {\n                    rp: entry.relyingPartyId,\n                },\n            }).then((res) =>\n                res.data?.filter(\n                    (cert) =>\n                        cert.revoked == null && cert.id === (req.id as string),\n                ),\n            )) || [];\n\n        if (certs?.length > 0) {\n            return certs[0].jwt;\n        }\n\n        return registrationCertificateControllerRegister({\n            client: this.client,\n            path: {\n                rp: entry.relyingPartyId,\n            },\n            body: req.body,\n        }).then(async (res) => {\n            if (res.error) {\n                console.error(\n                    \"Error adding registration certificate:\",\n                    res.error,\n                );\n                throw new Error(\"Error adding registration certificate\");\n            }\n\n            //TODO: write the ID to the config so its easier to use it. Easier than writing the comparison algorithm (any maybe someone wants to use a different one)\n            await this.presentationsService.storeRCID(\n                res.data![\"id\"],\n                requestId,\n                tenantId,\n            );\n            return res.data![\"jwt\"];\n        });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistrationCertificateRequest.html":{"url":"classes/RegistrationCertificateRequest.html","title":"class - RegistrationCertificateRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistrationCertificateRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/dto/vp-request.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                RegistrationCertificateRequest DTO\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                body\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        body\n                        \n                    \n                \n            \n                \n                    \n                        Type :     RegistrationCertificateCreation\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:18\n                        \n                    \n\n            \n                \n                    The body of the registration certificate request containing the necessary details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/dto/vp-request.dto.ts:13\n                        \n                    \n\n            \n                \n                    Identifier of the registration certificate that got issued.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsObject, IsOptional, IsString } from \"class-validator\";\nimport { RegistrationCertificateCreation } from \"../../../registrar/generated\";\n\n/**\n * RegistrationCertificateRequest DTO\n */\nexport class RegistrationCertificateRequest {\n    /**\n     * Identifier of the registration certificate that got issued.\n     */\n    @IsOptional()\n    @IsString()\n    id?: string;\n    /**\n     * The body of the registration certificate request containing the necessary details.\n     */\n    @IsObject()\n    body: RegistrationCertificateCreation;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ResolverModule.html":{"url":"modules/ResolverModule.html","title":"module - ResolverModule","body":"\n                   \n\n\n\n\n    Modules\n    ResolverModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\n\nResolverService \n\nResolverService \n\n\n\nResolverModule\n\nResolverModule\n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/resolver/resolver.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ResolverService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { ResolverService } from \"./resolver.service\";\n\n@Module({\n    imports: [HttpModule],\n    providers: [ResolverService],\n    exports: [ResolverService],\n})\nexport class ResolverModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResolverService.html":{"url":"injectables/ResolverService.html","title":"injectable - ResolverService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResolverService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/resolver/resolver.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for resolving public keys from JWT payloads and headers.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                resolvePublicKey\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService)\n                    \n                \n                        \n                            \n                                Defined in src/verifier/resolver/resolver.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        resolvePublicKey\n                        \n                    \n                \n            \n            \n                \n                        \n                    resolvePublicKey(payload: JWTPayload, header: JWK)\n                \n            \n\n\n                    \n                        \n                            Defined in src/verifier/resolver/resolver.service.ts:21\n                        \n                    \n\n\n            \n                \n                        Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                        JWTPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                header\n                                            \n                                                        JWK\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { X509Certificate } from \"node:crypto\";\nimport { HttpService } from \"@nestjs/axios\";\nimport { ConflictException, Injectable } from \"@nestjs/common\";\nimport { JWK, JWTPayload } from \"jose\";\nimport { firstValueFrom } from \"rxjs\";\nimport { IssuerMetadata } from \"./dto/issuer-metadata.dto\";\n\n/**\n * Service for resolving public keys from JWT payloads and headers.\n */\n@Injectable()\nexport class ResolverService {\n    constructor(private httpService: HttpService) {}\n\n    /**\n     * Resolve the public key from the issuer, the function will first check for the x5c header, then for the did document and finally for the issuer metadata.\n     * @param payload\n     * @param header\n     * @returns\n     */\n    async resolvePublicKey(payload: JWTPayload, header: JWK): Promise {\n        if (!payload.iss) {\n            throw new Error(\"Issuer not found\");\n        }\n\n        if (header.x5c) {\n            //TODO: validate the certificate and the chain of trust!\n            const certs = header.x5c.map(\n                (cert) => new X509Certificate(Buffer.from(cert, \"base64\")),\n            );\n            const cert = certs[0];\n            if (!cert.subjectAltName?.includes(new URL(payload.iss).hostname)) {\n                throw new Error(\"Subject and issuer do not match\");\n            }\n            return cert.publicKey.export({ format: \"jwk\" }) as JWK;\n        }\n        //checl if the key is in the header as jwk\n        if (header[\"jwk\"]) {\n            return header[\"jwk\"] as JWK;\n        }\n\n        const response = await firstValueFrom(\n            this.httpService.get(\n                `${payload.iss}/.well-known/jwt-vc-issuer`,\n            ),\n        ).then(\n            (r) => r.data,\n            () => {\n                throw new ConflictException(\"Issuer not reachable\");\n            },\n        );\n        const key = response.jwks.keys.find((key) => key.kid === header.kid);\n        if (!key) {\n            throw new Error(\"Key not found\");\n        }\n        return key;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RootOfTrustPolicy.html":{"url":"classes/RootOfTrustPolicy.html","title":"class - RootOfTrustPolicy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RootOfTrustPolicy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials/entities/policies.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                rootOfTrust\n\n            \n\n            \n                Extends\n            \n            \n                            EmbeddedDisclosurePolicy\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                policy\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        policy\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['rootOfTrust'])\n                        \n                    \n                \n                        \n                            \n                                Inherited from         EmbeddedDisclosurePolicy\n\n                            \n                        \n                    \n                        \n                                Defined in         EmbeddedDisclosurePolicy:42\n\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsDefined()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials/entities/policies.dto.ts:47\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsDefined,\n    IsIn,\n    IsOptional,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    ClaimsQuery,\n    CredentialQuery,\n    CredentialSetQuery,\n} from \"../../../verifier/presentations/entities/presentation-config.entity\";\n\nexport type PolicyType =\n    | \"none\"\n    | \"allowList\"\n    | \"rootOfTrust\"\n    | \"attestationBased\";\n\nexport class EmbeddedDisclosurePolicy {\n    @IsString()\n    policy!: string;\n}\n\n/** allowList */\nexport class AllowListPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"allowList\"])\n    declare policy: \"allowList\";\n\n    @IsDefined()\n    @IsString({ each: true })\n    values!: string[];\n}\n\n/** rootOfTrust */\nexport class RootOfTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"rootOfTrust\"])\n    declare policy: \"rootOfTrust\";\n\n    // adapt as needed if you want an array instead\n    @IsDefined()\n    @IsString()\n    values!: string;\n}\n\n/** none */\nexport class NoneTrustPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"none\"])\n    declare policy: \"none\";\n}\n/** attestationBased */\nexport class PolicyCredential {\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => ClaimsQuery)\n    claims?: ClaimsQuery[];\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials!: CredentialQuery[];\n\n    @IsOptional()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_sets?: CredentialSetQuery[];\n}\n\nexport class AttestationBasedPolicy extends EmbeddedDisclosurePolicy {\n    @IsString()\n    @IsIn([\"attestationBased\"])\n    declare policy: \"attestationBased\";\n\n    @IsDefined()\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => PolicyCredential)\n    values!: PolicyCredential[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/S3FileStorage.html":{"url":"classes/S3FileStorage.html","title":"class - S3FileStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  S3FileStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/adapters/s3.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            FileStorage\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                exists\n                            \n                            \n                                getSignedUrl\n                            \n                            \n                                    Async\n                                getStream\n                            \n                            \n                                    Async\n                                put\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(s3: S3Client, bucket: string, publicBaseUrl?: string)\n                    \n                \n                        \n                            \n                                Defined in src/storage/adapters/s3.storage.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        s3\n                                                  \n                                                        \n                                                                    S3Client\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bucket\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        publicBaseUrl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        exists\n                        \n                    \n                \n            \n            \n                \n                        \n                    exists(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:74\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getSignedUrl\n                        \n                    \n                \n            \n            \n                \ngetSignedUrl(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getStream\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStream(key: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        put\n                        \n                    \n                \n            \n            \n                \n                        \n                    put(key: string, body: Buffer | Readable, opts?: PutOptions)\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/adapters/s3.storage.ts:20\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                body\n                                            \n                                                        Buffer | Readable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                opts\n                                            \n                                                            PutOptions\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n    DeleteObjectCommand,\n    GetObjectCommand,\n    HeadObjectCommand,\n    PutObjectCommand,\n    S3Client,\n} from \"@aws-sdk/client-s3\";\nimport { getSignedUrl as sign } from \"@aws-sdk/s3-request-presigner\";\nimport { Readable } from \"stream\";\nimport { FileStorage, PutOptions, StoredObject } from \"../storage.types\";\n\nexport class S3FileStorage implements FileStorage {\n    constructor(\n        private s3: S3Client,\n        private bucket: string,\n        private publicBaseUrl?: string, // e.g. CloudFront URL (optional)\n    ) {}\n\n    async put(\n        key: string,\n        body: Buffer | Readable,\n        opts?: PutOptions,\n    ): Promise {\n        await this.s3.send(\n            new PutObjectCommand({\n                Bucket: this.bucket,\n                Key: key,\n                Body: body,\n                ContentType: opts?.contentType,\n                Metadata: opts?.metadata,\n                ACL: opts?.acl === \"public\" ? \"public-read\" : undefined,\n                ChecksumSHA256: opts?.checksum, // optional if you computed it\n            }),\n        );\n\n        const head = await this.s3.send(\n            new HeadObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n        const url =\n            opts?.acl === \"public\"\n                ? this.publicBaseUrl\n                    ? `${this.publicBaseUrl.replace(/\\/+$/, \"\")}/${encodeURI(key)}`\n                    : `https://${this.bucket}.s3.amazonaws.com/${encodeURI(key)}`\n                : undefined;\n\n        return {\n            key,\n            etag: head.ETag,\n            size: head.ContentLength,\n            url,\n            contentType: head.ContentType || opts?.contentType,\n        };\n    }\n\n    async getStream(key: string) {\n        const obj = await this.s3.send(\n            new GetObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n        const stream = obj.Body as Readable;\n        return {\n            stream,\n            contentType: obj.ContentType,\n            size: obj.ContentLength,\n        };\n    }\n\n    async delete(key: string) {\n        await this.s3.send(\n            new DeleteObjectCommand({ Bucket: this.bucket, Key: key }),\n        );\n    }\n\n    async exists(key: string) {\n        try {\n            await this.s3.send(\n                new HeadObjectCommand({ Bucket: this.bucket, Key: key }),\n            );\n            return true;\n        } catch {\n            return false;\n        }\n    }\n\n    getSignedUrl(key: string) {\n        return Promise.resolve(\n            sign(\n                this.s3,\n                new GetObjectCommand({ Bucket: this.bucket, Key: key }),\n            ),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SchemaResponse.html":{"url":"classes/SchemaResponse.html","title":"class - SchemaResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SchemaResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/schema-response.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Schema to validate other json objects.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                $schema\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                properties\n                            \n                            \n                                    \n                                    Optional\n                                required\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                title\n                            \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        $schema\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Equals('https://json-schema.org/draft/2020-12/schema')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        properties\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        required\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Equals('object')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/schema-response.dto.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n    Equals,\n    IsArray,\n    IsObject,\n    IsOptional,\n    IsString,\n} from \"class-validator\";\n\n/**\n * Schema to validate other json objects.\n */\nexport class SchemaResponse {\n    @Equals(\"https://json-schema.org/draft/2020-12/schema\")\n    $schema: \"https://json-schema.org/draft/2020-12/schema\";\n    @Equals(\"object\")\n    type: \"object\";\n    @IsObject()\n    properties: Record;\n    @IsArray()\n    required?: string[];\n    @IsOptional()\n    @IsString()\n    title?: string;\n    @IsOptional()\n    @IsString()\n    description?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing a user session in the application.\nIt includes various properties such as credentials, authorization code,\nrequest URI, authorization queries, and more.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                auth_queries\n                            \n                            \n                                    \n                                    Optional\n                                authorization_code\n                            \n                            \n                                    \n                                    Optional\n                                claimsWebhook\n                            \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                    Optional\n                                credentialPayload\n                            \n                            \n                                    \n                                    Optional\n                                credentials\n                            \n                            \n                                    \n                                    Optional\n                                expiresAt\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    Optional\n                                issuanceId\n                            \n                            \n                                    \n                                    Optional\n                                nonce\n                            \n                            \n                                    \n                                notifications\n                            \n                            \n                                    \n                                    Optional\n                                notifyWebhook\n                            \n                            \n                                    \n                                    Optional\n                                offer\n                            \n                            \n                                    \n                                    Optional\n                                offerUrl\n                            \n                            \n                                    \n                                    Optional\n                                request_uri\n                            \n                            \n                                    \n                                    Optional\n                                requestId\n                            \n                            \n                                    \n                                    Optional\n                                requestUrl\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                            \n                                    \n                                updatedAt\n                            \n                            \n                                    \n                                    Optional\n                                vp_nonce\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        auth_queries\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthorizeQueries\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:94\n                        \n                    \n\n            \n                \n                    Authorization queries associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        authorization_code\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:84\n                        \n                    \n\n            \n                \n                    Authorization code for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        claimsWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:143\n                        \n                    \n\n            \n                \n                    Webhook configuration to send result and may receive further information.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:111\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was created.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentialPayload\n                        \n                    \n                \n            \n                \n                    \n                        Type :         OfferRequestDto\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:138\n                        \n                    \n\n            \n                \n                    Credential payload containing the offer request details.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        credentials\n                        \n                    \n                \n            \n                \n                    \n                        Type :     VerificationResult[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:79\n                        \n                    \n\n            \n                \n                    Verified credentials from the verification process.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        expiresAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('date', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:120\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:58\n                        \n                    \n\n            \n                \n                    Unique identifier for the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        issuanceId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:105\n                        \n                    \n\n            \n                \n                    Nonce used for the OID4VCI flow.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        notifications\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Notification[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:153\n                        \n                    \n\n            \n                \n                    Notifications associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        notifyWebhook\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebhookConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:148\n                        \n                    \n\n            \n                \n                    Webhook configuration to send the result of the notification response.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offer\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CredentialOfferObject\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:126\n                        \n                    \n\n            \n                \n                    Credential offer object containing details about the credential offer or presentation request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        offerUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:132\n                        \n                    \n\n            \n                \n                    Offer URL for the credential offer.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        request_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:89\n                        \n                    \n\n            \n                \n                    Request URI from the authorization request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:67\n                        \n                    \n\n            \n                \n                    The ID of the presentation configuration associated with the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        requestUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:73\n                        \n                    \n\n            \n                \n                    The URL of the presentation auth request.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SessionStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: SessionStatus})@Column('varchar', {nullable: true, default: 'active'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:171\n                        \n                    \n\n            \n                \n                    Status of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:164\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:158\n                        \n                    \n\n            \n                \n                    Tenant ID for multi-tenancy support.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:117\n                        \n                    \n\n            \n                \n                    The timestamp when the VP request was last updated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        vp_nonce\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:99\n                        \n                    \n\n            \n                \n                    Noncce from the Verifiable Presentation request.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport {\n    CredentialOfferObject,\n    NotificationEvent,\n} from \"@openid4vc/openid4vci\";\nimport { VerificationResult } from \"@sd-jwt/sd-jwt-vc\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    PrimaryColumn,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../auth/entitites/tenant.entity\";\nimport { AuthorizeQueries } from \"../../issuer/authorize/dto/authorize-request.dto\";\nimport { OfferRequestDto } from \"../../issuer/oid4vci/dto/offer-request.dto\";\nimport { WebhookConfig } from \"../../utils/webhook/webhook.dto\";\n\nexport enum SessionStatus {\n    Active = \"active\",\n    Fetched = \"fetched\",\n    Completed = \"completed\",\n    Expired = \"expired\",\n    Failed = \"failed\",\n}\n\n/**\n * Represents a session entity for managing user sessions in the application.\n */\nexport type Notification = {\n    /**\n     * Unique identifier for the notification.\n     */\n    id: string;\n    /**\n     * The type of notification.\n     */\n    event?: NotificationEvent;\n\n    /**\n     * The credential ID associated with the notification.\n     */\n    credentialConfigurationId: string;\n};\n\n/**\n * Entity representing a user session in the application.\n * It includes various properties such as credentials, authorization code,\n * request URI, authorization queries, and more.\n */\n@Entity()\nexport class Session {\n    /**\n     * Unique identifier for the session.\n     */\n    @PrimaryColumn(\"uuid\")\n    id: string;\n\n    @Column(\"varchar\", { nullable: true })\n    issuanceId?: string;\n\n    /**\n     * The ID of the presentation configuration associated with the session.\n     */\n    @Column(\"varchar\", { nullable: true })\n    requestId?: string;\n\n    /**\n     * The URL of the presentation auth request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    requestUrl?: string;\n\n    /**\n     * Verified credentials from the verification process.\n     */\n    @Column(\"json\", { nullable: true })\n    credentials?: VerificationResult[];\n    /**\n     * Authorization code for the session.\n     */\n    @Column(\"varchar\", { nullable: true })\n    authorization_code?: string;\n    /**\n     * Request URI from the authorization request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    request_uri?: string;\n    /**\n     * Authorization queries associated with the session.\n     */\n    @Column(\"json\", { nullable: true })\n    auth_queries?: AuthorizeQueries;\n    /**\n     * Noncce from the Verifiable Presentation request.\n     */\n    @Column(\"varchar\", { nullable: true })\n    vp_nonce?: string;\n\n    /**\n     * Nonce used for the OID4VCI flow.\n     */\n    @Column(\"varchar\", { nullable: true })\n    nonce?: string;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    @Column(\"date\", { nullable: true })\n    expiresAt?: Date;\n\n    /**\n     * Credential offer object containing details about the credential offer or presentation request.\n     */\n    @Column(\"json\", { nullable: true })\n    offer?: CredentialOfferObject;\n\n    /**\n     * Offer URL for the credential offer.\n     */\n    @Column(\"varchar\", { nullable: true })\n    offerUrl?: string;\n\n    /**\n     * Credential payload containing the offer request details.\n     */\n    @Column(\"json\", { nullable: true })\n    credentialPayload?: OfferRequestDto;\n    /**\n     * Webhook configuration to send result and may receive further information.\n     */\n    @Column(\"json\", { nullable: true })\n    claimsWebhook?: WebhookConfig;\n    /**\n     * Webhook configuration to send the result of the notification response.\n     */\n    @Column(\"json\", { nullable: true })\n    notifyWebhook?: WebhookConfig;\n    /**\n     * Notifications associated with the session.\n     */\n    @Column(\"json\", { default: JSON.stringify([]) })\n    notifications: Notification[];\n    /**\n     * Tenant ID for multi-tenancy support.\n     */\n    @Column(\"varchar\")\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Status of the session.\n     */\n    @ApiProperty({ enum: SessionStatus })\n    @Column(\"varchar\", { nullable: true, default: \"active\" })\n    status: SessionStatus;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteSession\n                            \n                            \n                                    \n                                getAllSessions\n                            \n                            \n                                    \n                                    \n                                getSession\n                            \n                            \n                                    \n                                revokeAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteSession(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:54\n                        \n                    \n\n\n            \n                \n                        Deletes a session by its ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllSessions()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:33\n                        \n                    \n\n\n            \n                \n                        Retrieves all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getSession\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSession(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiParam({name: 'id', description: 'The session ID', type: String})@Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:43\n                        \n                    \n\n\n            \n                \n                        Retrieves the session information for a given session ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Session\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        revokeAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    revokeAll(value: StatusUpdateDto, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('revoke')\n                \n            \n\n                    \n                        \n                            Defined in src/session/session.controller.ts:67\n                        \n                    \n\n\n            \n                \n                        Update the status of the credentials of a specific session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiParam, ApiSecurity, ApiTags } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../auth/token.decorator\";\nimport { StatusUpdateDto } from \"../issuer/status-list/dto/status-update.dto\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionPipe } from \"./session.pipe\";\nimport { SessionService } from \"./session.service\";\n\n@ApiTags(\"Session management\")\n@UseGuards(JwtAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"session\")\nexport class SessionController {\n    constructor(\n        private readonly sessionService: SessionService,\n        private readonly statusListService: StatusListService,\n    ) {}\n\n    /**\n     * Retrieves all sessions.\n     */\n    @Get()\n    getAllSessions(): Promise {\n        return this.sessionService.getAll();\n    }\n\n    /**\n     * Retrieves the session information for a given session ID.\n     * @param id - The identifier of the session.\n     */\n    @ApiParam({ name: \"id\", description: \"The session ID\", type: String })\n    @Get(\":id\")\n    getSession(@Param(\"id\", SessionPipe) session: Session): Session {\n        return session;\n    }\n\n    /**\n     * Deletes a session by its ID\n     * @param id\n     * @param user\n     * @returns\n     */\n    @Delete(\":id\")\n    deleteSession(\n        @Param(\"id\") id: string,\n        @Token() user: TokenPayload,\n    ): Promise {\n        return this.sessionService.delete(id, user.sub);\n    }\n\n    /**\n     * Update the status of the credentials of a specific session.\n     * @param value\n     * @returns\n     */\n    @Post(\"revoke\")\n    revokeAll(@Body() value: StatusUpdateDto, @Token() user: TokenPayload) {\n        return this.statusListService.updateStatus(value, user.sub);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SessionLogContext.html":{"url":"interfaces/SessionLogContext.html","title":"interface - SessionLogContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SessionLogContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger-context.ts\n        \n\n\n            \n                Description\n            \n            \n                Context for session logging, including session ID, tenant ID, flow type, and optional stage.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            flowType\n                                        \n                                \n                                \n                                        \n                                            sessionId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            stage\n                                        \n                                \n                                \n                                        \n                                            tenantId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:        any\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger-context.ts:21\n                            \n                        \n                \n                    \n                        Additional context information for the session.\n\n                    \n                \n            \n        \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        flowType\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        flowType:     \"OID4VCI\" | \"OID4VP\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"OID4VCI\" | \"OID4VP\"\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Type of flow being logged (e.g., OID4VCI, OID4VP).\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sessionId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sessionId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Unique identifier for the session.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stage:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Optional stage of the flow, useful for tracking progress.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tenantId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tenantId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Identifier for the tenant associated with the session.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface SessionLogContext {\n    /**\n     * Unique identifier for the session.\n     */\n    sessionId: string;\n    /**\n     * Identifier for the tenant associated with the session.\n     */\n    tenantId: string;\n    /**\n     * Type of flow being logged (e.g., OID4VCI, OID4VP).\n     */\n    flowType: \"OID4VCI\" | \"OID4VP\";\n    /**\n     * Optional stage of the flow, useful for tracking progress.\n     */\n    stage?: string;\n    /**\n     * Additional context information for the session.\n     */\n    [key: string]: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerInterceptor.html":{"url":"injectables/SessionLoggerInterceptor.html","title":"injectable - SessionLoggerInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.interceptor.ts\n        \n\n\n            \n                Description\n            \n            \n                Interceptor for logging session-related requests and responses.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                            \n                                    Private\n                                sanitizeBody\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector, logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerInterceptor.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nReflector instance for accessing metadata.\n\n\n                                                        \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:44\n                        \n                    \n\n\n            \n                \n                        Intercepts the request and logs session-related information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nExecution context of the request.\n\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCall handler to proceed with the request.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that emits the response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sanitizeBody\n                        \n                    \n                \n            \n            \n                \n                        \n                    sanitizeBody(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.interceptor.ts:136\n                        \n                    \n\n\n            \n                \n                        Sanitizes the request body to remove sensitive information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe request body to sanitize.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Sanitized body.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.interceptor.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    CallHandler,\n    ExecutionContext,\n    Injectable,\n    NestInterceptor,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { Reflector } from \"@nestjs/core\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { Observable } from \"rxjs\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { SESSION_LOGGER_KEY } from \"./session-logger.decorator\";\n\n/**\n * Interceptor for logging session-related requests and responses.\n */\n@Injectable()\nexport class SessionLoggerInterceptor implements NestInterceptor {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerInterceptor.\n     * @param reflector - Reflector instance for accessing metadata.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing configuration.\n     */\n    constructor(\n        private readonly reflector: Reflector,\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.isEnabled = this.configService.get(\n            \"LOG_ENABLE_SESSION_LOGGER\",\n            false,\n        );\n    }\n\n    /**\n     * Intercepts the request and logs session-related information.\n     * @param context - Execution context of the request.\n     * @param next - Call handler to proceed with the request.\n     * @returns An observable that emits the response data.\n     */\n    intercept(context: ExecutionContext, next: CallHandler): Observable {\n        const metadata = this.reflector.get(\n            SESSION_LOGGER_KEY,\n            context.getHandler(),\n        );\n\n        if (!metadata || !this.isEnabled) {\n            return next.handle();\n        }\n\n        const { sessionIdParam, flowType } = metadata;\n        const request = context.switchToHttp().getRequest();\n        const response = context.switchToHttp().getResponse();\n\n        const sessionId = request.params[sessionIdParam];\n\n        const tenantId = request.params?.tenantId;\n        const method = request.method;\n        const url = request.url;\n\n        // Set context for this logger instance\n        this.logger.setContext(\"SessionLogger\");\n\n        // Create log context\n        const logContext = {\n            sessionId,\n            tenantId,\n            flowType,\n            endpoint: `${method} ${url}`,\n        };\n\n        // Log the start of the request\n        this.logger.info(\n            {\n                ...logContext,\n                event: \"request_start\",\n                method,\n                url,\n                headers: {\n                    \"user-agent\": request.headers[\"user-agent\"],\n                    \"content-type\": request.headers[\"content-type\"],\n                },\n                body: this.sanitizeBody(request.body),\n            },\n            `[${flowType}] Starting ${method} ${url} for session ${sessionId}`,\n        );\n\n        const startTime = Date.now();\n\n        return next.handle().pipe(\n            tap((data) => {\n                const duration = Date.now() - startTime;\n                this.logger.info(\n                    {\n                        ...logContext,\n                        event: \"request_success\",\n                        method,\n                        url,\n                        statusCode: response.statusCode,\n                        duration,\n                        responseSize: JSON.stringify(data || {}).length,\n                    },\n                    `[${flowType}] Completed ${method} ${url} for session ${sessionId} in ${duration}ms`,\n                );\n            }),\n            catchError((error) => {\n                const duration = Date.now() - startTime;\n                this.logger.error(\n                    {\n                        ...logContext,\n                        event: \"request_error\",\n                        method,\n                        url,\n                        error: {\n                            name: error.name,\n                            message: error.message,\n                            stack: error.stack,\n                        },\n                        duration,\n                    },\n                    `[${flowType}] Error in ${method} ${url} for session ${sessionId}: ${error.message}`,\n                );\n                throw error;\n            }),\n        );\n    }\n\n    /**\n     * Sanitizes the request body to remove sensitive information.\n     * @param body - The request body to sanitize.\n     * @returns Sanitized body.\n     */\n    private sanitizeBody(body: any): any {\n        if (!body) return body;\n\n        // Create a copy to avoid modifying the original\n        const sanitized = { ...body };\n\n        // Remove sensitive fields\n        const sensitiveFields = [\n            \"password\",\n            \"token\",\n            \"secret\",\n            \"key\",\n            \"private_key\",\n            \"access_token\",\n            \"refresh_token\",\n        ];\n\n        sensitiveFields.forEach((field) => {\n            if (sanitized[field]) {\n                sanitized[field] = \"[REDACTED]\";\n            }\n        });\n\n        return sanitized;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionLoggerService.html":{"url":"injectables/SessionLoggerService.html","title":"injectable - SessionLoggerService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionLoggerService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/logger/session-logger.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for logging session-related events and errors.\nUses PinoLogger for structured logging.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                isEnabled\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                logAuthorizationRequest\n                            \n                            \n                                logCredentialIssuance\n                            \n                            \n                                logCredentialVerification\n                            \n                            \n                                logFlowComplete\n                            \n                            \n                                logFlowError\n                            \n                            \n                                logFlowStart\n                            \n                            \n                                logNotification\n                            \n                            \n                                logSession\n                            \n                            \n                                logSessionError\n                            \n                            \n                                logTokenExchange\n                            \n                            \n                                    Private\n                                shouldLog\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger: PinoLogger, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                            \n                        \n\n                \n                    \n                            Constructor for SessionLoggerService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    PinoLogger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nPinoLogger instance for logging.\n\n\n                                                        \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfigService for accessing environment configuration.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        logAuthorizationRequest\n                        \n                    \n                \n            \n            \n                \nlogAuthorizationRequest(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Log authorization request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialIssuance\n                        \n                    \n                \n            \n            \n                \nlogCredentialIssuance(context: SessionLogContext, credentialType: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Log credential issuance step\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logCredentialVerification\n                        \n                    \n                \n            \n            \n                \nlogCredentialVerification(context: SessionLogContext, verificationResult: boolean, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Log credential presentation verification\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                verificationResult\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowComplete\n                        \n                    \n                \n            \n            \n                \nlogFlowComplete(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Log session flow completion\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowError\n                        \n                    \n                \n            \n            \n                \nlogFlowError(context: SessionLogContext, error: Error, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Log session flow error\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logFlowStart\n                        \n                    \n                \n            \n            \n                \nlogFlowStart(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:37\n                        \n                    \n\n\n            \n                \n                        Log session flow start\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logNotification\n                        \n                    \n                \n            \n            \n                \nlogNotification(context: SessionLogContext, notificationEvent: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:180\n                        \n                    \n\n\n            \n                \n                        Log notification events\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notificationEvent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSession\n                        \n                    \n                \n            \n            \n                \nlogSession(context: SessionLogContext, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:202\n                        \n                    \n\n\n            \n                \n                        Generic session log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logSessionError\n                        \n                    \n                \n            \n            \n                \nlogSessionError(context: SessionLogContext, error: Error, message: string, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:221\n                        \n                    \n\n\n            \n                \n                        Generic session error log method\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                error\n                                            \n                                                        Error\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logTokenExchange\n                        \n                    \n                \n            \n            \n                \nlogTokenExchange(context: SessionLogContext, additionalData?: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Log token exchange\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                additionalData\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        shouldLog\n                        \n                    \n                \n            \n            \n                \n                        \n                    shouldLog()\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/logger/session-logger.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        isEnabled\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/utils/logger/session-logger.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { PinoLogger } from \"nestjs-pino\";\nimport { SessionLogContext } from \"./session-logger-context\";\n\n/**\n * Service for logging session-related events and errors.\n * Uses PinoLogger for structured logging.\n */\n@Injectable()\nexport class SessionLoggerService {\n    private readonly isEnabled: boolean;\n\n    /**\n     * Constructor for SessionLoggerService.\n     * @param logger - PinoLogger instance for logging.\n     * @param configService - ConfigService for accessing environment configuration.\n     */\n    constructor(\n        private readonly logger: PinoLogger,\n        private readonly configService: ConfigService,\n    ) {\n        this.logger.setContext(\"SessionLoggerService\");\n        this.isEnabled = this.configService.get(\n            \"LOG_ENABLE_SESSION_LOGGER\",\n            false,\n        );\n    }\n\n    private shouldLog(): boolean {\n        return this.isEnabled;\n    }\n\n    /**\n     * Log session flow start\n     */\n    logFlowStart(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow started for session ${context.sessionId} in tenant ${context.tenantId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"flow_start\",\n                stage: \"initialization\",\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow completion\n     */\n    logFlowComplete(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow completed for session ${context.sessionId}`;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"flow_complete\",\n                stage: \"completion\",\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log session flow error\n     */\n    logFlowError(\n        context: SessionLogContext,\n        error: Error,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        const message = `[${context.flowType}] Flow error for session ${context.sessionId}: ${error.message}`;\n\n        this.logger.error(\n            {\n                ...context,\n                event: \"flow_error\",\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            message,\n        );\n    }\n\n    /**\n     * Log credential issuance step\n     */\n    logCredentialIssuance(\n        context: SessionLogContext,\n        credentialType: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"credential_issuance\",\n                stage: \"credential_creation\",\n                credentialType,\n                ...additionalData,\n            },\n            `[${context.flowType}] Issuing credential of type ${credentialType} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log credential presentation verification\n     */\n    logCredentialVerification(\n        context: SessionLogContext,\n        verificationResult: boolean,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"credential_verification\",\n                stage: \"verification\",\n                verificationResult,\n                ...additionalData,\n            },\n            `[${context.flowType}] Credential verification ${verificationResult ? \"succeeded\" : \"failed\"} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log authorization request\n     */\n    logAuthorizationRequest(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"authorization_request\",\n                stage: \"authorization\",\n                ...additionalData,\n            },\n            `[${context.flowType}] Authorization request created for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log token exchange\n     */\n    logTokenExchange(context: SessionLogContext, additionalData?: any) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"token_exchange\",\n                stage: \"token_exchange\",\n                ...additionalData,\n            },\n            `[${context.flowType}] Token exchange for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Log notification events\n     */\n    logNotification(\n        context: SessionLogContext,\n        notificationEvent: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                event: \"notification\",\n                stage: \"notification\",\n                notificationEvent,\n                ...additionalData,\n            },\n            `[${context.flowType}] Notification ${notificationEvent} for session ${context.sessionId}`,\n        );\n    }\n\n    /**\n     * Generic session log method\n     */\n    logSession(\n        context: SessionLogContext,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.info(\n            {\n                ...context,\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}`,\n        );\n    }\n\n    /**\n     * Generic session error log method\n     */\n    logSessionError(\n        context: SessionLogContext,\n        error: Error,\n        message: string,\n        additionalData?: any,\n    ) {\n        if (!this.shouldLog()) return;\n\n        this.logger.error(\n            {\n                ...context,\n                error: {\n                    name: error.name,\n                    message: error.message,\n                    stack: error.stack,\n                },\n                ...additionalData,\n            },\n            `[${context.flowType}] ${message}: ${error.message}`,\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_imports\n\n\n\ncluster_SessionModule_providers\n\n\n\n\nStatusListModule\n\nStatusListModule\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            SessionModule is responsible for managing user sessions.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StatusListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { makeGaugeProvider } from \"@willsoto/nestjs-prometheus\";\nimport * as Joi from \"joi\";\nimport { StatusListModule } from \"../issuer/status-list/status-list.module\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionController } from \"./session.controller\";\nimport { SessionService } from \"./session.service\";\n\n/**\n * Module for managing user sessions.\n */\nexport const SESSION_VALIDATION_SCHEMA = {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n};\n\n/**\n * SessionModule is responsible for managing user sessions.\n */\n@Module({\n    imports: [TypeOrmModule.forFeature([Session]), StatusListModule],\n    providers: [\n        SessionService,\n        makeGaugeProvider({\n            name: \"sessions\",\n            help: \"Total number of sessions by status\",\n            labelNames: [\"tenant_id\", \"session_type\", \"status\"],\n        }),\n    ],\n    exports: [SessionService],\n    controllers: [SessionController],\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionPipe.html":{"url":"injectables/SessionPipe.html","title":"injectable - SessionPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.pipe.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionService: SessionService)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.pipe.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        transform\n                        \n                    \n                \n            \n            \n                \n                        \n                    transform(sessionId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.pipe.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sessionId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException, PipeTransform } from \"@nestjs/common\";\nimport { Session } from \"./entities/session.entity\";\nimport { SessionService } from \"./session.service\";\n\n@Injectable()\nexport class SessionPipe implements PipeTransform> {\n    constructor(private readonly sessionService: SessionService) {}\n\n    async transform(sessionId: string): Promise {\n        if (!sessionId) {\n            throw new NotFoundException(\n                \"Session ID not found in request parameters\",\n            );\n        }\n\n        const session = await this.sessionService.get(sessionId);\n        if (!session) {\n            throw new NotFoundException(\n                `Session with ID ${sessionId} not found`,\n            );\n        }\n\n        // Return the entity so the controller parameter receives it\n        return session;\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                get\n                            \n                            \n                                getAll\n                            \n                            \n                                getBy\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                onTenantDelete\n                            \n                            \n                                    Async\n                                setState\n                            \n                            \n                                tidyUpSessions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository, configService: ConfigService, schedulerRegistry: SchedulerRegistry, sessionsCounter: Gauge)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        schedulerRegistry\n                                                  \n                                                        \n                                                                    SchedulerRegistry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionsCounter\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(issuer_state: string, values: QueryDeepPartialEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:144\n                        \n                    \n\n\n            \n                \n                        Update an existing session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                issuer_state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                values\n                                            \n                                                            QueryDeepPartialEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(session: DeepPartial)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Create a new session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            DeepPartial\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: string, sub: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:192\n                        \n                    \n\n\n            \n                \n                        Deletes a session by its ID and tenant ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                sub\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget(state: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Get a session by its state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAll\n                        \n                    \n                \n            \n            \n                \ngetAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:152\n                        \n                    \n\n\n            \n                \n                        Get all sessions.\n\n\n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getBy\n                        \n                    \n                \n            \n            \n                \ngetBy(where: FindOptionsWhere)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:172\n                        \n                    \n\n\n            \n                \n                        Get a session by a specific condition.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:34\n                        \n                    \n\n\n            \n                \n                        Register the tidy up cron job on application bootstrap.\nThis will run every hour by default, but can be configured via the SESSION_TIDY_UP_INTERVAL config variable.\n\n\n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:89\n                        \n                    \n\n\n            \n                \n                        Deletes all sessions for a specific tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setState\n                        \n                    \n                \n            \n            \n                \n                        \n                    setState(session: Session, status: SessionStatus)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Marks the session as successful or failed.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                status\n                                            \n                                                            SessionStatus\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        tidyUpSessions\n                        \n                    \n                \n            \n            \n                \ntidyUpSessions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:179\n                        \n                    \n\n\n            \n                \n                        Tidy up sessions that are older than 1 day.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnApplicationBootstrap } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { SchedulerRegistry } from \"@nestjs/schedule\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus/dist/injector\";\nimport { Gauge } from \"prom-client\";\nimport {\n    DeepPartial,\n    FindOptionsWhere,\n    IsNull,\n    LessThan,\n    Not,\n    Repository,\n} from \"typeorm\";\nimport { QueryDeepPartialEntity } from \"typeorm/query-builder/QueryPartialEntity\";\nimport { Session, SessionStatus } from \"./entities/session.entity\";\n\n@Injectable()\nexport class SessionService implements OnApplicationBootstrap {\n    constructor(\n        @InjectRepository(Session)\n        private sessionRepository: Repository,\n        private readonly configService: ConfigService,\n        private readonly schedulerRegistry: SchedulerRegistry,\n        @InjectMetric(\"sessions\")\n        private sessionsCounter: Gauge,\n    ) {}\n\n    /**\n     * Register the tidy up cron job on application bootstrap.\n     * This will run every hour by default, but can be configured via the `SESSION_TIDY_UP_INTERVAL` config variable.\n     * @returns\n     */\n    async onApplicationBootstrap() {\n        const callback = () => {\n            void this.tidyUpSessions();\n        };\n        const intervalTime =\n            this.configService.getOrThrow(\"SESSION_TIDY_UP_INTERVAL\") *\n            1000;\n        const interval = setInterval(callback, intervalTime);\n        this.schedulerRegistry.addInterval(\"tidyUpSessions\", interval);\n\n        //set default values for session metrics\n        const tenantId = \"root\";\n        const states: SessionStatus[] = [\n            SessionStatus.Active,\n            SessionStatus.Fetched,\n            SessionStatus.Completed,\n            SessionStatus.Expired,\n            SessionStatus.Failed,\n        ];\n        for (const state of states) {\n            const issuanceCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: Not(IsNull()),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: \"issuance\",\n                    status: state,\n                },\n                issuanceCounter,\n            );\n            const verificationCounter = await this.sessionRepository.countBy({\n                tenantId,\n                issuanceId: IsNull(),\n                status: state,\n            });\n            this.sessionsCounter.set(\n                {\n                    tenant_id: tenantId,\n                    session_type: \"verification\",\n                    status: state,\n                },\n                verificationCounter,\n            );\n        }\n\n        return this.tidyUpSessions();\n    }\n\n    /**\n     * Deletes all sessions for a specific tenant.\n     * @param tenantId\n     */\n    async onTenantDelete(tenantId: string) {\n        await this.sessionRepository.delete({ tenantId });\n    }\n\n    /**\n     * Create a new session.\n     * @param session\n     * @returns\n     */\n    async create(session: DeepPartial) {\n        const createdSession = await this.sessionRepository.save(session);\n\n        // Count total sessions created\n        this.sessionsCounter.inc({\n            tenant_id: createdSession.tenantId,\n            session_type: createdSession.issuanceId\n                ? \"issuance\"\n                : \"verification\",\n            status: \"active\",\n        });\n\n        return createdSession;\n    }\n\n    /**\n     * Marks the session as successful or failed.\n     * @param session\n     * @param status\n     */\n    async setState(session: Session, status: SessionStatus) {\n        const sessionType = session.issuanceId ? \"issuance\" : \"verification\";\n\n        await this.sessionRepository.update({ id: session.id }, { status });\n\n        // Count completed sessions (success or failure)\n        this.sessionsCounter.inc({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status,\n        });\n\n        // Decrease active sessions count\n        this.sessionsCounter.dec({\n            tenant_id: session.tenantId,\n            session_type: sessionType,\n            status: \"active\",\n        });\n    }\n\n    /**\n     * Update an existing session.\n     * @param issuer_state\n     * @param values\n     * @returns\n     */\n    add(issuer_state: string, values: QueryDeepPartialEntity) {\n        return this.sessionRepository.update({ id: issuer_state }, values);\n    }\n\n    /**\n     * Get all sessions.\n     * @returns\n     */\n    getAll(): Promise {\n        return this.sessionRepository.find({\n            order: { updatedAt: \"DESC\" },\n        });\n    }\n\n    /**\n     * Get a session by its state.\n     * @param state\n     * @returns\n     */\n    get(state: string) {\n        return this.sessionRepository.findOneByOrFail({ id: state });\n    }\n\n    /**\n     * Get a session by a specific condition.\n     * @param where\n     * @returns\n     */\n    getBy(where: FindOptionsWhere) {\n        return this.sessionRepository.findOneByOrFail(where);\n    }\n\n    /**\n     * Tidy up sessions that are older than 1 day.\n     */\n    tidyUpSessions() {\n        const ttl = this.configService.getOrThrow(\"SESSION_TTL\") * 1000;\n        return this.sessionRepository.delete({\n            createdAt: LessThan(new Date(Date.now() - ttl)),\n        });\n    }\n\n    /**\n     * Deletes a session by its ID and tenant ID.\n     * @param id\n     * @param sub\n     * @returns\n     */\n    delete(id: string, sub: string): Promise {\n        return this.sessionRepository.delete({ id, tenantId: sub });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StatusListController.html":{"url":"controllers/StatusListController.html","title":"controller - StatusListController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StatusListController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :tenantId/status-management\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                getList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getList(tenantId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status-list')@Header('Content-Type', 'application/statuslist+jwt')\n                \n            \n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.controller.ts:17\n                        \n                    \n\n\n            \n                \n                        Get the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header, Param } from \"@nestjs/common\";\nimport { ApiExcludeController, ApiTags } from \"@nestjs/swagger\";\nimport { StatusListService } from \"./status-list.service\";\n\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiTags(\"Status management\")\n@Controller(\":tenantId/status-management\")\nexport class StatusListController {\n    constructor(private statusListService: StatusListService) {}\n\n    /**\n     * Get the status list\n     * @returns\n     */\n    @Get(\"status-list\")\n    @Header(\"Content-Type\", \"application/statuslist+jwt\")\n    getList(@Param(\"tenantId\") tenantId: string) {\n        return this.statusListService.getList(tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusListEntity.html":{"url":"entities/StatusListEntity.html","title":"entity - StatusListEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusListEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-list.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Entity representing the status list for a tenant.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                bits\n                            \n                            \n                                    \n                                elements\n                            \n                            \n                                    \n                                    Optional\n                                jwt\n                            \n                            \n                                    \n                                stack\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        bits\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BitsPerStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('int')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:38\n                        \n                    \n\n            \n                \n                    The number of bits used for each status in the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        elements\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:26\n                        \n                    \n\n            \n                \n                    The elements of the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        jwt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:44\n                        \n                    \n\n            \n                \n                    The JSON Web Token (JWT) for the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        stack\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('json')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:32\n                        \n                    \n\n            \n                \n                    The stack of available indexes for the status list.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:20\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column('varchar', {primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-list.entity.ts:14\n                        \n                    \n\n            \n                \n                    The ID of the tenant to which the status list belongs.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { BitsPerStatus } from \"@sd-jwt/jwt-status-list\";\nimport { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\n/**\n * Entity representing the status list for a tenant.\n */\n@Entity()\nexport class StatusListEntity {\n    /**\n     * The ID of the tenant to which the status list belongs.\n     */\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * The elements of the status list.\n     */\n    @Column(\"json\")\n    elements: number[];\n\n    /**\n     * The stack of available indexes for the status list.\n     */\n    @Column(\"json\")\n    stack: number[];\n\n    /**\n     * The number of bits used for each status in the status list.\n     */\n    @Column(\"int\")\n    bits: BitsPerStatus;\n\n    /**\n     * The JSON Web Token (JWT) for the status list.\n     */\n    @Column(\"varchar\", { nullable: true })\n    jwt?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StatusListModule.html":{"url":"modules/StatusListModule.html","title":"module - StatusListModule","body":"\n                   \n\n\n\n\n    Modules\n    StatusListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\ncluster_StatusListModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/issuer/status-list/status-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StatusListController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StatusListService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \"@nestjs/common\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { CryptoModule } from \"../../crypto/crypto.module\";\nimport { StatusListEntity } from \"./entities/status-list.entity\";\nimport { StatusMapping } from \"./entities/status-mapping.entity\";\nimport { StatusListController } from \"./status-list.controller\";\nimport { StatusListService } from \"./status-list.service\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        TypeOrmModule.forFeature([StatusMapping, StatusListEntity]),\n    ],\n    controllers: [StatusListController],\n    providers: [StatusListService],\n    exports: [StatusListService],\n})\nexport class StatusListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StatusListService.html":{"url":"injectables/StatusListService.html","title":"injectable - StatusListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StatusListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/status-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                createList\n                            \n                            \n                                getList\n                            \n                            \n                                onTenantDelete\n                            \n                            \n                                    Async\n                                onTenantInit\n                            \n                            \n                                    Private\n                                    Async\n                                setEntry\n                            \n                            \n                                    Async\n                                updateStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, statusMappingRepository: Repository, statusListRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/issuer/status-list/status-list.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusMappingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    createEntry(session: Session, credentialConfigurationId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Get the next free entry in the status list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                credentialConfigurationId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createList\n                        \n                    \n                \n            \n            \n                \n                        \n                    createList(entry: StatusListEntity)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Create a new status list and stored it in the file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entry\n                                            \n                                                            StatusListEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getList\n                        \n                    \n                \n            \n            \n                \ngetList(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:114\n                        \n                    \n\n\n            \n                \n                        Get the JWT for the status list of a tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The JWT for the status list.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onTenantDelete\n                        \n                    \n                \n            \n            \n                \nonTenantDelete(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Delete the status list for a specific tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onTenantInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onTenantInit(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Initialize the status list service by checking if the status list file exists.\nIf it does not exist, create a new status list with 10,000 entries and a stack\nof 10,000 indexes. The stack is shuffled to ensure randomness in the order of\nentries. The status list is stored in the file system as a JSON file.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Async\n                        setEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    setEntry(id: number, value: number, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:176\n                        \n                    \n\n\n            \n                \n                        Update the value of an entry in the status list\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updateStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateStatus(value: StatusUpdateDto, tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/issuer/status-list/status-list.service.ts:192\n                        \n                    \n\n\n            \n                \n                        Update the status of a session and its credential configuration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            StatusUpdateDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ConflictException, Injectable } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport {\n    createHeaderAndPayload,\n    JWTwithStatusListPayload,\n    StatusList,\n    StatusListJWTHeaderParameters,\n} from \"@sd-jwt/jwt-status-list\";\nimport { JwtPayload } from \"@sd-jwt/types\";\nimport { join } from \"path\";\nimport { Repository } from \"typeorm\";\nimport { CryptoService } from \"../../crypto/crypto.service\";\nimport { Session } from \"../../session/entities/session.entity\";\nimport { StatusUpdateDto } from \"./dto/status-update.dto\";\nimport { StatusListEntity } from \"./entities/status-list.entity\";\nimport { StatusMapping } from \"./entities/status-mapping.entity\";\n\n@Injectable()\nexport class StatusListService {\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        @InjectRepository(StatusMapping)\n        private statusMappingRepository: Repository,\n        @InjectRepository(StatusListEntity)\n        private statusListRepository: Repository,\n    ) {}\n\n    /**\n     * Initialize the status list service by checking if the status list file exists.\n     * If it does not exist, create a new status list with 10,000 entries and a stack\n     * of 10,000 indexes. The stack is shuffled to ensure randomness in the order of\n     * entries. The status list is stored in the file system as a JSON file.\n     */\n    async onTenantInit(tenantId: string) {\n        const size = 10000;\n        // create an empty array with the size of 1000\n        const elements = new Array(size).fill(0).map(() => 0);\n        // create a list of 1000 indexes and shuffel them\n        const stack = new Array(size)\n            .fill(0)\n            .map((_, i) => i)\n            .sort(() => 0.5 - Math.random());\n\n        const entry = await this.statusListRepository.save({\n            tenantId,\n            elements,\n            stack,\n            bits: 1,\n        });\n\n        await this.createList(entry);\n    }\n\n    /**\n     * Delete the status list for a specific tenant.\n     * @param tenantId The ID of the tenant.\n     */\n    onTenantDelete(tenantId: string) {\n        this.statusListRepository.delete({ tenantId });\n        this.statusMappingRepository.delete({ tenantId });\n    }\n\n    /**\n     * Create a new status list and stored it in the file\n     */\n    async createList(entry: StatusListEntity) {\n        const list = new StatusList(entry.elements, entry.bits);\n        const iss = `${this.configService.getOrThrow(\"PUBLIC_URL\")}`;\n\n        const sub = join(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n            entry.tenantId,\n            \"status-management\",\n            \"status-list\",\n        );\n\n        const prePayload: JwtPayload = {\n            iss,\n            sub,\n            iat: Math.floor(Date.now() / 1000),\n        };\n        const preHeader: StatusListJWTHeaderParameters = {\n            alg: \"ES256\",\n            typ: \"statuslist+jwt\",\n            x5c: await this.cryptoService.getCertChain(\n                \"signing\",\n                entry.tenantId,\n            ),\n        };\n        const { header, payload } = createHeaderAndPayload(\n            list,\n            prePayload,\n            preHeader,\n        );\n\n        const jwt = await this.cryptoService.signJwt(\n            header,\n            payload,\n            entry.tenantId,\n        );\n        await this.statusListRepository.update(\n            { tenantId: entry.tenantId },\n            { jwt },\n        );\n    }\n\n    /**\n     * Get the JWT for the status list of a tenant.\n     * @param tenantId The ID of the tenant.\n     * @returns The JWT for the status list.\n     */\n    getList(tenantId: string) {\n        return this.statusListRepository\n            .findOneByOrFail({ tenantId })\n            .then((file) => file.jwt);\n    }\n\n    /**\n     * Get the next free entry in the status list.\n     * @returns\n     */\n    async createEntry(\n        session: Session,\n        credentialConfigurationId: string,\n    ): Promise {\n        const file = await this.statusListRepository\n            .findOneByOrFail({\n                tenantId: session.tenantId,\n            })\n            //if none if found, create one\n            .then(() =>\n                this.onTenantInit(session.tenantId).then(() =>\n                    this.statusListRepository.findOneByOrFail({\n                        tenantId: session.tenantId,\n                    }),\n                ),\n            );\n        // get the last element from the stack\n        const idx = file.stack.pop();\n        //TODO: what to do if the stack is empty\n        if (idx === undefined) {\n            throw new Error(\"Stack for status list is empty!!!\");\n        }\n        const sub = join(\n            this.configService.getOrThrow(\"PUBLIC_URL\"),\n            session.tenantId,\n            \"status-management\",\n            \"status-list\",\n        );\n        // store the index in the status mapping\n        await this.statusMappingRepository.save({\n            tenantId: session.tenantId,\n            sessionId: session.id,\n            index: idx,\n            list: sub,\n            credentialConfigurationId,\n        });\n\n        return {\n            status: {\n                status_list: {\n                    idx: idx,\n                    uri: sub,\n                },\n            },\n        };\n    }\n\n    /**\n     * Update the value of an entry in the status list\n     * @param id\n     * @param value\n     */\n    private async setEntry(id: number, value: number, tenantId: string) {\n        const entry = await this.statusListRepository.findOneByOrFail({\n            tenantId,\n        });\n        entry.elements[id] = value;\n        await this.statusListRepository.update(\n            { tenantId },\n            { elements: entry.elements },\n        );\n        return this.createList(entry);\n    }\n\n    /**\n     * Update the status of a session and its credential configuration\n     * @param value\n     */\n    async updateStatus(value: StatusUpdateDto, tenantId: string) {\n        const entries = await this.statusMappingRepository.findBy({\n            sessionId: value.sessionId,\n            credentialConfigurationId: value.credentialConfigurationId,\n        });\n        if (entries.length === 0) {\n            throw new ConflictException(\n                `No status mapping found for session ${value.sessionId} and credential configuration ${value.credentialConfigurationId}`,\n            );\n        }\n        for (const entry of entries) {\n            await this.setEntry(entry.index, value.status, tenantId);\n        }\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/StatusMapping.html":{"url":"entities/StatusMapping.html","title":"entity - StatusMapping","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  StatusMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/entities/status-mapping.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                credentialConfigurationId\n                            \n                            \n                                    \n                                index\n                            \n                            \n                                    \n                                list\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                tenant\n                            \n                            \n                                    \n                                tenantId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        index\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'int', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenant\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TenantEntity\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, {cascade: true, onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:13\n                        \n                    \n\n            \n                \n                    The tenant that owns this object.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        tenantId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', primary: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/entities/status-mapping.entity.ts:7\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, ManyToOne } from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\n\n@Entity()\nexport class StatusMapping {\n    @Column({ type: \"varchar\", primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    @Column({ type: \"varchar\", primary: true })\n    sessionId: string;\n\n    @Column({ type: \"varchar\", primary: true })\n    list: string;\n\n    @Column({ type: \"int\", primary: true })\n    index: number;\n\n    @Column({ type: \"varchar\", primary: true })\n    credentialConfigurationId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StatusUpdateDto.html":{"url":"classes/StatusUpdateDto.html","title":"class - StatusUpdateDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StatusUpdateDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/status-list/dto/status-update.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                credentialConfigurationId\n                            \n                            \n                                    \n                                sessionId\n                            \n                            \n                                    \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        credentialConfigurationId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:16\n                        \n                    \n\n            \n                \n                    The ID of the credential configuration\nThis is optional, if not provided, all credentials will be revoked of the session.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessionId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:8\n                        \n                    \n\n            \n                \n                    The session ID of the user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@IsIn(['0', '1'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/status-list/dto/status-update.dto.ts:24\n                        \n                    \n\n            \n                \n                    The status of the credential\n0 = valid, 1 = revoked\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNumber, IsOptional, IsString } from \"class-validator\";\n\nexport class StatusUpdateDto {\n    /**\n     * The session ID of the user\n     */\n    @IsString()\n    sessionId: string;\n\n    /**\n     * The ID of the credential configuration\n     * This is optional, if not provided, all credentials will be revoked of the session.\n     */\n    @IsString()\n    @IsOptional()\n    credentialConfigurationId?: string;\n\n    /**\n     * The status of the credential\n     * 0 = valid, 1 = revoked\n     */\n    @IsNumber()\n    @IsIn([0, 1])\n    status: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StorageController.html":{"url":"controllers/StorageController.html","title":"controller - StorageController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StorageController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/storage/storage.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                storage\n            \n\n\n            \n                Description\n            \n            \n                Storage Controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                download\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    \n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        download\n                        \n                    \n                \n            \n            \n                \n                        \n                    download(key: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':key')\n                \n            \n\n                    \n                        \n                            Defined in src/storage/storage.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            \n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(user: TokenPayload, file: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(undefined)@UseGuards(JwtAuthGuard)@ApiSecurity('oauth2')@ApiConsumes('multipart/form-data')@ApiBody({description: 'List of cats', type: FileUploadDto})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/storage/storage.controller.ts:44\n                        \n                    \n\n\n            \n                \n                        Upload files that belong to a tenant like images\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                file\n                                            \n                                                        Express.Multer.File\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Controller,\n    Get,\n    Param,\n    Post,\n    StreamableFile,\n    UploadedFile,\n    UseGuards,\n    UseInterceptors,\n} from \"@nestjs/common\";\nimport { FileInterceptor } from \"@nestjs/platform-express\";\nimport { ApiBody, ApiConsumes, ApiSecurity } from \"@nestjs/swagger\";\nimport { JwtAuthGuard } from \"../auth/auth.guard\";\nimport { Token, TokenPayload } from \"../auth/token.decorator\";\nimport { FileUploadDto } from \"./dto/file-upload.dto\";\nimport { FilesService } from \"./files.service\";\n\n/**\n * Storage Controller\n */\n@Controller(\"storage\")\nexport class StorageController {\n    /**\n     * Constructor\n     * @param filesService The files service\n     */\n    constructor(private filesService: FilesService) {}\n\n    /**\n     * Upload files that belong to a tenant like images\n     * @param user\n     * @param file\n     * @returns\n     */\n    @UseInterceptors(FileInterceptor(\"file\"))\n    @UseGuards(JwtAuthGuard)\n    @ApiSecurity(\"oauth2\")\n    @ApiConsumes(\"multipart/form-data\")\n    @ApiBody({\n        description: \"List of cats\",\n        type: FileUploadDto,\n    })\n    @Post()\n    upload(\n        @Token() user: TokenPayload,\n        @UploadedFile() file: Express.Multer.File,\n    ) {\n        return this.filesService.saveUserUpload(user.sub, file, true);\n    }\n\n    @Get(\":key\")\n    download(@Param(\"key\") key: string) {\n        return this.filesService.getStream(key).then(\n            (stream) =>\n                new StreamableFile(stream.stream, {\n                    disposition: \"attachment\",\n                    type: stream.contentType,\n                    length: stream.size,\n                }),\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StorageModule.html":{"url":"modules/StorageModule.html","title":"module - StorageModule","body":"\n                   \n\n\n\n\n    Modules\n    StorageModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/storage/storage.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        forRoot\n                        \n                    \n                \n            \n            \n                \n                        \n                    forRoot()\n                \n            \n\n\n                    \n                        \n                            Defined in src/storage/storage.module.ts:55\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     DynamicModule\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { S3Client } from \"@aws-sdk/client-s3\";\nimport { DynamicModule, Global, Module } from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport * as Joi from \"joi\";\nimport { join } from \"path\";\nimport { LocalFileStorage } from \"./adapters/local.storage\";\nimport { S3FileStorage } from \"./adapters/s3.storage\";\nimport { FileEntity } from \"./entities/files.entity\";\nimport { FilesService } from \"./files.service\";\nimport { StorageController } from \"./storage.controller\";\nimport { FILE_STORAGE, FileStorage } from \"./storage.types\";\n\ntype Driver = \"local\" | \"s3\";\n\nexport const CONFIG_STORAGE_SCHEMA = {\n    STORAGE_DRIVER: Joi.string().valid(\"local\", \"s3\").default(\"local\"),\n    LOCAL_STORAGE_DIR: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"local\",\n        then: Joi.string().default((parent) => join(parent.FOLDER, \"uploads\")),\n    }),\n    S3_REGION: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_BUCKET: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ACCESS_KEY_ID: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_SECRET_ACCESS_KEY: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ENDPOINT: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.optional(),\n    }),\n    S3_FORCE_PATH_STYLE: Joi.boolean().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.boolean().default(false),\n    }),\n    S3_PUBLIC_BASE_URL: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n};\n\n@Global()\n@Module({})\nexport class StorageModule {\n    static forRoot(): DynamicModule {\n        return {\n            module: StorageModule,\n            imports: [TypeOrmModule.forFeature([FileEntity])],\n            controllers: [StorageController],\n            providers: [\n                FilesService,\n                {\n                    provide: FILE_STORAGE,\n                    inject: [ConfigService],\n                    useFactory: (cfg: ConfigService): FileStorage => {\n                        const driver = cfg.get(\"STORAGE_DRIVER\");\n                        if (driver === \"s3\") {\n                            return new S3FileStorage(\n                                new S3Client({\n                                    region: cfg.get(\"S3_REGION\"),\n                                    endpoint: cfg.get(\"S3_ENDPOINT\"),\n                                    forcePathStyle: cfg.get(\n                                        \"S3_FORCE_PATH_STYLE\",\n                                    ),\n                                    credentials: {\n                                        accessKeyId:\n                                            cfg.get(\n                                                \"S3_ACCESS_KEY_ID\",\n                                            )!,\n                                        secretAccessKey: cfg.get(\n                                            \"S3_SECRET_ACCESS_KEY\",\n                                        )!,\n                                    },\n                                }),\n                                cfg.get(\"S3_BUCKET\")!,\n                                cfg.get(\"S3_PUBLIC_BASE_URL\"),\n                            );\n                        }\n                        // local\n                        return new LocalFileStorage(\n                            cfg.getOrThrow(\"LOCAL_STORAGE_DIR\"),\n                        );\n                    },\n                },\n            ],\n            exports: [FilesService],\n        };\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TenantController.html":{"url":"controllers/TenantController.html","title":"controller - TenantController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TenantController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant/tenant.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tenant\n            \n\n\n            \n                Description\n            \n            \n                Tenant management controller\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                deleteTenant\n                            \n                            \n                                    \n                                getTenantStatus\n                            \n                            \n                                    \n                                initTenant\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTenant(id: string, user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.controller.ts:55\n                        \n                    \n\n\n            \n                \n                        Deletes a tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant to delete\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getTenantStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTenantStatus(user: TokenPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('status')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.controller.ts:46\n                        \n                    \n\n\n            \n                \n                        Get the status of a tenant\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The status of the tenant\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        initTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    initTenant(user: TokenPayload, values: ClientInitDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/tenant/tenant.controller.ts:32\n                        \n                    \n\n\n            \n                \n                        Initialize a tenant for the given user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user to initialize the tenant for\n\n                                            \n                                        \n                                        \n                                                values\n                                            \n                                                            ClientInitDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n    Body,\n    ConflictException,\n    Controller,\n    Delete,\n    Get,\n    Param,\n    Post,\n    UseGuards,\n} from \"@nestjs/common\";\nimport { ApiSecurity } from \"@nestjs/swagger\";\nimport { AdminAuthGuard } from \"../admin.guard\";\nimport { ClientInitDto } from \"../dto/client-init.dto\";\nimport { TenantService } from \"../tenant.service\";\nimport { Token, TokenPayload } from \"../token.decorator\";\n\n/**\n * Tenant management controller\n */\n@UseGuards(AdminAuthGuard)\n@ApiSecurity(\"oauth2\")\n@Controller(\"tenant\")\nexport class TenantController {\n    constructor(private readonly tenantService: TenantService) {}\n\n    /**\n     * Initialize a tenant for the given user.\n     * @param user The user to initialize the tenant for\n     * @returns\n     */\n    @Post()\n    initTenant(@Token() user: TokenPayload, @Body() values: ClientInitDto) {\n        //only the admin is allowed to init new users. Or the user by itself.\n        if (values.id && !user.admin) {\n            throw new ConflictException(\"User is not an admin\");\n        }\n        return this.tenantService.initTenant(values.id || user.sub);\n    }\n\n    /**\n     * Get the status of a tenant\n     * @param id The ID of the tenant\n     * @returns The status of the tenant\n     */\n    @Get(\"status\")\n    getTenantStatus(@Token() user: TokenPayload) {\n        return this.tenantService.getTenantStatus(user.sub);\n    }\n\n    /**\n     * Deletes a tenant by ID\n     * @param id The ID of the tenant to delete\n     */\n    @Delete(\":id\")\n    deleteTenant(@Param(\"id\") id: string, @Token() user: TokenPayload) {\n        // either self delete or the user needs to be an admin.\n        if (id !== user.sub && !user.admin) {\n            throw new ConflictException(\n                \"User is not allowed to delete this tenant\",\n            );\n        }\n\n        return this.tenantService.deleteTenant(id, user);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/TenantEntity.html":{"url":"entities/TenantEntity.html","title":"entity - TenantEntity","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  TenantEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entitites/tenant.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a tenant in the system.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/tenant.entity.ts:12\n                        \n                    \n\n            \n                \n                    The unique identifier for the tenant.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/entitites/tenant.entity.ts:18\n                        \n                    \n\n            \n                \n                    The current status of the tenant.\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, PrimaryColumn } from \"typeorm\";\n\n/**\n * Represents a tenant in the system.\n */\n@Entity()\nexport class TenantEntity {\n    /**\n     * The unique identifier for the tenant.\n     */\n    @PrimaryColumn()\n    id: string;\n\n    /**\n     * The current status of the tenant.\n     */\n    @Column({ nullable: true })\n    status: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TenantService.html":{"url":"injectables/TenantService.html","title":"injectable - TenantService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TenantService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                tenants\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteTenant\n                            \n                            \n                                findTenantById\n                            \n                            \n                                    Private\n                                getTenants\n                            \n                            \n                                    Async\n                                getTenantStatus\n                            \n                            \n                                    Async\n                                initTenant\n                            \n                            \n                                    Private\n                                loadTenants\n                            \n                            \n                                    Async\n                                onApplicationBootstrap\n                            \n                            \n                                    Async\n                                onModuleInit\n                            \n                            \n                                    Async\n                                setUpTenant\n                            \n                            \n                                validateTenant\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, cryptoService: CryptoService, encryptionService: EncryptionService, statusListService: StatusListService, registrarService: RegistrarService, oid4vciService: Oid4vciService, tenantRepository: Repository, tenantTotal: Gauge, filesService: FilesService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/tenant.service.ts:31\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        encryptionService\n                                                  \n                                                        \n                                                                        EncryptionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        statusListService\n                                                  \n                                                        \n                                                                        StatusListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registrarService\n                                                  \n                                                        \n                                                                        RegistrarService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        tenantTotal\n                                                  \n                                                        \n                                                                    Gauge\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteTenant(tenantId: string, user: TokenPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:149\n                        \n                    \n\n\n            \n                \n                        Deletes a tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the tenant to delete\n\n                                            \n                                        \n                                        \n                                                user\n                                            \n                                                            TokenPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user requesting the deletion\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findTenantById\n                        \n                    \n                \n            \n            \n                \nfindTenantById(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Find tenant by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Tenants | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getTenants\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTenants()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Get tenants from configuration\n\n\n                        \n                            Returns :         Tenants[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getTenantStatus\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTenantStatus(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:76\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        initTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    initTenant(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:71\n                        \n                    \n\n\n            \n                \n                        Initialize a tenant for the given user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        loadTenants\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadTenants()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:98\n                        \n                    \n\n\n            \n                \n                        Load tenants from configuration\n\n\n                        \n                            Returns :         Tenants[]\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onApplicationBootstrap\n                        \n                    \n                \n            \n            \n                \n                        \n                    onApplicationBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:61\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onModuleInit\n                        \n                    \n                \n            \n            \n                \n                        \n                    onModuleInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        setUpTenant\n                        \n                    \n                \n            \n            \n                \n                        \n                    setUpTenant(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:135\n                        \n                    \n\n\n            \n                \n                        Sends an event to set up a tenant, allowing all other services to listen and react accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateTenant\n                        \n                    \n                \n            \n            \n                \nvalidateTenant(tenantId: string, tenantSecret: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/tenant.service.ts:114\n                        \n                    \n\n\n            \n                \n                        Validate tenant credentials (OAuth2 Tenant Credentials flow)\nThis is the primary authentication method for service integration\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                tenantSecret\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Tenants | null\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        tenants\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Tenants[] | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/auth/tenant.service.ts:31\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import {\n    ForbiddenException,\n    Injectable,\n    NotFoundException,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus\";\nimport { readdirSync } from \"fs\";\nimport { Gauge } from \"prom-client\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { EncryptionService } from \"../crypto/encryption/encryption.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { RegistrarService } from \"../registrar/registrar.service\";\nimport { FilesService } from \"../storage/files.service\";\nimport { TenantEntity } from \"./entitites/tenant.entity\";\nimport { TokenPayload } from \"./token.decorator\";\n\n// Tenant interface for service integration\nexport interface Tenants {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class TenantService implements OnApplicationBootstrap, OnModuleInit {\n    private tenants: Tenants[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statusListService: StatusListService,\n        private registrarService: RegistrarService,\n        private oid4vciService: Oid4vciService,\n        @InjectRepository(TenantEntity)\n        private tenantRepository: Repository,\n        @InjectMetric(\"tenant_total\")\n        private tenantTotal: Gauge,\n        private filesService: FilesService,\n    ) {}\n\n    async onModuleInit() {\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n            if (this.configService.get(\"CONFIG_IMPORT\")) {\n                const tenantFolders = readdirSync(configPath, {\n                    withFileTypes: true,\n                }).filter((tenant) => tenant.isDirectory());\n                for (const tenant of tenantFolders) {\n                    await this.tenantRepository.save({ id: tenant.name });\n                }\n            }\n        }\n    }\n\n    async onApplicationBootstrap() {\n        // Initialize the tenant metrics\n        const count = await this.tenantRepository.count();\n        this.tenantTotal.set({}, count);\n    }\n\n    /**\n     * Initialize a tenant for the given user.\n     * @param user The user to initialize the tenant for\n     */\n    async initTenant(id: string) {\n        await this.tenantRepository.save({ id });\n        return this.setUpTenant(id);\n    }\n\n    async getTenantStatus(id: string) {\n        const tenant = await this.tenantRepository.findOneBy({ id });\n        if (!tenant) {\n            throw new NotFoundException(`Tenant ${id} not found`);\n        }\n        return tenant;\n    }\n\n    /**\n     * Get tenants from configuration\n     * @returns\n     */\n    private getTenants(): Tenants[] {\n        if (!this.tenants) {\n            this.tenants = this.loadTenants();\n        }\n        return this.tenants;\n    }\n\n    /**\n     * Load tenants from configuration\n     */\n    private loadTenants(): Tenants[] {\n        // Default tenants for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow(\"AUTH_CLIENT_ID\"),\n                secret: this.configService.getOrThrow(\n                    \"AUTH_CLIENT_SECRET\",\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate tenant credentials (OAuth2 Tenant Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateTenant(tenantId: string, tenantSecret: string): Tenants | null {\n        const tenant = this.getTenants().find((c) => c.id === tenantId);\n\n        if (!tenant || tenant.secret !== tenantSecret) {\n            return null;\n        }\n\n        return tenant;\n    }\n\n    /**\n     * Find tenant by ID\n     */\n    findTenantById(tenantId: string): Tenants | null {\n        return this.getTenants().find((c) => c.id === tenantId) || null;\n    }\n\n    /**\n     * Sends an event to set up a tenant, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    async setUpTenant(id: string) {\n        await this.cryptoService.onTenantInit(id);\n        await this.encryptionService.onTenantInit(id);\n        await this.statusListService.onTenantInit(id);\n        await this.registrarService.onTenantInit(id);\n        await this.oid4vciService.onTenantInit(id);\n        await this.tenantRepository.update({ id }, { status: \"active\" });\n    }\n\n    /**\n     * Deletes a tenant by ID\n     * @param tenantId The ID of the tenant to delete\n     * @param user The user requesting the deletion\n     */\n    async deleteTenant(tenantId: string, user: TokenPayload) {\n        if (tenantId !== user.sub) {\n            throw new ForbiddenException(\n                `User ${user.sub} is not allowed to delete tenant ${tenantId}`,\n            );\n        }\n        //delete all files associated with the tenant\n        await this.filesService.deleteByTenant(tenantId);\n        //because of cascading, all related entities will be deleted.\n        await this.tenantRepository.delete({ id: tenantId });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Tenants.html":{"url":"interfaces/Tenants.html","title":"interface - Tenants","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Tenants\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/tenant.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            secret\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n    ForbiddenException,\n    Injectable,\n    NotFoundException,\n    OnApplicationBootstrap,\n    OnModuleInit,\n} from \"@nestjs/common\";\nimport { ConfigService } from \"@nestjs/config\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { InjectMetric } from \"@willsoto/nestjs-prometheus\";\nimport { readdirSync } from \"fs\";\nimport { Gauge } from \"prom-client\";\nimport { Repository } from \"typeorm/repository/Repository\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { EncryptionService } from \"../crypto/encryption/encryption.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { StatusListService } from \"../issuer/status-list/status-list.service\";\nimport { RegistrarService } from \"../registrar/registrar.service\";\nimport { FilesService } from \"../storage/files.service\";\nimport { TenantEntity } from \"./entitites/tenant.entity\";\nimport { TokenPayload } from \"./token.decorator\";\n\n// Tenant interface for service integration\nexport interface Tenants {\n    id: string;\n    secret: string;\n}\n\n@Injectable()\nexport class TenantService implements OnApplicationBootstrap, OnModuleInit {\n    private tenants: Tenants[] | null = null;\n\n    constructor(\n        private configService: ConfigService,\n        private cryptoService: CryptoService,\n        private encryptionService: EncryptionService,\n        private statusListService: StatusListService,\n        private registrarService: RegistrarService,\n        private oid4vciService: Oid4vciService,\n        @InjectRepository(TenantEntity)\n        private tenantRepository: Repository,\n        @InjectMetric(\"tenant_total\")\n        private tenantTotal: Gauge,\n        private filesService: FilesService,\n    ) {}\n\n    async onModuleInit() {\n        if (this.configService.get(\"CONFIG_IMPORT\")) {\n            const configPath = this.configService.getOrThrow(\"CONFIG_FOLDER\");\n            if (this.configService.get(\"CONFIG_IMPORT\")) {\n                const tenantFolders = readdirSync(configPath, {\n                    withFileTypes: true,\n                }).filter((tenant) => tenant.isDirectory());\n                for (const tenant of tenantFolders) {\n                    await this.tenantRepository.save({ id: tenant.name });\n                }\n            }\n        }\n    }\n\n    async onApplicationBootstrap() {\n        // Initialize the tenant metrics\n        const count = await this.tenantRepository.count();\n        this.tenantTotal.set({}, count);\n    }\n\n    /**\n     * Initialize a tenant for the given user.\n     * @param user The user to initialize the tenant for\n     */\n    async initTenant(id: string) {\n        await this.tenantRepository.save({ id });\n        return this.setUpTenant(id);\n    }\n\n    async getTenantStatus(id: string) {\n        const tenant = await this.tenantRepository.findOneBy({ id });\n        if (!tenant) {\n            throw new NotFoundException(`Tenant ${id} not found`);\n        }\n        return tenant;\n    }\n\n    /**\n     * Get tenants from configuration\n     * @returns\n     */\n    private getTenants(): Tenants[] {\n        if (!this.tenants) {\n            this.tenants = this.loadTenants();\n        }\n        return this.tenants;\n    }\n\n    /**\n     * Load tenants from configuration\n     */\n    private loadTenants(): Tenants[] {\n        // Default tenants for development/testing\n        return [\n            {\n                id: this.configService.getOrThrow(\"AUTH_CLIENT_ID\"),\n                secret: this.configService.getOrThrow(\n                    \"AUTH_CLIENT_SECRET\",\n                ),\n            },\n        ];\n    }\n\n    /**\n     * Validate tenant credentials (OAuth2 Tenant Credentials flow)\n     * This is the primary authentication method for service integration\n     */\n    validateTenant(tenantId: string, tenantSecret: string): Tenants | null {\n        const tenant = this.getTenants().find((c) => c.id === tenantId);\n\n        if (!tenant || tenant.secret !== tenantSecret) {\n            return null;\n        }\n\n        return tenant;\n    }\n\n    /**\n     * Find tenant by ID\n     */\n    findTenantById(tenantId: string): Tenants | null {\n        return this.getTenants().find((c) => c.id === tenantId) || null;\n    }\n\n    /**\n     * Sends an event to set up a tenant, allowing all other services to listen and react accordingly.\n     * @param id\n     */\n    async setUpTenant(id: string) {\n        await this.cryptoService.onTenantInit(id);\n        await this.encryptionService.onTenantInit(id);\n        await this.statusListService.onTenantInit(id);\n        await this.registrarService.onTenantInit(id);\n        await this.oid4vciService.onTenantInit(id);\n        await this.tenantRepository.update({ id }, { status: \"active\" });\n    }\n\n    /**\n     * Deletes a tenant by ID\n     * @param tenantId The ID of the tenant to delete\n     * @param user The user requesting the deletion\n     */\n    async deleteTenant(tenantId: string, user: TokenPayload) {\n        if (tenantId !== user.sub) {\n            throw new ForbiddenException(\n                `User ${user.sub} is not allowed to delete tenant ${tenantId}`,\n            );\n        }\n        //delete all files associated with the tenant\n        await this.filesService.deleteByTenant(tenantId);\n        //because of cascading, all related entities will be deleted.\n        await this.tenantRepository.delete({ id: tenantId });\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/token.decorator.ts\n        \n\n\n            \n                Description\n            \n            \n                Values of the user token\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            admin\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        admin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        admin:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { createParamDecorator, ExecutionContext } from \"@nestjs/common\";\n\nexport const Token = createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n);\n\n/**\n * Values of the user token\n */\nexport interface TokenPayload {\n    sub: string; // Subject (client_id for client credentials)\n    admin: boolean; // Admin flag\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenRequestDto.html":{"url":"classes/TokenRequestDto.html","title":"class - TokenRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/dto/token-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                client_id\n                            \n                            \n                                    \n                                    \n                                client_secret\n                            \n                            \n                                    \n                                    \n                                    \n                                grant_type\n                            \n                            \n                                    \n                                    Optional\n                                scope\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        client_id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The client identifier', examples: undefined})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        client_secret\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The client secret', examples: undefined})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        grant_type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The grant type', enum: undefined, examples: undefined})@IsString()@IsIn(['client_credentials'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The scope of the access request', examples: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-request.dto.ts:33\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsIn, IsString } from \"class-validator\";\n\nexport class TokenRequestDto {\n    @ApiProperty({\n        description: \"The grant type\",\n        enum: [\"client_credentials\"],\n        examples: [\"client_credentials\"],\n    })\n    @IsString()\n    @IsIn([\"client_credentials\"])\n    grant_type: \"client_credentials\";\n\n    @ApiProperty({\n        description: \"The client identifier\",\n        examples: [\"my-client-id\"],\n    })\n    @IsString()\n    client_id: string;\n\n    @ApiProperty({\n        description: \"The client secret\",\n        examples: [\"my-client-secret\"],\n    })\n    @IsString()\n    client_secret: string;\n\n    @ApiProperty({\n        description: \"The scope of the access request\",\n        examples: [\"openid\"],\n        required: false,\n    })\n    scope?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponse.html":{"url":"classes/TokenResponse.html","title":"class - TokenResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                access_token\n                            \n                            \n                                expires_in\n                            \n                            \n                                    Optional\n                                refresh_token\n                            \n                            \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        refresh_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token_type\n                        \n                    \n                \n            \n                    \n                        \n                                Defined in src/auth/dto/token-response.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class TokenResponse {\n    access_token: string;\n    refresh_token?: string;\n    token_type: \"Bearer\";\n    expires_in: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TokenResponseDto.html":{"url":"classes/TokenResponseDto.html","title":"class - TokenResponseDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TokenResponseDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/oauth/dto/token-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                access_token\n                            \n                            \n                                    \n                                expires_in\n                            \n                            \n                                    \n                                    Optional\n                                scope\n                            \n                            \n                                    \n                                token_type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        access_token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The access token', examples: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expires_in\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The lifetime in seconds of the access token', examples: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        scope\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The scope of the access token', examples: undefined, required: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token_type\n                        \n                    \n                \n            \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The type of the token', examples: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/oauth/dto/token-response.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\n\nexport class TokenResponseDto {\n    @ApiProperty({\n        description: \"The access token\",\n        examples: [\"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...\"],\n    })\n    access_token: string;\n\n    @ApiProperty({\n        description: \"The type of the token\",\n        examples: [\"Bearer\"],\n    })\n    token_type: \"Bearer\";\n\n    @ApiProperty({\n        description: \"The lifetime in seconds of the access token\",\n        examples: [3600],\n    })\n    expires_in: number;\n\n    @ApiProperty({\n        description: \"The scope of the access token\",\n        examples: [\"openid\"],\n        required: false,\n    })\n    scope?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TrustedAuthorityQuery.html":{"url":"classes/TrustedAuthorityQuery.html","title":"class - TrustedAuthorityQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TrustedAuthorityQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/verifier/presentations/entities/presentation-config.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                type\n                            \n                            \n                                    \n                                    \n                                values\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsIn(['aki', 'etsi_tl', 'openid_federation'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        values\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsArray()@IsString({each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/verifier/presentations/entities/presentation-config.entity.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiHideProperty, ApiProperty } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsArray,\n    IsBoolean,\n    IsIn,\n    IsNotEmpty,\n    IsNumber,\n    IsObject,\n    IsOptional,\n    IsString,\n    Validate,\n    ValidateNested,\n} from \"class-validator\";\nimport {\n    Column,\n    CreateDateColumn,\n    Entity,\n    ManyToOne,\n    UpdateDateColumn,\n} from \"typeorm\";\nimport { TenantEntity } from \"../../../auth/entitites/tenant.entity\";\nimport { WebhookConfig } from \"../../../utils/webhook/webhook.dto\";\nimport { RegistrationCertificateRequest } from \"../dto/vp-request.dto\";\n\n/**\n * Attached attestations\n */\nexport class PresentationAttachment {\n    @IsString()\n    format: string;\n\n    @IsNotEmpty()\n    data: any;\n\n    @IsOptional()\n    @IsString({ each: true })\n    credential_ids?: string[];\n}\n// TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-trusted-authorities-query\nexport class TrustedAuthorityQuery {\n    @IsString()\n    @IsIn([\"aki\", \"etsi_tl\", \"openid_federation\"])\n    type: string;\n\n    @IsArray()\n    @IsString({ each: true })\n    values: string[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-query\n\nexport class CredentialQuery {\n    @IsString()\n    id: string;\n\n    @IsString()\n    format: string;\n\n    @IsOptional()\n    @IsBoolean()\n    multiple?: boolean;\n\n    @IsObject()\n    meta: any;\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => TrustedAuthorityQuery)\n    trusted_authorities?: TrustedAuthorityQuery[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#claims_query\nexport class ClaimsQuery {\n    @IsString()\n    id: string;\n\n    @IsArray()\n    path: string[];\n\n    @IsArray()\n    @IsOptional()\n    values?: any[];\n}\n\n//TODO: extend: https://openid.net/specs/openid-4-verifiable-presentations-1_0.html#name-credential-set-query\nexport class CredentialSetQuery {\n    @ApiProperty({\n        type: \"array\",\n        items: { type: \"array\", items: { type: \"string\" } },\n    })\n    @IsArray()\n    options: string[][];\n\n    @IsBoolean()\n    @IsOptional()\n    required?: boolean;\n}\n\nexport class DCQL {\n    @IsArray()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialQuery)\n    credentials: CredentialQuery[];\n\n    @IsArray()\n    @IsOptional()\n    @ValidateNested({ each: true })\n    @Type(() => CredentialSetQuery)\n    credential_set?: CredentialSetQuery[];\n}\n\n/**\n * Entity representing a configuration for a Verifiable Presentation (VP) request.\n */\n@Entity()\nexport class PresentationConfig {\n    /**\n     * Unique identifier for the VP request.\n     */\n    @Column(\"varchar\", { primary: true })\n    @IsString()\n    id: string;\n\n    /**\n     * The tenant ID for which the VP request is made.\n     */\n    @ApiHideProperty()\n    @Column(\"varchar\", { primary: true })\n    tenantId: string;\n\n    /**\n     * The tenant that owns this object.\n     */\n    @ManyToOne(() => TenantEntity, { cascade: true, onDelete: \"CASCADE\" })\n    tenant: TenantEntity;\n\n    /**\n     * Description of the presentation configuration.\n     */\n    @Column(\"varchar\", { nullable: true })\n    @IsOptional()\n    @IsString()\n    description?: string;\n\n    /**\n     * Lifetime how long the presentation request is valid after creation, in seconds.\n     */\n    @IsNumber()\n    @IsOptional()\n    @Column(\"int\", { default: 300 })\n    lifeTime?: number;\n\n    /**\n     * The DCQL query to be used for the VP request.\n     */\n    @Column(\"json\")\n    @ValidateNested()\n    @Type(() => DCQL)\n    dcql_query: DCQL;\n    /**\n     * The registration certificate request containing the necessary details.\n     */\n    @IsOptional()\n    @ValidateNested()\n    @Type(() => RegistrationCertificateRequest)\n    @Column(\"json\", { nullable: true })\n    registrationCert?: RegistrationCertificateRequest;\n    /**\n     * Optional webhook URL to receive the response.\n     */\n    @Column(\"json\", { nullable: true })\n    @IsOptional()\n    @Validate(WebhookConfig)\n    @Type(() => WebhookConfig)\n    webhook?: WebhookConfig;\n\n    /**\n     * The timestamp when the VP request was created.\n     */\n    @CreateDateColumn()\n    createdAt: Date;\n\n    /**\n     * The timestamp when the VP request was last updated.\n     */\n    @UpdateDateColumn()\n    updatedAt: Date;\n\n    /**\n     * Attestation that should be attached\n     */\n    @IsOptional()\n    @IsArray()\n    @ValidateNested()\n    @Type(() => PresentationAttachment)\n    @Column(\"json\", { nullable: true })\n    attached?: PresentationAttachment[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateKeyDto.html":{"url":"classes/UpdateKeyDto.html","title":"class - UpdateKeyDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateKeyDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/crypto/key/dto/key-update.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        OmitType(KeyImportDto, [\n    \"privateKey\",\n] as const)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType } from \"@nestjs/swagger\";\nimport { KeyImportDto } from \"./key-import.dto\";\n\nexport class UpdateKeyDto extends OmitType(KeyImportDto, [\n    \"privateKey\",\n] as const) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VCT.html":{"url":"classes/VCT.html","title":"class - VCT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VCT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/issuer/credentials-metadata/dto/vct.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Optional\n                                description\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                extends\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                extends#integrity\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                schema_uri\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                schema_uri#integrity\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                vct\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        extends\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        extends#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        schema_uri\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        schema_uri#integrity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        vct\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({required: false})@IsEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/issuer/credentials-metadata/dto/vct.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from \"@nestjs/swagger\";\nimport { IsEmpty, IsOptional, IsString } from \"class-validator\";\n\nexport class VCT {\n    @ApiProperty({\n        required: false,\n    })\n    @IsEmpty()\n    vct?: string;\n    @IsOptional()\n    @IsString()\n    name?: string;\n    @IsOptional()\n    @IsString()\n    description?: string;\n    @IsOptional()\n    @IsString()\n    extends?: string;\n    @IsOptional()\n    @IsString()\n    \"extends#integrity\"?: string;\n    @IsOptional()\n    @IsString()\n    schema_uri?: string;\n    @IsOptional()\n    @IsString()\n    \"schema_uri#integrity\"?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/VerifierModule.html":{"url":"modules/VerifierModule.html","title":"module - VerifierModule","body":"\n                   \n\n\n\n\n    Modules\n    VerifierModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_VerifierModule\n\n\n\ncluster_VerifierModule_imports\n\n\n\n\nCryptoModule\n\nCryptoModule\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/verifier/verifier.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CryptoModule\n                        \n                        \n                            Oid4vpModule\n                        \n                        \n                            PresentationsModule\n                        \n                        \n                            RegistrarModule\n                        \n                        \n                            SessionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { HttpModule } from \"@nestjs/axios\";\nimport { Module } from \"@nestjs/common\";\nimport { CryptoModule } from \"../crypto/crypto.module\";\nimport { RegistrarModule } from \"../registrar/registrar.module\";\nimport { SessionModule } from \"../session/session.module\";\nimport { Oid4vpModule } from \"./oid4vp/oid4vp.module\";\nimport { PresentationsModule } from \"./presentations/presentations.module\";\n\n@Module({\n    imports: [\n        CryptoModule,\n        RegistrarModule,\n        SessionModule,\n        HttpModule,\n        PresentationsModule,\n        Oid4vpModule,\n    ],\n})\nexport class VerifierModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfig.html":{"url":"classes/WebHookAuthConfig.html","title":"class - WebHookAuthConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEnum(AuthConfig)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:65\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfigHeader.html":{"url":"classes/WebHookAuthConfigHeader.html","title":"class - WebHookAuthConfigHeader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfigHeader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhook authentication.\n\n            \n\n\n            \n                Implements\n            \n            \n                            WebHookAuthConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                config\n                            \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :         ApiKeyConfig\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Type(undefined)@IsObject()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:51\n                        \n                    \n\n            \n                \n                    Configuration for API key authentication.\nThis is required if the type is 'apiKey'.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig.API_KEY\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['undefined'])@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:44\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebHookAuthConfigNone.html":{"url":"classes/WebHookAuthConfigNone.html","title":"class - WebHookAuthConfigNone","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebHookAuthConfigNone\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            WebHookAuthConfig\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AuthConfig.NONE\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsIn(['undefined'])@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:60\n                        \n                    \n\n            \n                \n                    The type of authentication used for the webhook.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookConfig.html":{"url":"classes/WebhookConfig.html","title":"class - WebhookConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Configuration for webhooks used in various services.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                auth\n                            \n                            \n                                    \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        auth\n                        \n                    \n                \n            \n                \n                    \n                        Type :         WebHookAuthConfigNone | WebHookAuthConfigHeader\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ValidateNested()@ApiProperty({oneOf: undefined})@Type(undefined, {discriminator: undefined, keepDiscriminatorProperty: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:105\n                        \n                    \n\n            \n                \n                    Optional authentication configuration for the webhook.\nIf not provided, no authentication will be used.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        url\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/utils/webhook/webhook.dto.ts:77\n                        \n                    \n\n            \n                \n                    The URL to which the webhook will send notifications.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiExtraModels, ApiProperty, getSchemaPath } from \"@nestjs/swagger\";\nimport { Type } from \"class-transformer\";\nimport {\n    IsEnum,\n    IsIn,\n    IsObject,\n    IsString,\n    ValidateNested,\n} from \"class-validator\";\n\n/**\n * Configuration for API key authentication in webhooks.\n */\nexport class ApiKeyConfig {\n    /**\n     * The name of the header where the API key will be sent.\n     */\n    @IsString()\n    headerName: string;\n    /**\n     * The value of the API key to be sent in the header.\n     */\n    @IsString()\n    value: string;\n}\n\n/**\n * Enum for the type of authentication used in webhooks.\n */\nexport enum AuthConfig {\n    API_KEY = \"apiKey\",\n    NONE = \"none\",\n}\n\n/**\n * Configuration for webhook authentication.\n */\nexport class WebHookAuthConfigHeader implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.API_KEY])\n    @IsString()\n    type: AuthConfig.API_KEY;\n    /**\n     * Configuration for API key authentication.\n     * This is required if the type is 'apiKey'.\n     */\n    @Type(() => ApiKeyConfig)\n    @IsObject()\n    config: ApiKeyConfig;\n}\n\nexport class WebHookAuthConfigNone implements WebHookAuthConfig {\n    /**\n     * The type of authentication used for the webhook.\n     */\n    @IsIn([AuthConfig.NONE])\n    @IsString()\n    type: AuthConfig.NONE;\n}\n\nexport class WebHookAuthConfig {\n    @IsEnum(AuthConfig)\n    type: AuthConfig;\n}\n\n/**\n * Configuration for webhooks used in various services.\n */\n@ApiExtraModels(WebHookAuthConfigNone, WebHookAuthConfigHeader)\nexport class WebhookConfig {\n    /**\n     * The URL to which the webhook will send notifications.\n     */\n    @IsString()\n    url: string;\n    /**\n     * Optional authentication configuration for the webhook.\n     * If not provided, no authentication will be used.\n     */\n    @ValidateNested()\n    @ApiProperty({\n        oneOf: [\n            { $ref: getSchemaPath(WebHookAuthConfigNone) },\n            { $ref: getSchemaPath(WebHookAuthConfigHeader) },\n        ],\n    })\n    @Type(() => WebHookAuthConfig, {\n        discriminator: {\n            property: \"type\",\n            subTypes: [\n                {\n                    name: AuthConfig.NONE,\n                    value: WebHookAuthConfigNone,\n                },\n                {\n                    name: AuthConfig.API_KEY,\n                    value: WebHookAuthConfigHeader,\n                },\n            ],\n        },\n        keepDiscriminatorProperty: true,\n    })\n    auth?: WebHookAuthConfigNone | WebHookAuthConfigHeader;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WebhookResponse.html":{"url":"classes/WebhookResponse.html","title":"class - WebhookResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WebhookResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Response from a webhook to receive credentials.\n\n            \n\n\n\n\n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    Record\n\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:12\n                            \n                        \n            \n        \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { Injectable } from \"@nestjs/common\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Notification, Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../logger/session-logger.service\";\nimport { SessionLogContext } from \"../logger/session-logger-context\";\n\n/**\n * Response from a webhook to receive credentials.\n */\nexport class WebhookResponse {\n    [key: string]: Record;\n}\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the optional provided credentials, return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     * @param expectResponse Whether to expect a response from the webhook\n     */\n    sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials?: any[],\n        expectResponse = true,\n    ) {\n        const headers: Record = {};\n        if (\n            session.claimsWebhook!.auth &&\n            session.claimsWebhook!.auth.type === \"apiKey\"\n        ) {\n            headers[session.claimsWebhook!.auth.config.headerName] =\n                session.claimsWebhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, \"Sending webhook\", {\n            webhookUrl: session.claimsWebhook!.url,\n            authType: session.claimsWebhook!.auth?.type || \"none\",\n        });\n\n        return firstValueFrom(\n            this.httpService.post(\n                session.claimsWebhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data && expectResponse) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n                return webhookResponse.data;\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === \"apiKey\") {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            \"Sending webhook notification\",\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || \"none\",\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook notification sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WebhookService.html":{"url":"injectables/WebhookService.html","title":"injectable - WebhookService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WebhookService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/utils/webhook/webhook.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for handling webhooks in the application.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendWebhook\n                            \n                            \n                                    Async\n                                sendWebhookNotification\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpService: HttpService, sessionService: SessionService, sessionLogger: SessionLoggerService)\n                    \n                \n                        \n                            \n                                Defined in src/utils/webhook/webhook.service.ts:20\n                            \n                        \n\n                \n                    \n                            Constructor for WebhookService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpService\n                                                  \n                                                        \n                                                                    HttpService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionLogger\n                                                  \n                                                        \n                                                                        SessionLoggerService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendWebhook\n                        \n                    \n                \n            \n            \n                \nsendWebhook(session: Session, logContext: SessionLogContext, credentials?: any[], expectResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:40\n                        \n                    \n\n\n            \n                \n                        Sends a webhook with the optional provided credentials, return the response data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                credentials\n                                            \n                                                        any[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n                                            \n                                            \n\n                                            \n                                            \n                                        \n                                        \n                                                expectResponse\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    Whether to expect a response from the webhook\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sendWebhookNotification\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendWebhookNotification(session: Session, logContext: SessionLogContext, notification: Notification)\n                \n            \n\n\n                    \n                        \n                            Defined in src/utils/webhook/webhook.service.ts:111\n                        \n                    \n\n\n            \n                \n                        Sends a webhook notification for a session.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                logContext\n                                            \n                                                            SessionLogContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                notification\n                                            \n                                                            Notification\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpService } from \"@nestjs/axios\";\nimport { Injectable } from \"@nestjs/common\";\nimport { firstValueFrom } from \"rxjs\";\nimport { Notification, Session } from \"../../session/entities/session.entity\";\nimport { SessionService } from \"../../session/session.service\";\nimport { SessionLoggerService } from \"../logger/session-logger.service\";\nimport { SessionLogContext } from \"../logger/session-logger-context\";\n\n/**\n * Response from a webhook to receive credentials.\n */\nexport class WebhookResponse {\n    [key: string]: Record;\n}\n\n/**\n * Service for handling webhooks in the application.\n */\n@Injectable()\nexport class WebhookService {\n    /**\n     * Constructor for WebhookService.\n     * @param httpService\n     * @param sessionService\n     * @param sessionLogger\n     */\n    constructor(\n        private httpService: HttpService,\n        private sessionService: SessionService,\n        private sessionLogger: SessionLoggerService,\n    ) {}\n\n    /**\n     * Sends a webhook with the optional provided credentials, return the response data.\n     * @param session\n     * @param logContext\n     * @param credentials\n     * @param expectResponse Whether to expect a response from the webhook\n     */\n    sendWebhook(\n        session: Session,\n        logContext: SessionLogContext,\n        credentials?: any[],\n        expectResponse = true,\n    ) {\n        const headers: Record = {};\n        if (\n            session.claimsWebhook!.auth &&\n            session.claimsWebhook!.auth.type === \"apiKey\"\n        ) {\n            headers[session.claimsWebhook!.auth.config.headerName] =\n                session.claimsWebhook!.auth.config.value;\n        }\n        this.sessionLogger.logSession(logContext, \"Sending webhook\", {\n            webhookUrl: session.claimsWebhook!.url,\n            authType: session.claimsWebhook!.auth?.type || \"none\",\n        });\n\n        return firstValueFrom(\n            this.httpService.post(\n                session.claimsWebhook!.url,\n                {\n                    credentials,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data && expectResponse) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n                return webhookResponse.data;\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n\n    /**\n     * Sends a webhook notification for a session.\n     * @param session\n     * @param logContext\n     * @param notification\n     */\n    async sendWebhookNotification(\n        session: Session,\n        logContext: SessionLogContext,\n        notification: Notification,\n    ) {\n        const headers: Record = {};\n        const webhook = session.notifyWebhook!;\n\n        if (webhook.auth && webhook.auth.type === \"apiKey\") {\n            headers[webhook.auth.config.headerName] = webhook.auth.config.value;\n        }\n        this.sessionLogger.logSession(\n            logContext,\n            \"Sending webhook notification\",\n            {\n                webhookUrl: webhook.url,\n                authType: webhook.auth?.type || \"none\",\n            },\n        );\n\n        await firstValueFrom(\n            this.httpService.post(\n                webhook.url,\n                {\n                    notification,\n                    session: session.id,\n                },\n                {\n                    headers,\n                },\n            ),\n        ).then(\n            async (webhookResponse) => {\n                //TODO: better: just store it when it's a presentation during issuance\n                if (webhookResponse.data) {\n                    session.credentialPayload!.claims = webhookResponse.data;\n                    //store received webhook response\n                    await this.sessionService.add(session.id, {\n                        credentialPayload: session.credentialPayload,\n                    });\n                }\n\n                this.sessionLogger.logSession(\n                    logContext,\n                    \"Webhook notification sent successfully\",\n                    {\n                        responseStatus: webhookResponse.status,\n                        hasResponseData: !!webhookResponse.data,\n                    },\n                );\n            },\n            (err) => {\n                this.sessionLogger.logSessionError(\n                    logContext,\n                    err,\n                    \"Error sending webhook\",\n                    {\n                        webhookUrl: session.claimsWebhook!.url,\n                    },\n                );\n                throw new Error(`Error sending webhook: ${err.message || err}`);\n            },\n        );\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WellKnownController.html":{"url":"controllers/WellKnownController.html","title":"controller - WellKnownController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WellKnownController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                :session/.well-known\n            \n\n\n            \n                Description\n            \n            \n                Controller for the OpenID4VCI well-known endpoints.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                authzMetadata\n                            \n                            \n                                    \n                                    \n                                getJwks\n                            \n                            \n                                    \n                                    \n                                    \n                                issuerMetadata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        authzMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    authzMetadata(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('oauth-authorization-server')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:57\n                        \n                    \n\n\n            \n                \n                        Authorization Server Metadata\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getJwks\n                        \n                    \n                \n            \n            \n                \n                        \n                    getJwks(session: Session)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Header('Content-Type', 'application/jwk-set+json')@Get('jwks.json')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:69\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for the authorization server.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        issuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    issuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get OpenID4VCI issuer metadata', description: 'Returns the OpenID4VCI issuer metadata.'})@ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)@Get('openid-credential-issuer')\n                \n            \n\n                    \n                        \n                            Defined in src/well-known/well-known.controller.ts:45\n                        \n                    \n\n\n            \n                \n                        Retrieves the OpenID4VCI issuer metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Header } from \"@nestjs/common\";\nimport {\n    ApiExcludeController,\n    ApiOperation,\n    ApiParam,\n    ApiProduces,\n} from \"@nestjs/swagger\";\nimport { Session } from \"../session/entities/session.entity\";\nimport { SessionEntity } from \"../session/session.decorator\";\nimport { ContentType } from \"../utils/mediaType/media-type.decorator\";\nimport { MediaType } from \"../utils/mediaType/media-type.enum\";\nimport { JwksResponseDto } from \"./dto/jwks-response.dto\";\nimport { Oauth2AuthorizationServerResponse } from \"./dto/oauth-authorization-server-response.dto\";\nimport { WellKnownService } from \"./well-known.service\";\n\n/**\n * Controller for the OpenID4VCI well-known endpoints.\n */\n@ApiExcludeController(process.env.SWAGGER_ALL !== \"true\")\n@ApiParam({\n    name: \"session\",\n    required: true,\n})\n@Controller(\":session/.well-known\")\nexport class WellKnownController {\n    /**\n     * Constructor for WellKnownController.\n     * @param wellKnownService\n     */\n    constructor(private readonly wellKnownService: WellKnownService) {}\n\n    /**\n     * Retrieves the OpenID4VCI issuer metadata for a given tenant.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    @ApiOperation({\n        summary: \"Get OpenID4VCI issuer metadata\",\n        description: \"Returns the OpenID4VCI issuer metadata.\",\n    })\n    //we can not set the accept in the apiheader via swagger.\n    @ApiProduces(MediaType.APPLICATION_JSON, MediaType.APPLICATION_JWT)\n    @Get(\"openid-credential-issuer\")\n    issuerMetadata(\n        @SessionEntity() session: Session,\n        @ContentType() contentType: MediaType,\n    ) {\n        return this.wellKnownService.getIssuerMetadata(session, contentType);\n    }\n\n    /**\n     * Authorization Server Metadata\n     * @returns\n     */\n    @Get(\"oauth-authorization-server\")\n    authzMetadata(\n        @SessionEntity() session: Session,\n    ): Oauth2AuthorizationServerResponse {\n        return this.wellKnownService.getAuthzMetadata(session);\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for the authorization server.\n     * @returns\n     */\n    @Header(\"Content-Type\", \"application/jwk-set+json\")\n    @Get(\"jwks.json\")\n    getJwks(@SessionEntity() session: Session): Promise {\n        return this.wellKnownService.getJwks(session.tenantId);\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WellKnownService.html":{"url":"injectables/WellKnownService.html","title":"injectable - WellKnownService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WellKnownService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/well-known/well-known.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle well-known endpoints and metadata retrieval.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAuthzMetadata\n                            \n                            \n                                    Async\n                                getIssuerMetadata\n                            \n                            \n                                getJwks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(oid4vciService: Oid4vciService, cryptoService: CryptoService, authorizeService: AuthorizeService, cryptoImplementationService: CryptoImplementationService)\n                    \n                \n                        \n                            \n                                Defined in src/well-known/well-known.service.ts:16\n                            \n                        \n\n                \n                    \n                            Constructor for WellKnownService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        oid4vciService\n                                                  \n                                                        \n                                                                        Oid4vciService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoService\n                                                  \n                                                        \n                                                                        CryptoService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authorizeService\n                                                  \n                                                        \n                                                                        AuthorizeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cryptoImplementationService\n                                                  \n                                                        \n                                                                        CryptoImplementationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAuthzMetadata\n                        \n                    \n                \n            \n            \n                \ngetAuthzMetadata(session: Session)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:77\n                        \n                    \n\n\n            \n                \n                        Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Oauth2AuthorizationServerResponse\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getIssuerMetadata\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIssuerMetadata(session: Session, contentType: MediaType)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Retrieves the issuer metadata for a given tenant for the specified content type.\nThe metadata can be returned in two formats:\n\nan unsigned JSON document using the media type application/json, or\na signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                session\n                                            \n                                                            Session\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                contentType\n                                            \n                                                            MediaType\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getJwks\n                        \n                    \n                \n            \n            \n                \ngetJwks(tenantId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/well-known/well-known.service.ts:87\n                        \n                    \n\n\n            \n                \n                        Returns the JSON Web Key Set (JWKS) for a given tenant.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                tenantId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@nestjs/common\";\nimport { CryptoService } from \"../crypto/crypto.service\";\nimport { CryptoImplementationService } from \"../crypto/key/crypto-implementation/crypto-implementation.service\";\nimport { AuthorizeService } from \"../issuer/authorize/authorize.service\";\nimport { Oid4vciService } from \"../issuer/oid4vci/oid4vci.service\";\nimport { Session } from \"../session/entities/session.entity\";\nimport { MediaType } from \"../utils/mediaType/media-type.enum\";\nimport { CredentialIssuerMetadataDto } from \"./dto/credential-issuer-metadata.dto\";\nimport { JwksResponseDto } from \"./dto/jwks-response.dto\";\nimport { Oauth2AuthorizationServerResponse } from \"./dto/oauth-authorization-server-response.dto\";\n\n/**\n * Service to handle well-known endpoints and metadata retrieval.\n */\n@Injectable()\nexport class WellKnownService {\n    /**\n     * Constructor for WellKnownService.\n     * @param oid4vciService\n     * @param cryptoService\n     * @param authorizeService\n     */\n    constructor(\n        private readonly oid4vciService: Oid4vciService,\n        private readonly cryptoService: CryptoService,\n        private readonly authorizeService: AuthorizeService,\n        private readonly cryptoImplementationService: CryptoImplementationService,\n    ) {}\n\n    /**\n     * Retrieves the issuer metadata for a given tenant for the specified content type.\n     * The metadata can be returned in two formats:\n     * - an unsigned JSON document using the media type application/json, or\n     * - a signed JSON Web Token (JWT) containing the Credential Issuer Metadata in its payload using the media type application/jwt.\n     * @param tenantId\n     * @param contentType\n     * @returns\n     */\n    async getIssuerMetadata(session: Session, contentType: MediaType) {\n        const metadata = (await this.oid4vciService.issuerMetadata(session))\n            .credentialIssuer as unknown as CredentialIssuerMetadataDto;\n\n        if (contentType === MediaType.APPLICATION_JWT) {\n            const keyId = await this.cryptoService.keyService.getKid(\n                session.tenantId,\n                \"access\",\n            );\n            return this.cryptoService.signJwt(\n                {\n                    typ: \"openidvci-issuer-metadata+jwt\",\n                    alg: this.cryptoImplementationService.getAlg(),\n                    x5c: await this.cryptoService.getCertChain(\n                        \"access\",\n                        session.tenantId,\n                    ),\n                },\n                {\n                    ...metadata,\n                    iss: metadata.credential_issuer,\n                    sub: metadata.credential_issuer,\n                    iat: Math.floor(new Date().getTime() / 1000),\n                    // [Review]: should we add `exp` value here?\n                    //MM: the value makes sense when we cache the issuer metadata so it must not be signed on every request. Like when it is issued every hour, its lifetime is 1 hour and the jwt is in the cache.\n                },\n                session.tenantId,\n                keyId,\n            );\n        }\n\n        return metadata;\n    }\n\n    /**\n     * Returns the OAuth 2.0 Authorization Server metadata for a given tenant.\n     * @returns\n     */\n    getAuthzMetadata(session: Session): Oauth2AuthorizationServerResponse {\n        return this.authorizeService.authzMetadata(\n            session,\n        ) as Oauth2AuthorizationServerResponse;\n    }\n\n    /**\n     * Returns the JSON Web Key Set (JWKS) for a given tenant.\n     * @returns\n     */\n    getJwks(tenantId: string): Promise {\n        return this.cryptoService.getJwks(tenantId).then((key) => ({\n            keys: [key],\n        }));\n    }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/dto/oidc-discovery.dto.ts\n            \n            interface\n            OidcDiscoveryDto\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/auth/admin.guard.ts\n            \n            injectable\n            AdminAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            AUTH_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_AUTH_CLIENT_ID\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_AUTH_CLIENT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/auth.module.ts\n            \n            variable\n            DEFAULT_JWT_SECRET\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/client-credentials.dto.ts\n            \n            class\n            ClientCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/client-init.dto.ts\n            \n            class\n            ClientInitDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/dto/oidc-discovery.dto.ts\n            \n            interface\n            OidcDiscoveryDto\n            \n                100 %\n                (36/36)\n            \n        \n        \n            \n                \n                src/auth/dto/token-response.dto.ts\n            \n            class\n            TokenResponse\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/entitites/tenant.entity.ts\n            \n            entity\n            TenantEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            injectable\n            JwtService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/auth/jwt.service.ts\n            \n            interface\n            GenerateTokenOptions\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/auth/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/tenant.service.ts\n            \n            injectable\n            TenantService\n            \n                53 %\n                (7/13)\n            \n        \n        \n            \n                \n                src/auth/tenant.service.ts\n            \n            interface\n            Tenants\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/tenant/tenant.controller.ts\n            \n            controller\n            TenantController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/auth/token.decorator.ts\n            \n            interface\n            TokenPayload\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                        src/auth/token.decorator.ts\n            \n            variable\n            Token\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/crypto.service.ts\n            \n            injectable\n            CryptoService\n            \n                90 %\n                (20/22)\n            \n        \n        \n            \n                \n                        src/crypto/crypto.service.ts\n            \n            variable\n            ECDSA_P256\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/encryption/encryption.service.ts\n            \n            injectable\n            EncryptionService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/crypto/key/adapters/db-key.service.ts\n            \n            class\n            DBKeyService\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                src/crypto/key/adapters/vault-key.service.ts\n            \n            class\n            VaultKeyService\n            \n                47 %\n                (9/19)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n            \n            variable\n            CRYPTO_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n            \n            injectable\n            CryptoImplementationService\n            \n                50 %\n                (2/4)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n            \n            type alias\n            CryptoType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            interface\n            CryptoImplementation\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            KeyPair\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            Signer\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/crypto-implementation.ts\n            \n            type alias\n            Verifier\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/crypto-implementation/ed25519.ts\n            \n            variable\n            ED25519\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            Key\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-import.dto.ts\n            \n            class\n            KeyImportDto\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-object.dto.ts\n            \n            class\n            KeyObj\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-response.dto.ts\n            \n            class\n            KeyResponseDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/crypto/key/dto/key-update.dto.ts\n            \n            class\n            UpdateKeyDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/entities/cert.entity.ts\n            \n            entity\n            CertEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/cert.entity.ts\n            \n            type alias\n            CertificateType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/entities/keys.entity.ts\n            \n            entity\n            KeyEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/crypto/key/entities/keys.entity.ts\n            \n            type alias\n            KeyUsage\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/crypto/key/key.controller.ts\n            \n            controller\n            KeyController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/crypto/key/key.module.ts\n            \n            variable\n            KEY_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/crypto/key/key.service.ts\n            \n            class\n            KeyService\n            \n                66 %\n                (8/12)\n            \n        \n        \n            \n                \n                        src/database/database.module.ts\n            \n            variable\n            DB_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/health/health.controller.ts\n            \n            controller\n            HealthController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.controller.ts\n            \n            controller\n            AuthorizeController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            injectable\n            AuthorizeService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenAuthorizationCodeRequestGrant\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/authorize/authorize.service.ts\n            \n            interface\n            ParsedAccessTokenPreAuthorizedCodeRequestGrant\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/authorize-request.dto.ts\n            \n            class\n            AuthorizeQueries\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/issuer/authorize/dto/par-response.dto.ts\n            \n            class\n            ParResponseDto\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/credentials-metadata.controller.ts\n            \n            controller\n            CredentialsMetadataController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/schema-response.dto.ts\n            \n            class\n            SchemaResponse\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/issuer/credentials-metadata/dto/vct.dto.ts\n            \n            class\n            VCT\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credential-config/credential-config.service.ts\n            \n            injectable\n            CredentialConfigService\n            \n                87 %\n                (7/8)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.controller.ts\n            \n            controller\n            CredentialsController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/credentials.service.ts\n            \n            injectable\n            CredentialsService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/issuer/credentials/dto/credential-config-create.dto.ts\n            \n            class\n            CredentialConfigCreate\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            entity\n            CredentialConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            CredentialConfig\n            \n                11 %\n                (2/17)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            Display\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            DisplayImage\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/credential.entity.ts\n            \n            class\n            IssuerMetadataCredentialConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            AllowListPolicy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            AttestationBasedPolicy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            EmbeddedDisclosurePolicy\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            NoneTrustPolicy\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            PolicyCredential\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/issuer/credentials/entities/policies.dto.ts\n            \n            class\n            RootOfTrustPolicy\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                        src/issuer/credentials/entities/policies.dto.ts\n            \n            type alias\n            PolicyType\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/display/display.controller.ts\n            \n            controller\n            DisplayController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/display/display.service.ts\n            \n            injectable\n            DisplayService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/issuer/display/dto/display-create.dto.ts\n            \n            class\n            DisplayCreateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/display/entities/display.entity.ts\n            \n            entity\n            DisplayEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/display/entities/display.entity.ts\n            \n            class\n            DisplayInfo\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/issuer/display/entities/display.entity.ts\n            \n            class\n            DisplayLogo\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationMethodAuth\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationMethodNone\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationMethodPresentation\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            AuthenticationUrlConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            class\n            PresentationDuringIssuanceConfig\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/authentication-config.dto.ts\n            \n            interface\n            AuthenticationMethodInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            CredentialConfigMapping\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/dto/issuance.dto.ts\n            \n            class\n            IssuanceDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/issuance-config.entity.ts\n            \n            entity\n            IssuanceConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/issuance/entities/issuance-config.entity.ts\n            \n            class\n            IssuanceConfig\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.controller.ts\n            \n            controller\n            IssuanceController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/issuance/issuance.service.ts\n            \n            injectable\n            IssuanceService\n            \n                88 %\n                (8/9)\n            \n        \n        \n            \n                \n                src/issuer/issuer-management/issuer-management.controller.ts\n            \n            controller\n            IssuerManagementController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/issuer/issuer.module.ts\n            \n            variable\n            ISSUER_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/notification-request.dto.ts\n            \n            class\n            NotificationRequestDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferRequestDto\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/dto/offer-request.dto.ts\n            \n            class\n            OfferResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.controller.ts\n            \n            controller\n            Oid4vciController\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/oid4vci/oid4vci.service.ts\n            \n            injectable\n            Oid4vciService\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                        src/issuer/oid4vci/util.ts\n            \n            function\n            getHeadersFromRequest\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/dto/status-update.dto.ts\n            \n            class\n            StatusUpdateDto\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/issuer/status-list/entities/status-list.entity.ts\n            \n            entity\n            StatusListEntity\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/entities/status-mapping.entity.ts\n            \n            entity\n            StatusMapping\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.controller.ts\n            \n            controller\n            StatusListController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/issuer/status-list/status-list.service.ts\n            \n            injectable\n            StatusListService\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/oauth/dto/token-request.dto.ts\n            \n            class\n            TokenRequestDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/oauth/dto/token-response.dto.ts\n            \n            class\n            TokenResponseDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/oauth/oauth.controller.ts\n            \n            controller\n            OAuthController\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                        src/oauth/oauth.module.ts\n            \n            variable\n            OAUTH_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/oauth/oauth.service.ts\n            \n            injectable\n            OAuthService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/registrar/dto/access-certificate-response.ts\n            \n            interface\n            AccessCertificateResponse\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/registrar/entities/registrar.entity.ts\n            \n            entity\n            RegistrarEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/registrar/registrar.module.ts\n            \n            variable\n            REGISTRAR_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/registrar/registrar.service.ts\n            \n            injectable\n            RegistrarService\n            \n                100 %\n                (15/15)\n            \n        \n        \n            \n                \n                src/session/entities/session.entity.ts\n            \n            entity\n            Session\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/session/entities/session.entity.ts\n            \n            type alias\n            Notification\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/session/session.controller.ts\n            \n            controller\n            SessionController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                        src/session/session.decorator.ts\n            \n            function\n            SessionEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/session/session.module.ts\n            \n            variable\n            SESSION_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/session/session.pipe.ts\n            \n            injectable\n            SessionPipe\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/session/session.service.ts\n            \n            injectable\n            SessionService\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                src/storage/adapters/local.storage.ts\n            \n            class\n            LocalFileStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/storage/adapters/s3.storage.ts\n            \n            class\n            S3FileStorage\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/storage/dto/file-upload.dto.ts\n            \n            class\n            FileUploadDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/storage/entities/files.entity.ts\n            \n            entity\n            FileEntity\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/storage/files.service.ts\n            \n            injectable\n            FilesService\n            \n                57 %\n                (4/7)\n            \n        \n        \n            \n                \n                src/storage/storage.controller.ts\n            \n            controller\n            StorageController\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                        src/storage/storage.module.ts\n            \n            variable\n            CONFIG_STORAGE_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.module.ts\n            \n            type alias\n            Driver\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/storage/storage.types.ts\n            \n            interface\n            FileStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            variable\n            FILE_STORAGE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            type alias\n            PutOptions\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/storage/storage.types.ts\n            \n            type alias\n            StoredObject\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            injectable\n            LoggerConfigService\n            \n                23 %\n                (3/13)\n            \n        \n        \n            \n                \n                src/utils/logger/logger-config.service.ts\n            \n            interface\n            LoggerConfiguration\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger-context.ts\n            \n            interface\n            SessionLogContext\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SESSION_LOGGER_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/utils/logger/session-logger.decorator.ts\n            \n            variable\n            SessionLogger\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.interceptor.ts\n            \n            injectable\n            SessionLoggerInterceptor\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/utils/logger/session-logger.service.ts\n            \n            injectable\n            SessionLoggerService\n            \n                85 %\n                (12/14)\n            \n        \n        \n            \n                \n                        src/utils/mediaType/media-type.decorator.ts\n            \n            variable\n            ContentType\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            ApiKeyConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfig\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfigHeader\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebHookAuthConfigNone\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.dto.ts\n            \n            class\n            WebhookConfig\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.service.ts\n            \n            class\n            WebhookResponse\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils/webhook/webhook.service.ts\n            \n            injectable\n            WebhookService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/authorization-response.dto.ts\n            \n            class\n            AuthorizationResponse\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request-options.dto.ts\n            \n            interface\n            PresentationRequestOptions\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/dto/presentation-request.dto.ts\n            \n            class\n            PresentationRequest\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.controller.ts\n            \n            controller\n            Oid4vpController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/oid4vp/oid4vp.service.ts\n            \n            injectable\n            Oid4vpService\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/auth-response.dto.ts\n            \n            interface\n            AuthResponse\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/presentation-config-create.dto.ts\n            \n            class\n            PresentationConfigCreateDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/verifier/presentations/dto/vp-request.dto.ts\n            \n            class\n            RegistrationCertificateRequest\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            entity\n            PresentationConfig\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            ClaimsQuery\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            CredentialQuery\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            CredentialSetQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            DCQL\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            PresentationAttachment\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/verifier/presentations/entities/presentation-config.entity.ts\n            \n            class\n            TrustedAuthorityQuery\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.controller.ts\n            \n            controller\n            PresentationManagementController\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/verifier/presentations/presentations.service.ts\n            \n            injectable\n            PresentationsService\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/verifier/resolver/dto/issuer-metadata.dto.ts\n            \n            interface\n            IssuerMetadata\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/verifier/resolver/resolver.service.ts\n            \n            injectable\n            ResolverService\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/well-known/dto/credential-issuer-metadata.dto.ts\n            \n            class\n            CredentialIssuerMetadataDto\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            EC_Public\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/well-known/dto/jwks-response.dto.ts\n            \n            class\n            JwksResponseDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/well-known/dto/oauth-authorization-server-response.dto.ts\n            \n            class\n            Oauth2AuthorizationServerResponse\n            \n                90 %\n                (9/10)\n            \n        \n        \n            \n                \n                src/well-known/well-known.controller.ts\n            \n            controller\n            WellKnownController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/well-known/well-known.service.ts\n            \n            injectable\n            WellKnownService\n            \n                100 %\n                (5/5)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @aws-sdk/client-s3 : ^3.864.0\n        \n            @aws-sdk/s3-request-presigner : ^3.864.0\n        \n            @badgateway/oauth2-client : ^3.3.0\n        \n            @nestjs/axios : ^4.0.1\n        \n            @nestjs/common : ^11.1.6\n        \n            @nestjs/config : ^4.0.2\n        \n            @nestjs/core : ^11.1.6\n        \n            @nestjs/event-emitter : ^3.0.1\n        \n            @nestjs/passport : ^11.0.5\n        \n            @nestjs/platform-express : ^11.1.6\n        \n            @nestjs/schedule : ^6.0.0\n        \n            @nestjs/serve-static : ^5.0.3\n        \n            @nestjs/swagger : ^11.2.0\n        \n            @nestjs/terminus : ^11.0.0\n        \n            @nestjs/typeorm : ^11.0.0\n        \n            @openid4vc/oauth2 : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/openid4vci : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/openid4vp : 0.3.0-alpha-20250714110838\n        \n            @openid4vc/utils : 0.3.0-alpha-20250714110838\n        \n            @peculiar/x509 : ^1.13.0\n        \n            @sd-jwt/crypto-nodejs : ^0.14.0\n        \n            @sd-jwt/jwt-status-list : ^0.14.0\n        \n            @sd-jwt/sd-jwt-vc : ^0.14.1\n        \n            @sd-jwt/types : ^0.14.0\n        \n            @willsoto/nestjs-prometheus : ^6.0.2\n        \n            axios : ^1.11.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.2\n        \n            joi : ^18.0.0\n        \n            jose : ^6.0.12\n        \n            jwks-rsa : ^3.2.0\n        \n            multer : ^2.0.2\n        \n            mysql2 : ^3.14.3\n        \n            nestjs-pino : ^4.4.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.16.3\n        \n            pino-http : ^10.5.0\n        \n            pino-pretty : ^13.1.1\n        \n            prom-client : ^15.1.3\n        \n            qrcode : ^1.5.4\n        \n            reflect-metadata : ^0.2.2\n        \n            rxjs : ^7.8.2\n        \n            sqlite3 : ^5.1.7\n        \n            typeorm : ^0.3.25\n        \n            uuid : ^11.1.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AuthConfig   (src/.../webhook.dto.ts)\n                        \n                        \n                            AuthenticationMethod   (src/.../authentication-config.dto.ts)\n                        \n                        \n                            MediaType   (src/.../media-type.enum.ts)\n                        \n                        \n                            ResponseType   (src/.../presentation-request.dto.ts)\n                        \n                        \n                            SessionStatus   (src/.../session.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils/webhook/webhook.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthConfig\n                    \n                \n                    \n                        \n                            Enum for the type of authentication used in webhooks.\n\n                        \n                    \n                        \n                            \n                                 API_KEY\n                            \n                        \n                        \n                            \n                                Value : apiKey\n                            \n                        \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n            \n        \n\n    src/issuer/issuance/dto/authentication-config.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        AuthenticationMethod\n                    \n                \n                        \n                            \n                                 NONE\n                            \n                        \n                        \n                            \n                                Value : none\n                            \n                        \n                        \n                            \n                                 AUTH\n                            \n                        \n                        \n                            \n                                Value : auth\n                            \n                        \n                        \n                            \n                                 PRESENTATION_DURING_ISSUANCE\n                            \n                        \n                        \n                            \n                                Value : presentationDuringIssuance\n                            \n                        \n            \n        \n\n    src/utils/mediaType/media-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        MediaType\n                    \n                \n                    \n                        \n                            Represents the media types used in the application.\n\n                        \n                    \n                        \n                            \n                                 APPLICATION_JSON\n                            \n                        \n                        \n                            \n                                Value : application/json\n                            \n                        \n                        \n                            \n                                 APPLICATION_JWT\n                            \n                        \n                        \n                            \n                                Value : application/jwt\n                            \n                        \n            \n        \n\n    src/verifier/oid4vp/dto/presentation-request.dto.ts\n    \n        \n            \n                \n                    \n                        \n                        ResponseType\n                    \n                \n                    \n                        \n                            Enum for the type of response expected from the presentation request.\n\n                        \n                    \n                        \n                            \n                                 QRCode\n                            \n                        \n                        \n                            \n                                Value : qrcode\n                            \n                        \n                        \n                            \n                                 URI\n                            \n                        \n                        \n                            \n                                Value : uri\n                            \n                        \n            \n        \n\n    src/session/entities/session.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        SessionStatus\n                    \n                \n                        \n                            \n                                 Active\n                            \n                        \n                        \n                            \n                                Value : active\n                            \n                        \n                        \n                            \n                                 Fetched\n                            \n                        \n                        \n                            \n                                Value : fetched\n                            \n                        \n                        \n                            \n                                 Completed\n                            \n                        \n                        \n                            \n                                Value : completed\n                            \n                        \n                        \n                            \n                                 Expired\n                            \n                        \n                        \n                            \n                                Value : expired\n                            \n                        \n                        \n                            \n                                 Failed\n                            \n                        \n                        \n                            \n                                Value : failed\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            getHeadersFromRequest   (src/.../util.ts)\n                        \n                        \n                            SessionEntity   (src/.../session.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        Bootstrap function to initialize the NestJS application.\n\n\n                \n            \n        \n    \n    src/issuer/oid4vci/util.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        getHeadersFromRequest\n                        \n                    \n                \n            \n            \n                \ngetHeadersFromRequest(req: Request)\n                \n            \n\n\n\n\n            \n                \n                        Utility function to extract headers from an Express request\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     globalThis.Headers\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/session/session.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SessionEntity\n                        \n                    \n                \n            \n            \n                \nSessionEntity()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :     ParameterDecorator\n\n                        \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CryptoImplementatationModule\n\n\n\ncluster_CryptoImplementatationModule_exports\n\n\n\ncluster_CryptoImplementatationModule_providers\n\n\n\ncluster_CryptoModule\n\n\n\ncluster_CryptoModule_exports\n\n\n\ncluster_CryptoModule_providers\n\n\n\ncluster_IssuerModule\n\n\n\ncluster_IssuerModule_imports\n\n\n\ncluster_IssuerModule_exports\n\n\n\ncluster_IssuerModule_providers\n\n\n\ncluster_OAuthModule\n\n\n\ncluster_OAuthModule_exports\n\n\n\ncluster_OAuthModule_providers\n\n\n\ncluster_Oid4vpModule\n\n\n\ncluster_Oid4vpModule_exports\n\n\n\ncluster_Oid4vpModule_providers\n\n\n\ncluster_PresentationsModule\n\n\n\ncluster_PresentationsModule_imports\n\n\n\ncluster_PresentationsModule_exports\n\n\n\ncluster_PresentationsModule_providers\n\n\n\ncluster_RegistrarModule\n\n\n\ncluster_RegistrarModule_exports\n\n\n\ncluster_RegistrarModule_providers\n\n\n\ncluster_ResolverModule\n\n\n\ncluster_ResolverModule_exports\n\n\n\ncluster_ResolverModule_providers\n\n\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_exports\n\n\n\ncluster_SessionModule_providers\n\n\n\ncluster_StatusListModule\n\n\n\ncluster_StatusListModule_exports\n\n\n\ncluster_StatusListModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtAuthGuard \n\nJwtAuthGuard \n\nJwtAuthGuard  -->\n\nAuthModule->JwtAuthGuard \n\n\n\n\n\nJwtService \n\nJwtService \n\nJwtService  -->\n\nAuthModule->JwtService \n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nCryptoModule\n\nCryptoModule\n\nAuthModule -->\n\nCryptoModule->AuthModule\n\n\n\n\n\nIssuerModule\n\nIssuerModule\n\nIssuerModule -->\n\nCryptoModule->IssuerModule\n\n\n\n\n\nRegistrarModule\n\nRegistrarModule\n\nRegistrarModule -->\n\nCryptoModule->RegistrarModule\n\n\n\n\n\nVerifierModule\n\nVerifierModule\n\nVerifierModule -->\n\nCryptoModule->VerifierModule\n\n\n\nAppModule -->\n\nCryptoModule->AppModule\n\n\n\n\n\nStatusListModule\n\nStatusListModule\n\nStatusListModule -->\n\nCryptoModule->StatusListModule\n\n\n\n\n\nCryptoService \n\nCryptoService \n\nCryptoService  -->\n\nCryptoModule->CryptoService \n\n\n\n\n\nEncryptionService \n\nEncryptionService \n\nEncryptionService  -->\n\nCryptoModule->EncryptionService \n\n\n\n\n\nOid4vpModule\n\nOid4vpModule\n\nOid4vpModule -->\n\nCryptoModule->Oid4vpModule\n\n\n\n\n\nOAuthModule\n\nOAuthModule\n\nOAuthModule -->\n\nCryptoModule->OAuthModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nHealthModule\n\nHealthModule\n\nAppModule -->\n\nHealthModule->AppModule\n\n\n\nAuthModule -->\n\nIssuerModule->AuthModule\n\n\n\nAppModule -->\n\nIssuerModule->AppModule\n\n\n\n\n\nAuthorizeService \n\nAuthorizeService \n\nAuthorizeService  -->\n\nIssuerModule->AuthorizeService \n\n\n\n\n\nCredentialConfigService \n\nCredentialConfigService \n\nCredentialConfigService  -->\n\nIssuerModule->CredentialConfigService \n\n\n\n\n\nIssuanceService \n\nIssuanceService \n\nIssuanceService  -->\n\nIssuerModule->IssuanceService \n\n\n\n\n\nOid4vciService \n\nOid4vciService \n\nOid4vciService  -->\n\nIssuerModule->Oid4vciService \n\n\n\n\n\nKeyModule\n\nKeyModule\n\nAppModule -->\n\nKeyModule->AppModule\n\n\n\n\n\nMetricModule\n\nMetricModule\n\nAppModule -->\n\nMetricModule->AppModule\n\n\n\nAuthModule -->\n\nRegistrarModule->AuthModule\n\n\n\nVerifierModule -->\n\nRegistrarModule->VerifierModule\n\n\n\nAppModule -->\n\nRegistrarModule->AppModule\n\n\n\n\n\nRegistrarService \n\nRegistrarService \n\nRegistrarService  -->\n\nRegistrarModule->RegistrarService \n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAuthModule -->\n\nSessionModule->AuthModule\n\n\n\nIssuerModule -->\n\nSessionModule->IssuerModule\n\n\n\nVerifierModule -->\n\nSessionModule->VerifierModule\n\n\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nOid4vpModule -->\n\nSessionModule->Oid4vpModule\n\n\n\n\n\nSessionService \n\nSessionService \n\nSessionService  -->\n\nSessionModule->SessionService \n\n\n\n\n\nStorageModule\n\nStorageModule\n\nAppModule -->\n\nStorageModule->AppModule\n\n\n\nAppModule -->\n\nVerifierModule->AppModule\n\n\n\n\n\nWellKnownService\n\nWellKnownService\n\nAppModule -->\n\nWellKnownService->AppModule\n\n\n\nAuthModule -->\n\nStatusListModule->AuthModule\n\n\n\nIssuerModule -->\n\nStatusListModule->IssuerModule\n\n\n\nSessionModule -->\n\nStatusListModule->SessionModule\n\n\n\n\n\nStatusListService \n\nStatusListService \n\nStatusListService  -->\n\nStatusListModule->StatusListService \n\n\n\n\n\nJwtAuthGuard\n\nJwtAuthGuard\n\nAuthModule -->\n\nJwtAuthGuard->AuthModule\n\n\n\n\n\nJwtService\n\nJwtService\n\nAuthModule -->\n\nJwtService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTenantService\n\nTenantService\n\nAuthModule -->\n\nTenantService->AuthModule\n\n\n\n\n\nCryptoImplementationService \n\nCryptoImplementationService \n\n\n\nCryptoImplementatationModule\n\nCryptoImplementatationModule\n\nCryptoImplementationService  -->\n\nCryptoImplementatationModule->CryptoImplementationService \n\n\n\n\n\nCryptoImplementationService\n\nCryptoImplementationService\n\nCryptoImplementatationModule -->\n\nCryptoImplementationService->CryptoImplementatationModule\n\n\n\n\n\nCryptoService\n\nCryptoService\n\nCryptoModule -->\n\nCryptoService->CryptoModule\n\n\n\n\n\nEncryptionService\n\nEncryptionService\n\nCryptoModule -->\n\nEncryptionService->CryptoModule\n\n\n\nIssuerModule -->\n\nOid4vpModule->IssuerModule\n\n\n\nVerifierModule -->\n\nOid4vpModule->VerifierModule\n\n\n\n\n\nOid4vpService \n\nOid4vpService \n\nOid4vpService  -->\n\nOid4vpModule->Oid4vpService \n\n\n\n\n\nAuthorizeService\n\nAuthorizeService\n\nIssuerModule -->\n\nAuthorizeService->IssuerModule\n\n\n\n\n\nCredentialConfigService\n\nCredentialConfigService\n\nIssuerModule -->\n\nCredentialConfigService->IssuerModule\n\n\n\n\n\nCredentialsService\n\nCredentialsService\n\nIssuerModule -->\n\nCredentialsService->IssuerModule\n\n\n\n\n\nDisplayService\n\nDisplayService\n\nIssuerModule -->\n\nDisplayService->IssuerModule\n\n\n\n\n\nIssuanceService\n\nIssuanceService\n\nIssuerModule -->\n\nIssuanceService->IssuerModule\n\n\n\n\n\nOid4vciService\n\nOid4vciService\n\nIssuerModule -->\n\nOid4vciService->IssuerModule\n\n\n\n\n\nSessionLoggerInterceptor\n\nSessionLoggerInterceptor\n\nIssuerModule -->\n\nSessionLoggerInterceptor->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerInterceptor->Oid4vpModule\n\n\n\n\n\nSessionLoggerService\n\nSessionLoggerService\n\nIssuerModule -->\n\nSessionLoggerService->IssuerModule\n\n\n\nOid4vpModule -->\n\nSessionLoggerService->Oid4vpModule\n\n\n\n\n\nWebhookService\n\nWebhookService\n\nIssuerModule -->\n\nWebhookService->IssuerModule\n\n\n\nOid4vpModule -->\n\nWebhookService->Oid4vpModule\n\n\n\n\n\nOAuthService \n\nOAuthService \n\nOAuthService  -->\n\nOAuthModule->OAuthService \n\n\n\n\n\nOAuthService\n\nOAuthService\n\nOAuthModule -->\n\nOAuthService->OAuthModule\n\n\n\n\n\nOid4vpService\n\nOid4vpService\n\nOid4vpModule -->\n\nOid4vpService->Oid4vpModule\n\n\n\n\n\nResolverModule\n\nResolverModule\n\n\n\nPresentationsModule\n\nPresentationsModule\n\nPresentationsModule -->\n\nResolverModule->PresentationsModule\n\n\n\n\n\nResolverService \n\nResolverService \n\nResolverService  -->\n\nResolverModule->ResolverService \n\n\n\nRegistrarModule -->\n\nPresentationsModule->RegistrarModule\n\n\n\nVerifierModule -->\n\nPresentationsModule->VerifierModule\n\n\n\n\n\nPresentationsService \n\nPresentationsService \n\nPresentationsService  -->\n\nPresentationsModule->PresentationsService \n\n\n\n\n\nPresentationsService\n\nPresentationsService\n\nPresentationsModule -->\n\nPresentationsService->PresentationsModule\n\n\n\n\n\nRegistrarService\n\nRegistrarService\n\nRegistrarModule -->\n\nRegistrarService->RegistrarModule\n\n\n\n\n\nResolverService\n\nResolverService\n\nResolverModule -->\n\nResolverService->ResolverModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nStatusListService\n\nStatusListService\n\nStatusListModule -->\n\nStatusListService->StatusListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        18 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    19 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    12 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    28 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    66 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    16 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoImplementatationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HealthModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        IssuerModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        KeyModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MetricModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OAuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        Oid4vpModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PresentationsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegistrarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ResolverModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StatusListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StorageModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        VerifierModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : a middleware to interact with the EUDI Wallet\n        \n            Bugs : https://github.com/openwallet-foundation-labs/eudiplo/issues\n        \n            License : Apache-2.0\n        \n            Repository : https://github.com/openwallet-foundation-labs/eudiplo.git\n        \n            Author : Mirko Mollik \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CertificateType   (src/.../cert.entity.ts)\n                        \n                        \n                            CryptoType   (src/.../crypto-implementation.service.ts)\n                        \n                        \n                            Driver   (src/.../storage.module.ts)\n                        \n                        \n                            KeyPair   (src/.../crypto-implementation.ts)\n                        \n                        \n                            KeyUsage   (src/.../keys.entity.ts)\n                        \n                        \n                            Notification   (src/.../session.entity.ts)\n                        \n                        \n                            PolicyType   (src/.../policies.dto.ts)\n                        \n                        \n                            PutOptions   (src/.../storage.types.ts)\n                        \n                        \n                            Signer   (src/.../crypto-implementation.ts)\n                        \n                        \n                            StoredObject   (src/.../storage.types.ts)\n                        \n                        \n                            Verifier   (src/.../crypto-implementation.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/crypto/key/entities/cert.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CertificateType\n                \n            \n            \n                \n                        \"access\" | \"signing\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto-implementation/crypto-implementation.service.ts\n    \n    \n        \n            \n                \n                    \n                    CryptoType\n                \n            \n            \n                \n                        \"ES256\" | \"Ed25519\"\n\n                \n            \n        \n    \n    src/storage/storage.module.ts\n    \n    \n        \n            \n                \n                    \n                    Driver\n                \n            \n            \n                \n                        \"local\" | \"s3\"\n\n                \n            \n        \n    \n    src/crypto/key/crypto-implementation/crypto-implementation.ts\n    \n    \n        \n            \n                \n                    \n                    KeyPair\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Signer\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Verifier\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/crypto/key/entities/keys.entity.ts\n    \n    \n        \n            \n                \n                    \n                    KeyUsage\n                \n            \n            \n                \n                    Key usage types.\n\n                \n            \n            \n                \n                        \"sign\" | \"encrypt\"\n\n                \n            \n        \n    \n    src/session/entities/session.entity.ts\n    \n    \n        \n            \n                \n                    \n                    Notification\n                \n            \n            \n                \n                    Represents a session entity for managing user sessions in the application.\n\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/issuer/credentials/entities/policies.dto.ts\n    \n    \n        \n            \n                \n                    \n                    PolicyType\n                \n            \n            \n                \n                        \"none\" | \"allowList\" | \"rootOfTrust\" | \"attestationBased\"\n\n                \n            \n        \n    \n    src/storage/storage.types.ts\n    \n    \n        \n            \n                \n                    \n                    PutOptions\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StoredObject\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTH_VALIDATION_SCHEMA   (src/.../auth.module.ts)\n                        \n                        \n                            CONFIG_STORAGE_SCHEMA   (src/.../storage.module.ts)\n                        \n                        \n                            ContentType   (src/.../media-type.decorator.ts)\n                        \n                        \n                            CRYPTO_VALIDATION_SCHEMA   (src/.../crypto-implementation.module.ts)\n                        \n                        \n                            DB_VALIDATION_SCHEMA   (src/.../database.module.ts)\n                        \n                        \n                            DEFAULT_AUTH_CLIENT_ID   (src/.../auth.module.ts)\n                        \n                        \n                            DEFAULT_AUTH_CLIENT_SECRET   (src/.../auth.module.ts)\n                        \n                        \n                            DEFAULT_JWT_SECRET   (src/.../auth.module.ts)\n                        \n                        \n                            ECDSA_P256   (src/.../crypto.service.ts)\n                        \n                        \n                            ED25519   (src/.../ed25519.ts)\n                        \n                        \n                            FILE_STORAGE   (src/.../storage.types.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            ISSUER_VALIDATION_SCHEMA   (src/.../issuer.module.ts)\n                        \n                        \n                            KEY_VALIDATION_SCHEMA   (src/.../key.module.ts)\n                        \n                        \n                            OAUTH_VALIDATION_SCHEMA   (src/.../oauth.module.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            REGISTRAR_VALIDATION_SCHEMA   (src/.../registrar.module.ts)\n                        \n                        \n                            SESSION_LOGGER_KEY   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            SESSION_VALIDATION_SCHEMA   (src/.../session.module.ts)\n                        \n                        \n                            SessionLogger   (src/.../session-logger.decorator.ts)\n                        \n                        \n                            Token   (src/.../token.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/auth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTH_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    OIDC: Joi.string().optional(),\n    OIDC_INTERNAL_ISSUER_URL: Joi.when(\"OIDC\", {\n        then: Joi.string().required(),\n        otherwise: Joi.string().optional(),\n    }),\n    OIDC_SUB: Joi.when(\"OIDC\", {\n        then: Joi.string().default(\"azp\"),\n        otherwise: Joi.string().optional(),\n    }),\n    OIDC_ALGORITHM: Joi.when(\"OIDC\", {\n        then: Joi.string().default(\"RS256\"),\n        otherwise: Joi.string().optional(),\n    }),\n    JWT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_JWT_SECRET),\n    }),\n    JWT_ISSUER: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().optional().default(\"eudiplo-service\"),\n    }),\n    JWT_EXPIRES_IN: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(\"24h\"),\n    }),\n    AUTH_CLIENT_SECRET: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_SECRET),\n    }),\n    AUTH_CLIENT_ID: Joi.when(\"OIDC\", {\n        then: Joi.string().optional(),\n        otherwise: Joi.string().default(DEFAULT_AUTH_CLIENT_ID),\n    }),\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_AUTH_CLIENT_ID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"root\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_AUTH_CLIENT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"root\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_JWT_SECRET\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"supersecret\"\n                    \n                \n\n\n        \n    \n\n    src/storage/storage.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CONFIG_STORAGE_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    STORAGE_DRIVER: Joi.string().valid(\"local\", \"s3\").default(\"local\"),\n    LOCAL_STORAGE_DIR: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"local\",\n        then: Joi.string().default((parent) => join(parent.FOLDER, \"uploads\")),\n    }),\n    S3_REGION: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_BUCKET: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ACCESS_KEY_ID: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_SECRET_ACCESS_KEY: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n    S3_ENDPOINT: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.optional(),\n    }),\n    S3_FORCE_PATH_STYLE: Joi.boolean().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.boolean().default(false),\n    }),\n    S3_PUBLIC_BASE_URL: Joi.string().when(Joi.ref(\"STORAGE_DRIVER\"), {\n        is: \"s3\",\n        then: Joi.required(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/utils/mediaType/media-type.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ContentType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.headers[\"accept\"] as string | undefined;\n    },\n)\n                    \n                \n\n            \n                \n                    Decorator to extract the content type from the request headers.\nThis decorator can be used to determine the media type of the request.\n\n                \n            \n\n        \n    \n\n    src/crypto/key/crypto-implementation/crypto-implementation.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CRYPTO_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    CRYPTO_ALG: Joi.string().valid(\"ES256\").default(\"ES256\"),\n}\n                    \n                \n\n\n        \n    \n\n    src/database/database.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DB_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    DB_TYPE: Joi.string().valid(\"sqlite\", \"postgres\").default(\"sqlite\"),\n    DB_HOST: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PORT: Joi.number().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_USERNAME: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_PASSWORD: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n    DB_DATABASE: Joi.string().when(\"DB_TYPE\", {\n        is: \"sqlite\",\n        then: Joi.optional(),\n        otherwise: Joi.required(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/crypto.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ECDSA_P256\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    name: \"ECDSA\",\n    namedCurve: \"P-256\",\n    hash: \"SHA-256\" as const,\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/crypto-implementation/ed25519.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ED25519\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoImplementation\n\n                    \n                \n                \n                    \n                        Default value : {\n    alg: \"EdDSA\",\n    async generateKeyPair() {\n        const keyPair = await crypto.webcrypto.subtle.generateKey(\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            true,\n            [\"sign\", \"verify\"],\n        );\n\n        const publicKey = await crypto.webcrypto.subtle.exportKey(\n            \"jwk\",\n            keyPair.publicKey,\n        );\n        const privateKey = await crypto.webcrypto.subtle.exportKey(\n            \"jwk\",\n            keyPair.privateKey,\n        );\n\n        return { publicKey, privateKey };\n    },\n    async getSigner(privateKeyJWK: object) {\n        const privateKey = await crypto.webcrypto.subtle.importKey(\n            \"jwk\",\n            privateKeyJWK,\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            false,\n            [\"sign\"],\n        );\n\n        return async (data: string) => {\n            const signature = await crypto.webcrypto.subtle.sign(\n                \"EdDSA\",\n                privateKey,\n                new TextEncoder().encode(data),\n            );\n\n            return Buffer.from(signature).toString(\"base64url\");\n        };\n    },\n    async getVerifier(publicKeyJWK: object) {\n        const publicKey = await crypto.webcrypto.subtle.importKey(\n            \"jwk\",\n            publicKeyJWK,\n            {\n                name: \"EdDSA\",\n                namedCurve: \"Ed25519\",\n            },\n            false,\n            [\"verify\"],\n        );\n\n        return async (data: string, signatureBase64url: string) => {\n            const signature = Buffer.from(signatureBase64url, \"base64url\");\n            const isVerified = await crypto.webcrypto.subtle.verify(\n                \"EdDSA\",\n                publicKey,\n                signature,\n                new TextEncoder().encode(data),\n            );\n\n            return isVerified;\n        };\n    },\n}\n                    \n                \n\n\n        \n    \n\n    src/storage/storage.types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FILE_STORAGE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol(\"FILE_STORAGE\")\n                    \n                \n\n\n        \n    \n\n    src/auth/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"isPublic\"\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/issuer/issuer.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ISSUER_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    PUBLIC_URL: Joi.string().default(\"http://localhost:3000\"),\n}\n                    \n                \n\n\n        \n    \n\n    src/crypto/key/key.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        KEY_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    KM_TYPE: Joi.string().valid(\"db\", \"vault\").default(\"db\"),\n\n    // Vault-related config\n    VAULT_URL: Joi.string().uri().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n    VAULT_TOKEN: Joi.string().when(\"KM_TYPE\", {\n        is: \"vault\",\n        then: Joi.required(),\n        otherwise: Joi.optional(),\n    }),\n}\n                    \n                \n\n\n        \n    \n\n    src/oauth/oauth.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        OAUTH_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    OAUTH_CLIENT_ID: Joi.string().optional(),\n    OAUTH_CLIENT_SECRET: Joi.string().optional(),\n}\n                    \n                \n\n\n        \n    \n\n    src/registrar/registrar.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REGISTRAR_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    REGISTRAR_URL: Joi.string(),\n    REGISTRAR_OIDC_URL: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_ID: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n    REGISTRAR_OIDC_CLIENT_SECRET: Joi.string().when(\"REGISTRAR_URL\", {\n        is: Joi.exist(),\n        then: Joi.required(),\n    }),\n}\n                    \n                \n\n            \n                \n                    Validation schema for the registrar module.\nDefines the required environment variables and their types.\n\n                \n            \n\n        \n    \n\n    src/utils/logger/session-logger.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_LOGGER_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"session-logger\"\n                    \n                \n\n            \n                \n                    Key for session logger metadata.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SessionLogger\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n    sessionIdParam: string,\n    flowType: \"OID4VCI\" | \"OID4VP\",\n) => SetMetadata(SESSION_LOGGER_KEY, { sessionIdParam, flowType })\n                    \n                \n\n            \n                \n                    Decorator to mark methods that should have session-based logging\n\n                \n            \n\n        \n    \n\n    src/session/session.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        SESSION_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n    SESSION_TIDY_UP_INTERVAL: Joi.number().default(60 * 60), // default to every hour\n    SESSION_TTL: Joi.number().default(24 * 60 * 60), // default to 24 hours\n}\n                    \n                \n\n            \n                \n                    Module for managing user sessions.\n\n                \n            \n\n        \n    \n\n    src/auth/token.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Token\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n    (data: unknown, ctx: ExecutionContext) => {\n        const request = ctx.switchToHttp().getRequest();\n        return request.user as TokenPayload; // Access the token payload on the request object\n    },\n)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
